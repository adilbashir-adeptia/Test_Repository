<?xml version="1.0" encoding="UTF-8"?>
<data>
    <AC_CONNECTOR>
        <CREATED_BY><![CDATA[Admin User]]></CREATED_BY>
        <MODIFIED_DATE><![CDATA[2023-10-03T17:53:27]]></MODIFIED_DATE>
        <AC_ACTIVE><![CDATA[false]]></AC_ACTIVE>
        <AC_NAME><![CDATA[salesforceconnector]]></AC_NAME>
        <AC_INPUT_SPEC_FILENAME><![CDATA[salesforce.yml]]></AC_INPUT_SPEC_FILENAME>
        <CREATION_DATE><![CDATA[2023-08-04T15:52:09]]></CREATION_DATE>
        <AC_INPUT_SPEC><![CDATA[openapi: 3.0.0
info:
  title: 'Salesforce API'
  description: 'OpenAPI specification for Salesforce'
  version: '1.0'
  x-adeptia-helpLink: 'https://developer.salesforce.com/docs/atlas.en-us.244.0.object_reference.meta/object_reference/sforce_api_objects_list.htm'
servers:
  - url: '{instanceUrl}'
    x-adeptia-environment: 'SandBox'
    description: 'Salesforce Sandbox Environment'
    x-adeptia-parameters:
      - name: 'instanceUrl'
        visible: false
        fetchFrom: account
        paramName: 'instance_url'
  - url: '{instanceUrl}'
    x-adeptia-environment: 'Production'
    description: 'Salesforce Production Environment'
    x-adeptia-parameters:
      - name: 'instanceUrl'
        visible: false
        fetchFrom: account
        paramName: 'instance_url'
components:
  parameters:
    'EntityId':
      in: 'path'
      name: 'Id'
      description: 'Item Id.'
      required: true
      x-adeptia-visibility:
        visible: false
        fetchFrom: 'mapping'
        paramName: Id
  schemas:
    'BatchRequest':
      properties:
        'batchRequests':
          type: array
          items:
            type: object
            properties:
              'method':
                type: 'string'
                x-adeptia-strategy:
                  dynamic:
                    value:
                      fetchFrom: 'action'
                      paramName: method
              'url':
                type: 'string'
                x-adeptia-strategy:
                  dynamic:
                    value:
                      fetchFrom: 'action'
                      paramName: endpoint
              'richInput':
                type: string
                x-adeptia-strategy:
                  dynamic:
                    value:
                      fetchFrom: 'mapping'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      x-adeptia-metadata:
        accountParameters:
          - name: 'instance_url'
            label: 'instance url'
            description: 'Provide instance url for Salesforce.'
            visible: true
        token:
          generateToken: true
          tasks:
            - name: generateJWT
              # output of this task will be registered in this variable
              register: JWT
              params:
                header:
                  - name: 'alg'
                    value: 'RS256'
                claims:
                  - name: 'iss'
                    # if set to true, the value will be read from the application GUI
                    visibility: true
                    label: 'Issuer'
                    description: 'The issuer must contain the OAuth client_id or the connected app for which you registered the certificate.'
                  - name: 'aud'
                    value: 'https://login.salesforce.com'
                  - name: 'sub'
                    visibility: true
                    label: 'Subject'
                    description: 'The subject must contain the userâ€™s username.'
                signingKey:
                  - name: 'privateKey'
                    visibility: true
                    label: 'Private Key'
                    description: 'Private key is used for generating JWT tokens to authenticate user requests, it also serves to encrypt sensitive data exchanged between the server and clients.'
            - name: getToken
              tokenURL: 'https://login.salesforce.com/services/oauth2/token'
              # REST URL method GET | POST
              method: POST
              contentType: application/x-www-form-urlencoded
              bodyParams:
                - name: grant_type
                  value: 'urn:ietf:params:oauth:grant-type:jwt-bearer'
                - name: assertion
                  value: $JWT
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://login.salesforce.com/services/oauth2/authorize"
          tokenUrl: "https://login.salesforce.com/services/oauth2/token"
          x-adeptia-metadata:
            oauth:
              accessTokenResponseParams:
                - name: instance_url
                  type: path
#            accountParameters:
#              - name: 'instance_url'
#                label: 'instance url'
#                description: 'Provide instance url for Salesforce.'
#                visible: false
paths:
  /services/data/v58.0/sobjects/{entityName}/{accId}:
    get:
      tags:
        - AcceptedEventRelation
        - Account
        - AccountChangeEvent
        - AccountContactRole
        - AccountContactRoleChangeEvent
        - AccountHistory
        - AccountPartner
        - AccountShare
        - ActionLinkGroupTemplate
        - ActionLinkTemplate
        - ActiveFeatureLicenseMetric
        - ActivePermSetLicenseMetric
        - ActiveProfileMetric
        - ActivityFieldHistory
        - ActivityHistory
        - AdditionalNumber
        - AggregateResult
        - Anshu__ChangeEvent
        - ApexClass
        - ApexComponent
        - ApexEmailNotification
        - ApexLog
        - ApexPage
        - ApexPageInfo
        - ApexTestQueueItem
        - ApexTestResult
        - ApexTestResultLimits
        - ApexTestRunResult
        - ApexTestSuite
        - ApexTrigger
        - ApexTypeImplementor
        - ApiAnomalyEvent
        - ApiAnomalyEventStore
        - ApiEvent
        - ApiEventStream
        - AppAnalyticsQueryRequest
        - AppDefinition
        - AppMenuItem
        - AppTabMember
        - Approval
        - Asset
        - AssetChangeEvent
        - AssetHistory
        - AssetRelationship
        - AssetRelationshipHistory
        - AssetTokenEvent
        - AssignmentRule
        - AsyncApexJob
        - AsyncOperationEvent
        - AsyncOperationStatus
        - AttachedContentDocument
        - AttachedContentNote
        - Attachment
        - AuraDefinition
        - AuraDefinitionBundle
        - AuraDefinitionBundleInfo
        - AuraDefinitionInfo
        - AuthConfig
        - AuthConfigProviders
        - AuthProvider
        - AuthSession
        - AuthorizationForm
        - AuthorizationFormConsent
        - AuthorizationFormConsentChangeEvent
        - AuthorizationFormConsentHistory
        - AuthorizationFormConsentShare
        - AuthorizationFormDataUse
        - AuthorizationFormDataUseHistory
        - AuthorizationFormDataUseShare
        - AuthorizationFormHistory
        - AuthorizationFormShare
        - AuthorizationFormText
        - AuthorizationFormTextHistory
        - BackgroundOperation
        - BatchApexErrorEvent
        - BrandTemplate
        - BrandingSet
        - BrandingSetProperty
        - BriefcaseAssignment
        - BriefcaseAssignmentChangeEvent
        - BriefcaseDefinition
        - BriefcaseDefinitionChangeEvent
        - BriefcaseRule
        - BriefcaseRuleFilter
        - BulkApiResultEvent
        - BulkApiResultEventStore
        - BusinessBrand
        - BusinessBrandShare
        - BusinessHours
        - BusinessProcess
        - CE_SSD_Client_c__ChangeEvent
        - Calendar
        - CalendarView
        - CalendarViewShare
        - CallCenter
        - CallCoachingMediaProvider
        - Campaign
        - CampaignChangeEvent
        - CampaignHistory
        - CampaignMember
        - CampaignMemberChangeEvent
        - CampaignMemberStatus
        - CampaignMemberStatusChangeEvent
        - CampaignShare
        - Case
        - CaseChangeEvent
        - CaseComment
        - CaseContactRole
        - CaseHistory
        - CaseShare
        - CaseSolution
        - CaseStatus
        - CaseTeamMember
        - CaseTeamRole
        - CaseTeamTemplate
        - CaseTeamTemplateMember
        - CaseTeamTemplateRecord
        - CategoryData
        - CategoryNode
        - ChatterAnswersActivity
        - ChatterAnswersReputationLevel
        - ClientBrowser
        - ColorDefinition
        - CombinedAttachment
        - CommSubscription
        - CommSubscriptionChannelType
        - CommSubscriptionChannelTypeHistory
        - CommSubscriptionChannelTypeShare
        - CommSubscriptionHistory
        - CommSubscriptionShare
        - Community
        - ConcurLongRunApexErrEvent
        - ConferenceNumber
        - ConnectedApplication
        - ConsumptionRate
        - ConsumptionRateHistory
        - ConsumptionSchedule
        - ConsumptionScheduleHistory
        - ConsumptionScheduleShare
        - Contact
        - ContactChangeEvent
        - ContactHistory
        - ContactPointTypeConsent
        - ContactPointTypeConsentChangeEvent
        - ContactPointTypeConsentHistory
        - ContactPointTypeConsentShare
        - ContactRequest
        - ContactRequestShare
        - ContactShare
        - ContentAsset
        - ContentBody
        - ContentDocument
        - ContentDocumentChangeEvent
        - ContentDocumentHistory
        - ContentDocumentLink
        - ContentDocumentLinkChangeEvent
        - ContentFolder
        - ContentFolderItem
        - ContentFolderLink
        - ContentFolderMember
        - ContentNote
        - ContentVersion
        - ContentVersionChangeEvent
        - ContentVersionHistory
        - ContentWorkspace
        - ContentWorkspaceDoc
        - ContentWorkspaceMember
        - ContentWorkspacePermission
        - Contract
        - ContractChangeEvent
        - ContractContactRole
        - ContractHistory
        - ContractStatus
        - CorsWhitelistEntry
        - CredentialStuffingEvent
        - CredentialStuffingEventStore
        - CronJobDetail
        - CronTrigger
        - CspTrustedSite
        - CustomBrand
        - CustomBrandAsset
        - CustomHelpMenuItem
        - CustomHelpMenuSection
        - CustomHttpHeader
        - CustomNotificationType
        - CustomObjectUserLicenseMetrics
        - CustomPermission
        - CustomPermissionDependency
        - Customer
        - CustomerShare
        - Dashboard
        - DashboardComponent
        - DataAssessmentFieldMetric
        - DataAssessmentMetric
        - DataAssessmentValueMetric
        - DataObjectDataChgEvent
        - DataStatistics
        - DataType
        - DataUseLegalBasis
        - DataUseLegalBasisHistory
        - DataUseLegalBasisShare
        - DataUsePurpose
        - DataUsePurposeHistory
        - DataUsePurposeShare
        - DatacloudAddress
        - DeclinedEventRelation
        - DeleteEvent
        - Document
        - DocumentAttachmentMap
        - Domain
        - DomainSite
        - DuplicateRecordItem
        - DuplicateRecordSet
        - DuplicateRule
        - EmailCapture
        - EmailDomainFilter
        - EmailDomainKey
        - EmailMessage
        - EmailMessageChangeEvent
        - EmailMessageRelation
        - EmailRelay
        - EmailServicesAddress
        - EmailServicesFunction
        - EmailStatus
        - EmailTemplate
        - EmailTemplateChangeEvent
        - EmbeddedServiceDetail
        - EmbeddedServiceLabel
        - EngagementChannelType
        - EngagementChannelTypeHistory
        - EngagementChannelTypeShare
        - EntityDefinition
        - EntityParticle
        - Event
        - EventBusSubscriber
        - EventChangeEvent
        - EventLogFile
        - EventRelation
        - EventRelationChangeEvent
        - EventRelayConfig
        - EventRelayConfigChangeEvent
        - EventRelayFeedback
        - Expenses__ChangeEvent
        - ExpressionFilter
        - ExpressionFilterCriteria
        - ExpressionSetView
        - ExternalDataSource
        - ExternalDataSrcDescriptor
        - ExternalDataUserAuth
        - ExternalEvent
        - ExternalEventMapping
        - ExternalEventMappingShare
        - FieldDefinition
        - FieldPermissions
        - FieldSecurityClassification
        - FileEvent
        - FileEventStore
        - FileSearchActivity
        - FiscalYearSettings
        - FlexQueueItem
        - FlowDefinitionView
        - FlowExecutionErrorEvent
        - FlowInterview
        - FlowInterviewLog
        - FlowInterviewLogEntry
        - FlowInterviewLogShare
        - FlowInterviewShare
        - FlowOrchestrationEvent
        - FlowOrchestrationInstance
        - FlowOrchestrationInstanceShare
        - FlowOrchestrationStageInstance
        - FlowOrchestrationStageInstanceShare
        - FlowOrchestrationStepInstance
        - FlowOrchestrationStepInstanceShare
        - FlowOrchestrationWorkItem
        - FlowOrchestrationWorkItemShare
        - FlowRecordRelation
        - FlowStageRelation
        - FlowTestResult
        - FlowTestResultShare
        - FlowTestView
        - FlowVariableView
        - FlowVersionView
        - Folder
        - FolderedContentDocument
        - FormulaFunction
        - FormulaFunctionAllowedType
        - FormulaFunctionCategory
        - GrantedByLicense
        - Group
        - GroupMember
        - HarishO__ChangeEvent
        - Holiday
        - IPAddressRange
        - IconDefinition
        - IdentityProviderEventStore
        - IdentityVerificationEvent
        - IdpEventLog
        - IframeWhiteListUrl
        - Image
        - ImageHistory
        - ImageShare
        - Individual
        - IndividualChangeEvent
        - IndividualHistory
        - IndividualShare
        - InstalledMobileApp
        - Lead
        - LeadChangeEvent
        - LeadHistory
        - LeadShare
        - LeadStatus
        - LightningExitByPageMetrics
        - LightningExperienceTheme
        - LightningOnboardingConfig
        - LightningToggleMetrics
        - LightningUriEvent
        - LightningUriEventStream
        - LightningUsageByAppTypeMetrics
        - LightningUsageByBrowserMetrics
        - LightningUsageByFlexiPageMetrics
        - LightningUsageByPageMetrics
        - ListEmail
        - ListEmailChangeEvent
        - ListEmailIndividualRecipient
        - ListEmailRecipientSource
        - ListEmailShare
        - ListView
        - ListViewChart
        - ListViewChartInstance
        - ListViewEvent
        - ListViewEventStream
        - LoginAsEvent
        - LoginAsEventStream
        - LoginEvent
        - LoginEventStream
        - LoginGeo
        - LoginHistory
        - LoginIp
        - Login__ChangeEvent
        - LogoutEvent
        - LogoutEventStream
        - LookedUpFromActivity
        - Macro
        - MacroChangeEvent
        - MacroHistory
        - MacroInstruction
        - MacroInstructionChangeEvent
        - MacroShare
        - MacroUsage
        - MacroUsageShare
        - MailmergeTemplate
        - ManagedContent
        - ManagedContentChannel
        - ManagedContentSpace
        - ManagedContentVariant
        - ManagedContentVariantChangeEvent
        - MatchingInformation
        - MatchingRule
        - MatchingRuleItem
        - MobileApplicationDetail
        - MyDomainDiscoverableLogin
        - Name
        - NamedCredential
        - Note
        - NoteAndAttachment
        - OauthCustomScope
        - OauthCustomScopeApp
        - OauthToken
        - ObjectName1__ChangeEvent
        - ObjectName2__ChangeEvent
        - ObjectName2__History
        - ObjectPermissions
        - OnboardingMetrics
        - OpenActivity
        - Opportunity
        - OpportunityChangeEvent
        - OpportunityCompetitor
        - OpportunityContactRole
        - OpportunityContactRoleChangeEvent
        - OpportunityFieldHistory
        - OpportunityHistory
        - OpportunityLineItem
        - OpportunityPartner
        - OpportunityShare
        - OpportunityStage
        - OrgDeleteRequest
        - OrgDeleteRequestShare
        - OrgEmailAddressSecurity
        - OrgLifecycleNotification
        - OrgMetric
        - OrgMetricScanResult
        - OrgMetricScanSummary
        - OrgWideEmailAddress
        - Organization
        - OutgoingEmail
        - OutgoingEmailRelation
        - OwnedContentDocument
        - OwnerChangeOptionInfo
        - PackageLicense
        - Partner
        - PartnerRole
        - PartyConsent
        - PartyConsentChangeEvent
        - PartyConsentHistory
        - PartyConsentShare
        - Period
        - PermissionSet
        - PermissionSetAssignment
        - PermissionSetEvent
        - PermissionSetEventStore
        - PermissionSetLicense
        - PermissionSetLicenseAssign
        - PermissionSetTabSetting
        - PicklistValueInfo
        - PlatformAction
        - PlatformCachePartition
        - PlatformCachePartitionType
        - PlatformEventUsageMetric
        - PlatformStatusAlertEvent
        - Policy__ChangeEvent
        - Pricebook2
        - Pricebook2ChangeEvent
        - Pricebook2History
        - PricebookEntry
        - PricebookEntryChangeEvent
        - PricebookEntryHistory
        - ProcessDefinition
        - ProcessFlowMigration
        - ProcessInstance
        - ProcessInstanceHistory
        - ProcessInstanceNode
        - ProcessInstanceStep
        - ProcessInstanceWorkitem
        - ProcessNode
        - Product2
        - Product2ChangeEvent
        - Product2History
        - ProductConsumptionSchedule
        - Profile
        - Prompt
        - PromptAction
        - PromptActionShare
        - PromptError
        - PromptErrorShare
        - PromptVersion
        - Publisher
        - PushTopic
        - Question
        - QuestionDataCategorySelection
        - QuestionReportAbuse
        - QuestionSubscription
        - QueueSobject
        - QuickText
        - QuickTextChangeEvent
        - QuickTextHistory
        - QuickTextShare
        - QuickTextUsage
        - QuickTextUsageShare
        - Ranjit_Custom_Object__ChangeEvent
        - RecentlyViewed
        - Recommendation
        - RecommendationChangeEvent
        - RecommendationResponse
        - RecordAction
        - RecordActionHistory
        - RecordType
        - RedirectWhitelistUrl
        - RelatedListColumnDefinition
        - RelatedListDefinition
        - RelationshipDomain
        - RelationshipInfo
        - Reply
        - ReplyReportAbuse
        - Report
        - ReportAnomalyEvent
        - ReportAnomalyEventStore
        - ReportEvent
        - ReportEventStream
        - SamlSsoConfig
        - SampleApplication__ChangeEvent
        - Scontrol
        - Scorecard
        - ScorecardAssociation
        - ScorecardMetric
        - ScorecardShare
        - SearchLayout
        - SearchPromotionRule
        - SecurityCustomBaseline
        - Seller
        - SellerHistory
        - SellerShare
        - SessionHijackingEvent
        - SessionHijackingEventStore
        - SessionPermSetActivation
        - SetupAssistantStep
        - SetupAuditTrail
        - SetupEntityAccess
        - Site
        - SiteDetail
        - SiteHistory
        - SiteIframeWhiteListUrl
        - SiteRedirectMapping
        - Solution
        - SolutionHistory
        - SolutionStatus
        - Stamp
        - StampAssignment
        - StaticResource
        - StreamingChannel
        - StreamingChannelShare
        - TabDefinition
        - Task
        - TaskChangeEvent
        - TaskPriority
        - TaskStatus
        - TenantSecret
        - TenantUsageEntitlement
        - TestCustomObject__ChangeEvent
        - TestObject__ChangeEvent
        - TestSuiteMembership
        - ThirdPartyAccountLink
        - ThreatDetectionFeedback
        - TodayGoal
        - TodayGoalShare
        - Topic
        - TopicAssignment
        - TransactionSecurityPolicy
        - Translation
        - UiFormulaCriterion
        - UiFormulaRule
        - UndecidedEventRelation
        - UriEvent
        - UriEventStream
        - User
        - UserAppInfo
        - UserAppMenuCustomization
        - UserAppMenuCustomizationShare
        - UserAppMenuItem
        - UserChangeEvent
        - UserEmailPreferredPerson
        - UserEmailPreferredPersonShare
        - UserEntityAccess
        - UserFieldAccess
        - UserLicense
        - UserListView
        - UserListViewCriterion
        - UserLogin
        - UserPackageLicense
        - UserPermissionAccess
        - UserPreference
        - UserProvAccount
        - UserProvAccountStaging
        - UserProvMockTarget
        - UserProvisioningConfig
        - UserProvisioningLog
        - UserProvisioningRequest
        - UserProvisioningRequestShare
        - UserRecordAccess
        - UserRole
        - UserSetupEntityAccess
        - UserShare
        - VerificationHistory
        - VisualforceAccessMetrics
        - Vote
        - WebLink
      summary: 'Get Account'
      description: 'Get account with the given account id.'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_get_field_values.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-trigger:
        'GetAcceptedEventRelation':
          summary: 'Get Accepted Event Relation'
          description: 'Get accepted event relation with the given accepted event relation
            id.'
          entityName: 'AcceptedEventRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccount':
          summary: 'Get Account'
          description: 'Get account with the given account id.'
          entityName: 'Account'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccountChangeEvent':
          summary: 'Get Account Change Event'
          description: 'Get account change event with the given account change event id.'
          entityName: 'AccountChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccountContactRole':
          summary: 'Get Account Contact Role'
          description: 'Get account contact role with the given account contact role id.'
          entityName: 'AccountContactRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccountContactRoleChangeEvent':
          summary: 'Get Account Contact Role Change Event'
          description: 'Get account contact role change event with the given account contact
            role change event id.'
          entityName: 'AccountContactRoleChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccountHistory':
          summary: 'Get Account History'
          description: 'Get account history with the given account history id.'
          entityName: 'AccountHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccountPartner':
          summary: 'Get Account Partner'
          description: 'Get account partner with the given account partner id.'
          entityName: 'AccountPartner'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAccountShare':
          summary: 'Get Account Share'
          description: 'Get account share with the given account share id.'
          entityName: 'AccountShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActionLinkGroupTemplate':
          summary: 'Get Action Link Group Template'
          description: 'Get action link group template with the given action link group
            template id.'
          entityName: 'ActionLinkGroupTemplate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActionLinkTemplate':
          summary: 'Get Action Link Template'
          description: 'Get action link template with the given action link template id.'
          entityName: 'ActionLinkTemplate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActiveFeatureLicenseMetric':
          summary: 'Get Active Feature License Metric'
          description: 'Get active feature license metric with the given active feature
            license metric id.'
          entityName: 'ActiveFeatureLicenseMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActivePermSetLicenseMetric':
          summary: 'Get Active Permission Set License Metric'
          description: 'Get active permission set license metric with the given active permission
            set license metric id.'
          entityName: 'ActivePermSetLicenseMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActiveProfileMetric':
          summary: 'Get Active Profile Metric'
          description: 'Get active profile metric with the given active profile metric id.'
          entityName: 'ActiveProfileMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActivityFieldHistory':
          summary: 'Get Activity Field History'
          description: 'Get activity field history with the given activity field history
            id.'
          entityName: 'ActivityFieldHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetActivityHistory':
          summary: 'Get Activity History'
          description: 'Get activity history with the given activity history id.'
          entityName: 'ActivityHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAdditionalNumber':
          summary: 'Get Additional Directory Number'
          description: 'Get additional directory number with the given additional directory
            number id.'
          entityName: 'AdditionalNumber'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAggregateResult':
          summary: 'Get Aggregate Result'
          description: 'Get aggregate result with the given aggregate result id.'
          entityName: 'AggregateResult'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAnshu__ChangeEvent':
          summary: 'Get Change Event: Anshu Label'
          description: 'Get change event: anshu label with the given change event: anshu
            label id.'
          entityName: 'Anshu__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexClass':
          summary: 'Get Apex Class'
          description: 'Get apex class with the given apex class id.'
          entityName: 'ApexClass'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexComponent':
          summary: 'Get Visualforce Component'
          description: 'Get visualforce component with the given visualforce component id.'
          entityName: 'ApexComponent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexEmailNotification':
          summary: 'Get Apex Email Notification'
          description: 'Get apex email notification with the given apex email notification
            id.'
          entityName: 'ApexEmailNotification'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexLog':
          summary: 'Get Apex Debug Log'
          description: 'Get apex debug log with the given apex debug log id.'
          entityName: 'ApexLog'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexPage':
          summary: 'Get Visualforce Page'
          description: 'Get visualforce page with the given visualforce page id.'
          entityName: 'ApexPage'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexPageInfo':
          summary: 'Get Apex Page Info'
          description: 'Get apex page info with the given apex page info id.'
          entityName: 'ApexPageInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTestQueueItem':
          summary: 'Get Apex Test Queue Item'
          description: 'Get apex test queue item with the given apex test queue item id.'
          entityName: 'ApexTestQueueItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTestResult':
          summary: 'Get Apex Test Result'
          description: 'Get apex test result with the given apex test result id.'
          entityName: 'ApexTestResult'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTestResultLimits':
          summary: 'Get Apex Test Result Limit'
          description: 'Get apex test result limit with the given apex test result limit
            id.'
          entityName: 'ApexTestResultLimits'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTestRunResult':
          summary: 'Get Apex Test Run Result'
          description: 'Get apex test run result with the given apex test run result id.'
          entityName: 'ApexTestRunResult'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTestSuite':
          summary: 'Get Apex Test Suite'
          description: 'Get apex test suite with the given apex test suite id.'
          entityName: 'ApexTestSuite'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTrigger':
          summary: 'Get Apex Trigger'
          description: 'Get apex trigger with the given apex trigger id.'
          entityName: 'ApexTrigger'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApexTypeImplementor':
          summary: 'Get Apex Type Implementor'
          description: 'Get apex type implementor with the given apex type implementor id.'
          entityName: 'ApexTypeImplementor'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApiAnomalyEvent':
          summary: 'Get API Anomaly Event'
          description: 'Get api anomaly event with the given api anomaly event id.'
          entityName: 'ApiAnomalyEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApiAnomalyEventStore':
          summary: 'Get API Anomaly Event Store'
          description: 'Get api anomaly event store with the given api anomaly event store
            id.'
          entityName: 'ApiAnomalyEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApiEvent':
          summary: 'Get API Event'
          description: 'Get api event with the given api event id.'
          entityName: 'ApiEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApiEventStream':
          summary: 'Get API Event Stream'
          description: 'Get api event stream with the given api event stream id.'
          entityName: 'ApiEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAppAnalyticsQueryRequest':
          summary: 'Get App Analytics Query Request'
          description: 'Get app analytics query request with the given app analytics query
            request id.'
          entityName: 'AppAnalyticsQueryRequest'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAppDefinition':
          summary: 'Get App Definition'
          description: 'Get app definition with the given app definition id.'
          entityName: 'AppDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAppMenuItem':
          summary: 'Get AppMenuItem'
          description: 'Get appmenuitem with the given appmenuitem id.'
          entityName: 'AppMenuItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAppTabMember':
          summary: 'Get App Tab Member'
          description: 'Get app tab member with the given app tab member id.'
          entityName: 'AppTabMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetApproval':
          summary: 'Get Approval'
          description: 'Get approval with the given approval id.'
          entityName: 'Approval'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAsset':
          summary: 'Get Asset'
          description: 'Get asset with the given asset id.'
          entityName: 'Asset'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAssetChangeEvent':
          summary: 'Get Asset Change Event'
          description: 'Get asset change event with the given asset change event id.'
          entityName: 'AssetChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAssetHistory':
          summary: 'Get Asset History'
          description: 'Get asset history with the given asset history id.'
          entityName: 'AssetHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAssetRelationship':
          summary: 'Get Asset Relationship'
          description: 'Get asset relationship with the given asset relationship id.'
          entityName: 'AssetRelationship'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAssetRelationshipHistory':
          summary: 'Get Asset Relationship History'
          description: 'Get asset relationship history with the given asset relationship
            history id.'
          entityName: 'AssetRelationshipHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAssetTokenEvent':
          summary: 'Get Asset Token Event'
          description: 'Get asset token event with the given asset token event id.'
          entityName: 'AssetTokenEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAssignmentRule':
          summary: 'Get Assignment Rule'
          description: 'Get assignment rule with the given assignment rule id.'
          entityName: 'AssignmentRule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAsyncApexJob':
          summary: 'Get Apex Job'
          description: 'Get apex job with the given apex job id.'
          entityName: 'AsyncApexJob'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAsyncOperationEvent':
          summary: 'Get Async Operation Event'
          description: 'Get async operation event with the given async operation event id.'
          entityName: 'AsyncOperationEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAsyncOperationStatus':
          summary: 'Get Async Operation Status'
          description: 'Get async operation status with the given async operation status
            id.'
          entityName: 'AsyncOperationStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAttachedContentDocument':
          summary: 'Get Attached Content Document'
          description: 'Get attached content document with the given attached content document
            id.'
          entityName: 'AttachedContentDocument'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAttachedContentNote':
          summary: 'Get Note'
          description: 'Get note with the given note id.'
          entityName: 'AttachedContentNote'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAttachment':
          summary: 'Get Attachment'
          description: 'Get attachment with the given attachment id.'
          entityName: 'Attachment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuraDefinition':
          summary: 'Get Lightning Component Definition'
          description: 'Get lightning component definition with the given lightning component
            definition id.'
          entityName: 'AuraDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuraDefinitionBundle':
          summary: 'Get Aura Component Bundle'
          description: 'Get aura component bundle with the given aura component bundle id.'
          entityName: 'AuraDefinitionBundle'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuraDefinitionBundleInfo':
          summary: 'Get AuraDefinitionBundle Info'
          description: 'Get auradefinitionbundle info with the given auradefinitionbundle
            info id.'
          entityName: 'AuraDefinitionBundleInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuraDefinitionInfo':
          summary: 'Get AuraDefinition Info'
          description: 'Get auradefinition info with the given auradefinition info id.'
          entityName: 'AuraDefinitionInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthConfig':
          summary: 'Get Authentication Configuration'
          description: 'Get authentication configuration with the given authentication configuration
            id.'
          entityName: 'AuthConfig'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthConfigProviders':
          summary: 'Get Authentication Configuration Auth. Provider'
          description: 'Get authentication configuration auth. provider with the given authentication
            configuration auth. provider id.'
          entityName: 'AuthConfigProviders'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthProvider':
          summary: 'Get Auth. Provider'
          description: 'Get auth. provider with the given auth. provider id.'
          entityName: 'AuthProvider'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthSession':
          summary: 'Get Auth Session'
          description: 'Get auth session with the given auth session id.'
          entityName: 'AuthSession'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationForm':
          summary: 'Get Authorization Form'
          description: 'Get authorization form with the given authorization form id.'
          entityName: 'AuthorizationForm'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormConsent':
          summary: 'Get Authorization Form Consent'
          description: 'Get authorization form consent with the given authorization form
            consent id.'
          entityName: 'AuthorizationFormConsent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormConsentChangeEvent':
          summary: 'Get Authorization Form Consent Change Event'
          description: 'Get authorization form consent change event with the given authorization
            form consent change event id.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormConsentHistory':
          summary: 'Get Authorization Form Consent History'
          description: 'Get authorization form consent history with the given authorization
            form consent history id.'
          entityName: 'AuthorizationFormConsentHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormConsentShare':
          summary: 'Get Authorization Form Consent Share'
          description: 'Get authorization form consent share with the given authorization
            form consent share id.'
          entityName: 'AuthorizationFormConsentShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormDataUse':
          summary: 'Get Authorization Form Data Use'
          description: 'Get authorization form data use with the given authorization form
            data use id.'
          entityName: 'AuthorizationFormDataUse'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormDataUseHistory':
          summary: 'Get Authorization Form Data Use History'
          description: 'Get authorization form data use history with the given authorization
            form data use history id.'
          entityName: 'AuthorizationFormDataUseHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormDataUseShare':
          summary: 'Get Authorization Form Data Use Share'
          description: 'Get authorization form data use share with the given authorization
            form data use share id.'
          entityName: 'AuthorizationFormDataUseShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormHistory':
          summary: 'Get Authorization Form History'
          description: 'Get authorization form history with the given authorization form
            history id.'
          entityName: 'AuthorizationFormHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormShare':
          summary: 'Get Authorization Form Share'
          description: 'Get authorization form share with the given authorization form share
            id.'
          entityName: 'AuthorizationFormShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormText':
          summary: 'Get Authorization Form Text'
          description: 'Get authorization form text with the given authorization form text
            id.'
          entityName: 'AuthorizationFormText'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetAuthorizationFormTextHistory':
          summary: 'Get Authorization Form Text History'
          description: 'Get authorization form text history with the given authorization
            form text history id.'
          entityName: 'AuthorizationFormTextHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBackgroundOperation':
          summary: 'Get Background Operation'
          description: 'Get background operation with the given background operation id.'
          entityName: 'BackgroundOperation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBatchApexErrorEvent':
          summary: 'Get Batch Apex Error Platform Event'
          description: 'Get batch apex error platform event with the given batch apex error
            platform event id.'
          entityName: 'BatchApexErrorEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBrandTemplate':
          summary: 'Get Letterhead'
          description: 'Get letterhead with the given letterhead id.'
          entityName: 'BrandTemplate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBrandingSet':
          summary: 'Get Branding Set'
          description: 'Get branding set with the given branding set id.'
          entityName: 'BrandingSet'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBrandingSetProperty':
          summary: 'Get Branding Set Property'
          description: 'Get branding set property with the given branding set property id.'
          entityName: 'BrandingSetProperty'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBriefcaseAssignment':
          summary: 'Get Briefcase Assignment'
          description: 'Get briefcase assignment with the given briefcase assignment id.'
          entityName: 'BriefcaseAssignment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBriefcaseAssignmentChangeEvent':
          summary: 'Get Briefcase Assignment Change Event'
          description: 'Get briefcase assignment change event with the given briefcase assignment
            change event id.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBriefcaseDefinition':
          summary: 'Get Briefcase Definition'
          description: 'Get briefcase definition with the given briefcase definition id.'
          entityName: 'BriefcaseDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBriefcaseDefinitionChangeEvent':
          summary: 'Get Briefcase Definition Change Event'
          description: 'Get briefcase definition change event with the given briefcase definition
            change event id.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBriefcaseRule':
          summary: 'Get Briefcase Rule'
          description: 'Get briefcase rule with the given briefcase rule id.'
          entityName: 'BriefcaseRule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBriefcaseRuleFilter':
          summary: 'Get Briefcase Rule Filter'
          description: 'Get briefcase rule filter with the given briefcase rule filter id.'
          entityName: 'BriefcaseRuleFilter'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBulkApiResultEvent':
          summary: 'Get Bulk API Result Event'
          description: 'Get bulk api result event with the given bulk api result event id.'
          entityName: 'BulkApiResultEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBulkApiResultEventStore':
          summary: 'Get Bulk API Result Event Store'
          description: 'Get bulk api result event store with the given bulk api result event
            store id.'
          entityName: 'BulkApiResultEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBusinessBrand':
          summary: 'Get Business Brand'
          description: 'Get business brand with the given business brand id.'
          entityName: 'BusinessBrand'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBusinessBrandShare':
          summary: 'Get Business Brand Share'
          description: 'Get business brand share with the given business brand share id.'
          entityName: 'BusinessBrandShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBusinessHours':
          summary: 'Get Business Hours'
          description: 'Get business hours with the given business hours id.'
          entityName: 'BusinessHours'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetBusinessProcess':
          summary: 'Get Business Process'
          description: 'Get business process with the given business process id.'
          entityName: 'BusinessProcess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCE_SSD_Client_c__ChangeEvent':
          summary: 'Get Change Event: CE_SSD_Client__c'
          description: 'Get change event: ce_ssd_client__c with the given change event:
            ce_ssd_client__c id.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCalendar':
          summary: 'Get Calendar'
          description: 'Get calendar with the given calendar id.'
          entityName: 'Calendar'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCalendarView':
          summary: 'Get Calendar'
          description: 'Get calendar with the given calendar id.'
          entityName: 'CalendarView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCalendarViewShare':
          summary: 'Get Calendar Share'
          description: 'Get calendar share with the given calendar share id.'
          entityName: 'CalendarViewShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCallCenter':
          summary: 'Get Call Center'
          description: 'Get call center with the given call center id.'
          entityName: 'CallCenter'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCallCoachingMediaProvider':
          summary: 'Get CallCoachingMediaProvider'
          description: 'Get callcoachingmediaprovider with the given callcoachingmediaprovider
            id.'
          entityName: 'CallCoachingMediaProvider'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaign':
          summary: 'Get Campaign'
          description: 'Get campaign with the given campaign id.'
          entityName: 'Campaign'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignChangeEvent':
          summary: 'Get Campaign Change Event'
          description: 'Get campaign change event with the given campaign change event id.'
          entityName: 'CampaignChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignHistory':
          summary: 'Get Campaign Field History'
          description: 'Get campaign field history with the given campaign field history
            id.'
          entityName: 'CampaignHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignMember':
          summary: 'Get Campaign Member'
          description: 'Get campaign member with the given campaign member id.'
          entityName: 'CampaignMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignMemberChangeEvent':
          summary: 'Get Campaign Member Change Event'
          description: 'Get campaign member change event with the given campaign member
            change event id.'
          entityName: 'CampaignMemberChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignMemberStatus':
          summary: 'Get Campaign Member Status'
          description: 'Get campaign member status with the given campaign member status
            id.'
          entityName: 'CampaignMemberStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignMemberStatusChangeEvent':
          summary: 'Get Campaign Member Status Change Event'
          description: 'Get campaign member status change event with the given campaign
            member status change event id.'
          entityName: 'CampaignMemberStatusChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCampaignShare':
          summary: 'Get Campaign Share'
          description: 'Get campaign share with the given campaign share id.'
          entityName: 'CampaignShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCase':
          summary: 'Get Case'
          description: 'Get case with the given case id.'
          entityName: 'Case'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseChangeEvent':
          summary: 'Get Case Change Event'
          description: 'Get case change event with the given case change event id.'
          entityName: 'CaseChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseComment':
          summary: 'Get Case Comment'
          description: 'Get case comment with the given case comment id.'
          entityName: 'CaseComment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseContactRole':
          summary: 'Get Case Contact Role'
          description: 'Get case contact role with the given case contact role id.'
          entityName: 'CaseContactRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseHistory':
          summary: 'Get Case History'
          description: 'Get case history with the given case history id.'
          entityName: 'CaseHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseShare':
          summary: 'Get Case Share'
          description: 'Get case share with the given case share id.'
          entityName: 'CaseShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseSolution':
          summary: 'Get Case Solution'
          description: 'Get case solution with the given case solution id.'
          entityName: 'CaseSolution'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseStatus':
          summary: 'Get Case Status Value'
          description: 'Get case status value with the given case status value id.'
          entityName: 'CaseStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseTeamMember':
          summary: 'Get Case Team Member'
          description: 'Get case team member with the given case team member id.'
          entityName: 'CaseTeamMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseTeamRole':
          summary: 'Get Case Team Member Role'
          description: 'Get case team member role with the given case team member role id.'
          entityName: 'CaseTeamRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseTeamTemplate':
          summary: 'Get Predefined Case Team'
          description: 'Get predefined case team with the given predefined case team id.'
          entityName: 'CaseTeamTemplate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseTeamTemplateMember':
          summary: 'Get Predefined Case Team Member'
          description: 'Get predefined case team member with the given predefined case team
            member id.'
          entityName: 'CaseTeamTemplateMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCaseTeamTemplateRecord':
          summary: 'Get Predefined Case Team Record'
          description: 'Get predefined case team record with the given predefined case team
            record id.'
          entityName: 'CaseTeamTemplateRecord'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCategoryData':
          summary: 'Get Category Data'
          description: 'Get category data with the given category data id.'
          entityName: 'CategoryData'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCategoryNode':
          summary: 'Get Category Node'
          description: 'Get category node with the given category node id.'
          entityName: 'CategoryNode'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetChatterAnswersActivity':
          summary: 'Get Chatter Answers Activity'
          description: 'Get chatter answers activity with the given chatter answers activity
            id.'
          entityName: 'ChatterAnswersActivity'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetChatterAnswersReputationLevel':
          summary: 'Get Chatter Answers Reputation Level'
          description: 'Get chatter answers reputation level with the given chatter answers
            reputation level id.'
          entityName: 'ChatterAnswersReputationLevel'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetClientBrowser':
          summary: 'Get Client Browser'
          description: 'Get client browser with the given client browser id.'
          entityName: 'ClientBrowser'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetColorDefinition':
          summary: 'Get Color Definition'
          description: 'Get color definition with the given color definition id.'
          entityName: 'ColorDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCombinedAttachment':
          summary: 'Get Note, Attachment, Google Doc And File'
          description: 'Get note, attachment, google doc and file with the given note, attachment,
            google doc and file id.'
          entityName: 'CombinedAttachment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommSubscription':
          summary: 'Get Communication Subscription'
          description: 'Get communication subscription with the given communication subscription
            id.'
          entityName: 'CommSubscription'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommSubscriptionChannelType':
          summary: 'Get Communication Subscription Channel Type'
          description: 'Get communication subscription channel type with the given communication
            subscription channel type id.'
          entityName: 'CommSubscriptionChannelType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommSubscriptionChannelTypeHistory':
          summary: 'Get Communication Subscription Channel Type  History'
          description: 'Get communication subscription channel type  history with the given
            communication subscription channel type  history id.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommSubscriptionChannelTypeShare':
          summary: 'Get Communication Subscription Channel Type Share'
          description: 'Get communication subscription channel type share with the given
            communication subscription channel type share id.'
          entityName: 'CommSubscriptionChannelTypeShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommSubscriptionHistory':
          summary: 'Get Communication Subscription  History'
          description: 'Get communication subscription  history with the given communication
            subscription  history id.'
          entityName: 'CommSubscriptionHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommSubscriptionShare':
          summary: 'Get Communication Subscription Share'
          description: 'Get communication subscription share with the given communication
            subscription share id.'
          entityName: 'CommSubscriptionShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCommunity':
          summary: 'Get Zone'
          description: 'Get zone with the given zone id.'
          entityName: 'Community'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConcurLongRunApexErrEvent':
          summary: 'Get Concurrent Long Running Apex Error Event'
          description: 'Get concurrent long running apex error event with the given concurrent
            long running apex error event id.'
          entityName: 'ConcurLongRunApexErrEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConferenceNumber':
          summary: 'Get Conference Number'
          description: 'Get conference number with the given conference number id.'
          entityName: 'ConferenceNumber'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConnectedApplication':
          summary: 'Get Connected App'
          description: 'Get connected app with the given connected app id.'
          entityName: 'ConnectedApplication'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConsumptionRate':
          summary: 'Get Consumption Rate'
          description: 'Get consumption rate with the given consumption rate id.'
          entityName: 'ConsumptionRate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConsumptionRateHistory':
          summary: 'Get Consumption Rate History ID'
          description: 'Get consumption rate history id with the given consumption rate
            history id id.'
          entityName: 'ConsumptionRateHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConsumptionSchedule':
          summary: 'Get Consumption Schedule'
          description: 'Get consumption schedule with the given consumption schedule id.'
          entityName: 'ConsumptionSchedule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConsumptionScheduleHistory':
          summary: 'Get Consumption Schedule History ID'
          description: 'Get consumption schedule history id with the given consumption schedule
            history id id.'
          entityName: 'ConsumptionScheduleHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetConsumptionScheduleShare':
          summary: 'Get Consumption Schedule Share'
          description: 'Get consumption schedule share with the given consumption schedule
            share id.'
          entityName: 'ConsumptionScheduleShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContact':
          summary: 'Get Contact'
          description: 'Get contact with the given contact id.'
          entityName: 'Contact'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactChangeEvent':
          summary: 'Get Contact Change Event'
          description: 'Get contact change event with the given contact change event id.'
          entityName: 'ContactChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactHistory':
          summary: 'Get Contact History'
          description: 'Get contact history with the given contact history id.'
          entityName: 'ContactHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactPointTypeConsent':
          summary: 'Get Contact Point Type Consent'
          description: 'Get contact point type consent with the given contact point type
            consent id.'
          entityName: 'ContactPointTypeConsent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactPointTypeConsentChangeEvent':
          summary: 'Get Contact Point Type Consent Change Event'
          description: 'Get contact point type consent change event with the given contact
            point type consent change event id.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactPointTypeConsentHistory':
          summary: 'Get Contact Point Type Consent  History'
          description: 'Get contact point type consent  history with the given contact point
            type consent  history id.'
          entityName: 'ContactPointTypeConsentHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactPointTypeConsentShare':
          summary: 'Get Contact Point Type Consent Share'
          description: 'Get contact point type consent share with the given contact point
            type consent share id.'
          entityName: 'ContactPointTypeConsentShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactRequest':
          summary: 'Get Contact Request'
          description: 'Get contact request with the given contact request id.'
          entityName: 'ContactRequest'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactRequestShare':
          summary: 'Get Contact Request Share'
          description: 'Get contact request share with the given contact request share id.'
          entityName: 'ContactRequestShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContactShare':
          summary: 'Get Contact Share'
          description: 'Get contact share with the given contact share id.'
          entityName: 'ContactShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentAsset':
          summary: 'Get Asset File'
          description: 'Get asset file with the given asset file id.'
          entityName: 'ContentAsset'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentBody':
          summary: 'Get Content Body'
          description: 'Get content body with the given content body id.'
          entityName: 'ContentBody'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentDocument':
          summary: 'Get Content Document'
          description: 'Get content document with the given content document id.'
          entityName: 'ContentDocument'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentDocumentChangeEvent':
          summary: 'Get Content Document Change Event'
          description: 'Get content document change event with the given content document
            change event id.'
          entityName: 'ContentDocumentChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentDocumentHistory':
          summary: 'Get Content Document History'
          description: 'Get content document history with the given content document history
            id.'
          entityName: 'ContentDocumentHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentDocumentLink':
          summary: 'Get Content Document Link'
          description: 'Get content document link with the given content document link id.'
          entityName: 'ContentDocumentLink'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentDocumentLinkChangeEvent':
          summary: 'Get Content Document Link Change Event'
          description: 'Get content document link change event with the given content document
            link change event id.'
          entityName: 'ContentDocumentLinkChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentFolder':
          summary: 'Get Content Folder'
          description: 'Get content folder with the given content folder id.'
          entityName: 'ContentFolder'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentFolderItem':
          summary: 'Get Content Folder Item'
          description: 'Get content folder item with the given content folder item id.'
          entityName: 'ContentFolderItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentFolderLink':
          summary: 'Get Content Folder Link'
          description: 'Get content folder link with the given content folder link id.'
          entityName: 'ContentFolderLink'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentFolderMember':
          summary: 'Get Content Folder Member'
          description: 'Get content folder member with the given content folder member id.'
          entityName: 'ContentFolderMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentNote':
          summary: 'Get Note'
          description: 'Get note with the given note id.'
          entityName: 'ContentNote'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentVersion':
          summary: 'Get Content Version'
          description: 'Get content version with the given content version id.'
          entityName: 'ContentVersion'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentVersionChangeEvent':
          summary: 'Get Content Version Change Event'
          description: 'Get content version change event with the given content version
            change event id.'
          entityName: 'ContentVersionChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentVersionHistory':
          summary: 'Get Content Version History'
          description: 'Get content version history with the given content version history
            id.'
          entityName: 'ContentVersionHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentWorkspace':
          summary: 'Get Library'
          description: 'Get library with the given library id.'
          entityName: 'ContentWorkspace'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentWorkspaceDoc':
          summary: 'Get Library Document'
          description: 'Get library document with the given library document id.'
          entityName: 'ContentWorkspaceDoc'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentWorkspaceMember':
          summary: 'Get Library Member'
          description: 'Get library member with the given library member id.'
          entityName: 'ContentWorkspaceMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContentWorkspacePermission':
          summary: 'Get Library Permission'
          description: 'Get library permission with the given library permission id.'
          entityName: 'ContentWorkspacePermission'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContract':
          summary: 'Get Contract'
          description: 'Get contract with the given contract id.'
          entityName: 'Contract'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContractChangeEvent':
          summary: 'Get Contract Change Event'
          description: 'Get contract change event with the given contract change event id.'
          entityName: 'ContractChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContractContactRole':
          summary: 'Get Contract Contact Role'
          description: 'Get contract contact role with the given contract contact role id.'
          entityName: 'ContractContactRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContractHistory':
          summary: 'Get Contract History'
          description: 'Get contract history with the given contract history id.'
          entityName: 'ContractHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetContractStatus':
          summary: 'Get Contract Status Value'
          description: 'Get contract status value with the given contract status value id.'
          entityName: 'ContractStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCorsWhitelistEntry':
          summary: 'Get CORS Allowed Origin List'
          description: 'Get cors allowed origin list with the given cors allowed origin
            list id.'
          entityName: 'CorsWhitelistEntry'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCredentialStuffingEvent':
          summary: 'Get Credential Stuffing Event'
          description: 'Get credential stuffing event with the given credential stuffing
            event id.'
          entityName: 'CredentialStuffingEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCredentialStuffingEventStore':
          summary: 'Get Credential Stuffing Event Store'
          description: 'Get credential stuffing event store with the given credential stuffing
            event store id.'
          entityName: 'CredentialStuffingEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCronJobDetail':
          summary: 'Get Cron Job'
          description: 'Get cron job with the given cron job id.'
          entityName: 'CronJobDetail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCronTrigger':
          summary: 'Get Scheduled Jobs'
          description: 'Get scheduled jobs with the given scheduled jobs id.'
          entityName: 'CronTrigger'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCspTrustedSite':
          summary: 'Get Content Security Policy Trusted Site'
          description: 'Get content security policy trusted site with the given content
            security policy trusted site id.'
          entityName: 'CspTrustedSite'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomBrand':
          summary: 'Get Custom Brand'
          description: 'Get custom brand with the given custom brand id.'
          entityName: 'CustomBrand'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomBrandAsset':
          summary: 'Get Custom Brand Asset'
          description: 'Get custom brand asset with the given custom brand asset id.'
          entityName: 'CustomBrandAsset'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomHelpMenuItem':
          summary: 'Get Custom Help Menu Item'
          description: 'Get custom help menu item with the given custom help menu item id.'
          entityName: 'CustomHelpMenuItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomHelpMenuSection':
          summary: 'Get Custom Help Menu Section'
          description: 'Get custom help menu section with the given custom help menu section
            id.'
          entityName: 'CustomHelpMenuSection'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomHttpHeader':
          summary: 'Get Custom HTTP Header'
          description: 'Get custom http header with the given custom http header id.'
          entityName: 'CustomHttpHeader'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomNotificationType':
          summary: 'Get Custom Notification Type'
          description: 'Get custom notification type with the given custom notification
            type id.'
          entityName: 'CustomNotificationType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomObjectUserLicenseMetrics':
          summary: 'Get Custom Object Usage By User License Metric'
          description: 'Get custom object usage by user license metric with the given custom
            object usage by user license metric id.'
          entityName: 'CustomObjectUserLicenseMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomPermission':
          summary: 'Get Custom Permission'
          description: 'Get custom permission with the given custom permission id.'
          entityName: 'CustomPermission'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomPermissionDependency':
          summary: 'Get Custom Permission Dependency'
          description: 'Get custom permission dependency with the given custom permission
            dependency id.'
          entityName: 'CustomPermissionDependency'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomer':
          summary: 'Get Customer'
          description: 'Get customer with the given customer id.'
          entityName: 'Customer'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetCustomerShare':
          summary: 'Get Customer Share'
          description: 'Get customer share with the given customer share id.'
          entityName: 'CustomerShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDashboard':
          summary: 'Get Dashboard'
          description: 'Get dashboard with the given dashboard id.'
          entityName: 'Dashboard'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDashboardComponent':
          summary: 'Get Dashboard Component'
          description: 'Get dashboard component with the given dashboard component id.'
          entityName: 'DashboardComponent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataAssessmentFieldMetric':
          summary: 'Get Data Assessment Field Metric'
          description: 'Get data assessment field metric with the given data assessment
            field metric id.'
          entityName: 'DataAssessmentFieldMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataAssessmentMetric':
          summary: 'Get Data Assessment Metric'
          description: 'Get data assessment metric with the given data assessment metric
            id.'
          entityName: 'DataAssessmentMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataAssessmentValueMetric':
          summary: 'Get Data Assessment Field Value Metric'
          description: 'Get data assessment field value metric with the given data assessment
            field value metric id.'
          entityName: 'DataAssessmentValueMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataObjectDataChgEvent':
          summary: 'Get Data Object Data Change Event'
          description: 'Get data object data change event with the given data object data
            change event id.'
          entityName: 'DataObjectDataChgEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataStatistics':
          summary: 'Get Data Statistics'
          description: 'Get data statistics with the given data statistics id.'
          entityName: 'DataStatistics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataType':
          summary: 'Get Data Type'
          description: 'Get data type with the given data type id.'
          entityName: 'DataType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataUseLegalBasis':
          summary: 'Get Data Use Legal Basis'
          description: 'Get data use legal basis with the given data use legal basis id.'
          entityName: 'DataUseLegalBasis'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataUseLegalBasisHistory':
          summary: 'Get Data Use Legal Basis  History'
          description: 'Get data use legal basis  history with the given data use legal
            basis  history id.'
          entityName: 'DataUseLegalBasisHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataUseLegalBasisShare':
          summary: 'Get Data Use Legal Basis Share'
          description: 'Get data use legal basis share with the given data use legal basis
            share id.'
          entityName: 'DataUseLegalBasisShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataUsePurpose':
          summary: 'Get Data Use Purpose'
          description: 'Get data use purpose with the given data use purpose id.'
          entityName: 'DataUsePurpose'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataUsePurposeHistory':
          summary: 'Get Data Use Purpose  History'
          description: 'Get data use purpose  history with the given data use purpose  history
            id.'
          entityName: 'DataUsePurposeHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDataUsePurposeShare':
          summary: 'Get Data Use Purpose Share'
          description: 'Get data use purpose share with the given data use purpose share
            id.'
          entityName: 'DataUsePurposeShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDatacloudAddress':
          summary: 'Get Data.com Address'
          description: 'Get data.com address with the given data.com address id.'
          entityName: 'DatacloudAddress'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDeclinedEventRelation':
          summary: 'Get Declined Event Relation'
          description: 'Get declined event relation with the given declined event relation
            id.'
          entityName: 'DeclinedEventRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDeleteEvent':
          summary: 'Get Recycle Bin Item'
          description: 'Get recycle bin item with the given recycle bin item id.'
          entityName: 'DeleteEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDocument':
          summary: 'Get Document'
          description: 'Get document with the given document id.'
          entityName: 'Document'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDocumentAttachmentMap':
          summary: 'Get Document Entity Map'
          description: 'Get document entity map with the given document entity map id.'
          entityName: 'DocumentAttachmentMap'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDomain':
          summary: 'Get Domain'
          description: 'Get domain with the given domain id.'
          entityName: 'Domain'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDomainSite':
          summary: 'Get Custom URL'
          description: 'Get custom url with the given custom url id.'
          entityName: 'DomainSite'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDuplicateRecordItem':
          summary: 'Get Duplicate Record Item'
          description: 'Get duplicate record item with the given duplicate record item id.'
          entityName: 'DuplicateRecordItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDuplicateRecordSet':
          summary: 'Get Duplicate Record Set'
          description: 'Get duplicate record set with the given duplicate record set id.'
          entityName: 'DuplicateRecordSet'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetDuplicateRule':
          summary: 'Get Duplicate Rule'
          description: 'Get duplicate rule with the given duplicate rule id.'
          entityName: 'DuplicateRule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailCapture':
          summary: 'Get EmailCapture'
          description: 'Get emailcapture with the given emailcapture id.'
          entityName: 'EmailCapture'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailDomainFilter':
          summary: 'Get Email Domain Filter'
          description: 'Get email domain filter with the given email domain filter id.'
          entityName: 'EmailDomainFilter'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailDomainKey':
          summary: 'Get Email Domain Key'
          description: 'Get email domain key with the given email domain key id.'
          entityName: 'EmailDomainKey'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailMessage':
          summary: 'Get Email Message'
          description: 'Get email message with the given email message id.'
          entityName: 'EmailMessage'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailMessageChangeEvent':
          summary: 'Get Email Message Change Event'
          description: 'Get email message change event with the given email message change
            event id.'
          entityName: 'EmailMessageChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailMessageRelation':
          summary: 'Get Email Message Relation'
          description: 'Get email message relation with the given email message relation
            id.'
          entityName: 'EmailMessageRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailRelay':
          summary: 'Get Email Relay'
          description: 'Get email relay with the given email relay id.'
          entityName: 'EmailRelay'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailServicesAddress':
          summary: 'Get Email Services Address'
          description: 'Get email services address with the given email services address
            id.'
          entityName: 'EmailServicesAddress'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailServicesFunction':
          summary: 'Get Email Service'
          description: 'Get email service with the given email service id.'
          entityName: 'EmailServicesFunction'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailStatus':
          summary: 'Get Email Status'
          description: 'Get email status with the given email status id.'
          entityName: 'EmailStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailTemplate':
          summary: 'Get Email Template'
          description: 'Get email template with the given email template id.'
          entityName: 'EmailTemplate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmailTemplateChangeEvent':
          summary: 'Get Email Template Change Event'
          description: 'Get email template change event with the given email template change
            event id.'
          entityName: 'EmailTemplateChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmbeddedServiceDetail':
          summary: 'Get Embedded Service'
          description: 'Get embedded service with the given embedded service id.'
          entityName: 'EmbeddedServiceDetail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEmbeddedServiceLabel':
          summary: 'Get Embedded Service Label'
          description: 'Get embedded service label with the given embedded service label
            id.'
          entityName: 'EmbeddedServiceLabel'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEngagementChannelType':
          summary: 'Get Engagement Channel Type'
          description: 'Get engagement channel type with the given engagement channel type
            id.'
          entityName: 'EngagementChannelType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEngagementChannelTypeHistory':
          summary: 'Get Engagement Channel Type  History'
          description: 'Get engagement channel type  history with the given engagement channel
            type  history id.'
          entityName: 'EngagementChannelTypeHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEngagementChannelTypeShare':
          summary: 'Get Engagement Channel Type Share'
          description: 'Get engagement channel type share with the given engagement channel
            type share id.'
          entityName: 'EngagementChannelTypeShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEntityDefinition':
          summary: 'Get Entity Definition'
          description: 'Get entity definition with the given entity definition id.'
          entityName: 'EntityDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEntityParticle':
          summary: 'Get Entity Particle'
          description: 'Get entity particle with the given entity particle id.'
          entityName: 'EntityParticle'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEvent':
          summary: 'Get Event'
          description: 'Get event with the given event id.'
          entityName: 'Event'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventBusSubscriber':
          summary: 'Get Platform Event Subscription'
          description: 'Get platform event subscription with the given platform event subscription
            id.'
          entityName: 'EventBusSubscriber'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventChangeEvent':
          summary: 'Get Event Change Event'
          description: 'Get event change event with the given event change event id.'
          entityName: 'EventChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventLogFile':
          summary: 'Get Event Log File'
          description: 'Get event log file with the given event log file id.'
          entityName: 'EventLogFile'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventRelation':
          summary: 'Get Event Relation'
          description: 'Get event relation with the given event relation id.'
          entityName: 'EventRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventRelationChangeEvent':
          summary: 'Get Event Relation Change Event'
          description: 'Get event relation change event with the given event relation change
            event id.'
          entityName: 'EventRelationChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventRelayConfig':
          summary: 'Get Event Relay Config'
          description: 'Get event relay config with the given event relay config id.'
          entityName: 'EventRelayConfig'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventRelayConfigChangeEvent':
          summary: 'Get Event Relay Config Change Event'
          description: 'Get event relay config change event with the given event relay config
            change event id.'
          entityName: 'EventRelayConfigChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetEventRelayFeedback':
          summary: 'Get Event Relay Feedback'
          description: 'Get event relay feedback with the given event relay feedback id.'
          entityName: 'EventRelayFeedback'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExpenses__ChangeEvent':
          summary: 'Get Change Event: Expense'
          description: 'Get change event: expense with the given change event: expense id.'
          entityName: 'Expenses__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExpressionFilter':
          summary: 'Get ExpressionFilter'
          description: 'Get expressionfilter with the given expressionfilter id.'
          entityName: 'ExpressionFilter'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExpressionFilterCriteria':
          summary: 'Get ExpressionFilterCriteria'
          description: 'Get expressionfiltercriteria with the given expressionfiltercriteria
            id.'
          entityName: 'ExpressionFilterCriteria'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExpressionSetView':
          summary: 'Get Expression Set View'
          description: 'Get expression set view with the given expression set view id.'
          entityName: 'ExpressionSetView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExternalDataSource':
          summary: 'Get External Data Source'
          description: 'Get external data source with the given external data source id.'
          entityName: 'ExternalDataSource'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExternalDataSrcDescriptor':
          summary: 'Get External Data Source Descriptor'
          description: 'Get external data source descriptor with the given external data
            source descriptor id.'
          entityName: 'ExternalDataSrcDescriptor'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExternalDataUserAuth':
          summary: 'Get External Data User Authentication'
          description: 'Get external data user authentication with the given external data
            user authentication id.'
          entityName: 'ExternalDataUserAuth'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExternalEvent':
          summary: 'Get External Event'
          description: 'Get external event with the given external event id.'
          entityName: 'ExternalEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExternalEventMapping':
          summary: 'Get External Event Mapping'
          description: 'Get external event mapping with the given external event mapping
            id.'
          entityName: 'ExternalEventMapping'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetExternalEventMappingShare':
          summary: 'Get External Event Mapping Share'
          description: 'Get external event mapping share with the given external event mapping
            share id.'
          entityName: 'ExternalEventMappingShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFieldDefinition':
          summary: 'Get Field Definition'
          description: 'Get field definition with the given field definition id.'
          entityName: 'FieldDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFieldPermissions':
          summary: 'Get Field Permissions'
          description: 'Get field permissions with the given field permissions id.'
          entityName: 'FieldPermissions'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFieldSecurityClassification':
          summary: 'Get Field Security Classification'
          description: 'Get field security classification with the given field security
            classification id.'
          entityName: 'FieldSecurityClassification'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFileEvent':
          summary: 'Get File Event'
          description: 'Get file event with the given file event id.'
          entityName: 'FileEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFileEventStore':
          summary: 'Get File Event Store'
          description: 'Get file event store with the given file event store id.'
          entityName: 'FileEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFileSearchActivity':
          summary: 'Get FileSearchActivity'
          description: 'Get filesearchactivity with the given filesearchactivity id.'
          entityName: 'FileSearchActivity'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFiscalYearSettings':
          summary: 'Get Fiscal Year Settings'
          description: 'Get fiscal year settings with the given fiscal year settings id.'
          entityName: 'FiscalYearSettings'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlexQueueItem':
          summary: 'Get Flex Queue Item'
          description: 'Get flex queue item with the given flex queue item id.'
          entityName: 'FlexQueueItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowDefinitionView':
          summary: 'Get Flow Definition'
          description: 'Get flow definition with the given flow definition id.'
          entityName: 'FlowDefinitionView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowExecutionErrorEvent':
          summary: 'Get Flow Execution Error Event'
          description: 'Get flow execution error event with the given flow execution error
            event id.'
          entityName: 'FlowExecutionErrorEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowInterview':
          summary: 'Get Flow Interview'
          description: 'Get flow interview with the given flow interview id.'
          entityName: 'FlowInterview'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowInterviewLog':
          summary: 'Get Flow Interview Log'
          description: 'Get flow interview log with the given flow interview log id.'
          entityName: 'FlowInterviewLog'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowInterviewLogEntry':
          summary: 'Get Flow Interview Log Entry'
          description: 'Get flow interview log entry with the given flow interview log entry
            id.'
          entityName: 'FlowInterviewLogEntry'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowInterviewLogShare':
          summary: 'Get Flow Interview Log Share'
          description: 'Get flow interview log share with the given flow interview log share
            id.'
          entityName: 'FlowInterviewLogShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowInterviewShare':
          summary: 'Get Flow Interview Share'
          description: 'Get flow interview share with the given flow interview share id.'
          entityName: 'FlowInterviewShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationEvent':
          summary: 'Get Orchestration Event'
          description: 'Get orchestration event with the given orchestration event id.'
          entityName: 'FlowOrchestrationEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationInstance':
          summary: 'Get Orchestration Run'
          description: 'Get orchestration run with the given orchestration run id.'
          entityName: 'FlowOrchestrationInstance'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationInstanceShare':
          summary: 'Get Orchestration Run Share'
          description: 'Get orchestration run share with the given orchestration run share
            id.'
          entityName: 'FlowOrchestrationInstanceShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationStageInstance':
          summary: 'Get Orchestration Stage Run'
          description: 'Get orchestration stage run with the given orchestration stage run
            id.'
          entityName: 'FlowOrchestrationStageInstance'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationStageInstanceShare':
          summary: 'Get Orchestration Stage Run Share'
          description: 'Get orchestration stage run share with the given orchestration stage
            run share id.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationStepInstance':
          summary: 'Get Orchestration Step Run'
          description: 'Get orchestration step run with the given orchestration step run
            id.'
          entityName: 'FlowOrchestrationStepInstance'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationStepInstanceShare':
          summary: 'Get Orchestration Step Run Share'
          description: 'Get orchestration step run share with the given orchestration step
            run share id.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationWorkItem':
          summary: 'Get Orchestration Work Item'
          description: 'Get orchestration work item with the given orchestration work item
            id.'
          entityName: 'FlowOrchestrationWorkItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowOrchestrationWorkItemShare':
          summary: 'Get Orchestration Work Item Share'
          description: 'Get orchestration work item share with the given orchestration work
            item share id.'
          entityName: 'FlowOrchestrationWorkItemShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowRecordRelation':
          summary: 'Get Flow Record Relation'
          description: 'Get flow record relation with the given flow record relation id.'
          entityName: 'FlowRecordRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowStageRelation':
          summary: 'Get Flow Interview Stage Relation'
          description: 'Get flow interview stage relation with the given flow interview
            stage relation id.'
          entityName: 'FlowStageRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowTestResult':
          summary: 'Get Flow Test Result'
          description: 'Get flow test result with the given flow test result id.'
          entityName: 'FlowTestResult'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowTestResultShare':
          summary: 'Get Flow Test Result Share'
          description: 'Get flow test result share with the given flow test result share
            id.'
          entityName: 'FlowTestResultShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowTestView':
          summary: 'Get Flow Test View'
          description: 'Get flow test view with the given flow test view id.'
          entityName: 'FlowTestView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowVariableView':
          summary: 'Get Flow Variable'
          description: 'Get flow variable with the given flow variable id.'
          entityName: 'FlowVariableView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFlowVersionView':
          summary: 'Get Flow Version'
          description: 'Get flow version with the given flow version id.'
          entityName: 'FlowVersionView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFolder':
          summary: 'Get Folder'
          description: 'Get folder with the given folder id.'
          entityName: 'Folder'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFolderedContentDocument':
          summary: 'Get Foldered Content Document'
          description: 'Get foldered content document with the given foldered content document
            id.'
          entityName: 'FolderedContentDocument'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFormulaFunction':
          summary: 'Get Formula Function'
          description: 'Get formula function with the given formula function id.'
          entityName: 'FormulaFunction'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFormulaFunctionAllowedType':
          summary: 'Get Formula Context Function'
          description: 'Get formula context function with the given formula context function
            id.'
          entityName: 'FormulaFunctionAllowedType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetFormulaFunctionCategory':
          summary: 'Get Formula Function Category'
          description: 'Get formula function category with the given formula function category
            id.'
          entityName: 'FormulaFunctionCategory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetGrantedByLicense':
          summary: 'Get Setting Granted By License'
          description: 'Get setting granted by license with the given setting granted by
            license id.'
          entityName: 'GrantedByLicense'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetGroup':
          summary: 'Get Group'
          description: 'Get group with the given group id.'
          entityName: 'Group'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetGroupMember':
          summary: 'Get Group Member'
          description: 'Get group member with the given group member id.'
          entityName: 'GroupMember'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetHarishO__ChangeEvent':
          summary: 'Get Change Event: HarishL'
          description: 'Get change event: harishl with the given change event: harishl id.'
          entityName: 'HarishO__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetHoliday':
          summary: 'Get Holiday'
          description: 'Get holiday with the given holiday id.'
          entityName: 'Holiday'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIPAddressRange':
          summary: 'Get IP Address Range'
          description: 'Get ip address range with the given ip address range id.'
          entityName: 'IPAddressRange'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIconDefinition':
          summary: 'Get Icon Definition'
          description: 'Get icon definition with the given icon definition id.'
          entityName: 'IconDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIdentityProviderEventStore':
          summary: 'Get Identity Provider Event Store'
          description: 'Get identity provider event store with the given identity provider
            event store id.'
          entityName: 'IdentityProviderEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIdentityVerificationEvent':
          summary: 'Get Identity Verification Event'
          description: 'Get identity verification event with the given identity verification
            event id.'
          entityName: 'IdentityVerificationEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIdpEventLog':
          summary: 'Get Identity Provider Event Log'
          description: 'Get identity provider event log with the given identity provider
            event log id.'
          entityName: 'IdpEventLog'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIframeWhiteListUrl':
          summary: 'Get Trusted Domain for Inline Frames'
          description: 'Get trusted domain for inline frames with the given trusted domain
            for inline frames id.'
          entityName: 'IframeWhiteListUrl'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetImage':
          summary: 'Get Image'
          description: 'Get image with the given image id.'
          entityName: 'Image'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetImageHistory':
          summary: 'Get Image History'
          description: 'Get image history with the given image history id.'
          entityName: 'ImageHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetImageShare':
          summary: 'Get Image Share'
          description: 'Get image share with the given image share id.'
          entityName: 'ImageShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIndividual':
          summary: 'Get Individual'
          description: 'Get individual with the given individual id.'
          entityName: 'Individual'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIndividualChangeEvent':
          summary: 'Get Individual Change Event'
          description: 'Get individual change event with the given individual change event
            id.'
          entityName: 'IndividualChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIndividualHistory':
          summary: 'Get Individual History'
          description: 'Get individual history with the given individual history id.'
          entityName: 'IndividualHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetIndividualShare':
          summary: 'Get Individual Share'
          description: 'Get individual share with the given individual share id.'
          entityName: 'IndividualShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetInstalledMobileApp':
          summary: 'Get Installed Mobile App'
          description: 'Get installed mobile app with the given installed mobile app id.'
          entityName: 'InstalledMobileApp'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLead':
          summary: 'Get Lead'
          description: 'Get lead with the given lead id.'
          entityName: 'Lead'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLeadChangeEvent':
          summary: 'Get Lead Change Event'
          description: 'Get lead change event with the given lead change event id.'
          entityName: 'LeadChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLeadHistory':
          summary: 'Get Lead History'
          description: 'Get lead history with the given lead history id.'
          entityName: 'LeadHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLeadShare':
          summary: 'Get Lead Share'
          description: 'Get lead share with the given lead share id.'
          entityName: 'LeadShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLeadStatus':
          summary: 'Get Lead Status Value'
          description: 'Get lead status value with the given lead status value id.'
          entityName: 'LeadStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningExitByPageMetrics':
          summary: 'Get Lightning Exit By Page Metrics'
          description: 'Get lightning exit by page metrics with the given lightning exit
            by page metrics id.'
          entityName: 'LightningExitByPageMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningExperienceTheme':
          summary: 'Get Lightning Experience Theme'
          description: 'Get lightning experience theme with the given lightning experience
            theme id.'
          entityName: 'LightningExperienceTheme'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningOnboardingConfig':
          summary: 'Get LightningOnboardingConfig'
          description: 'Get lightningonboardingconfig with the given lightningonboardingconfig
            id.'
          entityName: 'LightningOnboardingConfig'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningToggleMetrics':
          summary: 'Get Lightning Toggle Metrics'
          description: 'Get lightning toggle metrics with the given lightning toggle metrics
            id.'
          entityName: 'LightningToggleMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningUriEvent':
          summary: 'Get Lightning URI Event'
          description: 'Get lightning uri event with the given lightning uri event id.'
          entityName: 'LightningUriEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningUriEventStream':
          summary: 'Get Lightning URI Event Stream'
          description: 'Get lightning uri event stream with the given lightning uri event
            stream id.'
          entityName: 'LightningUriEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningUsageByAppTypeMetrics':
          summary: 'Get Lightning Usage By App Type Metrics'
          description: 'Get lightning usage by app type metrics with the given lightning
            usage by app type metrics id.'
          entityName: 'LightningUsageByAppTypeMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningUsageByBrowserMetrics':
          summary: 'Get Lightning Usage By Browser Metrics'
          description: 'Get lightning usage by browser metrics with the given lightning
            usage by browser metrics id.'
          entityName: 'LightningUsageByBrowserMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningUsageByFlexiPageMetrics':
          summary: 'Get Lightning Usage By FlexiPage Metrics'
          description: 'Get lightning usage by flexipage metrics with the given lightning
            usage by flexipage metrics id.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLightningUsageByPageMetrics':
          summary: 'Get Lightning Usage By Page Metrics'
          description: 'Get lightning usage by page metrics with the given lightning usage
            by page metrics id.'
          entityName: 'LightningUsageByPageMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListEmail':
          summary: 'Get List Email'
          description: 'Get list email with the given list email id.'
          entityName: 'ListEmail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListEmailChangeEvent':
          summary: 'Get List Email Change Event'
          description: 'Get list email change event with the given list email change event
            id.'
          entityName: 'ListEmailChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListEmailIndividualRecipient':
          summary: 'Get List Email Individual Recipient'
          description: 'Get list email individual recipient with the given list email individual
            recipient id.'
          entityName: 'ListEmailIndividualRecipient'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListEmailRecipientSource':
          summary: 'Get List Email Recipient Source'
          description: 'Get list email recipient source with the given list email recipient
            source id.'
          entityName: 'ListEmailRecipientSource'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListEmailShare':
          summary: 'Get List Email Share'
          description: 'Get list email share with the given list email share id.'
          entityName: 'ListEmailShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListView':
          summary: 'Get List View'
          description: 'Get list view with the given list view id.'
          entityName: 'ListView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListViewChart':
          summary: 'Get List View Chart'
          description: 'Get list view chart with the given list view chart id.'
          entityName: 'ListViewChart'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListViewChartInstance':
          summary: 'Get List View Chart Instance'
          description: 'Get list view chart instance with the given list view chart instance
            id.'
          entityName: 'ListViewChartInstance'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListViewEvent':
          summary: 'Get List View Event'
          description: 'Get list view event with the given list view event id.'
          entityName: 'ListViewEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetListViewEventStream':
          summary: 'Get List View Event Stream'
          description: 'Get list view event stream with the given list view event stream
            id.'
          entityName: 'ListViewEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginAsEvent':
          summary: 'Get LoginAs Event'
          description: 'Get loginas event with the given loginas event id.'
          entityName: 'LoginAsEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginAsEventStream':
          summary: 'Get LoginAs Event Stream'
          description: 'Get loginas event stream with the given loginas event stream id.'
          entityName: 'LoginAsEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginEvent':
          summary: 'Get Login Event'
          description: 'Get login event with the given login event id.'
          entityName: 'LoginEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginEventStream':
          summary: 'Get Login Event Stream'
          description: 'Get login event stream with the given login event stream id.'
          entityName: 'LoginEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginGeo':
          summary: 'Get Login Geo Data'
          description: 'Get login geo data with the given login geo data id.'
          entityName: 'LoginGeo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginHistory':
          summary: 'Get Login History'
          description: 'Get login history with the given login history id.'
          entityName: 'LoginHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLoginIp':
          summary: 'Get Login IP'
          description: 'Get login ip with the given login ip id.'
          entityName: 'LoginIp'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLogin__ChangeEvent':
          summary: 'Get Change Event: Login'
          description: 'Get change event: login with the given change event: login id.'
          entityName: 'Login__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLogoutEvent':
          summary: 'Get Logout Event'
          description: 'Get logout event with the given logout event id.'
          entityName: 'LogoutEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLogoutEventStream':
          summary: 'Get Logout Event Stream'
          description: 'Get logout event stream with the given logout event stream id.'
          entityName: 'LogoutEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetLookedUpFromActivity':
          summary: 'Get Lookups from Activity'
          description: 'Get lookups from activity with the given lookups from activity id.'
          entityName: 'LookedUpFromActivity'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacro':
          summary: 'Get Macro'
          description: 'Get macro with the given macro id.'
          entityName: 'Macro'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroChangeEvent':
          summary: 'Get Macro Change Event'
          description: 'Get macro change event with the given macro change event id.'
          entityName: 'MacroChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroHistory':
          summary: 'Get Macro History'
          description: 'Get macro history with the given macro history id.'
          entityName: 'MacroHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroInstruction':
          summary: 'Get Macro Instruction'
          description: 'Get macro instruction with the given macro instruction id.'
          entityName: 'MacroInstruction'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroInstructionChangeEvent':
          summary: 'Get Macro Instruction Change Event'
          description: 'Get macro instruction change event with the given macro instruction
            change event id.'
          entityName: 'MacroInstructionChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroShare':
          summary: 'Get Macro Share'
          description: 'Get macro share with the given macro share id.'
          entityName: 'MacroShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroUsage':
          summary: 'Get Macro Usage'
          description: 'Get macro usage with the given macro usage id.'
          entityName: 'MacroUsage'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMacroUsageShare':
          summary: 'Get Macro Usage Share'
          description: 'Get macro usage share with the given macro usage share id.'
          entityName: 'MacroUsageShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMailmergeTemplate':
          summary: 'Get Mail Merge Template'
          description: 'Get mail merge template with the given mail merge template id.'
          entityName: 'MailmergeTemplate'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetManagedContent':
          summary: 'Get Managed Content'
          description: 'Get managed content with the given managed content id.'
          entityName: 'ManagedContent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetManagedContentChannel':
          summary: 'Get Managed Content Channel'
          description: 'Get managed content channel with the given managed content channel
            id.'
          entityName: 'ManagedContentChannel'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetManagedContentSpace':
          summary: 'Get Managed Content Space'
          description: 'Get managed content space with the given managed content space id.'
          entityName: 'ManagedContentSpace'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetManagedContentVariant':
          summary: 'Get Managed Content Variant'
          description: 'Get managed content variant with the given managed content variant
            id.'
          entityName: 'ManagedContentVariant'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetManagedContentVariantChangeEvent':
          summary: 'Get Managed Content Variant Change Event'
          description: 'Get managed content variant change event with the given managed
            content variant change event id.'
          entityName: 'ManagedContentVariantChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMatchingInformation':
          summary: 'Get Matching Information'
          description: 'Get matching information with the given matching information id.'
          entityName: 'MatchingInformation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMatchingRule':
          summary: 'Get Matching Rule'
          description: 'Get matching rule with the given matching rule id.'
          entityName: 'MatchingRule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMatchingRuleItem':
          summary: 'Get Matching Rule Item'
          description: 'Get matching rule item with the given matching rule item id.'
          entityName: 'MatchingRuleItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMobileApplicationDetail':
          summary: 'Get Mobile Application Detail'
          description: 'Get mobile application detail with the given mobile application
            detail id.'
          entityName: 'MobileApplicationDetail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetMyDomainDiscoverableLogin':
          summary: 'Get My Domain Discoverable Login'
          description: 'Get my domain discoverable login with the given my domain discoverable
            login id.'
          entityName: 'MyDomainDiscoverableLogin'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetName':
          summary: 'Get Name'
          description: 'Get name with the given name id.'
          entityName: 'Name'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetNamedCredential':
          summary: 'Get Named Credential'
          description: 'Get named credential with the given named credential id.'
          entityName: 'NamedCredential'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetNote':
          summary: 'Get Note'
          description: 'Get note with the given note id.'
          entityName: 'Note'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetNoteAndAttachment':
          summary: 'Get Note and Attachment'
          description: 'Get note and attachment with the given note and attachment id.'
          entityName: 'NoteAndAttachment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOauthCustomScope':
          summary: 'Get OAuth Custom Scope'
          description: 'Get oauth custom scope with the given oauth custom scope id.'
          entityName: 'OauthCustomScope'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOauthCustomScopeApp':
          summary: 'Get OAuth Custom Scope App '
          description: 'Get oauth custom scope app  with the given oauth custom scope app  id.'
          entityName: 'OauthCustomScopeApp'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOauthToken':
          summary: 'Get Oauth Token'
          description: 'Get oauth token with the given oauth token id.'
          entityName: 'OauthToken'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetObjectName1__ChangeEvent':
          summary: 'Get Change Event: label1'
          description: 'Get change event: label1 with the given change event: label1 id.'
          entityName: 'ObjectName1__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetObjectName2__ChangeEvent':
          summary: 'Get Change Event: label2InDevelopment'
          description: 'Get change event: label2indevelopment with the given change event:
            label2indevelopment id.'
          entityName: 'ObjectName2__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetObjectName2__History':
          summary: 'Get History: label2InDevelopment'
          description: 'Get history: label2indevelopment with the given history: label2indevelopment
            id.'
          entityName: 'ObjectName2__History'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetObjectPermissions':
          summary: 'Get Object Permissions'
          description: 'Get object permissions with the given object permissions id.'
          entityName: 'ObjectPermissions'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOnboardingMetrics':
          summary: 'Get Onboarding Metrics'
          description: 'Get onboarding metrics with the given onboarding metrics id.'
          entityName: 'OnboardingMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpenActivity':
          summary: 'Get Open Activity'
          description: 'Get open activity with the given open activity id.'
          entityName: 'OpenActivity'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunity':
          summary: 'Get Opportunity'
          description: 'Get opportunity with the given opportunity id.'
          entityName: 'Opportunity'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityChangeEvent':
          summary: 'Get Opportunity Change Event'
          description: 'Get opportunity change event with the given opportunity change event
            id.'
          entityName: 'OpportunityChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityCompetitor':
          summary: 'Get Opportunity: Competitor'
          description: 'Get opportunity: competitor with the given opportunity: competitor
            id.'
          entityName: 'OpportunityCompetitor'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityContactRole':
          summary: 'Get Opportunity Contact Role'
          description: 'Get opportunity contact role with the given opportunity contact
            role id.'
          entityName: 'OpportunityContactRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityContactRoleChangeEvent':
          summary: 'Get Opportunity Contact Role Change Event'
          description: 'Get opportunity contact role change event with the given opportunity
            contact role change event id.'
          entityName: 'OpportunityContactRoleChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityFieldHistory':
          summary: 'Get Opportunity Field History'
          description: 'Get opportunity field history with the given opportunity field history
            id.'
          entityName: 'OpportunityFieldHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityHistory':
          summary: 'Get Opportunity History'
          description: 'Get opportunity history with the given opportunity history id.'
          entityName: 'OpportunityHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityLineItem':
          summary: 'Get Opportunity Product'
          description: 'Get opportunity product with the given opportunity product id.'
          entityName: 'OpportunityLineItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityPartner':
          summary: 'Get Opportunity Partner'
          description: 'Get opportunity partner with the given opportunity partner id.'
          entityName: 'OpportunityPartner'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityShare':
          summary: 'Get Opportunity Share'
          description: 'Get opportunity share with the given opportunity share id.'
          entityName: 'OpportunityShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOpportunityStage':
          summary: 'Get Opportunity Stage'
          description: 'Get opportunity stage with the given opportunity stage id.'
          entityName: 'OpportunityStage'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgDeleteRequest':
          summary: 'Get Org Delete Request'
          description: 'Get org delete request with the given org delete request id.'
          entityName: 'OrgDeleteRequest'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgDeleteRequestShare':
          summary: 'Get Org Delete Request Share'
          description: 'Get org delete request share with the given org delete request share
            id.'
          entityName: 'OrgDeleteRequestShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgEmailAddressSecurity':
          summary: 'Get Organization Email Address Security'
          description: 'Get organization email address security with the given organization
            email address security id.'
          entityName: 'OrgEmailAddressSecurity'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgLifecycleNotification':
          summary: 'Get Org Lifecycle Notification'
          description: 'Get org lifecycle notification with the given org lifecycle notification
            id.'
          entityName: 'OrgLifecycleNotification'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgMetric':
          summary: 'Get Org Metric'
          description: 'Get org metric with the given org metric id.'
          entityName: 'OrgMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgMetricScanResult':
          summary: 'Get Org Metric Scan Result'
          description: 'Get org metric scan result with the given org metric scan result
            id.'
          entityName: 'OrgMetricScanResult'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgMetricScanSummary':
          summary: 'Get Org Metric Scan Summary'
          description: 'Get org metric scan summary with the given org metric scan summary
            id.'
          entityName: 'OrgMetricScanSummary'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrgWideEmailAddress':
          summary: 'Get Organization-wide From Email Address'
          description: 'Get organization-wide from email address with the given organization-wide
            from email address id.'
          entityName: 'OrgWideEmailAddress'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOrganization':
          summary: 'Get Organization'
          description: 'Get organization with the given organization id.'
          entityName: 'Organization'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOutgoingEmail':
          summary: 'Get Outgoing Email'
          description: 'Get outgoing email with the given outgoing email id.'
          entityName: 'OutgoingEmail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOutgoingEmailRelation':
          summary: 'Get Outgoing Email Relation'
          description: 'Get outgoing email relation with the given outgoing email relation
            id.'
          entityName: 'OutgoingEmailRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOwnedContentDocument':
          summary: 'Get User Owned File'
          description: 'Get user owned file with the given user owned file id.'
          entityName: 'OwnedContentDocument'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetOwnerChangeOptionInfo':
          summary: 'Get Change Owner Option Info'
          description: 'Get change owner option info with the given change owner option
            info id.'
          entityName: 'OwnerChangeOptionInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPackageLicense':
          summary: 'Get Package License'
          description: 'Get package license with the given package license id.'
          entityName: 'PackageLicense'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPartner':
          summary: 'Get Partner'
          description: 'Get partner with the given partner id.'
          entityName: 'Partner'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPartnerRole':
          summary: 'Get Partner Role Value'
          description: 'Get partner role value with the given partner role value id.'
          entityName: 'PartnerRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPartyConsent':
          summary: 'Get Party Consent'
          description: 'Get party consent with the given party consent id.'
          entityName: 'PartyConsent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPartyConsentChangeEvent':
          summary: 'Get Party Consent Change Event'
          description: 'Get party consent change event with the given party consent change
            event id.'
          entityName: 'PartyConsentChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPartyConsentHistory':
          summary: 'Get Party Consent  History'
          description: 'Get party consent  history with the given party consent  history
            id.'
          entityName: 'PartyConsentHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPartyConsentShare':
          summary: 'Get Party Consent Share'
          description: 'Get party consent share with the given party consent share id.'
          entityName: 'PartyConsentShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPeriod':
          summary: 'Get Period'
          description: 'Get period with the given period id.'
          entityName: 'Period'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSet':
          summary: 'Get Permission Set'
          description: 'Get permission set with the given permission set id.'
          entityName: 'PermissionSet'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSetAssignment':
          summary: 'Get Permission Set Assignment'
          description: 'Get permission set assignment with the given permission set assignment
            id.'
          entityName: 'PermissionSetAssignment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSetEvent':
          summary: 'Get Permission Set Event'
          description: 'Get permission set event with the given permission set event id.'
          entityName: 'PermissionSetEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSetEventStore':
          summary: 'Get Permission Set Event Store '
          description: 'Get permission set event store  with the given permission set event
            store  id.'
          entityName: 'PermissionSetEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSetLicense':
          summary: 'Get Permission Set License'
          description: 'Get permission set license with the given permission set license
            id.'
          entityName: 'PermissionSetLicense'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSetLicenseAssign':
          summary: 'Get Permission Set License Assignment'
          description: 'Get permission set license assignment with the given permission
            set license assignment id.'
          entityName: 'PermissionSetLicenseAssign'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPermissionSetTabSetting':
          summary: 'Get Permission Set Tab Setting'
          description: 'Get permission set tab setting with the given permission set tab
            setting id.'
          entityName: 'PermissionSetTabSetting'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPicklistValueInfo':
          summary: 'Get Picklist Value Info'
          description: 'Get picklist value info with the given picklist value info id.'
          entityName: 'PicklistValueInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPlatformAction':
          summary: 'Get Platform Action'
          description: 'Get platform action with the given platform action id.'
          entityName: 'PlatformAction'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPlatformCachePartition':
          summary: 'Get Platform Cache Partition'
          description: 'Get platform cache partition with the given platform cache partition
            id.'
          entityName: 'PlatformCachePartition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPlatformCachePartitionType':
          summary: 'Get Platform Cache Partition Type'
          description: 'Get platform cache partition type with the given platform cache
            partition type id.'
          entityName: 'PlatformCachePartitionType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPlatformEventUsageMetric':
          summary: 'Get Platform Event Usage Metric'
          description: 'Get platform event usage metric with the given platform event usage
            metric id.'
          entityName: 'PlatformEventUsageMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPlatformStatusAlertEvent':
          summary: 'Get Platform Status Alert Event'
          description: 'Get platform status alert event with the given platform status alert
            event id.'
          entityName: 'PlatformStatusAlertEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPolicy__ChangeEvent':
          summary: 'Get Change Event: Policy'
          description: 'Get change event: policy with the given change event: policy id.'
          entityName: 'Policy__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPricebook2':
          summary: 'Get Price Book'
          description: 'Get price book with the given price book id.'
          entityName: 'Pricebook2'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPricebook2ChangeEvent':
          summary: 'Get Price Book Change Event'
          description: 'Get price book change event with the given price book change event
            id.'
          entityName: 'Pricebook2ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPricebook2History':
          summary: 'Get Price Book History'
          description: 'Get price book history with the given price book history id.'
          entityName: 'Pricebook2History'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPricebookEntry':
          summary: 'Get Price Book Entry'
          description: 'Get price book entry with the given price book entry id.'
          entityName: 'PricebookEntry'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPricebookEntryChangeEvent':
          summary: 'Get Price Book Entry Change Event'
          description: 'Get price book entry change event with the given price book entry
            change event id.'
          entityName: 'PricebookEntryChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPricebookEntryHistory':
          summary: 'Get Price Book Entry History'
          description: 'Get price book entry history with the given price book entry history
            id.'
          entityName: 'PricebookEntryHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessDefinition':
          summary: 'Get Process Definition'
          description: 'Get process definition with the given process definition id.'
          entityName: 'ProcessDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessFlowMigration':
          summary: 'Get Process Flow Migration'
          description: 'Get process flow migration with the given process flow migration
            id.'
          entityName: 'ProcessFlowMigration'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessInstance':
          summary: 'Get Process Instance'
          description: 'Get process instance with the given process instance id.'
          entityName: 'ProcessInstance'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessInstanceHistory':
          summary: 'Get Process Instance History'
          description: 'Get process instance history with the given process instance history
            id.'
          entityName: 'ProcessInstanceHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessInstanceNode':
          summary: 'Get Process Instance Node'
          description: 'Get process instance node with the given process instance node id.'
          entityName: 'ProcessInstanceNode'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessInstanceStep':
          summary: 'Get Process Instance Step'
          description: 'Get process instance step with the given process instance step id.'
          entityName: 'ProcessInstanceStep'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessInstanceWorkitem':
          summary: 'Get Approval Request'
          description: 'Get approval request with the given approval request id.'
          entityName: 'ProcessInstanceWorkitem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProcessNode':
          summary: 'Get Process Node'
          description: 'Get process node with the given process node id.'
          entityName: 'ProcessNode'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProduct2':
          summary: 'Get Product'
          description: 'Get product with the given product id.'
          entityName: 'Product2'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProduct2ChangeEvent':
          summary: 'Get Product Change Event'
          description: 'Get product change event with the given product change event id.'
          entityName: 'Product2ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProduct2History':
          summary: 'Get Product History'
          description: 'Get product history with the given product history id.'
          entityName: 'Product2History'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProductConsumptionSchedule':
          summary: 'Get Product Consumption Schedule'
          description: 'Get product consumption schedule with the given product consumption
            schedule id.'
          entityName: 'ProductConsumptionSchedule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetProfile':
          summary: 'Get Profile'
          description: 'Get profile with the given profile id.'
          entityName: 'Profile'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPrompt':
          summary: 'Get Prompt'
          description: 'Get prompt with the given prompt id.'
          entityName: 'Prompt'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPromptAction':
          summary: 'Get Prompt Action'
          description: 'Get prompt action with the given prompt action id.'
          entityName: 'PromptAction'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPromptActionShare':
          summary: 'Get Prompt Action Share'
          description: 'Get prompt action share with the given prompt action share id.'
          entityName: 'PromptActionShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPromptError':
          summary: 'Get Prompt Error'
          description: 'Get prompt error with the given prompt error id.'
          entityName: 'PromptError'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPromptErrorShare':
          summary: 'Get Prompt Error Share'
          description: 'Get prompt error share with the given prompt error share id.'
          entityName: 'PromptErrorShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPromptVersion':
          summary: 'Get Prompt Version'
          description: 'Get prompt version with the given prompt version id.'
          entityName: 'PromptVersion'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPublisher':
          summary: 'Get Publisher'
          description: 'Get publisher with the given publisher id.'
          entityName: 'Publisher'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetPushTopic':
          summary: 'Get Push Topic'
          description: 'Get push topic with the given push topic id.'
          entityName: 'PushTopic'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuestion':
          summary: 'Get Question'
          description: 'Get question with the given question id.'
          entityName: 'Question'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuestionDataCategorySelection':
          summary: 'Get Question Data Category Selection'
          description: 'Get question data category selection with the given question data
            category selection id.'
          entityName: 'QuestionDataCategorySelection'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuestionReportAbuse':
          summary: 'Get Question Report Abuse'
          description: 'Get question report abuse with the given question report abuse id.'
          entityName: 'QuestionReportAbuse'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuestionSubscription':
          summary: 'Get Question Subscription'
          description: 'Get question subscription with the given question subscription id.'
          entityName: 'QuestionSubscription'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQueueSobject':
          summary: 'Get Queue sObject'
          description: 'Get queue sobject with the given queue sobject id.'
          entityName: 'QueueSobject'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuickText':
          summary: 'Get Quick Text'
          description: 'Get quick text with the given quick text id.'
          entityName: 'QuickText'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuickTextChangeEvent':
          summary: 'Get Quick Text Change Event'
          description: 'Get quick text change event with the given quick text change event
            id.'
          entityName: 'QuickTextChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuickTextHistory':
          summary: 'Get Quick Text History'
          description: 'Get quick text history with the given quick text history id.'
          entityName: 'QuickTextHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuickTextShare':
          summary: 'Get Quick Text Share'
          description: 'Get quick text share with the given quick text share id.'
          entityName: 'QuickTextShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuickTextUsage':
          summary: 'Get Quick Text Usage'
          description: 'Get quick text usage with the given quick text usage id.'
          entityName: 'QuickTextUsage'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetQuickTextUsageShare':
          summary: 'Get Quick Text Usage Share'
          description: 'Get quick text usage share with the given quick text usage share
            id.'
          entityName: 'QuickTextUsageShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRanjit_Custom_Object__ChangeEvent':
          summary: 'Get Change Event: Ranjit Custom Object'
          description: 'Get change event: ranjit custom object with the given change event:
            ranjit custom object id.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecentlyViewed':
          summary: 'Get Recently Viewed'
          description: 'Get recently viewed with the given recently viewed id.'
          entityName: 'RecentlyViewed'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecommendation':
          summary: 'Get Recommendation'
          description: 'Get recommendation with the given recommendation id.'
          entityName: 'Recommendation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecommendationChangeEvent':
          summary: 'Get Recommendation Change Event'
          description: 'Get recommendation change event with the given recommendation change
            event id.'
          entityName: 'RecommendationChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecommendationResponse':
          summary: 'Get Recommendation Response'
          description: 'Get recommendation response with the given recommendation response
            id.'
          entityName: 'RecommendationResponse'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecordAction':
          summary: 'Get RecordAction'
          description: 'Get recordaction with the given recordaction id.'
          entityName: 'RecordAction'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecordActionHistory':
          summary: 'Get RecordActionHistory'
          description: 'Get recordactionhistory with the given recordactionhistory id.'
          entityName: 'RecordActionHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRecordType':
          summary: 'Get Record Type'
          description: 'Get record type with the given record type id.'
          entityName: 'RecordType'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRedirectWhitelistUrl':
          summary: 'Get Allow URL for Redirects'
          description: 'Get allow url for redirects with the given allow url for redirects
            id.'
          entityName: 'RedirectWhitelistUrl'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRelatedListColumnDefinition':
          summary: 'Get Related List Column Definition'
          description: 'Get related list column definition with the given related list column
            definition id.'
          entityName: 'RelatedListColumnDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRelatedListDefinition':
          summary: 'Get Related List Definition'
          description: 'Get related list definition with the given related list definition
            id.'
          entityName: 'RelatedListDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRelationshipDomain':
          summary: 'Get Relationship Domain'
          description: 'Get relationship domain with the given relationship domain id.'
          entityName: 'RelationshipDomain'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetRelationshipInfo':
          summary: 'Get Relationship'
          description: 'Get relationship with the given relationship id.'
          entityName: 'RelationshipInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReply':
          summary: 'Get Reply'
          description: 'Get reply with the given reply id.'
          entityName: 'Reply'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReplyReportAbuse':
          summary: 'Get Reply Report Abuse'
          description: 'Get reply report abuse with the given reply report abuse id.'
          entityName: 'ReplyReportAbuse'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReport':
          summary: 'Get Report'
          description: 'Get report with the given report id.'
          entityName: 'Report'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReportAnomalyEvent':
          summary: 'Get Report Anomaly Event'
          description: 'Get report anomaly event with the given report anomaly event id.'
          entityName: 'ReportAnomalyEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReportAnomalyEventStore':
          summary: 'Get Report Anomaly Event Store'
          description: 'Get report anomaly event store with the given report anomaly event
            store id.'
          entityName: 'ReportAnomalyEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReportEvent':
          summary: 'Get Report Event'
          description: 'Get report event with the given report event id.'
          entityName: 'ReportEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetReportEventStream':
          summary: 'Get Report Event Stream'
          description: 'Get report event stream with the given report event stream id.'
          entityName: 'ReportEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSamlSsoConfig':
          summary: 'Get SAML Single Sign-On Setting'
          description: 'Get saml single sign-on setting with the given saml single sign-on
            setting id.'
          entityName: 'SamlSsoConfig'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSampleApplication__ChangeEvent':
          summary: 'Get Change Event: SampleApplication'
          description: 'Get change event: sampleapplication with the given change event:
            sampleapplication id.'
          entityName: 'SampleApplication__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetScontrol':
          summary: 'Get Custom S-Control'
          description: 'Get custom s-control with the given custom s-control id.'
          entityName: 'Scontrol'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetScorecard':
          summary: 'Get Scorecard'
          description: 'Get scorecard with the given scorecard id.'
          entityName: 'Scorecard'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetScorecardAssociation':
          summary: 'Get Scorecard Association'
          description: 'Get scorecard association with the given scorecard association id.'
          entityName: 'ScorecardAssociation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetScorecardMetric':
          summary: 'Get Scorecard Metric'
          description: 'Get scorecard metric with the given scorecard metric id.'
          entityName: 'ScorecardMetric'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetScorecardShare':
          summary: 'Get Scorecard Share'
          description: 'Get scorecard share with the given scorecard share id.'
          entityName: 'ScorecardShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSearchLayout':
          summary: 'Get Search Layout'
          description: 'Get search layout with the given search layout id.'
          entityName: 'SearchLayout'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSearchPromotionRule':
          summary: 'Get Promoted Search Term'
          description: 'Get promoted search term with the given promoted search term id.'
          entityName: 'SearchPromotionRule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSecurityCustomBaseline':
          summary: 'Get Security Custom Baseline'
          description: 'Get security custom baseline with the given security custom baseline
            id.'
          entityName: 'SecurityCustomBaseline'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSeller':
          summary: 'Get Seller'
          description: 'Get seller with the given seller id.'
          entityName: 'Seller'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSellerHistory':
          summary: 'Get Seller History'
          description: 'Get seller history with the given seller history id.'
          entityName: 'SellerHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSellerShare':
          summary: 'Get Seller Share'
          description: 'Get seller share with the given seller share id.'
          entityName: 'SellerShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSessionHijackingEvent':
          summary: 'Get Session Hijacking Event'
          description: 'Get session hijacking event with the given session hijacking event
            id.'
          entityName: 'SessionHijackingEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSessionHijackingEventStore':
          summary: 'Get Session Hijacking Event Store'
          description: 'Get session hijacking event store with the given session hijacking
            event store id.'
          entityName: 'SessionHijackingEventStore'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSessionPermSetActivation':
          summary: 'Get Session Permission Set Activation'
          description: 'Get session permission set activation with the given session permission
            set activation id.'
          entityName: 'SessionPermSetActivation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSetupAssistantStep':
          summary: 'Get Setup Assistant Step'
          description: 'Get setup assistant step with the given setup assistant step id.'
          entityName: 'SetupAssistantStep'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSetupAuditTrail':
          summary: 'Get Setup Audit Trail Entry'
          description: 'Get setup audit trail entry with the given setup audit trail entry
            id.'
          entityName: 'SetupAuditTrail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSetupEntityAccess':
          summary: 'Get Setup Entity Access'
          description: 'Get setup entity access with the given setup entity access id.'
          entityName: 'SetupEntityAccess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSite':
          summary: 'Get Site'
          description: 'Get site with the given site id.'
          entityName: 'Site'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSiteDetail':
          summary: 'Get Site Detail'
          description: 'Get site detail with the given site detail id.'
          entityName: 'SiteDetail'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSiteHistory':
          summary: 'Get Site History'
          description: 'Get site history with the given site history id.'
          entityName: 'SiteHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSiteIframeWhiteListUrl':
          summary: 'Get Trusted Domains for Inline Frames'
          description: 'Get trusted domains for inline frames with the given trusted domains
            for inline frames id.'
          entityName: 'SiteIframeWhiteListUrl'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSiteRedirectMapping':
          summary: 'Get Site Redirect Mapping'
          description: 'Get site redirect mapping with the given site redirect mapping id.'
          entityName: 'SiteRedirectMapping'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSolution':
          summary: 'Get Solution'
          description: 'Get solution with the given solution id.'
          entityName: 'Solution'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSolutionHistory':
          summary: 'Get Solution History'
          description: 'Get solution history with the given solution history id.'
          entityName: 'SolutionHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetSolutionStatus':
          summary: 'Get Solution Status Value'
          description: 'Get solution status value with the given solution status value id.'
          entityName: 'SolutionStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetStamp':
          summary: 'Get Stamp'
          description: 'Get stamp with the given stamp id.'
          entityName: 'Stamp'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetStampAssignment':
          summary: 'Get Stamp Assignment'
          description: 'Get stamp assignment with the given stamp assignment id.'
          entityName: 'StampAssignment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetStaticResource':
          summary: 'Get Static Resource'
          description: 'Get static resource with the given static resource id.'
          entityName: 'StaticResource'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetStreamingChannel':
          summary: 'Get Streaming Channel'
          description: 'Get streaming channel with the given streaming channel id.'
          entityName: 'StreamingChannel'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetStreamingChannelShare':
          summary: 'Get Streaming Channel Share'
          description: 'Get streaming channel share with the given streaming channel share
            id.'
          entityName: 'StreamingChannelShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTabDefinition':
          summary: 'Get Tab Definition'
          description: 'Get tab definition with the given tab definition id.'
          entityName: 'TabDefinition'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTask':
          summary: 'Get Task'
          description: 'Get task with the given task id.'
          entityName: 'Task'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTaskChangeEvent':
          summary: 'Get Task Change Event'
          description: 'Get task change event with the given task change event id.'
          entityName: 'TaskChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTaskPriority':
          summary: 'Get Task Priority Value'
          description: 'Get task priority value with the given task priority value id.'
          entityName: 'TaskPriority'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTaskStatus':
          summary: 'Get Task Status Value'
          description: 'Get task status value with the given task status value id.'
          entityName: 'TaskStatus'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTenantSecret':
          summary: 'Get Tenant Secret'
          description: 'Get tenant secret with the given tenant secret id.'
          entityName: 'TenantSecret'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTenantUsageEntitlement':
          summary: 'Get Tenant Usage Entitlement'
          description: 'Get tenant usage entitlement with the given tenant usage entitlement
            id.'
          entityName: 'TenantUsageEntitlement'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTestCustomObject__ChangeEvent':
          summary: 'Get Change Event: TestCustomObjectLabel'
          description: 'Get change event: testcustomobjectlabel with the given change event:
            testcustomobjectlabel id.'
          entityName: 'TestCustomObject__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTestObject__ChangeEvent':
          summary: 'Get Change Event: TestObject'
          description: 'Get change event: testobject with the given change event: testobject
            id.'
          entityName: 'TestObject__ChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTestSuiteMembership':
          summary: 'Get Test Suite Membership'
          description: 'Get test suite membership with the given test suite membership id.'
          entityName: 'TestSuiteMembership'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetThirdPartyAccountLink':
          summary: 'Get Third Party Account Link'
          description: 'Get third party account link with the given third party account
            link id.'
          entityName: 'ThirdPartyAccountLink'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetThreatDetectionFeedback':
          summary: 'Get Threat Detection Feedback'
          description: 'Get threat detection feedback with the given threat detection feedback
            id.'
          entityName: 'ThreatDetectionFeedback'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTodayGoal':
          summary: 'Get Goal'
          description: 'Get goal with the given goal id.'
          entityName: 'TodayGoal'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTodayGoalShare':
          summary: 'Get Goal Share'
          description: 'Get goal share with the given goal share id.'
          entityName: 'TodayGoalShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTopic':
          summary: 'Get Topic'
          description: 'Get topic with the given topic id.'
          entityName: 'Topic'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTopicAssignment':
          summary: 'Get Topic Assignment'
          description: 'Get topic assignment with the given topic assignment id.'
          entityName: 'TopicAssignment'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTransactionSecurityPolicy':
          summary: 'Get Transaction Security Policy'
          description: 'Get transaction security policy with the given transaction security
            policy id.'
          entityName: 'TransactionSecurityPolicy'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetTranslation':
          summary: 'Get Language Translation'
          description: 'Get language translation with the given language translation id.'
          entityName: 'Translation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUiFormulaCriterion':
          summary: 'Get Ui Formula Criterion'
          description: 'Get ui formula criterion with the given ui formula criterion id.'
          entityName: 'UiFormulaCriterion'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUiFormulaRule':
          summary: 'Get Ui Formula Rule'
          description: 'Get ui formula rule with the given ui formula rule id.'
          entityName: 'UiFormulaRule'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUndecidedEventRelation':
          summary: 'Get Undecided Event Relation'
          description: 'Get undecided event relation with the given undecided event relation
            id.'
          entityName: 'UndecidedEventRelation'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUriEvent':
          summary: 'Get URI Event'
          description: 'Get uri event with the given uri event id.'
          entityName: 'UriEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUriEventStream':
          summary: 'Get URI Event Stream '
          description: 'Get uri event stream  with the given uri event stream  id.'
          entityName: 'UriEventStream'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUser':
          summary: 'Get User'
          description: 'Get user with the given user id.'
          entityName: 'User'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserAppInfo':
          summary: 'Get Last Used App'
          description: 'Get last used app with the given last used app id.'
          entityName: 'UserAppInfo'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserAppMenuCustomization':
          summary: 'Get UserAppMenuCustomization'
          description: 'Get userappmenucustomization with the given userappmenucustomization
            id.'
          entityName: 'UserAppMenuCustomization'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserAppMenuCustomizationShare':
          summary: 'Get UserAppMenuCustomization Share'
          description: 'Get userappmenucustomization share with the given userappmenucustomization
            share id.'
          entityName: 'UserAppMenuCustomizationShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserAppMenuItem':
          summary: 'Get Application'
          description: 'Get application with the given application id.'
          entityName: 'UserAppMenuItem'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserChangeEvent':
          summary: 'Get User Change Event'
          description: 'Get user change event with the given user change event id.'
          entityName: 'UserChangeEvent'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserEmailPreferredPerson':
          summary: 'Get User Email Preferred Person'
          description: 'Get user email preferred person with the given user email preferred
            person id.'
          entityName: 'UserEmailPreferredPerson'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserEmailPreferredPersonShare':
          summary: 'Get User Email Preferred Person Share'
          description: 'Get user email preferred person share with the given user email
            preferred person share id.'
          entityName: 'UserEmailPreferredPersonShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserEntityAccess':
          summary: 'Get User Entity Access'
          description: 'Get user entity access with the given user entity access id.'
          entityName: 'UserEntityAccess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserFieldAccess':
          summary: 'Get User Field Access'
          description: 'Get user field access with the given user field access id.'
          entityName: 'UserFieldAccess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserLicense':
          summary: 'Get User License'
          description: 'Get user license with the given user license id.'
          entityName: 'UserLicense'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserListView':
          summary: 'Get User List View'
          description: 'Get user list view with the given user list view id.'
          entityName: 'UserListView'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserListViewCriterion':
          summary: 'Get User List View Criteria'
          description: 'Get user list view criteria with the given user list view criteria
            id.'
          entityName: 'UserListViewCriterion'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserLogin':
          summary: 'Get User Login'
          description: 'Get user login with the given user login id.'
          entityName: 'UserLogin'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserPackageLicense':
          summary: 'Get User Package License'
          description: 'Get user package license with the given user package license id.'
          entityName: 'UserPackageLicense'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserPermissionAccess':
          summary: 'Get User Permission Access'
          description: 'Get user permission access with the given user permission access
            id.'
          entityName: 'UserPermissionAccess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserPreference':
          summary: 'Get User Preference'
          description: 'Get user preference with the given user preference id.'
          entityName: 'UserPreference'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvAccount':
          summary: 'Get User Provisioning Account'
          description: 'Get user provisioning account with the given user provisioning account
            id.'
          entityName: 'UserProvAccount'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvAccountStaging':
          summary: 'Get User Provisioning Account Staging'
          description: 'Get user provisioning account staging with the given user provisioning
            account staging id.'
          entityName: 'UserProvAccountStaging'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvMockTarget':
          summary: 'Get User Provisioning Mock Target'
          description: 'Get user provisioning mock target with the given user provisioning
            mock target id.'
          entityName: 'UserProvMockTarget'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvisioningConfig':
          summary: 'Get User Provisioning Config'
          description: 'Get user provisioning config with the given user provisioning config
            id.'
          entityName: 'UserProvisioningConfig'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvisioningLog':
          summary: 'Get User Provisioning Log'
          description: 'Get user provisioning log with the given user provisioning log id.'
          entityName: 'UserProvisioningLog'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvisioningRequest':
          summary: 'Get User Provisioning Request'
          description: 'Get user provisioning request with the given user provisioning request
            id.'
          entityName: 'UserProvisioningRequest'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserProvisioningRequestShare':
          summary: 'Get User Provisioning Request Share'
          description: 'Get user provisioning request share with the given user provisioning
            request share id.'
          entityName: 'UserProvisioningRequestShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserRecordAccess':
          summary: 'Get User Record Access'
          description: 'Get user record access with the given user record access id.'
          entityName: 'UserRecordAccess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserRole':
          summary: 'Get Role'
          description: 'Get role with the given role id.'
          entityName: 'UserRole'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserSetupEntityAccess':
          summary: 'Get User Setup Entity Access'
          description: 'Get user setup entity access with the given user setup entity access
            id.'
          entityName: 'UserSetupEntityAccess'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetUserShare':
          summary: 'Get User Share'
          description: 'Get user share with the given user share id.'
          entityName: 'UserShare'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetVerificationHistory':
          summary: 'Get Identity Verification History'
          description: 'Get identity verification history with the given identity verification
            history id.'
          entityName: 'VerificationHistory'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetVisualforceAccessMetrics':
          summary: 'Get Visualforce Access Metric'
          description: 'Get visualforce access metric with the given visualforce access
            metric id.'
          entityName: 'VisualforceAccessMetrics'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetVote':
          summary: 'Get Vote'
          description: 'Get vote with the given vote id.'
          entityName: 'Vote'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'GetWebLink':
          summary: 'Get Custom Button or Link'
          description: 'Get custom button or link with the given custom button or link id.'
          entityName: 'WebLink'
          recordXpath: ''
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - name: accId
          in: path
          description: 'The id.'
          required: true
          x-adeptia-visibility:
            visible: true
            //fetchFrom: trigger
            paramName: accId
          schema:
            type: string
        - in: 'path'
          name: 'entityName'
          description: 'The Salesforce Object entity Name.'
          required: true
          x-adeptia-visibility:
            visible: false
            fetchFrom: 'trigger'
            paramName: 'entityName'
          schema:
            type: string
  /services/data/v58.0/query:
    get:
      tags:
        - AcceptedEventRelation
        - Account
        - AccountContactRole
        - AccountHistory
        - AccountPartner
        - AccountShare
        - ActionLinkGroupTemplate
        - ActionLinkTemplate
        - ActiveFeatureLicenseMetric
        - ActivePermSetLicenseMetric
        - ActiveProfileMetric
        - ActivityFieldHistory
        - AdditionalNumber
        - ApexClass
        - ApexComponent
        - ApexEmailNotification
        - ApexLog
        - ApexPage
        - ApexPageInfo
        - ApexTestQueueItem
        - ApexTestResult
        - ApexTestResultLimits
        - ApexTestRunResult
        - ApexTestSuite
        - ApexTrigger
        - ApexTypeImplementor
        - ApiAnomalyEventStore
        - ApiEvent
        - AppAnalyticsQueryRequest
        - AppDefinition
        - AppMenuItem
        - AppTabMember
        - Approval
        - Asset
        - AssetHistory
        - AssetRelationship
        - AssetRelationshipHistory
        - AssignmentRule
        - AsyncApexJob
        - Attachment
        - AuraDefinition
        - AuraDefinitionBundle
        - AuraDefinitionBundleInfo
        - AuraDefinitionInfo
        - AuthConfig
        - AuthConfigProviders
        - AuthProvider
        - AuthSession
        - AuthorizationForm
        - AuthorizationFormConsent
        - AuthorizationFormConsentHistory
        - AuthorizationFormConsentShare
        - AuthorizationFormDataUse
        - AuthorizationFormDataUseHistory
        - AuthorizationFormDataUseShare
        - AuthorizationFormHistory
        - AuthorizationFormShare
        - AuthorizationFormText
        - AuthorizationFormTextHistory
        - BackgroundOperation
        - BrandTemplate
        - BrandingSet
        - BrandingSetProperty
        - BriefcaseAssignment
        - BriefcaseDefinition
        - BriefcaseRule
        - BriefcaseRuleFilter
        - BulkApiResultEventStore
        - BusinessBrand
        - BusinessBrandShare
        - BusinessHours
        - BusinessProcess
        - Calendar
        - CalendarView
        - CalendarViewShare
        - CallCenter
        - CallCoachingMediaProvider
        - Campaign
        - CampaignHistory
        - CampaignMember
        - CampaignMemberStatus
        - CampaignShare
        - Case
        - CaseComment
        - CaseContactRole
        - CaseHistory
        - CaseShare
        - CaseSolution
        - CaseStatus
        - CaseTeamMember
        - CaseTeamRole
        - CaseTeamTemplate
        - CaseTeamTemplateMember
        - CaseTeamTemplateRecord
        - CategoryData
        - CategoryNode
        - ChatterAnswersActivity
        - ChatterAnswersReputationLevel
        - ClientBrowser
        - ColorDefinition
        - CommSubscription
        - CommSubscriptionChannelType
        - CommSubscriptionChannelTypeHistory
        - CommSubscriptionChannelTypeShare
        - CommSubscriptionHistory
        - CommSubscriptionShare
        - Community
        - ConferenceNumber
        - ConnectedApplication
        - ConsumptionRate
        - ConsumptionRateHistory
        - ConsumptionSchedule
        - ConsumptionScheduleHistory
        - ConsumptionScheduleShare
        - Contact
        - ContactHistory
        - ContactPointTypeConsent
        - ContactPointTypeConsentHistory
        - ContactPointTypeConsentShare
        - ContactRequest
        - ContactRequestShare
        - ContactShare
        - ContentAsset
        - ContentDocument
        - ContentDocumentHistory
        - ContentDocumentLink
        - ContentFolder
        - ContentFolderItem
        - ContentFolderLink
        - ContentFolderMember
        - ContentNote
        - ContentVersion
        - ContentVersionHistory
        - ContentWorkspace
        - ContentWorkspaceDoc
        - ContentWorkspaceMember
        - ContentWorkspacePermission
        - Contract
        - ContractContactRole
        - ContractHistory
        - ContractStatus
        - CorsWhitelistEntry
        - CredentialStuffingEventStore
        - CronJobDetail
        - CronTrigger
        - CspTrustedSite
        - CustomBrand
        - CustomBrandAsset
        - CustomHelpMenuItem
        - CustomHelpMenuSection
        - CustomHttpHeader
        - CustomNotificationType
        - CustomObjectUserLicenseMetrics
        - CustomPermission
        - CustomPermissionDependency
        - Customer
        - CustomerShare
        - Dashboard
        - DashboardComponent
        - DataAssessmentFieldMetric
        - DataAssessmentMetric
        - DataAssessmentValueMetric
        - DataStatistics
        - DataType
        - DataUseLegalBasis
        - DataUseLegalBasisHistory
        - DataUseLegalBasisShare
        - DataUsePurpose
        - DataUsePurposeHistory
        - DataUsePurposeShare
        - DatacloudAddress
        - DeclinedEventRelation
        - DeleteEvent
        - Document
        - DocumentAttachmentMap
        - Domain
        - DomainSite
        - DuplicateRecordItem
        - DuplicateRecordSet
        - DuplicateRule
        - EmailCapture
        - EmailDomainFilter
        - EmailDomainKey
        - EmailMessage
        - EmailMessageRelation
        - EmailRelay
        - EmailServicesAddress
        - EmailServicesFunction
        - EmailTemplate
        - EmbeddedServiceDetail
        - EmbeddedServiceLabel
        - EngagementChannelType
        - EngagementChannelTypeHistory
        - EngagementChannelTypeShare
        - EntityDefinition
        - EntityParticle
        - Event
        - EventBusSubscriber
        - EventLogFile
        - EventRelation
        - EventRelayConfig
        - EventRelayFeedback
        - ExpressionFilter
        - ExpressionFilterCriteria
        - ExpressionSetView
        - ExternalDataSource
        - ExternalDataSrcDescriptor
        - ExternalDataUserAuth
        - ExternalEvent
        - ExternalEventMapping
        - ExternalEventMappingShare
        - FieldDefinition
        - FieldPermissions
        - FieldSecurityClassification
        - FileEventStore
        - FileSearchActivity
        - FiscalYearSettings
        - FlexQueueItem
        - FlowDefinitionView
        - FlowInterview
        - FlowInterviewLog
        - FlowInterviewLogEntry
        - FlowInterviewLogShare
        - FlowInterviewShare
        - FlowOrchestrationInstance
        - FlowOrchestrationInstanceShare
        - FlowOrchestrationStageInstance
        - FlowOrchestrationStageInstanceShare
        - FlowOrchestrationStepInstance
        - FlowOrchestrationStepInstanceShare
        - FlowOrchestrationWorkItem
        - FlowOrchestrationWorkItemShare
        - FlowRecordRelation
        - FlowStageRelation
        - FlowTestResult
        - FlowTestResultShare
        - FlowTestView
        - FlowVariableView
        - FlowVersionView
        - Folder
        - FormulaFunction
        - FormulaFunctionAllowedType
        - FormulaFunctionCategory
        - GrantedByLicense
        - Group
        - GroupMember
        - Holiday
        - IPAddressRange
        - IconDefinition
        - IdentityProviderEventStore
        - IdentityVerificationEvent
        - IdpEventLog
        - IframeWhiteListUrl
        - Image
        - ImageHistory
        - ImageShare
        - Individual
        - IndividualHistory
        - IndividualShare
        - InstalledMobileApp
        - Lead
        - LeadHistory
        - LeadShare
        - LeadStatus
        - LightningExitByPageMetrics
        - LightningExperienceTheme
        - LightningOnboardingConfig
        - LightningToggleMetrics
        - LightningUriEvent
        - LightningUsageByAppTypeMetrics
        - LightningUsageByBrowserMetrics
        - LightningUsageByFlexiPageMetrics
        - LightningUsageByPageMetrics
        - ListEmail
        - ListEmailIndividualRecipient
        - ListEmailRecipientSource
        - ListEmailShare
        - ListView
        - ListViewChart
        - ListViewChartInstance
        - ListViewEvent
        - LoginAsEvent
        - LoginEvent
        - LoginGeo
        - LoginHistory
        - LoginIp
        - LogoutEvent
        - Macro
        - MacroHistory
        - MacroInstruction
        - MacroShare
        - MacroUsage
        - MacroUsageShare
        - MailmergeTemplate
        - ManagedContent
        - ManagedContentChannel
        - ManagedContentSpace
        - ManagedContentVariant
        - MatchingInformation
        - MatchingRule
        - MatchingRuleItem
        - MobileApplicationDetail
        - MyDomainDiscoverableLogin
        - NamedCredential
        - Note
        - OauthCustomScope
        - OauthCustomScopeApp
        - OauthToken
        - ObjectName2__History
        - ObjectPermissions
        - OnboardingMetrics
        - Opportunity
        - OpportunityCompetitor
        - OpportunityContactRole
        - OpportunityFieldHistory
        - OpportunityHistory
        - OpportunityLineItem
        - OpportunityPartner
        - OpportunityShare
        - OpportunityStage
        - OrgDeleteRequest
        - OrgDeleteRequestShare
        - OrgEmailAddressSecurity
        - OrgMetric
        - OrgMetricScanResult
        - OrgMetricScanSummary
        - OrgWideEmailAddress
        - Organization
        - OutgoingEmail
        - OutgoingEmailRelation
        - OwnerChangeOptionInfo
        - PackageLicense
        - Partner
        - PartnerRole
        - PartyConsent
        - PartyConsentHistory
        - PartyConsentShare
        - Period
        - PermissionSet
        - PermissionSetAssignment
        - PermissionSetEventStore
        - PermissionSetLicense
        - PermissionSetLicenseAssign
        - PermissionSetTabSetting
        - PicklistValueInfo
        - PlatformAction
        - PlatformCachePartition
        - PlatformCachePartitionType
        - PlatformEventUsageMetric
        - Pricebook2
        - Pricebook2History
        - PricebookEntry
        - PricebookEntryHistory
        - ProcessDefinition
        - ProcessFlowMigration
        - ProcessInstance
        - ProcessInstanceNode
        - ProcessInstanceStep
        - ProcessInstanceWorkitem
        - ProcessNode
        - Product2
        - Product2History
        - ProductConsumptionSchedule
        - Profile
        - Prompt
        - PromptAction
        - PromptActionShare
        - PromptError
        - PromptErrorShare
        - PromptVersion
        - Publisher
        - PushTopic
        - Question
        - QuestionDataCategorySelection
        - QuestionReportAbuse
        - QuestionSubscription
        - QueueSobject
        - QuickText
        - QuickTextHistory
        - QuickTextShare
        - QuickTextUsage
        - QuickTextUsageShare
        - RecentlyViewed
        - Recommendation
        - RecommendationResponse
        - RecordAction
        - RecordActionHistory
        - RecordType
        - RedirectWhitelistUrl
        - RelatedListColumnDefinition
        - RelatedListDefinition
        - RelationshipDomain
        - RelationshipInfo
        - Reply
        - ReplyReportAbuse
        - Report
        - ReportAnomalyEventStore
        - ReportEvent
        - SamlSsoConfig
        - Scontrol
        - Scorecard
        - ScorecardAssociation
        - ScorecardMetric
        - ScorecardShare
        - SearchLayout
        - SearchPromotionRule
        - SecurityCustomBaseline
        - Seller
        - SellerHistory
        - SellerShare
        - SessionHijackingEventStore
        - SessionPermSetActivation
        - SetupAssistantStep
        - SetupAuditTrail
        - SetupEntityAccess
        - Site
        - SiteDetail
        - SiteHistory
        - SiteIframeWhiteListUrl
        - SiteRedirectMapping
        - Solution
        - SolutionHistory
        - SolutionStatus
        - Stamp
        - StampAssignment
        - StaticResource
        - StreamingChannel
        - StreamingChannelShare
        - TabDefinition
        - Task
        - TaskPriority
        - TaskStatus
        - TenantSecret
        - TenantUsageEntitlement
        - TestSuiteMembership
        - ThirdPartyAccountLink
        - ThreatDetectionFeedback
        - TodayGoal
        - TodayGoalShare
        - Topic
        - TopicAssignment
        - TransactionSecurityPolicy
        - Translation
        - UiFormulaCriterion
        - UiFormulaRule
        - UndecidedEventRelation
        - UriEvent
        - User
        - UserAppInfo
        - UserAppMenuCustomization
        - UserAppMenuCustomizationShare
        - UserAppMenuItem
        - UserEmailPreferredPerson
        - UserEmailPreferredPersonShare
        - UserEntityAccess
        - UserFieldAccess
        - UserLicense
        - UserListView
        - UserListViewCriterion
        - UserLogin
        - UserPackageLicense
        - UserPermissionAccess
        - UserPreference
        - UserProvAccount
        - UserProvAccountStaging
        - UserProvMockTarget
        - UserProvisioningConfig
        - UserProvisioningLog
        - UserProvisioningRequest
        - UserProvisioningRequestShare
        - UserRecordAccess
        - UserRole
        - UserSetupEntityAccess
        - UserShare
        - VerificationHistory
        - VisualforceAccessMetrics
        - Vote
        - WebLink
      summary: ''
      description: ''
      externalDocs:
        url: 'https://developer.salesforce.com/docs'
        x-adeptia-help:
          text: 'Help'
      operationId: 'sfQuery'
      parameters:
        - name: q
          in: query
          description: 'The SQL Query.'
          required: false
          x-adeptia-visibility:
            visible: true
            label: 'Query'
            fetchFrom: trigger
            paramName: query
      x-adeptia-trigger:
        'NewAcceptedEventRelation':
          summary: 'New Accepted Event Relation'
          description: 'Triggers when a new accepted event relation is created.'
          entityName: 'AcceptedEventRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AcceptedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAcceptedEventRelation':
          summary: 'New Or Updated Accepted Event Relation'
          description: 'Triggers when a  accepted event relation is created or existing
            accepted event relation is updated.'
          entityName: 'AcceptedEventRelation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AcceptedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAcceptedEventRelation':
          summary: 'All Accepted Event Relations'
          description: 'Retrieves the list of all records for selected accepted event relation
            entity.'
          entityName: 'AcceptedEventRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AcceptedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAccount':
          summary: 'New Account'
          description: 'Triggers when a new account is created.'
          entityName: 'Account'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Account'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAccount':
          summary: 'New Or Updated Account'
          description: 'Triggers when a  account is created or existing account is updated.'
          entityName: 'Account'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Account'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAccount':
          summary: 'All Accounts'
          description: 'Retrieves the list of all records for selected account entity.'
          entityName: 'Account'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Account'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAccountContactRole':
          summary: 'New Account Contact Role'
          description: 'Triggers when a new account contact role is created.'
          entityName: 'AccountContactRole'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AccountContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAccountContactRole':
          summary: 'New Or Updated Account Contact Role'
          description: 'Triggers when a  account contact role is created or existing account
            contact role is updated.'
          entityName: 'AccountContactRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AccountContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAccountContactRole':
          summary: 'All Account Contact Roles'
          description: 'Retrieves the list of all records for selected account contact
            role entity.'
          entityName: 'AccountContactRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AccountContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAccountHistory':
          summary: 'New Account History'
          description: 'Triggers when a new account history is created.'
          entityName: 'AccountHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AccountHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAccountHistory':
          summary: 'All Account Historys'
          description: 'Retrieves the list of all records for selected account history
            entity.'
          entityName: 'AccountHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AccountHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAccountPartner':
          summary: 'New Account Partner'
          description: 'Triggers when a new account partner is created.'
          entityName: 'AccountPartner'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AccountPartner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAccountPartner':
          summary: 'New Or Updated Account Partner'
          description: 'Triggers when a  account partner is created or existing account
            partner is updated.'
          entityName: 'AccountPartner'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AccountPartner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAccountPartner':
          summary: 'All Account Partners'
          description: 'Retrieves the list of all records for selected account partner
            entity.'
          entityName: 'AccountPartner'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AccountPartner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAccountShare':
          summary: 'New Or Updated Account Share'
          description: 'Triggers when a  account share is created or existing account share
            is updated.'
          entityName: 'AccountShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AccountShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAccountShare':
          summary: 'All Account Shares'
          description: 'Retrieves the list of all records for selected account share entity.'
          entityName: 'AccountShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AccountShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewActionLinkGroupTemplate':
          summary: 'New Action Link Group Template'
          description: 'Triggers when a new action link group template is created.'
          entityName: 'ActionLinkGroupTemplate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ActionLinkGroupTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedActionLinkGroupTemplate':
          summary: 'New Or Updated Action Link Group Template'
          description: 'Triggers when a  action link group template is created or existing
            action link group template is updated.'
          entityName: 'ActionLinkGroupTemplate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ActionLinkGroupTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllActionLinkGroupTemplate':
          summary: 'All Action Link Group Templates'
          description: 'Retrieves the list of all records for selected action link group
            template entity.'
          entityName: 'ActionLinkGroupTemplate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ActionLinkGroupTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewActionLinkTemplate':
          summary: 'New Action Link Template'
          description: 'Triggers when a new action link template is created.'
          entityName: 'ActionLinkTemplate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ActionLinkTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedActionLinkTemplate':
          summary: 'New Or Updated Action Link Template'
          description: 'Triggers when a  action link template is created or existing action
            link template is updated.'
          entityName: 'ActionLinkTemplate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ActionLinkTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllActionLinkTemplate':
          summary: 'All Action Link Templates'
          description: 'Retrieves the list of all records for selected action link template
            entity.'
          entityName: 'ActionLinkTemplate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ActionLinkTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllActiveFeatureLicenseMetric':
          summary: 'All Active Feature License Metrics'
          description: 'Retrieves the list of all records for selected active feature license
            metric entity.'
          entityName: 'ActiveFeatureLicenseMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ActiveFeatureLicenseMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllActivePermSetLicenseMetric':
          summary: 'All Active Permission Set License Metrics'
          description: 'Retrieves the list of all records for selected active permission
            set license metric entity.'
          entityName: 'ActivePermSetLicenseMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ActivePermSetLicenseMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllActiveProfileMetric':
          summary: 'All Active Profile Metrics'
          description: 'Retrieves the list of all records for selected active profile metric
            entity.'
          entityName: 'ActiveProfileMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ActiveProfileMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewActivityFieldHistory':
          summary: 'New Activity Field History'
          description: 'Triggers when a new activity field history is created.'
          entityName: 'ActivityFieldHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ActivityFieldHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedActivityFieldHistory':
          summary: 'New Or Updated Activity Field History'
          description: 'Triggers when a  activity field history is created or existing activity
            field history is updated.'
          entityName: 'ActivityFieldHistory'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ActivityFieldHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllActivityFieldHistory':
          summary: 'All Activity Field Historys'
          description: 'Retrieves the list of all records for selected activity field history
            entity.'
          entityName: 'ActivityFieldHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ActivityFieldHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAdditionalNumber':
          summary: 'New Additional Directory Number'
          description: 'Triggers when a new additional directory number is created.'
          entityName: 'AdditionalNumber'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AdditionalNumber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAdditionalNumber':
          summary: 'New Or Updated Additional Directory Number'
          description: 'Triggers when a  additional directory number is created or existing
            additional directory number is updated.'
          entityName: 'AdditionalNumber'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AdditionalNumber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAdditionalNumber':
          summary: 'All Additional Directory Numbers'
          description: 'Retrieves the list of all records for selected additional directory
            number entity.'
          entityName: 'AdditionalNumber'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AdditionalNumber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexClass':
          summary: 'New Apex Class'
          description: 'Triggers when a new apex class is created.'
          entityName: 'ApexClass'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexClass'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexClass':
          summary: 'New Or Updated Apex Class'
          description: 'Triggers when a  apex class is created or existing apex class is
            updated.'
          entityName: 'ApexClass'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexClass'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexClass':
          summary: 'All Apex Classs'
          description: 'Retrieves the list of all records for selected apex class entity.'
          entityName: 'ApexClass'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexClass'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexComponent':
          summary: 'New Visualforce Component'
          description: 'Triggers when a new visualforce component is created.'
          entityName: 'ApexComponent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexComponent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexComponent':
          summary: 'New Or Updated Visualforce Component'
          description: 'Triggers when a  visualforce component is created or existing visualforce
            component is updated.'
          entityName: 'ApexComponent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexComponent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexComponent':
          summary: 'All Visualforce Components'
          description: 'Retrieves the list of all records for selected visualforce component
            entity.'
          entityName: 'ApexComponent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexComponent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexEmailNotification':
          summary: 'New Apex Email Notification'
          description: 'Triggers when a new apex email notification is created.'
          entityName: 'ApexEmailNotification'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexEmailNotification'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexEmailNotification':
          summary: 'New Or Updated Apex Email Notification'
          description: 'Triggers when a  apex email notification is created or existing
            apex email notification is updated.'
          entityName: 'ApexEmailNotification'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexEmailNotification'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexEmailNotification':
          summary: 'All Apex Email Notifications'
          description: 'Retrieves the list of all records for selected apex email notification
            entity.'
          entityName: 'ApexEmailNotification'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexEmailNotification'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexLog':
          summary: 'New Or Updated Apex Debug Log'
          description: 'Triggers when a  apex debug log is created or existing apex debug
            log is updated.'
          entityName: 'ApexLog'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexLog':
          summary: 'All Apex Debug Logs'
          description: 'Retrieves the list of all records for selected apex debug log entity.'
          entityName: 'ApexLog'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexPage':
          summary: 'New Visualforce Page'
          description: 'Triggers when a new visualforce page is created.'
          entityName: 'ApexPage'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexPage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexPage':
          summary: 'New Or Updated Visualforce Page'
          description: 'Triggers when a  visualforce page is created or existing visualforce
            page is updated.'
          entityName: 'ApexPage'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexPage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexPage':
          summary: 'All Visualforce Pages'
          description: 'Retrieves the list of all records for selected visualforce page
            entity.'
          entityName: 'ApexPage'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexPage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexPageInfo':
          summary: 'New Apex Page Info'
          description: 'Triggers when a new apex page info is created.'
          entityName: 'ApexPageInfo'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexPageInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexPageInfo':
          summary: 'All Apex Page Infos'
          description: 'Retrieves the list of all records for selected apex page info entity.'
          entityName: 'ApexPageInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexPageInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexTestQueueItem':
          summary: 'New Apex Test Queue Item'
          description: 'Triggers when a new apex test queue item is created.'
          entityName: 'ApexTestQueueItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexTestQueueItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTestQueueItem':
          summary: 'All Apex Test Queue Items'
          description: 'Retrieves the list of all records for selected apex test queue
            item entity.'
          entityName: 'ApexTestQueueItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTestQueueItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTestResult':
          summary: 'All Apex Test Results'
          description: 'Retrieves the list of all records for selected apex test result
            entity.'
          entityName: 'ApexTestResult'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTestResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexTestResultLimits':
          summary: 'New Apex Test Result Limit'
          description: 'Triggers when a new apex test result limit is created.'
          entityName: 'ApexTestResultLimits'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexTestResultLimits'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexTestResultLimits':
          summary: 'New Or Updated Apex Test Result Limit'
          description: 'Triggers when a  apex test result limit is created or existing apex
            test result limit is updated.'
          entityName: 'ApexTestResultLimits'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexTestResultLimits'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTestResultLimits':
          summary: 'All Apex Test Result Limits'
          description: 'Retrieves the list of all records for selected apex test result
            limit entity.'
          entityName: 'ApexTestResultLimits'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTestResultLimits'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexTestRunResult':
          summary: 'New Apex Test Run Result'
          description: 'Triggers when a new apex test run result is created.'
          entityName: 'ApexTestRunResult'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexTestRunResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexTestRunResult':
          summary: 'New Or Updated Apex Test Run Result'
          description: 'Triggers when a  apex test run result is created or existing apex
            test run result is updated.'
          entityName: 'ApexTestRunResult'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexTestRunResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTestRunResult':
          summary: 'All Apex Test Run Results'
          description: 'Retrieves the list of all records for selected apex test run result
            entity.'
          entityName: 'ApexTestRunResult'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTestRunResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexTestSuite':
          summary: 'New Apex Test Suite'
          description: 'Triggers when a new apex test suite is created.'
          entityName: 'ApexTestSuite'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexTestSuite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexTestSuite':
          summary: 'New Or Updated Apex Test Suite'
          description: 'Triggers when a  apex test suite is created or existing apex test
            suite is updated.'
          entityName: 'ApexTestSuite'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexTestSuite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTestSuite':
          summary: 'All Apex Test Suites'
          description: 'Retrieves the list of all records for selected apex test suite
            entity.'
          entityName: 'ApexTestSuite'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTestSuite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApexTrigger':
          summary: 'New Apex Trigger'
          description: 'Triggers when a new apex trigger is created.'
          entityName: 'ApexTrigger'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApexTrigger'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApexTrigger':
          summary: 'New Or Updated Apex Trigger'
          description: 'Triggers when a  apex trigger is created or existing apex trigger
            is updated.'
          entityName: 'ApexTrigger'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApexTrigger'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTrigger':
          summary: 'All Apex Triggers'
          description: 'Retrieves the list of all records for selected apex trigger entity.'
          entityName: 'ApexTrigger'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTrigger'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApexTypeImplementor':
          summary: 'All Apex Type Implementors'
          description: 'Retrieves the list of all records for selected apex type implementor
            entity.'
          entityName: 'ApexTypeImplementor'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApexTypeImplementor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApiAnomalyEventStore':
          summary: 'New API Anomaly Event Store'
          description: 'Triggers when a new api anomaly event store is created.'
          entityName: 'ApiAnomalyEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApiAnomalyEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApiAnomalyEventStore':
          summary: 'New Or Updated API Anomaly Event Store'
          description: 'Triggers when a  api anomaly event store is created or existing
            api anomaly event store is updated.'
          entityName: 'ApiAnomalyEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApiAnomalyEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApiAnomalyEventStore':
          summary: 'All API Anomaly Event Stores'
          description: 'Retrieves the list of all records for selected api anomaly event
            store entity.'
          entityName: 'ApiAnomalyEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApiAnomalyEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApiEvent':
          summary: 'New API Event'
          description: 'Triggers when a new api event is created.'
          entityName: 'ApiEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ApiEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApiEvent':
          summary: 'New Or Updated API Event'
          description: 'Triggers when a  api event is created or existing api event is updated.'
          entityName: 'ApiEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ApiEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApiEvent':
          summary: 'All API Events'
          description: 'Retrieves the list of all records for selected api event entity.'
          entityName: 'ApiEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ApiEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAppAnalyticsQueryRequest':
          summary: 'New App Analytics Query Request'
          description: 'Triggers when a new app analytics query request is created.'
          entityName: 'AppAnalyticsQueryRequest'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AppAnalyticsQueryRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAppAnalyticsQueryRequest':
          summary: 'New Or Updated App Analytics Query Request'
          description: 'Triggers when a  app analytics query request is created or existing
            app analytics query request is updated.'
          entityName: 'AppAnalyticsQueryRequest'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AppAnalyticsQueryRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAppAnalyticsQueryRequest':
          summary: 'All App Analytics Query Requests'
          description: 'Retrieves the list of all records for selected app analytics query
            request entity.'
          entityName: 'AppAnalyticsQueryRequest'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AppAnalyticsQueryRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAppDefinition':
          summary: 'All App Definitions'
          description: 'Retrieves the list of all records for selected app definition entity.'
          entityName: 'AppDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AppDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAppMenuItem':
          summary: 'New AppMenuItem'
          description: 'Triggers when a new appmenuitem is created.'
          entityName: 'AppMenuItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AppMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAppMenuItem':
          summary: 'New Or Updated AppMenuItem'
          description: 'Triggers when a  appmenuitem is created or existing appmenuitem
            is updated.'
          entityName: 'AppMenuItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AppMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAppMenuItem':
          summary: 'All AppMenuItems'
          description: 'Retrieves the list of all records for selected appmenuitem entity.'
          entityName: 'AppMenuItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AppMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAppTabMember':
          summary: 'All App Tab Members'
          description: 'Retrieves the list of all records for selected app tab member entity.'
          entityName: 'AppTabMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AppTabMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewApproval':
          summary: 'New Approval'
          description: 'Triggers when a new approval is created.'
          entityName: 'Approval'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Approval'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedApproval':
          summary: 'New Or Updated Approval'
          description: 'Triggers when a  approval is created or existing approval is updated.'
          entityName: 'Approval'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Approval'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllApproval':
          summary: 'All Approvals'
          description: 'Retrieves the list of all records for selected approval entity.'
          entityName: 'Approval'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Approval'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAsset':
          summary: 'New Asset'
          description: 'Triggers when a new asset is created.'
          entityName: 'Asset'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Asset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAsset':
          summary: 'New Or Updated Asset'
          description: 'Triggers when a  asset is created or existing asset is updated.'
          entityName: 'Asset'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Asset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAsset':
          summary: 'All Assets'
          description: 'Retrieves the list of all records for selected asset entity.'
          entityName: 'Asset'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Asset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAssetHistory':
          summary: 'New Asset History'
          description: 'Triggers when a new asset history is created.'
          entityName: 'AssetHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AssetHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAssetHistory':
          summary: 'All Asset Historys'
          description: 'Retrieves the list of all records for selected asset history entity.'
          entityName: 'AssetHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AssetHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAssetRelationship':
          summary: 'New Asset Relationship'
          description: 'Triggers when a new asset relationship is created.'
          entityName: 'AssetRelationship'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AssetRelationship'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAssetRelationship':
          summary: 'New Or Updated Asset Relationship'
          description: 'Triggers when a  asset relationship is created or existing asset
            relationship is updated.'
          entityName: 'AssetRelationship'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AssetRelationship'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAssetRelationship':
          summary: 'All Asset Relationships'
          description: 'Retrieves the list of all records for selected asset relationship
            entity.'
          entityName: 'AssetRelationship'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AssetRelationship'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAssetRelationshipHistory':
          summary: 'New Asset Relationship History'
          description: 'Triggers when a new asset relationship history is created.'
          entityName: 'AssetRelationshipHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AssetRelationshipHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAssetRelationshipHistory':
          summary: 'All Asset Relationship Historys'
          description: 'Retrieves the list of all records for selected asset relationship
            history entity.'
          entityName: 'AssetRelationshipHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AssetRelationshipHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAssignmentRule':
          summary: 'New Assignment Rule'
          description: 'Triggers when a new assignment rule is created.'
          entityName: 'AssignmentRule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AssignmentRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAssignmentRule':
          summary: 'New Or Updated Assignment Rule'
          description: 'Triggers when a  assignment rule is created or existing assignment
            rule is updated.'
          entityName: 'AssignmentRule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AssignmentRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAssignmentRule':
          summary: 'All Assignment Rules'
          description: 'Retrieves the list of all records for selected assignment rule
            entity.'
          entityName: 'AssignmentRule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AssignmentRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAsyncApexJob':
          summary: 'New Apex Job'
          description: 'Triggers when a new apex job is created.'
          entityName: 'AsyncApexJob'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AsyncApexJob'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAsyncApexJob':
          summary: 'All Apex Jobs'
          description: 'Retrieves the list of all records for selected apex job entity.'
          entityName: 'AsyncApexJob'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AsyncApexJob'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAttachment':
          summary: 'New Attachment'
          description: 'Triggers when a new attachment is created.'
          entityName: 'Attachment'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Attachment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAttachment':
          summary: 'New Or Updated Attachment'
          description: 'Triggers when a  attachment is created or existing attachment is
            updated.'
          entityName: 'Attachment'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Attachment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAttachment':
          summary: 'All Attachments'
          description: 'Retrieves the list of all records for selected attachment entity.'
          entityName: 'Attachment'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Attachment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuraDefinition':
          summary: 'New Lightning Component Definition'
          description: 'Triggers when a new lightning component definition is created.'
          entityName: 'AuraDefinition'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuraDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuraDefinition':
          summary: 'New Or Updated Lightning Component Definition'
          description: 'Triggers when a  lightning component definition is created or existing
            lightning component definition is updated.'
          entityName: 'AuraDefinition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuraDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuraDefinition':
          summary: 'All Lightning Component Definitions'
          description: 'Retrieves the list of all records for selected lightning component
            definition entity.'
          entityName: 'AuraDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuraDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuraDefinitionBundle':
          summary: 'New Aura Component Bundle'
          description: 'Triggers when a new aura component bundle is created.'
          entityName: 'AuraDefinitionBundle'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuraDefinitionBundle'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuraDefinitionBundle':
          summary: 'New Or Updated Aura Component Bundle'
          description: 'Triggers when a  aura component bundle is created or existing aura
            component bundle is updated.'
          entityName: 'AuraDefinitionBundle'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuraDefinitionBundle'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuraDefinitionBundle':
          summary: 'All Aura Component Bundles'
          description: 'Retrieves the list of all records for selected aura component bundle
            entity.'
          entityName: 'AuraDefinitionBundle'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuraDefinitionBundle'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuraDefinitionBundleInfo':
          summary: 'All AuraDefinitionBundle Infos'
          description: 'Retrieves the list of all records for selected auradefinitionbundle
            info entity.'
          entityName: 'AuraDefinitionBundleInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuraDefinitionBundleInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuraDefinitionInfo':
          summary: 'New Or Updated AuraDefinition Info'
          description: 'Triggers when a  auradefinition info is created or existing auradefinition
            info is updated.'
          entityName: 'AuraDefinitionInfo'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuraDefinitionInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuraDefinitionInfo':
          summary: 'All AuraDefinition Infos'
          description: 'Retrieves the list of all records for selected auradefinition info
            entity.'
          entityName: 'AuraDefinitionInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuraDefinitionInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthConfig':
          summary: 'New Authentication Configuration'
          description: 'Triggers when a new authentication configuration is created.'
          entityName: 'AuthConfig'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthConfig':
          summary: 'New Or Updated Authentication Configuration'
          description: 'Triggers when a  authentication configuration is created or existing
            authentication configuration is updated.'
          entityName: 'AuthConfig'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthConfig':
          summary: 'All Authentication Configurations'
          description: 'Retrieves the list of all records for selected authentication configuration
            entity.'
          entityName: 'AuthConfig'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthConfigProviders':
          summary: 'New Authentication Configuration Auth. Provider'
          description: 'Triggers when a new authentication configuration auth. provider
            is created.'
          entityName: 'AuthConfigProviders'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthConfigProviders'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthConfigProviders':
          summary: 'New Or Updated Authentication Configuration Auth. Provider'
          description: 'Triggers when a  authentication configuration auth. provider is
            created or existing authentication configuration auth. provider is updated.'
          entityName: 'AuthConfigProviders'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthConfigProviders'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthConfigProviders':
          summary: 'All Authentication Configuration Auth. Providers'
          description: 'Retrieves the list of all records for selected authentication configuration
            auth. provider entity.'
          entityName: 'AuthConfigProviders'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthConfigProviders'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthProvider':
          summary: 'New Auth. Provider'
          description: 'Triggers when a new auth. provider is created.'
          entityName: 'AuthProvider'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthProvider'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthProvider':
          summary: 'All Auth. Providers'
          description: 'Retrieves the list of all records for selected auth. provider entity.'
          entityName: 'AuthProvider'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthProvider'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthSession':
          summary: 'New Auth Session'
          description: 'Triggers when a new auth session is created.'
          entityName: 'AuthSession'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthSession'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthSession':
          summary: 'New Or Updated Auth Session'
          description: 'Triggers when a  auth session is created or existing auth session
            is updated.'
          entityName: 'AuthSession'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthSession'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthSession':
          summary: 'All Auth Sessions'
          description: 'Retrieves the list of all records for selected auth session entity.'
          entityName: 'AuthSession'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthSession'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationForm':
          summary: 'New Authorization Form'
          description: 'Triggers when a new authorization form is created.'
          entityName: 'AuthorizationForm'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationForm'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationForm':
          summary: 'New Or Updated Authorization Form'
          description: 'Triggers when a  authorization form is created or existing authorization
            form is updated.'
          entityName: 'AuthorizationForm'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationForm'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationForm':
          summary: 'All Authorization Forms'
          description: 'Retrieves the list of all records for selected authorization form
            entity.'
          entityName: 'AuthorizationForm'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationForm'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormConsent':
          summary: 'New Authorization Form Consent'
          description: 'Triggers when a new authorization form consent is created.'
          entityName: 'AuthorizationFormConsent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationFormConsent':
          summary: 'New Or Updated Authorization Form Consent'
          description: 'Triggers when a  authorization form consent is created or existing
            authorization form consent is updated.'
          entityName: 'AuthorizationFormConsent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormConsent':
          summary: 'All Authorization Form Consents'
          description: 'Retrieves the list of all records for selected authorization form
            consent entity.'
          entityName: 'AuthorizationFormConsent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormConsentHistory':
          summary: 'New Authorization Form Consent History'
          description: 'Triggers when a new authorization form consent history is created.'
          entityName: 'AuthorizationFormConsentHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormConsentHistory':
          summary: 'All Authorization Form Consent Historys'
          description: 'Retrieves the list of all records for selected authorization form
            consent history entity.'
          entityName: 'AuthorizationFormConsentHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationFormConsentShare':
          summary: 'New Or Updated Authorization Form Consent Share'
          description: 'Triggers when a  authorization form consent share is created or
            existing authorization form consent share is updated.'
          entityName: 'AuthorizationFormConsentShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsentShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormConsentShare':
          summary: 'All Authorization Form Consent Shares'
          description: 'Retrieves the list of all records for selected authorization form
            consent share entity.'
          entityName: 'AuthorizationFormConsentShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormConsentShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormDataUse':
          summary: 'New Authorization Form Data Use'
          description: 'Triggers when a new authorization form data use is created.'
          entityName: 'AuthorizationFormDataUse'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationFormDataUse':
          summary: 'New Or Updated Authorization Form Data Use'
          description: 'Triggers when a  authorization form data use is created or existing
            authorization form data use is updated.'
          entityName: 'AuthorizationFormDataUse'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormDataUse':
          summary: 'All Authorization Form Data Uses'
          description: 'Retrieves the list of all records for selected authorization form
            data use entity.'
          entityName: 'AuthorizationFormDataUse'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormDataUseHistory':
          summary: 'New Authorization Form Data Use History'
          description: 'Triggers when a new authorization form data use history is created.'
          entityName: 'AuthorizationFormDataUseHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUseHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormDataUseHistory':
          summary: 'All Authorization Form Data Use Historys'
          description: 'Retrieves the list of all records for selected authorization form
            data use history entity.'
          entityName: 'AuthorizationFormDataUseHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUseHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationFormDataUseShare':
          summary: 'New Or Updated Authorization Form Data Use Share'
          description: 'Triggers when a  authorization form data use share is created or
            existing authorization form data use share is updated.'
          entityName: 'AuthorizationFormDataUseShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUseShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormDataUseShare':
          summary: 'All Authorization Form Data Use Shares'
          description: 'Retrieves the list of all records for selected authorization form
            data use share entity.'
          entityName: 'AuthorizationFormDataUseShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormDataUseShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormHistory':
          summary: 'New Authorization Form History'
          description: 'Triggers when a new authorization form history is created.'
          entityName: 'AuthorizationFormHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormHistory':
          summary: 'All Authorization Form Historys'
          description: 'Retrieves the list of all records for selected authorization form
            history entity.'
          entityName: 'AuthorizationFormHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationFormShare':
          summary: 'New Or Updated Authorization Form Share'
          description: 'Triggers when a  authorization form share is created or existing
            authorization form share is updated.'
          entityName: 'AuthorizationFormShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormShare':
          summary: 'All Authorization Form Shares'
          description: 'Retrieves the list of all records for selected authorization form
            share entity.'
          entityName: 'AuthorizationFormShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormText':
          summary: 'New Authorization Form Text'
          description: 'Triggers when a new authorization form text is created.'
          entityName: 'AuthorizationFormText'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormText'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedAuthorizationFormText':
          summary: 'New Or Updated Authorization Form Text'
          description: 'Triggers when a  authorization form text is created or existing
            authorization form text is updated.'
          entityName: 'AuthorizationFormText'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormText'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormText':
          summary: 'All Authorization Form Texts'
          description: 'Retrieves the list of all records for selected authorization form
            text entity.'
          entityName: 'AuthorizationFormText'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormText'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewAuthorizationFormTextHistory':
          summary: 'New Authorization Form Text History'
          description: 'Triggers when a new authorization form text history is created.'
          entityName: 'AuthorizationFormTextHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from AuthorizationFormTextHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllAuthorizationFormTextHistory':
          summary: 'All Authorization Form Text Historys'
          description: 'Retrieves the list of all records for selected authorization form
            text history entity.'
          entityName: 'AuthorizationFormTextHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from AuthorizationFormTextHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBackgroundOperation':
          summary: 'New Background Operation'
          description: 'Triggers when a new background operation is created.'
          entityName: 'BackgroundOperation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BackgroundOperation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBackgroundOperation':
          summary: 'New Or Updated Background Operation'
          description: 'Triggers when a  background operation is created or existing background
            operation is updated.'
          entityName: 'BackgroundOperation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BackgroundOperation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBackgroundOperation':
          summary: 'All Background Operations'
          description: 'Retrieves the list of all records for selected background operation
            entity.'
          entityName: 'BackgroundOperation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BackgroundOperation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBrandTemplate':
          summary: 'New Letterhead'
          description: 'Triggers when a new letterhead is created.'
          entityName: 'BrandTemplate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BrandTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBrandTemplate':
          summary: 'New Or Updated Letterhead'
          description: 'Triggers when a  letterhead is created or existing letterhead is
            updated.'
          entityName: 'BrandTemplate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BrandTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBrandTemplate':
          summary: 'All Letterheads'
          description: 'Retrieves the list of all records for selected letterhead entity.'
          entityName: 'BrandTemplate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BrandTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBrandingSet':
          summary: 'New Branding Set'
          description: 'Triggers when a new branding set is created.'
          entityName: 'BrandingSet'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BrandingSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBrandingSet':
          summary: 'New Or Updated Branding Set'
          description: 'Triggers when a  branding set is created or existing branding set
            is updated.'
          entityName: 'BrandingSet'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BrandingSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBrandingSet':
          summary: 'All Branding Sets'
          description: 'Retrieves the list of all records for selected branding set entity.'
          entityName: 'BrandingSet'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BrandingSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBrandingSetProperty':
          summary: 'New Branding Set Property'
          description: 'Triggers when a new branding set property is created.'
          entityName: 'BrandingSetProperty'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BrandingSetProperty'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBrandingSetProperty':
          summary: 'New Or Updated Branding Set Property'
          description: 'Triggers when a  branding set property is created or existing branding
            set property is updated.'
          entityName: 'BrandingSetProperty'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BrandingSetProperty'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBrandingSetProperty':
          summary: 'All Branding Set Propertys'
          description: 'Retrieves the list of all records for selected branding set property
            entity.'
          entityName: 'BrandingSetProperty'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BrandingSetProperty'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBriefcaseAssignment':
          summary: 'New Briefcase Assignment'
          description: 'Triggers when a new briefcase assignment is created.'
          entityName: 'BriefcaseAssignment'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBriefcaseAssignment':
          summary: 'New Or Updated Briefcase Assignment'
          description: 'Triggers when a  briefcase assignment is created or existing briefcase
            assignment is updated.'
          entityName: 'BriefcaseAssignment'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBriefcaseAssignment':
          summary: 'All Briefcase Assignments'
          description: 'Retrieves the list of all records for selected briefcase assignment
            entity.'
          entityName: 'BriefcaseAssignment'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BriefcaseAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBriefcaseDefinition':
          summary: 'New Briefcase Definition'
          description: 'Triggers when a new briefcase definition is created.'
          entityName: 'BriefcaseDefinition'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBriefcaseDefinition':
          summary: 'New Or Updated Briefcase Definition'
          description: 'Triggers when a  briefcase definition is created or existing briefcase
            definition is updated.'
          entityName: 'BriefcaseDefinition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBriefcaseDefinition':
          summary: 'All Briefcase Definitions'
          description: 'Retrieves the list of all records for selected briefcase definition
            entity.'
          entityName: 'BriefcaseDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BriefcaseDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBriefcaseRule':
          summary: 'New Briefcase Rule'
          description: 'Triggers when a new briefcase rule is created.'
          entityName: 'BriefcaseRule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBriefcaseRule':
          summary: 'New Or Updated Briefcase Rule'
          description: 'Triggers when a  briefcase rule is created or existing briefcase
            rule is updated.'
          entityName: 'BriefcaseRule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBriefcaseRule':
          summary: 'All Briefcase Rules'
          description: 'Retrieves the list of all records for selected briefcase rule entity.'
          entityName: 'BriefcaseRule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BriefcaseRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBriefcaseRuleFilter':
          summary: 'New Briefcase Rule Filter'
          description: 'Triggers when a new briefcase rule filter is created.'
          entityName: 'BriefcaseRuleFilter'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseRuleFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBriefcaseRuleFilter':
          summary: 'New Or Updated Briefcase Rule Filter'
          description: 'Triggers when a  briefcase rule filter is created or existing briefcase
            rule filter is updated.'
          entityName: 'BriefcaseRuleFilter'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BriefcaseRuleFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBriefcaseRuleFilter':
          summary: 'All Briefcase Rule Filters'
          description: 'Retrieves the list of all records for selected briefcase rule filter
            entity.'
          entityName: 'BriefcaseRuleFilter'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BriefcaseRuleFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBulkApiResultEventStore':
          summary: 'New Bulk API Result Event Store'
          description: 'Triggers when a new bulk api result event store is created.'
          entityName: 'BulkApiResultEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BulkApiResultEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBulkApiResultEventStore':
          summary: 'New Or Updated Bulk API Result Event Store'
          description: 'Triggers when a  bulk api result event store is created or existing
            bulk api result event store is updated.'
          entityName: 'BulkApiResultEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BulkApiResultEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBulkApiResultEventStore':
          summary: 'All Bulk API Result Event Stores'
          description: 'Retrieves the list of all records for selected bulk api result
            event store entity.'
          entityName: 'BulkApiResultEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BulkApiResultEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBusinessBrand':
          summary: 'New Business Brand'
          description: 'Triggers when a new business brand is created.'
          entityName: 'BusinessBrand'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BusinessBrand'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBusinessBrand':
          summary: 'New Or Updated Business Brand'
          description: 'Triggers when a  business brand is created or existing business
            brand is updated.'
          entityName: 'BusinessBrand'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BusinessBrand'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBusinessBrand':
          summary: 'All Business Brands'
          description: 'Retrieves the list of all records for selected business brand entity.'
          entityName: 'BusinessBrand'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BusinessBrand'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBusinessBrandShare':
          summary: 'New Or Updated Business Brand Share'
          description: 'Triggers when a  business brand share is created or existing business
            brand share is updated.'
          entityName: 'BusinessBrandShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BusinessBrandShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBusinessBrandShare':
          summary: 'All Business Brand Shares'
          description: 'Retrieves the list of all records for selected business brand share
            entity.'
          entityName: 'BusinessBrandShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BusinessBrandShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBusinessHours':
          summary: 'New Business Hours'
          description: 'Triggers when a new business hours is created.'
          entityName: 'BusinessHours'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BusinessHours'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBusinessHours':
          summary: 'New Or Updated Business Hours'
          description: 'Triggers when a  business hours is created or existing business
            hours is updated.'
          entityName: 'BusinessHours'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BusinessHours'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBusinessHours':
          summary: 'All Business Hourss'
          description: 'Retrieves the list of all records for selected business hours entity.'
          entityName: 'BusinessHours'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BusinessHours'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewBusinessProcess':
          summary: 'New Business Process'
          description: 'Triggers when a new business process is created.'
          entityName: 'BusinessProcess'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from BusinessProcess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedBusinessProcess':
          summary: 'New Or Updated Business Process'
          description: 'Triggers when a  business process is created or existing business
            process is updated.'
          entityName: 'BusinessProcess'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from BusinessProcess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllBusinessProcess':
          summary: 'All Business Processs'
          description: 'Retrieves the list of all records for selected business process
            entity.'
          entityName: 'BusinessProcess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from BusinessProcess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCalendar':
          summary: 'New Calendar'
          description: 'Triggers when a new calendar is created.'
          entityName: 'Calendar'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Calendar'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCalendar':
          summary: 'New Or Updated Calendar'
          description: 'Triggers when a  calendar is created or existing calendar is updated.'
          entityName: 'Calendar'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Calendar'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCalendar':
          summary: 'All Calendars'
          description: 'Retrieves the list of all records for selected calendar entity.'
          entityName: 'Calendar'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Calendar'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCalendarView':
          summary: 'New Calendar'
          description: 'Triggers when a new calendar is created.'
          entityName: 'CalendarView'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CalendarView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCalendarView':
          summary: 'New Or Updated Calendar'
          description: 'Triggers when a  calendar is created or existing calendar is updated.'
          entityName: 'CalendarView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CalendarView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCalendarView':
          summary: 'All Calendars'
          description: 'Retrieves the list of all records for selected calendar entity.'
          entityName: 'CalendarView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CalendarView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCalendarViewShare':
          summary: 'New Or Updated Calendar Share'
          description: 'Triggers when a  calendar share is created or existing calendar
            share is updated.'
          entityName: 'CalendarViewShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CalendarViewShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCalendarViewShare':
          summary: 'All Calendar Shares'
          description: 'Retrieves the list of all records for selected calendar share entity.'
          entityName: 'CalendarViewShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CalendarViewShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCallCenter':
          summary: 'New Call Center'
          description: 'Triggers when a new call center is created.'
          entityName: 'CallCenter'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CallCenter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCallCenter':
          summary: 'New Or Updated Call Center'
          description: 'Triggers when a  call center is created or existing call center
            is updated.'
          entityName: 'CallCenter'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CallCenter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCallCenter':
          summary: 'All Call Centers'
          description: 'Retrieves the list of all records for selected call center entity.'
          entityName: 'CallCenter'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CallCenter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCallCoachingMediaProvider':
          summary: 'New CallCoachingMediaProvider'
          description: 'Triggers when a new callcoachingmediaprovider is created.'
          entityName: 'CallCoachingMediaProvider'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CallCoachingMediaProvider'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCallCoachingMediaProvider':
          summary: 'New Or Updated CallCoachingMediaProvider'
          description: 'Triggers when a  callcoachingmediaprovider is created or existing
            callcoachingmediaprovider is updated.'
          entityName: 'CallCoachingMediaProvider'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CallCoachingMediaProvider'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCallCoachingMediaProvider':
          summary: 'All CallCoachingMediaProviders'
          description: 'Retrieves the list of all records for selected callcoachingmediaprovider
            entity.'
          entityName: 'CallCoachingMediaProvider'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CallCoachingMediaProvider'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCampaign':
          summary: 'New Campaign'
          description: 'Triggers when a new campaign is created.'
          entityName: 'Campaign'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Campaign'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCampaign':
          summary: 'New Or Updated Campaign'
          description: 'Triggers when a  campaign is created or existing campaign is updated.'
          entityName: 'Campaign'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Campaign'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCampaign':
          summary: 'All Campaigns'
          description: 'Retrieves the list of all records for selected campaign entity.'
          entityName: 'Campaign'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Campaign'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCampaignHistory':
          summary: 'New Campaign Field History'
          description: 'Triggers when a new campaign field history is created.'
          entityName: 'CampaignHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CampaignHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCampaignHistory':
          summary: 'All Campaign Field Historys'
          description: 'Retrieves the list of all records for selected campaign field history
            entity.'
          entityName: 'CampaignHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CampaignHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCampaignMember':
          summary: 'New Campaign Member'
          description: 'Triggers when a new campaign member is created.'
          entityName: 'CampaignMember'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CampaignMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCampaignMember':
          summary: 'New Or Updated Campaign Member'
          description: 'Triggers when a  campaign member is created or existing campaign
            member is updated.'
          entityName: 'CampaignMember'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CampaignMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCampaignMember':
          summary: 'All Campaign Members'
          description: 'Retrieves the list of all records for selected campaign member
            entity.'
          entityName: 'CampaignMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CampaignMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCampaignMemberStatus':
          summary: 'New Campaign Member Status'
          description: 'Triggers when a new campaign member status is created.'
          entityName: 'CampaignMemberStatus'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CampaignMemberStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCampaignMemberStatus':
          summary: 'New Or Updated Campaign Member Status'
          description: 'Triggers when a  campaign member status is created or existing campaign
            member status is updated.'
          entityName: 'CampaignMemberStatus'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CampaignMemberStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCampaignMemberStatus':
          summary: 'All Campaign Member Statuss'
          description: 'Retrieves the list of all records for selected campaign member
            status entity.'
          entityName: 'CampaignMemberStatus'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CampaignMemberStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCampaignShare':
          summary: 'New Or Updated Campaign Share'
          description: 'Triggers when a  campaign share is created or existing campaign
            share is updated.'
          entityName: 'CampaignShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CampaignShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCampaignShare':
          summary: 'All Campaign Shares'
          description: 'Retrieves the list of all records for selected campaign share entity.'
          entityName: 'CampaignShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CampaignShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCase':
          summary: 'New Case'
          description: 'Triggers when a new case is created.'
          entityName: 'Case'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Case'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCase':
          summary: 'New Or Updated Case'
          description: 'Triggers when a  case is created or existing case is updated.'
          entityName: 'Case'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Case'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCase':
          summary: 'All Cases'
          description: 'Retrieves the list of all records for selected case entity.'
          entityName: 'Case'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Case'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseComment':
          summary: 'New Case Comment'
          description: 'Triggers when a new case comment is created.'
          entityName: 'CaseComment'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseComment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseComment':
          summary: 'New Or Updated Case Comment'
          description: 'Triggers when a  case comment is created or existing case comment
            is updated.'
          entityName: 'CaseComment'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseComment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseComment':
          summary: 'All Case Comments'
          description: 'Retrieves the list of all records for selected case comment entity.'
          entityName: 'CaseComment'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseComment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseContactRole':
          summary: 'New Case Contact Role'
          description: 'Triggers when a new case contact role is created.'
          entityName: 'CaseContactRole'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseContactRole':
          summary: 'New Or Updated Case Contact Role'
          description: 'Triggers when a  case contact role is created or existing case contact
            role is updated.'
          entityName: 'CaseContactRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseContactRole':
          summary: 'All Case Contact Roles'
          description: 'Retrieves the list of all records for selected case contact role
            entity.'
          entityName: 'CaseContactRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseHistory':
          summary: 'New Case History'
          description: 'Triggers when a new case history is created.'
          entityName: 'CaseHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseHistory':
          summary: 'All Case Historys'
          description: 'Retrieves the list of all records for selected case history entity.'
          entityName: 'CaseHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseShare':
          summary: 'New Or Updated Case Share'
          description: 'Triggers when a  case share is created or existing case share is
            updated.'
          entityName: 'CaseShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseShare':
          summary: 'All Case Shares'
          description: 'Retrieves the list of all records for selected case share entity.'
          entityName: 'CaseShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseSolution':
          summary: 'New Case Solution'
          description: 'Triggers when a new case solution is created.'
          entityName: 'CaseSolution'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseSolution'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseSolution':
          summary: 'All Case Solutions'
          description: 'Retrieves the list of all records for selected case solution entity.'
          entityName: 'CaseSolution'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseSolution'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseStatus':
          summary: 'New Case Status Value'
          description: 'Triggers when a new case status value is created.'
          entityName: 'CaseStatus'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseStatus':
          summary: 'New Or Updated Case Status Value'
          description: 'Triggers when a  case status value is created or existing case status
            value is updated.'
          entityName: 'CaseStatus'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseStatus':
          summary: 'All Case Status Values'
          description: 'Retrieves the list of all records for selected case status value
            entity.'
          entityName: 'CaseStatus'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseTeamMember':
          summary: 'New Case Team Member'
          description: 'Triggers when a new case team member is created.'
          entityName: 'CaseTeamMember'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseTeamMember':
          summary: 'New Or Updated Case Team Member'
          description: 'Triggers when a  case team member is created or existing case team
            member is updated.'
          entityName: 'CaseTeamMember'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseTeamMember':
          summary: 'All Case Team Members'
          description: 'Retrieves the list of all records for selected case team member
            entity.'
          entityName: 'CaseTeamMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseTeamMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseTeamRole':
          summary: 'New Case Team Member Role'
          description: 'Triggers when a new case team member role is created.'
          entityName: 'CaseTeamRole'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseTeamRole':
          summary: 'New Or Updated Case Team Member Role'
          description: 'Triggers when a  case team member role is created or existing case
            team member role is updated.'
          entityName: 'CaseTeamRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseTeamRole':
          summary: 'All Case Team Member Roles'
          description: 'Retrieves the list of all records for selected case team member
            role entity.'
          entityName: 'CaseTeamRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseTeamRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseTeamTemplate':
          summary: 'New Predefined Case Team'
          description: 'Triggers when a new predefined case team is created.'
          entityName: 'CaseTeamTemplate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseTeamTemplate':
          summary: 'New Or Updated Predefined Case Team'
          description: 'Triggers when a  predefined case team is created or existing predefined
            case team is updated.'
          entityName: 'CaseTeamTemplate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseTeamTemplate':
          summary: 'All Predefined Case Teams'
          description: 'Retrieves the list of all records for selected predefined case
            team entity.'
          entityName: 'CaseTeamTemplate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseTeamTemplateMember':
          summary: 'New Predefined Case Team Member'
          description: 'Triggers when a new predefined case team member is created.'
          entityName: 'CaseTeamTemplateMember'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplateMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCaseTeamTemplateMember':
          summary: 'New Or Updated Predefined Case Team Member'
          description: 'Triggers when a  predefined case team member is created or existing
            predefined case team member is updated.'
          entityName: 'CaseTeamTemplateMember'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplateMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseTeamTemplateMember':
          summary: 'All Predefined Case Team Members'
          description: 'Retrieves the list of all records for selected predefined case
            team member entity.'
          entityName: 'CaseTeamTemplateMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplateMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCaseTeamTemplateRecord':
          summary: 'New Predefined Case Team Record'
          description: 'Triggers when a new predefined case team record is created.'
          entityName: 'CaseTeamTemplateRecord'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplateRecord'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCaseTeamTemplateRecord':
          summary: 'All Predefined Case Team Records'
          description: 'Retrieves the list of all records for selected predefined case
            team record entity.'
          entityName: 'CaseTeamTemplateRecord'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CaseTeamTemplateRecord'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCategoryData':
          summary: 'New Category Data'
          description: 'Triggers when a new category data is created.'
          entityName: 'CategoryData'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CategoryData'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCategoryData':
          summary: 'New Or Updated Category Data'
          description: 'Triggers when a  category data is created or existing category data
            is updated.'
          entityName: 'CategoryData'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CategoryData'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCategoryData':
          summary: 'All Category Datas'
          description: 'Retrieves the list of all records for selected category data entity.'
          entityName: 'CategoryData'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CategoryData'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCategoryNode':
          summary: 'New Category Node'
          description: 'Triggers when a new category node is created.'
          entityName: 'CategoryNode'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CategoryNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCategoryNode':
          summary: 'New Or Updated Category Node'
          description: 'Triggers when a  category node is created or existing category node
            is updated.'
          entityName: 'CategoryNode'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CategoryNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCategoryNode':
          summary: 'All Category Nodes'
          description: 'Retrieves the list of all records for selected category node entity.'
          entityName: 'CategoryNode'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CategoryNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllChatterAnswersActivity':
          summary: 'All Chatter Answers Activitys'
          description: 'Retrieves the list of all records for selected chatter answers
            activity entity.'
          entityName: 'ChatterAnswersActivity'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ChatterAnswersActivity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewChatterAnswersReputationLevel':
          summary: 'New Chatter Answers Reputation Level'
          description: 'Triggers when a new chatter answers reputation level is created.'
          entityName: 'ChatterAnswersReputationLevel'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ChatterAnswersReputationLevel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedChatterAnswersReputationLevel':
          summary: 'New Or Updated Chatter Answers Reputation Level'
          description: 'Triggers when a  chatter answers reputation level is created or
            existing chatter answers reputation level is updated.'
          entityName: 'ChatterAnswersReputationLevel'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ChatterAnswersReputationLevel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllChatterAnswersReputationLevel':
          summary: 'All Chatter Answers Reputation Levels'
          description: 'Retrieves the list of all records for selected chatter answers
            reputation level entity.'
          entityName: 'ChatterAnswersReputationLevel'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ChatterAnswersReputationLevel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewClientBrowser':
          summary: 'New Client Browser'
          description: 'Triggers when a new client browser is created.'
          entityName: 'ClientBrowser'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ClientBrowser'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllClientBrowser':
          summary: 'All Client Browsers'
          description: 'Retrieves the list of all records for selected client browser entity.'
          entityName: 'ClientBrowser'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ClientBrowser'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllColorDefinition':
          summary: 'All Color Definitions'
          description: 'Retrieves the list of all records for selected color definition
            entity.'
          entityName: 'ColorDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ColorDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCommSubscription':
          summary: 'New Communication Subscription'
          description: 'Triggers when a new communication subscription is created.'
          entityName: 'CommSubscription'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CommSubscription'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCommSubscription':
          summary: 'New Or Updated Communication Subscription'
          description: 'Triggers when a  communication subscription is created or existing
            communication subscription is updated.'
          entityName: 'CommSubscription'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CommSubscription'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommSubscription':
          summary: 'All Communication Subscriptions'
          description: 'Retrieves the list of all records for selected communication subscription
            entity.'
          entityName: 'CommSubscription'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CommSubscription'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCommSubscriptionChannelType':
          summary: 'New Communication Subscription Channel Type'
          description: 'Triggers when a new communication subscription channel type is created.'
          entityName: 'CommSubscriptionChannelType'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCommSubscriptionChannelType':
          summary: 'New Or Updated Communication Subscription Channel Type'
          description: 'Triggers when a  communication subscription channel type is created
            or existing communication subscription channel type is updated.'
          entityName: 'CommSubscriptionChannelType'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommSubscriptionChannelType':
          summary: 'All Communication Subscription Channel Types'
          description: 'Retrieves the list of all records for selected communication subscription
            channel type entity.'
          entityName: 'CommSubscriptionChannelType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCommSubscriptionChannelTypeHistory':
          summary: 'New Communication Subscription Channel Type  History'
          description: 'Triggers when a new communication subscription channel type  history
            is created.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelTypeHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommSubscriptionChannelTypeHistory':
          summary: 'All Communication Subscription Channel Type  Historys'
          description: 'Retrieves the list of all records for selected communication subscription
            channel type  history entity.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelTypeHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCommSubscriptionChannelTypeShare':
          summary: 'New Or Updated Communication Subscription Channel Type Share'
          description: 'Triggers when a  communication subscription channel type share is
            created or existing communication subscription channel type share is updated.'
          entityName: 'CommSubscriptionChannelTypeShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelTypeShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommSubscriptionChannelTypeShare':
          summary: 'All Communication Subscription Channel Type Shares'
          description: 'Retrieves the list of all records for selected communication subscription
            channel type share entity.'
          entityName: 'CommSubscriptionChannelTypeShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CommSubscriptionChannelTypeShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCommSubscriptionHistory':
          summary: 'New Communication Subscription  History'
          description: 'Triggers when a new communication subscription  history is created.'
          entityName: 'CommSubscriptionHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CommSubscriptionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommSubscriptionHistory':
          summary: 'All Communication Subscription  Historys'
          description: 'Retrieves the list of all records for selected communication subscription  history
            entity.'
          entityName: 'CommSubscriptionHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CommSubscriptionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCommSubscriptionShare':
          summary: 'New Or Updated Communication Subscription Share'
          description: 'Triggers when a  communication subscription share is created or
            existing communication subscription share is updated.'
          entityName: 'CommSubscriptionShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CommSubscriptionShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommSubscriptionShare':
          summary: 'All Communication Subscription Shares'
          description: 'Retrieves the list of all records for selected communication subscription
            share entity.'
          entityName: 'CommSubscriptionShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CommSubscriptionShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCommunity':
          summary: 'New Zone'
          description: 'Triggers when a new zone is created.'
          entityName: 'Community'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Community'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCommunity':
          summary: 'New Or Updated Zone'
          description: 'Triggers when a  zone is created or existing zone is updated.'
          entityName: 'Community'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Community'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCommunity':
          summary: 'All Zones'
          description: 'Retrieves the list of all records for selected zone entity.'
          entityName: 'Community'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Community'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewConferenceNumber':
          summary: 'New Conference Number'
          description: 'Triggers when a new conference number is created.'
          entityName: 'ConferenceNumber'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ConferenceNumber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedConferenceNumber':
          summary: 'New Or Updated Conference Number'
          description: 'Triggers when a  conference number is created or existing conference
            number is updated.'
          entityName: 'ConferenceNumber'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ConferenceNumber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConferenceNumber':
          summary: 'All Conference Numbers'
          description: 'Retrieves the list of all records for selected conference number
            entity.'
          entityName: 'ConferenceNumber'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConferenceNumber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewConnectedApplication':
          summary: 'New Connected App'
          description: 'Triggers when a new connected app is created.'
          entityName: 'ConnectedApplication'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ConnectedApplication'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedConnectedApplication':
          summary: 'New Or Updated Connected App'
          description: 'Triggers when a  connected app is created or existing connected
            app is updated.'
          entityName: 'ConnectedApplication'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ConnectedApplication'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConnectedApplication':
          summary: 'All Connected Apps'
          description: 'Retrieves the list of all records for selected connected app entity.'
          entityName: 'ConnectedApplication'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConnectedApplication'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewConsumptionRate':
          summary: 'New Consumption Rate'
          description: 'Triggers when a new consumption rate is created.'
          entityName: 'ConsumptionRate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionRate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedConsumptionRate':
          summary: 'New Or Updated Consumption Rate'
          description: 'Triggers when a  consumption rate is created or existing consumption
            rate is updated.'
          entityName: 'ConsumptionRate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionRate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConsumptionRate':
          summary: 'All Consumption Rates'
          description: 'Retrieves the list of all records for selected consumption rate
            entity.'
          entityName: 'ConsumptionRate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConsumptionRate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewConsumptionRateHistory':
          summary: 'New Consumption Rate History ID'
          description: 'Triggers when a new consumption rate history id is created.'
          entityName: 'ConsumptionRateHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionRateHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConsumptionRateHistory':
          summary: 'All Consumption Rate History IDs'
          description: 'Retrieves the list of all records for selected consumption rate
            history id entity.'
          entityName: 'ConsumptionRateHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConsumptionRateHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewConsumptionSchedule':
          summary: 'New Consumption Schedule'
          description: 'Triggers when a new consumption schedule is created.'
          entityName: 'ConsumptionSchedule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionSchedule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedConsumptionSchedule':
          summary: 'New Or Updated Consumption Schedule'
          description: 'Triggers when a  consumption schedule is created or existing consumption
            schedule is updated.'
          entityName: 'ConsumptionSchedule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionSchedule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConsumptionSchedule':
          summary: 'All Consumption Schedules'
          description: 'Retrieves the list of all records for selected consumption schedule
            entity.'
          entityName: 'ConsumptionSchedule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConsumptionSchedule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewConsumptionScheduleHistory':
          summary: 'New Consumption Schedule History ID'
          description: 'Triggers when a new consumption schedule history id is created.'
          entityName: 'ConsumptionScheduleHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionScheduleHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConsumptionScheduleHistory':
          summary: 'All Consumption Schedule History IDs'
          description: 'Retrieves the list of all records for selected consumption schedule
            history id entity.'
          entityName: 'ConsumptionScheduleHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConsumptionScheduleHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedConsumptionScheduleShare':
          summary: 'New Or Updated Consumption Schedule Share'
          description: 'Triggers when a  consumption schedule share is created or existing
            consumption schedule share is updated.'
          entityName: 'ConsumptionScheduleShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ConsumptionScheduleShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllConsumptionScheduleShare':
          summary: 'All Consumption Schedule Shares'
          description: 'Retrieves the list of all records for selected consumption schedule
            share entity.'
          entityName: 'ConsumptionScheduleShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ConsumptionScheduleShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContact':
          summary: 'New Contact'
          description: 'Triggers when a new contact is created.'
          entityName: 'Contact'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Contact'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContact':
          summary: 'New Or Updated Contact'
          description: 'Triggers when a  contact is created or existing contact is updated.'
          entityName: 'Contact'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Contact'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContact':
          summary: 'All Contacts'
          description: 'Retrieves the list of all records for selected contact entity.'
          entityName: 'Contact'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Contact'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContactHistory':
          summary: 'New Contact History'
          description: 'Triggers when a new contact history is created.'
          entityName: 'ContactHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContactHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactHistory':
          summary: 'All Contact Historys'
          description: 'Retrieves the list of all records for selected contact history
            entity.'
          entityName: 'ContactHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContactPointTypeConsent':
          summary: 'New Contact Point Type Consent'
          description: 'Triggers when a new contact point type consent is created.'
          entityName: 'ContactPointTypeConsent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContactPointTypeConsent':
          summary: 'New Or Updated Contact Point Type Consent'
          description: 'Triggers when a  contact point type consent is created or existing
            contact point type consent is updated.'
          entityName: 'ContactPointTypeConsent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactPointTypeConsent':
          summary: 'All Contact Point Type Consents'
          description: 'Retrieves the list of all records for selected contact point type
            consent entity.'
          entityName: 'ContactPointTypeConsent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContactPointTypeConsentHistory':
          summary: 'New Contact Point Type Consent  History'
          description: 'Triggers when a new contact point type consent  history is created.'
          entityName: 'ContactPointTypeConsentHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactPointTypeConsentHistory':
          summary: 'All Contact Point Type Consent  Historys'
          description: 'Retrieves the list of all records for selected contact point type
            consent  history entity.'
          entityName: 'ContactPointTypeConsentHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContactPointTypeConsentShare':
          summary: 'New Or Updated Contact Point Type Consent Share'
          description: 'Triggers when a  contact point type consent share is created or
            existing contact point type consent share is updated.'
          entityName: 'ContactPointTypeConsentShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsentShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactPointTypeConsentShare':
          summary: 'All Contact Point Type Consent Shares'
          description: 'Retrieves the list of all records for selected contact point type
            consent share entity.'
          entityName: 'ContactPointTypeConsentShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactPointTypeConsentShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContactRequest':
          summary: 'New Contact Request'
          description: 'Triggers when a new contact request is created.'
          entityName: 'ContactRequest'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContactRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContactRequest':
          summary: 'New Or Updated Contact Request'
          description: 'Triggers when a  contact request is created or existing contact
            request is updated.'
          entityName: 'ContactRequest'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContactRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactRequest':
          summary: 'All Contact Requests'
          description: 'Retrieves the list of all records for selected contact request
            entity.'
          entityName: 'ContactRequest'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContactRequestShare':
          summary: 'New Or Updated Contact Request Share'
          description: 'Triggers when a  contact request share is created or existing contact
            request share is updated.'
          entityName: 'ContactRequestShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContactRequestShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactRequestShare':
          summary: 'All Contact Request Shares'
          description: 'Retrieves the list of all records for selected contact request
            share entity.'
          entityName: 'ContactRequestShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactRequestShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContactShare':
          summary: 'New Or Updated Contact Share'
          description: 'Triggers when a  contact share is created or existing contact share
            is updated.'
          entityName: 'ContactShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContactShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContactShare':
          summary: 'All Contact Shares'
          description: 'Retrieves the list of all records for selected contact share entity.'
          entityName: 'ContactShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContactShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentAsset':
          summary: 'New Asset File'
          description: 'Triggers when a new asset file is created.'
          entityName: 'ContentAsset'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentAsset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentAsset':
          summary: 'New Or Updated Asset File'
          description: 'Triggers when a  asset file is created or existing asset file is
            updated.'
          entityName: 'ContentAsset'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentAsset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentAsset':
          summary: 'All Asset Files'
          description: 'Retrieves the list of all records for selected asset file entity.'
          entityName: 'ContentAsset'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentAsset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentDocument':
          summary: 'New Content Document'
          description: 'Triggers when a new content document is created.'
          entityName: 'ContentDocument'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentDocument'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentDocument':
          summary: 'New Or Updated Content Document'
          description: 'Triggers when a  content document is created or existing content
            document is updated.'
          entityName: 'ContentDocument'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentDocument'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentDocument':
          summary: 'All Content Documents'
          description: 'Retrieves the list of all records for selected content document
            entity.'
          entityName: 'ContentDocument'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentDocument'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentDocumentHistory':
          summary: 'New Content Document History'
          description: 'Triggers when a new content document history is created.'
          entityName: 'ContentDocumentHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentDocumentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentDocumentHistory':
          summary: 'All Content Document Historys'
          description: 'Retrieves the list of all records for selected content document
            history entity.'
          entityName: 'ContentDocumentHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentDocumentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentDocumentLink':
          summary: 'New Content Document Link'
          description: 'Triggers when a new content document link is created.'
          entityName: 'ContentDocumentLink'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentDocumentLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentDocumentLink':
          summary: 'New Or Updated Content Document Link'
          description: 'Triggers when a  content document link is created or existing content
            document link is updated.'
          entityName: 'ContentDocumentLink'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentDocumentLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentDocumentLink':
          summary: 'All Content Document Links'
          description: 'Retrieves the list of all records for selected content document
            link entity.'
          entityName: 'ContentDocumentLink'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentDocumentLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentFolder':
          summary: 'New Content Folder'
          description: 'Triggers when a new content folder is created.'
          entityName: 'ContentFolder'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentFolder'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentFolder':
          summary: 'New Or Updated Content Folder'
          description: 'Triggers when a  content folder is created or existing content folder
            is updated.'
          entityName: 'ContentFolder'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentFolder'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentFolder':
          summary: 'All Content Folders'
          description: 'Retrieves the list of all records for selected content folder entity.'
          entityName: 'ContentFolder'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentFolder'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentFolderItem':
          summary: 'New Content Folder Item'
          description: 'Triggers when a new content folder item is created.'
          entityName: 'ContentFolderItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentFolderItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentFolderItem':
          summary: 'New Or Updated Content Folder Item'
          description: 'Triggers when a  content folder item is created or existing content
            folder item is updated.'
          entityName: 'ContentFolderItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentFolderItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentFolderItem':
          summary: 'All Content Folder Items'
          description: 'Retrieves the list of all records for selected content folder item
            entity.'
          entityName: 'ContentFolderItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentFolderItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentFolderLink':
          summary: 'All Content Folder Links'
          description: 'Retrieves the list of all records for selected content folder link
            entity.'
          entityName: 'ContentFolderLink'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentFolderLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentFolderMember':
          summary: 'New Content Folder Member'
          description: 'Triggers when a new content folder member is created.'
          entityName: 'ContentFolderMember'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentFolderMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentFolderMember':
          summary: 'New Or Updated Content Folder Member'
          description: 'Triggers when a  content folder member is created or existing content
            folder member is updated.'
          entityName: 'ContentFolderMember'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentFolderMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentFolderMember':
          summary: 'All Content Folder Members'
          description: 'Retrieves the list of all records for selected content folder member
            entity.'
          entityName: 'ContentFolderMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentFolderMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentNote':
          summary: 'New Note'
          description: 'Triggers when a new note is created.'
          entityName: 'ContentNote'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentNote'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentNote':
          summary: 'New Or Updated Note'
          description: 'Triggers when a  note is created or existing note is updated.'
          entityName: 'ContentNote'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentNote'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentNote':
          summary: 'All Notes'
          description: 'Retrieves the list of all records for selected note entity.'
          entityName: 'ContentNote'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentNote'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentVersion':
          summary: 'New Content Version'
          description: 'Triggers when a new content version is created.'
          entityName: 'ContentVersion'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentVersion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentVersion':
          summary: 'New Or Updated Content Version'
          description: 'Triggers when a  content version is created or existing content
            version is updated.'
          entityName: 'ContentVersion'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentVersion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentVersion':
          summary: 'All Content Versions'
          description: 'Retrieves the list of all records for selected content version
            entity.'
          entityName: 'ContentVersion'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentVersion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentVersionHistory':
          summary: 'New Content Version History'
          description: 'Triggers when a new content version history is created.'
          entityName: 'ContentVersionHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentVersionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentVersionHistory':
          summary: 'All Content Version Historys'
          description: 'Retrieves the list of all records for selected content version
            history entity.'
          entityName: 'ContentVersionHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentVersionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentWorkspace':
          summary: 'New Library'
          description: 'Triggers when a new library is created.'
          entityName: 'ContentWorkspace'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentWorkspace'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentWorkspace':
          summary: 'New Or Updated Library'
          description: 'Triggers when a  library is created or existing library is updated.'
          entityName: 'ContentWorkspace'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentWorkspace'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentWorkspace':
          summary: 'All Librarys'
          description: 'Retrieves the list of all records for selected library entity.'
          entityName: 'ContentWorkspace'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentWorkspace'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentWorkspaceDoc':
          summary: 'New Library Document'
          description: 'Triggers when a new library document is created.'
          entityName: 'ContentWorkspaceDoc'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentWorkspaceDoc'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentWorkspaceDoc':
          summary: 'All Library Documents'
          description: 'Retrieves the list of all records for selected library document
            entity.'
          entityName: 'ContentWorkspaceDoc'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentWorkspaceDoc'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentWorkspaceMember':
          summary: 'New Library Member'
          description: 'Triggers when a new library member is created.'
          entityName: 'ContentWorkspaceMember'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentWorkspaceMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentWorkspaceMember':
          summary: 'All Library Members'
          description: 'Retrieves the list of all records for selected library member entity.'
          entityName: 'ContentWorkspaceMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentWorkspaceMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContentWorkspacePermission':
          summary: 'New Library Permission'
          description: 'Triggers when a new library permission is created.'
          entityName: 'ContentWorkspacePermission'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContentWorkspacePermission'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContentWorkspacePermission':
          summary: 'New Or Updated Library Permission'
          description: 'Triggers when a  library permission is created or existing library
            permission is updated.'
          entityName: 'ContentWorkspacePermission'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContentWorkspacePermission'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContentWorkspacePermission':
          summary: 'All Library Permissions'
          description: 'Retrieves the list of all records for selected library permission
            entity.'
          entityName: 'ContentWorkspacePermission'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContentWorkspacePermission'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContract':
          summary: 'New Contract'
          description: 'Triggers when a new contract is created.'
          entityName: 'Contract'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Contract'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContract':
          summary: 'New Or Updated Contract'
          description: 'Triggers when a  contract is created or existing contract is updated.'
          entityName: 'Contract'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Contract'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContract':
          summary: 'All Contracts'
          description: 'Retrieves the list of all records for selected contract entity.'
          entityName: 'Contract'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Contract'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContractContactRole':
          summary: 'New Contract Contact Role'
          description: 'Triggers when a new contract contact role is created.'
          entityName: 'ContractContactRole'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContractContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContractContactRole':
          summary: 'New Or Updated Contract Contact Role'
          description: 'Triggers when a  contract contact role is created or existing contract
            contact role is updated.'
          entityName: 'ContractContactRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContractContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContractContactRole':
          summary: 'All Contract Contact Roles'
          description: 'Retrieves the list of all records for selected contract contact
            role entity.'
          entityName: 'ContractContactRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContractContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContractHistory':
          summary: 'New Contract History'
          description: 'Triggers when a new contract history is created.'
          entityName: 'ContractHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContractHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContractHistory':
          summary: 'All Contract Historys'
          description: 'Retrieves the list of all records for selected contract history
            entity.'
          entityName: 'ContractHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContractHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewContractStatus':
          summary: 'New Contract Status Value'
          description: 'Triggers when a new contract status value is created.'
          entityName: 'ContractStatus'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ContractStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedContractStatus':
          summary: 'New Or Updated Contract Status Value'
          description: 'Triggers when a  contract status value is created or existing contract
            status value is updated.'
          entityName: 'ContractStatus'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ContractStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllContractStatus':
          summary: 'All Contract Status Values'
          description: 'Retrieves the list of all records for selected contract status
            value entity.'
          entityName: 'ContractStatus'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ContractStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCorsWhitelistEntry':
          summary: 'New CORS Allowed Origin List'
          description: 'Triggers when a new cors allowed origin list is created.'
          entityName: 'CorsWhitelistEntry'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CorsWhitelistEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCorsWhitelistEntry':
          summary: 'New Or Updated CORS Allowed Origin List'
          description: 'Triggers when a  cors allowed origin list is created or existing
            cors allowed origin list is updated.'
          entityName: 'CorsWhitelistEntry'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CorsWhitelistEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCorsWhitelistEntry':
          summary: 'All CORS Allowed Origin Lists'
          description: 'Retrieves the list of all records for selected cors allowed origin
            list entity.'
          entityName: 'CorsWhitelistEntry'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CorsWhitelistEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCredentialStuffingEventStore':
          summary: 'New Credential Stuffing Event Store'
          description: 'Triggers when a new credential stuffing event store is created.'
          entityName: 'CredentialStuffingEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CredentialStuffingEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCredentialStuffingEventStore':
          summary: 'New Or Updated Credential Stuffing Event Store'
          description: 'Triggers when a  credential stuffing event store is created or existing
            credential stuffing event store is updated.'
          entityName: 'CredentialStuffingEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CredentialStuffingEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCredentialStuffingEventStore':
          summary: 'All Credential Stuffing Event Stores'
          description: 'Retrieves the list of all records for selected credential stuffing
            event store entity.'
          entityName: 'CredentialStuffingEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CredentialStuffingEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCronJobDetail':
          summary: 'All Cron Jobs'
          description: 'Retrieves the list of all records for selected cron job entity.'
          entityName: 'CronJobDetail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CronJobDetail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCronTrigger':
          summary: 'New Scheduled Jobs'
          description: 'Triggers when a new scheduled jobs is created.'
          entityName: 'CronTrigger'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CronTrigger'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCronTrigger':
          summary: 'All Scheduled Jobss'
          description: 'Retrieves the list of all records for selected scheduled jobs entity.'
          entityName: 'CronTrigger'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CronTrigger'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCspTrustedSite':
          summary: 'New Content Security Policy Trusted Site'
          description: 'Triggers when a new content security policy trusted site is created.'
          entityName: 'CspTrustedSite'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CspTrustedSite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCspTrustedSite':
          summary: 'New Or Updated Content Security Policy Trusted Site'
          description: 'Triggers when a  content security policy trusted site is created
            or existing content security policy trusted site is updated.'
          entityName: 'CspTrustedSite'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CspTrustedSite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCspTrustedSite':
          summary: 'All Content Security Policy Trusted Sites'
          description: 'Retrieves the list of all records for selected content security
            policy trusted site entity.'
          entityName: 'CspTrustedSite'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CspTrustedSite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomBrand':
          summary: 'New Custom Brand'
          description: 'Triggers when a new custom brand is created.'
          entityName: 'CustomBrand'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomBrand'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomBrand':
          summary: 'New Or Updated Custom Brand'
          description: 'Triggers when a  custom brand is created or existing custom brand
            is updated.'
          entityName: 'CustomBrand'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomBrand'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomBrand':
          summary: 'All Custom Brands'
          description: 'Retrieves the list of all records for selected custom brand entity.'
          entityName: 'CustomBrand'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomBrand'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomBrandAsset':
          summary: 'New Custom Brand Asset'
          description: 'Triggers when a new custom brand asset is created.'
          entityName: 'CustomBrandAsset'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomBrandAsset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomBrandAsset':
          summary: 'New Or Updated Custom Brand Asset'
          description: 'Triggers when a  custom brand asset is created or existing custom
            brand asset is updated.'
          entityName: 'CustomBrandAsset'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomBrandAsset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomBrandAsset':
          summary: 'All Custom Brand Assets'
          description: 'Retrieves the list of all records for selected custom brand asset
            entity.'
          entityName: 'CustomBrandAsset'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomBrandAsset'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomHelpMenuItem':
          summary: 'New Custom Help Menu Item'
          description: 'Triggers when a new custom help menu item is created.'
          entityName: 'CustomHelpMenuItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomHelpMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomHelpMenuItem':
          summary: 'New Or Updated Custom Help Menu Item'
          description: 'Triggers when a  custom help menu item is created or existing custom
            help menu item is updated.'
          entityName: 'CustomHelpMenuItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomHelpMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomHelpMenuItem':
          summary: 'All Custom Help Menu Items'
          description: 'Retrieves the list of all records for selected custom help menu
            item entity.'
          entityName: 'CustomHelpMenuItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomHelpMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomHelpMenuSection':
          summary: 'New Custom Help Menu Section'
          description: 'Triggers when a new custom help menu section is created.'
          entityName: 'CustomHelpMenuSection'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomHelpMenuSection'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomHelpMenuSection':
          summary: 'New Or Updated Custom Help Menu Section'
          description: 'Triggers when a  custom help menu section is created or existing
            custom help menu section is updated.'
          entityName: 'CustomHelpMenuSection'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomHelpMenuSection'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomHelpMenuSection':
          summary: 'All Custom Help Menu Sections'
          description: 'Retrieves the list of all records for selected custom help menu
            section entity.'
          entityName: 'CustomHelpMenuSection'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomHelpMenuSection'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomHttpHeader':
          summary: 'New Custom HTTP Header'
          description: 'Triggers when a new custom http header is created.'
          entityName: 'CustomHttpHeader'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomHttpHeader'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomHttpHeader':
          summary: 'New Or Updated Custom HTTP Header'
          description: 'Triggers when a  custom http header is created or existing custom
            http header is updated.'
          entityName: 'CustomHttpHeader'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomHttpHeader'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomHttpHeader':
          summary: 'All Custom HTTP Headers'
          description: 'Retrieves the list of all records for selected custom http header
            entity.'
          entityName: 'CustomHttpHeader'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomHttpHeader'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomNotificationType':
          summary: 'New Custom Notification Type'
          description: 'Triggers when a new custom notification type is created.'
          entityName: 'CustomNotificationType'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomNotificationType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomNotificationType':
          summary: 'New Or Updated Custom Notification Type'
          description: 'Triggers when a  custom notification type is created or existing
            custom notification type is updated.'
          entityName: 'CustomNotificationType'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomNotificationType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomNotificationType':
          summary: 'All Custom Notification Types'
          description: 'Retrieves the list of all records for selected custom notification
            type entity.'
          entityName: 'CustomNotificationType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomNotificationType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomObjectUserLicenseMetrics':
          summary: 'All Custom Object Usage By User License Metrics'
          description: 'Retrieves the list of all records for selected custom object usage
            by user license metric entity.'
          entityName: 'CustomObjectUserLicenseMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomObjectUserLicenseMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomPermission':
          summary: 'New Custom Permission'
          description: 'Triggers when a new custom permission is created.'
          entityName: 'CustomPermission'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomPermission'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomPermission':
          summary: 'New Or Updated Custom Permission'
          description: 'Triggers when a  custom permission is created or existing custom
            permission is updated.'
          entityName: 'CustomPermission'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomPermission'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomPermission':
          summary: 'All Custom Permissions'
          description: 'Retrieves the list of all records for selected custom permission
            entity.'
          entityName: 'CustomPermission'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomPermission'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomPermissionDependency':
          summary: 'New Custom Permission Dependency'
          description: 'Triggers when a new custom permission dependency is created.'
          entityName: 'CustomPermissionDependency'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from CustomPermissionDependency'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomPermissionDependency':
          summary: 'New Or Updated Custom Permission Dependency'
          description: 'Triggers when a  custom permission dependency is created or existing
            custom permission dependency is updated.'
          entityName: 'CustomPermissionDependency'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomPermissionDependency'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomPermissionDependency':
          summary: 'All Custom Permission Dependencys'
          description: 'Retrieves the list of all records for selected custom permission
            dependency entity.'
          entityName: 'CustomPermissionDependency'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomPermissionDependency'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomer':
          summary: 'New Customer'
          description: 'Triggers when a new customer is created.'
          entityName: 'Customer'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Customer'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomer':
          summary: 'New Or Updated Customer'
          description: 'Triggers when a  customer is created or existing customer is updated.'
          entityName: 'Customer'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Customer'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomer':
          summary: 'All Customers'
          description: 'Retrieves the list of all records for selected customer entity.'
          entityName: 'Customer'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Customer'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedCustomerShare':
          summary: 'New Or Updated Customer Share'
          description: 'Triggers when a  customer share is created or existing customer
            share is updated.'
          entityName: 'CustomerShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from CustomerShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllCustomerShare':
          summary: 'All Customer Shares'
          description: 'Retrieves the list of all records for selected customer share entity.'
          entityName: 'CustomerShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from CustomerShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDashboard':
          summary: 'New Dashboard'
          description: 'Triggers when a new dashboard is created.'
          entityName: 'Dashboard'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Dashboard'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDashboard':
          summary: 'New Or Updated Dashboard'
          description: 'Triggers when a  dashboard is created or existing dashboard is updated.'
          entityName: 'Dashboard'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Dashboard'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDashboard':
          summary: 'All Dashboards'
          description: 'Retrieves the list of all records for selected dashboard entity.'
          entityName: 'Dashboard'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Dashboard'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDashboardComponent':
          summary: 'All Dashboard Components'
          description: 'Retrieves the list of all records for selected dashboard component
            entity.'
          entityName: 'DashboardComponent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DashboardComponent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataAssessmentFieldMetric':
          summary: 'New Data Assessment Field Metric'
          description: 'Triggers when a new data assessment field metric is created.'
          entityName: 'DataAssessmentFieldMetric'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataAssessmentFieldMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataAssessmentFieldMetric':
          summary: 'New Or Updated Data Assessment Field Metric'
          description: 'Triggers when a  data assessment field metric is created or existing
            data assessment field metric is updated.'
          entityName: 'DataAssessmentFieldMetric'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataAssessmentFieldMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataAssessmentFieldMetric':
          summary: 'All Data Assessment Field Metrics'
          description: 'Retrieves the list of all records for selected data assessment
            field metric entity.'
          entityName: 'DataAssessmentFieldMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataAssessmentFieldMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataAssessmentMetric':
          summary: 'New Data Assessment Metric'
          description: 'Triggers when a new data assessment metric is created.'
          entityName: 'DataAssessmentMetric'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataAssessmentMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataAssessmentMetric':
          summary: 'New Or Updated Data Assessment Metric'
          description: 'Triggers when a  data assessment metric is created or existing data
            assessment metric is updated.'
          entityName: 'DataAssessmentMetric'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataAssessmentMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataAssessmentMetric':
          summary: 'All Data Assessment Metrics'
          description: 'Retrieves the list of all records for selected data assessment
            metric entity.'
          entityName: 'DataAssessmentMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataAssessmentMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataAssessmentValueMetric':
          summary: 'New Data Assessment Field Value Metric'
          description: 'Triggers when a new data assessment field value metric is created.'
          entityName: 'DataAssessmentValueMetric'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataAssessmentValueMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataAssessmentValueMetric':
          summary: 'New Or Updated Data Assessment Field Value Metric'
          description: 'Triggers when a  data assessment field value metric is created or
            existing data assessment field value metric is updated.'
          entityName: 'DataAssessmentValueMetric'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataAssessmentValueMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataAssessmentValueMetric':
          summary: 'All Data Assessment Field Value Metrics'
          description: 'Retrieves the list of all records for selected data assessment
            field value metric entity.'
          entityName: 'DataAssessmentValueMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataAssessmentValueMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataStatistics':
          summary: 'All Data Statistics'
          description: 'Retrieves the list of all records for selected data statistics
            entity.'
          entityName: 'DataStatistics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataStatistics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataType':
          summary: 'All Data Types'
          description: 'Retrieves the list of all records for selected data type entity.'
          entityName: 'DataType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataUseLegalBasis':
          summary: 'New Data Use Legal Basis'
          description: 'Triggers when a new data use legal basis is created.'
          entityName: 'DataUseLegalBasis'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasis'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataUseLegalBasis':
          summary: 'New Or Updated Data Use Legal Basis'
          description: 'Triggers when a  data use legal basis is created or existing data
            use legal basis is updated.'
          entityName: 'DataUseLegalBasis'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasis'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataUseLegalBasis':
          summary: 'All Data Use Legal Basiss'
          description: 'Retrieves the list of all records for selected data use legal basis
            entity.'
          entityName: 'DataUseLegalBasis'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasis'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataUseLegalBasisHistory':
          summary: 'All Data Use Legal Basis  Historys'
          description: 'Retrieves the list of all records for selected data use legal basis  history
            entity.'
          entityName: 'DataUseLegalBasisHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasisHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataUseLegalBasisShare':
          summary: 'New Data Use Legal Basis Share'
          description: 'Triggers when a new data use legal basis share is created.'
          entityName: 'DataUseLegalBasisShare'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasisShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataUseLegalBasisShare':
          summary: 'New Or Updated Data Use Legal Basis Share'
          description: 'Triggers when a  data use legal basis share is created or existing
            data use legal basis share is updated.'
          entityName: 'DataUseLegalBasisShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasisShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataUseLegalBasisShare':
          summary: 'All Data Use Legal Basis Shares'
          description: 'Retrieves the list of all records for selected data use legal basis
            share entity.'
          entityName: 'DataUseLegalBasisShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataUseLegalBasisShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataUsePurpose':
          summary: 'New Data Use Purpose'
          description: 'Triggers when a new data use purpose is created.'
          entityName: 'DataUsePurpose'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataUsePurpose'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataUsePurpose':
          summary: 'New Or Updated Data Use Purpose'
          description: 'Triggers when a  data use purpose is created or existing data use
            purpose is updated.'
          entityName: 'DataUsePurpose'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataUsePurpose'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataUsePurpose':
          summary: 'All Data Use Purposes'
          description: 'Retrieves the list of all records for selected data use purpose
            entity.'
          entityName: 'DataUsePurpose'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataUsePurpose'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDataUsePurposeHistory':
          summary: 'New Data Use Purpose  History'
          description: 'Triggers when a new data use purpose  history is created.'
          entityName: 'DataUsePurposeHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DataUsePurposeHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataUsePurposeHistory':
          summary: 'All Data Use Purpose  Historys'
          description: 'Retrieves the list of all records for selected data use purpose  history
            entity.'
          entityName: 'DataUsePurposeHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataUsePurposeHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDataUsePurposeShare':
          summary: 'New Or Updated Data Use Purpose Share'
          description: 'Triggers when a  data use purpose share is created or existing data
            use purpose share is updated.'
          entityName: 'DataUsePurposeShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DataUsePurposeShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDataUsePurposeShare':
          summary: 'All Data Use Purpose Shares'
          description: 'Retrieves the list of all records for selected data use purpose
            share entity.'
          entityName: 'DataUsePurposeShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DataUsePurposeShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDatacloudAddress':
          summary: 'All Data.com Addresss'
          description: 'Retrieves the list of all records for selected data.com address
            entity.'
          entityName: 'DatacloudAddress'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DatacloudAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDeclinedEventRelation':
          summary: 'New Declined Event Relation'
          description: 'Triggers when a new declined event relation is created.'
          entityName: 'DeclinedEventRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DeclinedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDeclinedEventRelation':
          summary: 'New Or Updated Declined Event Relation'
          description: 'Triggers when a  declined event relation is created or existing
            declined event relation is updated.'
          entityName: 'DeclinedEventRelation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DeclinedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDeclinedEventRelation':
          summary: 'All Declined Event Relations'
          description: 'Retrieves the list of all records for selected declined event relation
            entity.'
          entityName: 'DeclinedEventRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DeclinedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDeleteEvent':
          summary: 'All Recycle Bin Items'
          description: 'Retrieves the list of all records for selected recycle bin item
            entity.'
          entityName: 'DeleteEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DeleteEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDocument':
          summary: 'New Document'
          description: 'Triggers when a new document is created.'
          entityName: 'Document'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Document'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDocument':
          summary: 'New Or Updated Document'
          description: 'Triggers when a  document is created or existing document is updated.'
          entityName: 'Document'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Document'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDocument':
          summary: 'All Documents'
          description: 'Retrieves the list of all records for selected document entity.'
          entityName: 'Document'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Document'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDocumentAttachmentMap':
          summary: 'New Document Entity Map'
          description: 'Triggers when a new document entity map is created.'
          entityName: 'DocumentAttachmentMap'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DocumentAttachmentMap'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDocumentAttachmentMap':
          summary: 'All Document Entity Maps'
          description: 'Retrieves the list of all records for selected document entity
            map entity.'
          entityName: 'DocumentAttachmentMap'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DocumentAttachmentMap'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDomain':
          summary: 'New Domain'
          description: 'Triggers when a new domain is created.'
          entityName: 'Domain'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Domain'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDomain':
          summary: 'New Or Updated Domain'
          description: 'Triggers when a  domain is created or existing domain is updated.'
          entityName: 'Domain'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Domain'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDomain':
          summary: 'All Domains'
          description: 'Retrieves the list of all records for selected domain entity.'
          entityName: 'Domain'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Domain'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDomainSite':
          summary: 'New Custom URL'
          description: 'Triggers when a new custom url is created.'
          entityName: 'DomainSite'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DomainSite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDomainSite':
          summary: 'New Or Updated Custom URL'
          description: 'Triggers when a  custom url is created or existing custom url is
            updated.'
          entityName: 'DomainSite'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DomainSite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDomainSite':
          summary: 'All Custom URLs'
          description: 'Retrieves the list of all records for selected custom url entity.'
          entityName: 'DomainSite'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DomainSite'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDuplicateRecordItem':
          summary: 'New Duplicate Record Item'
          description: 'Triggers when a new duplicate record item is created.'
          entityName: 'DuplicateRecordItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DuplicateRecordItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDuplicateRecordItem':
          summary: 'New Or Updated Duplicate Record Item'
          description: 'Triggers when a  duplicate record item is created or existing duplicate
            record item is updated.'
          entityName: 'DuplicateRecordItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DuplicateRecordItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDuplicateRecordItem':
          summary: 'All Duplicate Record Items'
          description: 'Retrieves the list of all records for selected duplicate record
            item entity.'
          entityName: 'DuplicateRecordItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DuplicateRecordItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDuplicateRecordSet':
          summary: 'New Duplicate Record Set'
          description: 'Triggers when a new duplicate record set is created.'
          entityName: 'DuplicateRecordSet'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DuplicateRecordSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDuplicateRecordSet':
          summary: 'New Or Updated Duplicate Record Set'
          description: 'Triggers when a  duplicate record set is created or existing duplicate
            record set is updated.'
          entityName: 'DuplicateRecordSet'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DuplicateRecordSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDuplicateRecordSet':
          summary: 'All Duplicate Record Sets'
          description: 'Retrieves the list of all records for selected duplicate record
            set entity.'
          entityName: 'DuplicateRecordSet'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DuplicateRecordSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewDuplicateRule':
          summary: 'New Duplicate Rule'
          description: 'Triggers when a new duplicate rule is created.'
          entityName: 'DuplicateRule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from DuplicateRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedDuplicateRule':
          summary: 'New Or Updated Duplicate Rule'
          description: 'Triggers when a  duplicate rule is created or existing duplicate
            rule is updated.'
          entityName: 'DuplicateRule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from DuplicateRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllDuplicateRule':
          summary: 'All Duplicate Rules'
          description: 'Retrieves the list of all records for selected duplicate rule entity.'
          entityName: 'DuplicateRule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from DuplicateRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailCapture':
          summary: 'New EmailCapture'
          description: 'Triggers when a new emailcapture is created.'
          entityName: 'EmailCapture'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailCapture'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailCapture':
          summary: 'New Or Updated EmailCapture'
          description: 'Triggers when a  emailcapture is created or existing emailcapture
            is updated.'
          entityName: 'EmailCapture'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailCapture'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailCapture':
          summary: 'All EmailCaptures'
          description: 'Retrieves the list of all records for selected emailcapture entity.'
          entityName: 'EmailCapture'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailCapture'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailDomainFilter':
          summary: 'New Email Domain Filter'
          description: 'Triggers when a new email domain filter is created.'
          entityName: 'EmailDomainFilter'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailDomainFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailDomainFilter':
          summary: 'New Or Updated Email Domain Filter'
          description: 'Triggers when a  email domain filter is created or existing email
            domain filter is updated.'
          entityName: 'EmailDomainFilter'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailDomainFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailDomainFilter':
          summary: 'All Email Domain Filters'
          description: 'Retrieves the list of all records for selected email domain filter
            entity.'
          entityName: 'EmailDomainFilter'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailDomainFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailDomainKey':
          summary: 'New Email Domain Key'
          description: 'Triggers when a new email domain key is created.'
          entityName: 'EmailDomainKey'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailDomainKey'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailDomainKey':
          summary: 'New Or Updated Email Domain Key'
          description: 'Triggers when a  email domain key is created or existing email domain
            key is updated.'
          entityName: 'EmailDomainKey'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailDomainKey'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailDomainKey':
          summary: 'All Email Domain Keys'
          description: 'Retrieves the list of all records for selected email domain key
            entity.'
          entityName: 'EmailDomainKey'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailDomainKey'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailMessage':
          summary: 'New Email Message'
          description: 'Triggers when a new email message is created.'
          entityName: 'EmailMessage'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailMessage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailMessage':
          summary: 'New Or Updated Email Message'
          description: 'Triggers when a  email message is created or existing email message
            is updated.'
          entityName: 'EmailMessage'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailMessage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailMessage':
          summary: 'All Email Messages'
          description: 'Retrieves the list of all records for selected email message entity.'
          entityName: 'EmailMessage'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailMessage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailMessageRelation':
          summary: 'New Email Message Relation'
          description: 'Triggers when a new email message relation is created.'
          entityName: 'EmailMessageRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailMessageRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailMessageRelation':
          summary: 'All Email Message Relations'
          description: 'Retrieves the list of all records for selected email message relation
            entity.'
          entityName: 'EmailMessageRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailMessageRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailRelay':
          summary: 'New Email Relay'
          description: 'Triggers when a new email relay is created.'
          entityName: 'EmailRelay'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailRelay'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailRelay':
          summary: 'New Or Updated Email Relay'
          description: 'Triggers when a  email relay is created or existing email relay
            is updated.'
          entityName: 'EmailRelay'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailRelay'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailRelay':
          summary: 'All Email Relays'
          description: 'Retrieves the list of all records for selected email relay entity.'
          entityName: 'EmailRelay'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailRelay'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailServicesAddress':
          summary: 'New Email Services Address'
          description: 'Triggers when a new email services address is created.'
          entityName: 'EmailServicesAddress'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailServicesAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailServicesAddress':
          summary: 'New Or Updated Email Services Address'
          description: 'Triggers when a  email services address is created or existing email
            services address is updated.'
          entityName: 'EmailServicesAddress'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailServicesAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailServicesAddress':
          summary: 'All Email Services Addresss'
          description: 'Retrieves the list of all records for selected email services address
            entity.'
          entityName: 'EmailServicesAddress'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailServicesAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailServicesFunction':
          summary: 'New Email Service'
          description: 'Triggers when a new email service is created.'
          entityName: 'EmailServicesFunction'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailServicesFunction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailServicesFunction':
          summary: 'New Or Updated Email Service'
          description: 'Triggers when a  email service is created or existing email service
            is updated.'
          entityName: 'EmailServicesFunction'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailServicesFunction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailServicesFunction':
          summary: 'All Email Services'
          description: 'Retrieves the list of all records for selected email service entity.'
          entityName: 'EmailServicesFunction'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailServicesFunction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEmailTemplate':
          summary: 'New Email Template'
          description: 'Triggers when a new email template is created.'
          entityName: 'EmailTemplate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EmailTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEmailTemplate':
          summary: 'New Or Updated Email Template'
          description: 'Triggers when a  email template is created or existing email template
            is updated.'
          entityName: 'EmailTemplate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EmailTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmailTemplate':
          summary: 'All Email Templates'
          description: 'Retrieves the list of all records for selected email template entity.'
          entityName: 'EmailTemplate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmailTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmbeddedServiceDetail':
          summary: 'All Embedded Services'
          description: 'Retrieves the list of all records for selected embedded service
            entity.'
          entityName: 'EmbeddedServiceDetail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmbeddedServiceDetail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEmbeddedServiceLabel':
          summary: 'All Embedded Service Labels'
          description: 'Retrieves the list of all records for selected embedded service
            label entity.'
          entityName: 'EmbeddedServiceLabel'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EmbeddedServiceLabel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEngagementChannelType':
          summary: 'New Engagement Channel Type'
          description: 'Triggers when a new engagement channel type is created.'
          entityName: 'EngagementChannelType'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EngagementChannelType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEngagementChannelType':
          summary: 'New Or Updated Engagement Channel Type'
          description: 'Triggers when a  engagement channel type is created or existing
            engagement channel type is updated.'
          entityName: 'EngagementChannelType'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EngagementChannelType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEngagementChannelType':
          summary: 'All Engagement Channel Types'
          description: 'Retrieves the list of all records for selected engagement channel
            type entity.'
          entityName: 'EngagementChannelType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EngagementChannelType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEngagementChannelTypeHistory':
          summary: 'New Engagement Channel Type  History'
          description: 'Triggers when a new engagement channel type  history is created.'
          entityName: 'EngagementChannelTypeHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EngagementChannelTypeHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEngagementChannelTypeHistory':
          summary: 'All Engagement Channel Type  Historys'
          description: 'Retrieves the list of all records for selected engagement channel
            type  history entity.'
          entityName: 'EngagementChannelTypeHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EngagementChannelTypeHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEngagementChannelTypeShare':
          summary: 'New Or Updated Engagement Channel Type Share'
          description: 'Triggers when a  engagement channel type share is created or existing
            engagement channel type share is updated.'
          entityName: 'EngagementChannelTypeShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EngagementChannelTypeShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEngagementChannelTypeShare':
          summary: 'All Engagement Channel Type Shares'
          description: 'Retrieves the list of all records for selected engagement channel
            type share entity.'
          entityName: 'EngagementChannelTypeShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EngagementChannelTypeShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEntityDefinition':
          summary: 'New Or Updated Entity Definition'
          description: 'Triggers when a  entity definition is created or existing entity
            definition is updated.'
          entityName: 'EntityDefinition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EntityDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEntityDefinition':
          summary: 'All Entity Definitions'
          description: 'Retrieves the list of all records for selected entity definition
            entity.'
          entityName: 'EntityDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EntityDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEntityParticle':
          summary: 'All Entity Particles'
          description: 'Retrieves the list of all records for selected entity particle
            entity.'
          entityName: 'EntityParticle'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EntityParticle'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEvent':
          summary: 'New Event'
          description: 'Triggers when a new event is created.'
          entityName: 'Event'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Event'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEvent':
          summary: 'New Or Updated Event'
          description: 'Triggers when a  event is created or existing event is updated.'
          entityName: 'Event'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Event'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEvent':
          summary: 'All Events'
          description: 'Retrieves the list of all records for selected event entity.'
          entityName: 'Event'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Event'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEventBusSubscriber':
          summary: 'All Platform Event Subscriptions'
          description: 'Retrieves the list of all records for selected platform event subscription
            entity.'
          entityName: 'EventBusSubscriber'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EventBusSubscriber'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEventLogFile':
          summary: 'New Event Log File'
          description: 'Triggers when a new event log file is created.'
          entityName: 'EventLogFile'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EventLogFile'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEventLogFile':
          summary: 'New Or Updated Event Log File'
          description: 'Triggers when a  event log file is created or existing event log
            file is updated.'
          entityName: 'EventLogFile'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EventLogFile'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEventLogFile':
          summary: 'All Event Log Files'
          description: 'Retrieves the list of all records for selected event log file entity.'
          entityName: 'EventLogFile'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EventLogFile'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEventRelation':
          summary: 'New Event Relation'
          description: 'Triggers when a new event relation is created.'
          entityName: 'EventRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEventRelation':
          summary: 'New Or Updated Event Relation'
          description: 'Triggers when a  event relation is created or existing event relation
            is updated.'
          entityName: 'EventRelation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEventRelation':
          summary: 'All Event Relations'
          description: 'Retrieves the list of all records for selected event relation entity.'
          entityName: 'EventRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEventRelayConfig':
          summary: 'New Event Relay Config'
          description: 'Triggers when a new event relay config is created.'
          entityName: 'EventRelayConfig'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EventRelayConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEventRelayConfig':
          summary: 'New Or Updated Event Relay Config'
          description: 'Triggers when a  event relay config is created or existing event
            relay config is updated.'
          entityName: 'EventRelayConfig'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EventRelayConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEventRelayConfig':
          summary: 'All Event Relay Configs'
          description: 'Retrieves the list of all records for selected event relay config
            entity.'
          entityName: 'EventRelayConfig'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EventRelayConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewEventRelayFeedback':
          summary: 'New Event Relay Feedback'
          description: 'Triggers when a new event relay feedback is created.'
          entityName: 'EventRelayFeedback'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from EventRelayFeedback'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedEventRelayFeedback':
          summary: 'New Or Updated Event Relay Feedback'
          description: 'Triggers when a  event relay feedback is created or existing event
            relay feedback is updated.'
          entityName: 'EventRelayFeedback'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from EventRelayFeedback'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllEventRelayFeedback':
          summary: 'All Event Relay Feedbacks'
          description: 'Retrieves the list of all records for selected event relay feedback
            entity.'
          entityName: 'EventRelayFeedback'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from EventRelayFeedback'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExpressionFilter':
          summary: 'New ExpressionFilter'
          description: 'Triggers when a new expressionfilter is created.'
          entityName: 'ExpressionFilter'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExpressionFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExpressionFilter':
          summary: 'New Or Updated ExpressionFilter'
          description: 'Triggers when a  expressionfilter is created or existing expressionfilter
            is updated.'
          entityName: 'ExpressionFilter'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExpressionFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExpressionFilter':
          summary: 'All ExpressionFilters'
          description: 'Retrieves the list of all records for selected expressionfilter
            entity.'
          entityName: 'ExpressionFilter'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExpressionFilter'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExpressionFilterCriteria':
          summary: 'New ExpressionFilterCriteria'
          description: 'Triggers when a new expressionfiltercriteria is created.'
          entityName: 'ExpressionFilterCriteria'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExpressionFilterCriteria'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExpressionFilterCriteria':
          summary: 'New Or Updated ExpressionFilterCriteria'
          description: 'Triggers when a  expressionfiltercriteria is created or existing
            expressionfiltercriteria is updated.'
          entityName: 'ExpressionFilterCriteria'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExpressionFilterCriteria'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExpressionFilterCriteria':
          summary: 'All ExpressionFilterCriterias'
          description: 'Retrieves the list of all records for selected expressionfiltercriteria
            entity.'
          entityName: 'ExpressionFilterCriteria'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExpressionFilterCriteria'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExpressionSetView':
          summary: 'New Or Updated Expression Set View'
          description: 'Triggers when a  expression set view is created or existing expression
            set view is updated.'
          entityName: 'ExpressionSetView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExpressionSetView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExpressionSetView':
          summary: 'All Expression Set Views'
          description: 'Retrieves the list of all records for selected expression set view
            entity.'
          entityName: 'ExpressionSetView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExpressionSetView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExternalDataSource':
          summary: 'New External Data Source'
          description: 'Triggers when a new external data source is created.'
          entityName: 'ExternalDataSource'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExternalDataSource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExternalDataSource':
          summary: 'New Or Updated External Data Source'
          description: 'Triggers when a  external data source is created or existing external
            data source is updated.'
          entityName: 'ExternalDataSource'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExternalDataSource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExternalDataSource':
          summary: 'All External Data Sources'
          description: 'Retrieves the list of all records for selected external data source
            entity.'
          entityName: 'ExternalDataSource'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExternalDataSource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExternalDataSrcDescriptor':
          summary: 'New External Data Source Descriptor'
          description: 'Triggers when a new external data source descriptor is created.'
          entityName: 'ExternalDataSrcDescriptor'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExternalDataSrcDescriptor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExternalDataSrcDescriptor':
          summary: 'New Or Updated External Data Source Descriptor'
          description: 'Triggers when a  external data source descriptor is created or existing
            external data source descriptor is updated.'
          entityName: 'ExternalDataSrcDescriptor'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExternalDataSrcDescriptor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExternalDataSrcDescriptor':
          summary: 'All External Data Source Descriptors'
          description: 'Retrieves the list of all records for selected external data source
            descriptor entity.'
          entityName: 'ExternalDataSrcDescriptor'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExternalDataSrcDescriptor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExternalDataUserAuth':
          summary: 'New External Data User Authentication'
          description: 'Triggers when a new external data user authentication is created.'
          entityName: 'ExternalDataUserAuth'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExternalDataUserAuth'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExternalDataUserAuth':
          summary: 'New Or Updated External Data User Authentication'
          description: 'Triggers when a  external data user authentication is created or
            existing external data user authentication is updated.'
          entityName: 'ExternalDataUserAuth'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExternalDataUserAuth'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExternalDataUserAuth':
          summary: 'All External Data User Authentications'
          description: 'Retrieves the list of all records for selected external data user
            authentication entity.'
          entityName: 'ExternalDataUserAuth'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExternalDataUserAuth'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExternalEvent':
          summary: 'New External Event'
          description: 'Triggers when a new external event is created.'
          entityName: 'ExternalEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExternalEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExternalEvent':
          summary: 'New Or Updated External Event'
          description: 'Triggers when a  external event is created or existing external
            event is updated.'
          entityName: 'ExternalEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExternalEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExternalEvent':
          summary: 'All External Events'
          description: 'Retrieves the list of all records for selected external event entity.'
          entityName: 'ExternalEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExternalEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExternalEventMapping':
          summary: 'New External Event Mapping'
          description: 'Triggers when a new external event mapping is created.'
          entityName: 'ExternalEventMapping'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExternalEventMapping'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExternalEventMapping':
          summary: 'New Or Updated External Event Mapping'
          description: 'Triggers when a  external event mapping is created or existing external
            event mapping is updated.'
          entityName: 'ExternalEventMapping'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExternalEventMapping'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExternalEventMapping':
          summary: 'All External Event Mappings'
          description: 'Retrieves the list of all records for selected external event mapping
            entity.'
          entityName: 'ExternalEventMapping'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExternalEventMapping'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewExternalEventMappingShare':
          summary: 'New External Event Mapping Share'
          description: 'Triggers when a new external event mapping share is created.'
          entityName: 'ExternalEventMappingShare'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ExternalEventMappingShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedExternalEventMappingShare':
          summary: 'New Or Updated External Event Mapping Share'
          description: 'Triggers when a  external event mapping share is created or existing
            external event mapping share is updated.'
          entityName: 'ExternalEventMappingShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ExternalEventMappingShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllExternalEventMappingShare':
          summary: 'All External Event Mapping Shares'
          description: 'Retrieves the list of all records for selected external event mapping
            share entity.'
          entityName: 'ExternalEventMappingShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ExternalEventMappingShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFieldDefinition':
          summary: 'New Field Definition'
          description: 'Triggers when a new field definition is created.'
          entityName: 'FieldDefinition'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FieldDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFieldDefinition':
          summary: 'New Or Updated Field Definition'
          description: 'Triggers when a  field definition is created or existing field definition
            is updated.'
          entityName: 'FieldDefinition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FieldDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFieldDefinition':
          summary: 'All Field Definitions'
          description: 'Retrieves the list of all records for selected field definition
            entity.'
          entityName: 'FieldDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FieldDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFieldPermissions':
          summary: 'All Field Permissionss'
          description: 'Retrieves the list of all records for selected field permissions
            entity.'
          entityName: 'FieldPermissions'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FieldPermissions'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFieldSecurityClassification':
          summary: 'New Field Security Classification'
          description: 'Triggers when a new field security classification is created.'
          entityName: 'FieldSecurityClassification'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FieldSecurityClassification'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFieldSecurityClassification':
          summary: 'New Or Updated Field Security Classification'
          description: 'Triggers when a  field security classification is created or existing
            field security classification is updated.'
          entityName: 'FieldSecurityClassification'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FieldSecurityClassification'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFieldSecurityClassification':
          summary: 'All Field Security Classifications'
          description: 'Retrieves the list of all records for selected field security classification
            entity.'
          entityName: 'FieldSecurityClassification'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FieldSecurityClassification'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFileEventStore':
          summary: 'New File Event Store'
          description: 'Triggers when a new file event store is created.'
          entityName: 'FileEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FileEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFileEventStore':
          summary: 'New Or Updated File Event Store'
          description: 'Triggers when a  file event store is created or existing file event
            store is updated.'
          entityName: 'FileEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FileEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFileEventStore':
          summary: 'All File Event Stores'
          description: 'Retrieves the list of all records for selected file event store
            entity.'
          entityName: 'FileEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FileEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFileSearchActivity':
          summary: 'New FileSearchActivity'
          description: 'Triggers when a new filesearchactivity is created.'
          entityName: 'FileSearchActivity'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FileSearchActivity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFileSearchActivity':
          summary: 'New Or Updated FileSearchActivity'
          description: 'Triggers when a  filesearchactivity is created or existing filesearchactivity
            is updated.'
          entityName: 'FileSearchActivity'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FileSearchActivity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFileSearchActivity':
          summary: 'All FileSearchActivitys'
          description: 'Retrieves the list of all records for selected filesearchactivity
            entity.'
          entityName: 'FileSearchActivity'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FileSearchActivity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFiscalYearSettings':
          summary: 'All Fiscal Year Settingss'
          description: 'Retrieves the list of all records for selected fiscal year settings
            entity.'
          entityName: 'FiscalYearSettings'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FiscalYearSettings'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlexQueueItem':
          summary: 'All Flex Queue Items'
          description: 'Retrieves the list of all records for selected flex queue item
            entity.'
          entityName: 'FlexQueueItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlexQueueItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowDefinitionView':
          summary: 'New Or Updated Flow Definition'
          description: 'Triggers when a  flow definition is created or existing flow definition
            is updated.'
          entityName: 'FlowDefinitionView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowDefinitionView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowDefinitionView':
          summary: 'All Flow Definitions'
          description: 'Retrieves the list of all records for selected flow definition
            entity.'
          entityName: 'FlowDefinitionView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowDefinitionView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowInterview':
          summary: 'New Flow Interview'
          description: 'Triggers when a new flow interview is created.'
          entityName: 'FlowInterview'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowInterview'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowInterview':
          summary: 'New Or Updated Flow Interview'
          description: 'Triggers when a  flow interview is created or existing flow interview
            is updated.'
          entityName: 'FlowInterview'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowInterview'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowInterview':
          summary: 'All Flow Interviews'
          description: 'Retrieves the list of all records for selected flow interview entity.'
          entityName: 'FlowInterview'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowInterview'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowInterviewLog':
          summary: 'New Flow Interview Log'
          description: 'Triggers when a new flow interview log is created.'
          entityName: 'FlowInterviewLog'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowInterviewLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowInterviewLog':
          summary: 'New Or Updated Flow Interview Log'
          description: 'Triggers when a  flow interview log is created or existing flow
            interview log is updated.'
          entityName: 'FlowInterviewLog'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowInterviewLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowInterviewLog':
          summary: 'All Flow Interview Logs'
          description: 'Retrieves the list of all records for selected flow interview log
            entity.'
          entityName: 'FlowInterviewLog'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowInterviewLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowInterviewLogEntry':
          summary: 'New Flow Interview Log Entry'
          description: 'Triggers when a new flow interview log entry is created.'
          entityName: 'FlowInterviewLogEntry'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowInterviewLogEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowInterviewLogEntry':
          summary: 'New Or Updated Flow Interview Log Entry'
          description: 'Triggers when a  flow interview log entry is created or existing
            flow interview log entry is updated.'
          entityName: 'FlowInterviewLogEntry'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowInterviewLogEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowInterviewLogEntry':
          summary: 'All Flow Interview Log Entrys'
          description: 'Retrieves the list of all records for selected flow interview log
            entry entity.'
          entityName: 'FlowInterviewLogEntry'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowInterviewLogEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowInterviewLogShare':
          summary: 'New Or Updated Flow Interview Log Share'
          description: 'Triggers when a  flow interview log share is created or existing
            flow interview log share is updated.'
          entityName: 'FlowInterviewLogShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowInterviewLogShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowInterviewLogShare':
          summary: 'All Flow Interview Log Shares'
          description: 'Retrieves the list of all records for selected flow interview log
            share entity.'
          entityName: 'FlowInterviewLogShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowInterviewLogShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowInterviewShare':
          summary: 'New Or Updated Flow Interview Share'
          description: 'Triggers when a  flow interview share is created or existing flow
            interview share is updated.'
          entityName: 'FlowInterviewShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowInterviewShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowInterviewShare':
          summary: 'All Flow Interview Shares'
          description: 'Retrieves the list of all records for selected flow interview share
            entity.'
          entityName: 'FlowInterviewShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowInterviewShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowOrchestrationInstance':
          summary: 'New Orchestration Run'
          description: 'Triggers when a new orchestration run is created.'
          entityName: 'FlowOrchestrationInstance'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationInstance':
          summary: 'New Or Updated Orchestration Run'
          description: 'Triggers when a  orchestration run is created or existing orchestration
            run is updated.'
          entityName: 'FlowOrchestrationInstance'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationInstance':
          summary: 'All Orchestration Runs'
          description: 'Retrieves the list of all records for selected orchestration run
            entity.'
          entityName: 'FlowOrchestrationInstance'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationInstanceShare':
          summary: 'New Or Updated Orchestration Run Share'
          description: 'Triggers when a  orchestration run share is created or existing
            orchestration run share is updated.'
          entityName: 'FlowOrchestrationInstanceShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationInstanceShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationInstanceShare':
          summary: 'All Orchestration Run Shares'
          description: 'Retrieves the list of all records for selected orchestration run
            share entity.'
          entityName: 'FlowOrchestrationInstanceShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationInstanceShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowOrchestrationStageInstance':
          summary: 'New Orchestration Stage Run'
          description: 'Triggers when a new orchestration stage run is created.'
          entityName: 'FlowOrchestrationStageInstance'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStageInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationStageInstance':
          summary: 'New Or Updated Orchestration Stage Run'
          description: 'Triggers when a  orchestration stage run is created or existing
            orchestration stage run is updated.'
          entityName: 'FlowOrchestrationStageInstance'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStageInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationStageInstance':
          summary: 'All Orchestration Stage Runs'
          description: 'Retrieves the list of all records for selected orchestration stage
            run entity.'
          entityName: 'FlowOrchestrationStageInstance'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStageInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationStageInstanceShare':
          summary: 'New Or Updated Orchestration Stage Run Share'
          description: 'Triggers when a  orchestration stage run share is created or existing
            orchestration stage run share is updated.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStageInstanceShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationStageInstanceShare':
          summary: 'All Orchestration Stage Run Shares'
          description: 'Retrieves the list of all records for selected orchestration stage
            run share entity.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStageInstanceShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowOrchestrationStepInstance':
          summary: 'New Orchestration Step Run'
          description: 'Triggers when a new orchestration step run is created.'
          entityName: 'FlowOrchestrationStepInstance'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStepInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationStepInstance':
          summary: 'New Or Updated Orchestration Step Run'
          description: 'Triggers when a  orchestration step run is created or existing orchestration
            step run is updated.'
          entityName: 'FlowOrchestrationStepInstance'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStepInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationStepInstance':
          summary: 'All Orchestration Step Runs'
          description: 'Retrieves the list of all records for selected orchestration step
            run entity.'
          entityName: 'FlowOrchestrationStepInstance'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStepInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationStepInstanceShare':
          summary: 'New Or Updated Orchestration Step Run Share'
          description: 'Triggers when a  orchestration step run share is created or existing
            orchestration step run share is updated.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStepInstanceShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationStepInstanceShare':
          summary: 'All Orchestration Step Run Shares'
          description: 'Retrieves the list of all records for selected orchestration step
            run share entity.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationStepInstanceShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowOrchestrationWorkItem':
          summary: 'New Orchestration Work Item'
          description: 'Triggers when a new orchestration work item is created.'
          entityName: 'FlowOrchestrationWorkItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationWorkItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationWorkItem':
          summary: 'New Or Updated Orchestration Work Item'
          description: 'Triggers when a  orchestration work item is created or existing
            orchestration work item is updated.'
          entityName: 'FlowOrchestrationWorkItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationWorkItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationWorkItem':
          summary: 'All Orchestration Work Items'
          description: 'Retrieves the list of all records for selected orchestration work
            item entity.'
          entityName: 'FlowOrchestrationWorkItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationWorkItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowOrchestrationWorkItemShare':
          summary: 'New Or Updated Orchestration Work Item Share'
          description: 'Triggers when a  orchestration work item share is created or existing
            orchestration work item share is updated.'
          entityName: 'FlowOrchestrationWorkItemShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationWorkItemShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowOrchestrationWorkItemShare':
          summary: 'All Orchestration Work Item Shares'
          description: 'Retrieves the list of all records for selected orchestration work
            item share entity.'
          entityName: 'FlowOrchestrationWorkItemShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowOrchestrationWorkItemShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowRecordRelation':
          summary: 'New Flow Record Relation'
          description: 'Triggers when a new flow record relation is created.'
          entityName: 'FlowRecordRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowRecordRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowRecordRelation':
          summary: 'New Or Updated Flow Record Relation'
          description: 'Triggers when a  flow record relation is created or existing flow
            record relation is updated.'
          entityName: 'FlowRecordRelation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowRecordRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowRecordRelation':
          summary: 'All Flow Record Relations'
          description: 'Retrieves the list of all records for selected flow record relation
            entity.'
          entityName: 'FlowRecordRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowRecordRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowStageRelation':
          summary: 'New Flow Interview Stage Relation'
          description: 'Triggers when a new flow interview stage relation is created.'
          entityName: 'FlowStageRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowStageRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowStageRelation':
          summary: 'New Or Updated Flow Interview Stage Relation'
          description: 'Triggers when a  flow interview stage relation is created or existing
            flow interview stage relation is updated.'
          entityName: 'FlowStageRelation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowStageRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowStageRelation':
          summary: 'All Flow Interview Stage Relations'
          description: 'Retrieves the list of all records for selected flow interview stage
            relation entity.'
          entityName: 'FlowStageRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowStageRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowTestResult':
          summary: 'New Flow Test Result'
          description: 'Triggers when a new flow test result is created.'
          entityName: 'FlowTestResult'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowTestResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowTestResult':
          summary: 'New Or Updated Flow Test Result'
          description: 'Triggers when a  flow test result is created or existing flow test
            result is updated.'
          entityName: 'FlowTestResult'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowTestResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowTestResult':
          summary: 'All Flow Test Results'
          description: 'Retrieves the list of all records for selected flow test result
            entity.'
          entityName: 'FlowTestResult'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowTestResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowTestResultShare':
          summary: 'New Or Updated Flow Test Result Share'
          description: 'Triggers when a  flow test result share is created or existing flow
            test result share is updated.'
          entityName: 'FlowTestResultShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowTestResultShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowTestResultShare':
          summary: 'All Flow Test Result Shares'
          description: 'Retrieves the list of all records for selected flow test result
            share entity.'
          entityName: 'FlowTestResultShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowTestResultShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFlowTestView':
          summary: 'New Flow Test View'
          description: 'Triggers when a new flow test view is created.'
          entityName: 'FlowTestView'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from FlowTestView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowTestView':
          summary: 'New Or Updated Flow Test View'
          description: 'Triggers when a  flow test view is created or existing flow test
            view is updated.'
          entityName: 'FlowTestView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowTestView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowTestView':
          summary: 'All Flow Test Views'
          description: 'Retrieves the list of all records for selected flow test view entity.'
          entityName: 'FlowTestView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowTestView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowVariableView':
          summary: 'All Flow Variables'
          description: 'Retrieves the list of all records for selected flow variable entity.'
          entityName: 'FlowVariableView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowVariableView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFlowVersionView':
          summary: 'New Or Updated Flow Version'
          description: 'Triggers when a  flow version is created or existing flow version
            is updated.'
          entityName: 'FlowVersionView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from FlowVersionView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFlowVersionView':
          summary: 'All Flow Versions'
          description: 'Retrieves the list of all records for selected flow version entity.'
          entityName: 'FlowVersionView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FlowVersionView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewFolder':
          summary: 'New Folder'
          description: 'Triggers when a new folder is created.'
          entityName: 'Folder'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Folder'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedFolder':
          summary: 'New Or Updated Folder'
          description: 'Triggers when a  folder is created or existing folder is updated.'
          entityName: 'Folder'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Folder'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFolder':
          summary: 'All Folders'
          description: 'Retrieves the list of all records for selected folder entity.'
          entityName: 'Folder'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Folder'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFormulaFunction':
          summary: 'All Formula Functions'
          description: 'Retrieves the list of all records for selected formula function
            entity.'
          entityName: 'FormulaFunction'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FormulaFunction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFormulaFunctionAllowedType':
          summary: 'All Formula Context Functions'
          description: 'Retrieves the list of all records for selected formula context
            function entity.'
          entityName: 'FormulaFunctionAllowedType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FormulaFunctionAllowedType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllFormulaFunctionCategory':
          summary: 'All Formula Function Categorys'
          description: 'Retrieves the list of all records for selected formula function
            category entity.'
          entityName: 'FormulaFunctionCategory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from FormulaFunctionCategory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewGrantedByLicense':
          summary: 'New Setting Granted By License'
          description: 'Triggers when a new setting granted by license is created.'
          entityName: 'GrantedByLicense'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from GrantedByLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedGrantedByLicense':
          summary: 'New Or Updated Setting Granted By License'
          description: 'Triggers when a  setting granted by license is created or existing
            setting granted by license is updated.'
          entityName: 'GrantedByLicense'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from GrantedByLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllGrantedByLicense':
          summary: 'All Setting Granted By Licenses'
          description: 'Retrieves the list of all records for selected setting granted
            by license entity.'
          entityName: 'GrantedByLicense'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from GrantedByLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewGroup':
          summary: 'New Group'
          description: 'Triggers when a new group is created.'
          entityName: 'Group'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Group'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedGroup':
          summary: 'New Or Updated Group'
          description: 'Triggers when a  group is created or existing group is updated.'
          entityName: 'Group'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Group'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllGroup':
          summary: 'All Groups'
          description: 'Retrieves the list of all records for selected group entity.'
          entityName: 'Group'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Group'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllGroupMember':
          summary: 'All Group Members'
          description: 'Retrieves the list of all records for selected group member entity.'
          entityName: 'GroupMember'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from GroupMember'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewHoliday':
          summary: 'New Holiday'
          description: 'Triggers when a new holiday is created.'
          entityName: 'Holiday'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Holiday'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedHoliday':
          summary: 'New Or Updated Holiday'
          description: 'Triggers when a  holiday is created or existing holiday is updated.'
          entityName: 'Holiday'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Holiday'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllHoliday':
          summary: 'All Holidays'
          description: 'Retrieves the list of all records for selected holiday entity.'
          entityName: 'Holiday'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Holiday'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIPAddressRange':
          summary: 'New IP Address Range'
          description: 'Triggers when a new ip address range is created.'
          entityName: 'IPAddressRange'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from IPAddressRange'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIPAddressRange':
          summary: 'New Or Updated IP Address Range'
          description: 'Triggers when a  ip address range is created or existing ip address
            range is updated.'
          entityName: 'IPAddressRange'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from IPAddressRange'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIPAddressRange':
          summary: 'All IP Address Ranges'
          description: 'Retrieves the list of all records for selected ip address range
            entity.'
          entityName: 'IPAddressRange'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IPAddressRange'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIconDefinition':
          summary: 'All Icon Definitions'
          description: 'Retrieves the list of all records for selected icon definition
            entity.'
          entityName: 'IconDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IconDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIdentityProviderEventStore':
          summary: 'New Identity Provider Event Store'
          description: 'Triggers when a new identity provider event store is created.'
          entityName: 'IdentityProviderEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from IdentityProviderEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIdentityProviderEventStore':
          summary: 'New Or Updated Identity Provider Event Store'
          description: 'Triggers when a  identity provider event store is created or existing
            identity provider event store is updated.'
          entityName: 'IdentityProviderEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from IdentityProviderEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIdentityProviderEventStore':
          summary: 'All Identity Provider Event Stores'
          description: 'Retrieves the list of all records for selected identity provider
            event store entity.'
          entityName: 'IdentityProviderEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IdentityProviderEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIdentityVerificationEvent':
          summary: 'New Identity Verification Event'
          description: 'Triggers when a new identity verification event is created.'
          entityName: 'IdentityVerificationEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from IdentityVerificationEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIdentityVerificationEvent':
          summary: 'New Or Updated Identity Verification Event'
          description: 'Triggers when a  identity verification event is created or existing
            identity verification event is updated.'
          entityName: 'IdentityVerificationEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from IdentityVerificationEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIdentityVerificationEvent':
          summary: 'All Identity Verification Events'
          description: 'Retrieves the list of all records for selected identity verification
            event entity.'
          entityName: 'IdentityVerificationEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IdentityVerificationEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIdpEventLog':
          summary: 'New Identity Provider Event Log'
          description: 'Triggers when a new identity provider event log is created.'
          entityName: 'IdpEventLog'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from IdpEventLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIdpEventLog':
          summary: 'New Or Updated Identity Provider Event Log'
          description: 'Triggers when a  identity provider event log is created or existing
            identity provider event log is updated.'
          entityName: 'IdpEventLog'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from IdpEventLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIdpEventLog':
          summary: 'All Identity Provider Event Logs'
          description: 'Retrieves the list of all records for selected identity provider
            event log entity.'
          entityName: 'IdpEventLog'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IdpEventLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIframeWhiteListUrl':
          summary: 'New Trusted Domain for Inline Frames'
          description: 'Triggers when a new trusted domain for inline frames is created.'
          entityName: 'IframeWhiteListUrl'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from IframeWhiteListUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIframeWhiteListUrl':
          summary: 'New Or Updated Trusted Domain for Inline Frames'
          description: 'Triggers when a  trusted domain for inline frames is created or
            existing trusted domain for inline frames is updated.'
          entityName: 'IframeWhiteListUrl'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from IframeWhiteListUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIframeWhiteListUrl':
          summary: 'All Trusted Domain for Inline Framess'
          description: 'Retrieves the list of all records for selected trusted domain for
            inline frames entity.'
          entityName: 'IframeWhiteListUrl'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IframeWhiteListUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewImage':
          summary: 'New Image'
          description: 'Triggers when a new image is created.'
          entityName: 'Image'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Image'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedImage':
          summary: 'New Or Updated Image'
          description: 'Triggers when a  image is created or existing image is updated.'
          entityName: 'Image'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Image'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllImage':
          summary: 'All Images'
          description: 'Retrieves the list of all records for selected image entity.'
          entityName: 'Image'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Image'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewImageHistory':
          summary: 'New Image History'
          description: 'Triggers when a new image history is created.'
          entityName: 'ImageHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ImageHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllImageHistory':
          summary: 'All Image Historys'
          description: 'Retrieves the list of all records for selected image history entity.'
          entityName: 'ImageHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ImageHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedImageShare':
          summary: 'New Or Updated Image Share'
          description: 'Triggers when a  image share is created or existing image share
            is updated.'
          entityName: 'ImageShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ImageShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllImageShare':
          summary: 'All Image Shares'
          description: 'Retrieves the list of all records for selected image share entity.'
          entityName: 'ImageShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ImageShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIndividual':
          summary: 'New Individual'
          description: 'Triggers when a new individual is created.'
          entityName: 'Individual'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Individual'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIndividual':
          summary: 'New Or Updated Individual'
          description: 'Triggers when a  individual is created or existing individual is
            updated.'
          entityName: 'Individual'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Individual'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIndividual':
          summary: 'All Individuals'
          description: 'Retrieves the list of all records for selected individual entity.'
          entityName: 'Individual'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Individual'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewIndividualHistory':
          summary: 'New Individual History'
          description: 'Triggers when a new individual history is created.'
          entityName: 'IndividualHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from IndividualHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIndividualHistory':
          summary: 'All Individual Historys'
          description: 'Retrieves the list of all records for selected individual history
            entity.'
          entityName: 'IndividualHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IndividualHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedIndividualShare':
          summary: 'New Or Updated Individual Share'
          description: 'Triggers when a  individual share is created or existing individual
            share is updated.'
          entityName: 'IndividualShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from IndividualShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllIndividualShare':
          summary: 'All Individual Shares'
          description: 'Retrieves the list of all records for selected individual share
            entity.'
          entityName: 'IndividualShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from IndividualShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewInstalledMobileApp':
          summary: 'New Installed Mobile App'
          description: 'Triggers when a new installed mobile app is created.'
          entityName: 'InstalledMobileApp'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from InstalledMobileApp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedInstalledMobileApp':
          summary: 'New Or Updated Installed Mobile App'
          description: 'Triggers when a  installed mobile app is created or existing installed
            mobile app is updated.'
          entityName: 'InstalledMobileApp'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from InstalledMobileApp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllInstalledMobileApp':
          summary: 'All Installed Mobile Apps'
          description: 'Retrieves the list of all records for selected installed mobile
            app entity.'
          entityName: 'InstalledMobileApp'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from InstalledMobileApp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLead':
          summary: 'New Lead'
          description: 'Triggers when a new lead is created.'
          entityName: 'Lead'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Lead'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLead':
          summary: 'New Or Updated Lead'
          description: 'Triggers when a  lead is created or existing lead is updated.'
          entityName: 'Lead'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Lead'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLead':
          summary: 'All Leads'
          description: 'Retrieves the list of all records for selected lead entity.'
          entityName: 'Lead'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Lead'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLeadHistory':
          summary: 'New Lead History'
          description: 'Triggers when a new lead history is created.'
          entityName: 'LeadHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LeadHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLeadHistory':
          summary: 'All Lead Historys'
          description: 'Retrieves the list of all records for selected lead history entity.'
          entityName: 'LeadHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LeadHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLeadShare':
          summary: 'New Or Updated Lead Share'
          description: 'Triggers when a  lead share is created or existing lead share is
            updated.'
          entityName: 'LeadShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LeadShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLeadShare':
          summary: 'All Lead Shares'
          description: 'Retrieves the list of all records for selected lead share entity.'
          entityName: 'LeadShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LeadShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLeadStatus':
          summary: 'New Lead Status Value'
          description: 'Triggers when a new lead status value is created.'
          entityName: 'LeadStatus'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LeadStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLeadStatus':
          summary: 'New Or Updated Lead Status Value'
          description: 'Triggers when a  lead status value is created or existing lead status
            value is updated.'
          entityName: 'LeadStatus'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LeadStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLeadStatus':
          summary: 'All Lead Status Values'
          description: 'Retrieves the list of all records for selected lead status value
            entity.'
          entityName: 'LeadStatus'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LeadStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningExitByPageMetrics':
          summary: 'All Lightning Exit By Page Metricss'
          description: 'Retrieves the list of all records for selected lightning exit by
            page metrics entity.'
          entityName: 'LightningExitByPageMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningExitByPageMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLightningExperienceTheme':
          summary: 'New Lightning Experience Theme'
          description: 'Triggers when a new lightning experience theme is created.'
          entityName: 'LightningExperienceTheme'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LightningExperienceTheme'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLightningExperienceTheme':
          summary: 'New Or Updated Lightning Experience Theme'
          description: 'Triggers when a  lightning experience theme is created or existing
            lightning experience theme is updated.'
          entityName: 'LightningExperienceTheme'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LightningExperienceTheme'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningExperienceTheme':
          summary: 'All Lightning Experience Themes'
          description: 'Retrieves the list of all records for selected lightning experience
            theme entity.'
          entityName: 'LightningExperienceTheme'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningExperienceTheme'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLightningOnboardingConfig':
          summary: 'New LightningOnboardingConfig'
          description: 'Triggers when a new lightningonboardingconfig is created.'
          entityName: 'LightningOnboardingConfig'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LightningOnboardingConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLightningOnboardingConfig':
          summary: 'New Or Updated LightningOnboardingConfig'
          description: 'Triggers when a  lightningonboardingconfig is created or existing
            lightningonboardingconfig is updated.'
          entityName: 'LightningOnboardingConfig'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LightningOnboardingConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningOnboardingConfig':
          summary: 'All LightningOnboardingConfigs'
          description: 'Retrieves the list of all records for selected lightningonboardingconfig
            entity.'
          entityName: 'LightningOnboardingConfig'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningOnboardingConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningToggleMetrics':
          summary: 'All Lightning Toggle Metricss'
          description: 'Retrieves the list of all records for selected lightning toggle
            metrics entity.'
          entityName: 'LightningToggleMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningToggleMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLightningUriEvent':
          summary: 'New Lightning URI Event'
          description: 'Triggers when a new lightning uri event is created.'
          entityName: 'LightningUriEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LightningUriEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLightningUriEvent':
          summary: 'New Or Updated Lightning URI Event'
          description: 'Triggers when a  lightning uri event is created or existing lightning
            uri event is updated.'
          entityName: 'LightningUriEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LightningUriEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningUriEvent':
          summary: 'All Lightning URI Events'
          description: 'Retrieves the list of all records for selected lightning uri event
            entity.'
          entityName: 'LightningUriEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningUriEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningUsageByAppTypeMetrics':
          summary: 'All Lightning Usage By App Type Metricss'
          description: 'Retrieves the list of all records for selected lightning usage
            by app type metrics entity.'
          entityName: 'LightningUsageByAppTypeMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningUsageByAppTypeMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningUsageByBrowserMetrics':
          summary: 'All Lightning Usage By Browser Metricss'
          description: 'Retrieves the list of all records for selected lightning usage
            by browser metrics entity.'
          entityName: 'LightningUsageByBrowserMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningUsageByBrowserMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningUsageByFlexiPageMetrics':
          summary: 'All Lightning Usage By FlexiPage Metricss'
          description: 'Retrieves the list of all records for selected lightning usage
            by flexipage metrics entity.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningUsageByFlexiPageMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLightningUsageByPageMetrics':
          summary: 'All Lightning Usage By Page Metricss'
          description: 'Retrieves the list of all records for selected lightning usage
            by page metrics entity.'
          entityName: 'LightningUsageByPageMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LightningUsageByPageMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewListEmail':
          summary: 'New List Email'
          description: 'Triggers when a new list email is created.'
          entityName: 'ListEmail'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ListEmail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListEmail':
          summary: 'New Or Updated List Email'
          description: 'Triggers when a  list email is created or existing list email is
            updated.'
          entityName: 'ListEmail'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListEmail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListEmail':
          summary: 'All List Emails'
          description: 'Retrieves the list of all records for selected list email entity.'
          entityName: 'ListEmail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListEmail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewListEmailIndividualRecipient':
          summary: 'New List Email Individual Recipient'
          description: 'Triggers when a new list email individual recipient is created.'
          entityName: 'ListEmailIndividualRecipient'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ListEmailIndividualRecipient'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListEmailIndividualRecipient':
          summary: 'New Or Updated List Email Individual Recipient'
          description: 'Triggers when a  list email individual recipient is created or existing
            list email individual recipient is updated.'
          entityName: 'ListEmailIndividualRecipient'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListEmailIndividualRecipient'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListEmailIndividualRecipient':
          summary: 'All List Email Individual Recipients'
          description: 'Retrieves the list of all records for selected list email individual
            recipient entity.'
          entityName: 'ListEmailIndividualRecipient'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListEmailIndividualRecipient'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewListEmailRecipientSource':
          summary: 'New List Email Recipient Source'
          description: 'Triggers when a new list email recipient source is created.'
          entityName: 'ListEmailRecipientSource'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ListEmailRecipientSource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListEmailRecipientSource':
          summary: 'New Or Updated List Email Recipient Source'
          description: 'Triggers when a  list email recipient source is created or existing
            list email recipient source is updated.'
          entityName: 'ListEmailRecipientSource'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListEmailRecipientSource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListEmailRecipientSource':
          summary: 'All List Email Recipient Sources'
          description: 'Retrieves the list of all records for selected list email recipient
            source entity.'
          entityName: 'ListEmailRecipientSource'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListEmailRecipientSource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListEmailShare':
          summary: 'New Or Updated List Email Share'
          description: 'Triggers when a  list email share is created or existing list email
            share is updated.'
          entityName: 'ListEmailShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListEmailShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListEmailShare':
          summary: 'All List Email Shares'
          description: 'Retrieves the list of all records for selected list email share
            entity.'
          entityName: 'ListEmailShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListEmailShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewListView':
          summary: 'New List View'
          description: 'Triggers when a new list view is created.'
          entityName: 'ListView'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ListView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListView':
          summary: 'New Or Updated List View'
          description: 'Triggers when a  list view is created or existing list view is updated.'
          entityName: 'ListView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListView':
          summary: 'All List Views'
          description: 'Retrieves the list of all records for selected list view entity.'
          entityName: 'ListView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewListViewChart':
          summary: 'New List View Chart'
          description: 'Triggers when a new list view chart is created.'
          entityName: 'ListViewChart'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ListViewChart'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListViewChart':
          summary: 'New Or Updated List View Chart'
          description: 'Triggers when a  list view chart is created or existing list view
            chart is updated.'
          entityName: 'ListViewChart'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListViewChart'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListViewChart':
          summary: 'All List View Charts'
          description: 'Retrieves the list of all records for selected list view chart
            entity.'
          entityName: 'ListViewChart'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListViewChart'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListViewChartInstance':
          summary: 'All List View Chart Instances'
          description: 'Retrieves the list of all records for selected list view chart
            instance entity.'
          entityName: 'ListViewChartInstance'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListViewChartInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewListViewEvent':
          summary: 'New List View Event'
          description: 'Triggers when a new list view event is created.'
          entityName: 'ListViewEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ListViewEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedListViewEvent':
          summary: 'New Or Updated List View Event'
          description: 'Triggers when a  list view event is created or existing list view
            event is updated.'
          entityName: 'ListViewEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ListViewEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllListViewEvent':
          summary: 'All List View Events'
          description: 'Retrieves the list of all records for selected list view event
            entity.'
          entityName: 'ListViewEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ListViewEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLoginAsEvent':
          summary: 'New LoginAs Event'
          description: 'Triggers when a new loginas event is created.'
          entityName: 'LoginAsEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LoginAsEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLoginAsEvent':
          summary: 'New Or Updated LoginAs Event'
          description: 'Triggers when a  loginas event is created or existing loginas event
            is updated.'
          entityName: 'LoginAsEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LoginAsEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLoginAsEvent':
          summary: 'All LoginAs Events'
          description: 'Retrieves the list of all records for selected loginas event entity.'
          entityName: 'LoginAsEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LoginAsEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLoginEvent':
          summary: 'New Login Event'
          description: 'Triggers when a new login event is created.'
          entityName: 'LoginEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LoginEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLoginEvent':
          summary: 'New Or Updated Login Event'
          description: 'Triggers when a  login event is created or existing login event
            is updated.'
          entityName: 'LoginEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LoginEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLoginEvent':
          summary: 'All Login Events'
          description: 'Retrieves the list of all records for selected login event entity.'
          entityName: 'LoginEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LoginEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLoginGeo':
          summary: 'New Login Geo Data'
          description: 'Triggers when a new login geo data is created.'
          entityName: 'LoginGeo'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LoginGeo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLoginGeo':
          summary: 'New Or Updated Login Geo Data'
          description: 'Triggers when a  login geo data is created or existing login geo
            data is updated.'
          entityName: 'LoginGeo'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LoginGeo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLoginGeo':
          summary: 'All Login Geo Datas'
          description: 'Retrieves the list of all records for selected login geo data entity.'
          entityName: 'LoginGeo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LoginGeo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLoginHistory':
          summary: 'All Login Historys'
          description: 'Retrieves the list of all records for selected login history entity.'
          entityName: 'LoginHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LoginHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLoginIp':
          summary: 'New Login IP'
          description: 'Triggers when a new login ip is created.'
          entityName: 'LoginIp'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LoginIp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLoginIp':
          summary: 'New Or Updated Login IP'
          description: 'Triggers when a  login ip is created or existing login ip is updated.'
          entityName: 'LoginIp'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LoginIp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLoginIp':
          summary: 'All Login IPs'
          description: 'Retrieves the list of all records for selected login ip entity.'
          entityName: 'LoginIp'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LoginIp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewLogoutEvent':
          summary: 'New Logout Event'
          description: 'Triggers when a new logout event is created.'
          entityName: 'LogoutEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from LogoutEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedLogoutEvent':
          summary: 'New Or Updated Logout Event'
          description: 'Triggers when a  logout event is created or existing logout event
            is updated.'
          entityName: 'LogoutEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from LogoutEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllLogoutEvent':
          summary: 'All Logout Events'
          description: 'Retrieves the list of all records for selected logout event entity.'
          entityName: 'LogoutEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from LogoutEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMacro':
          summary: 'New Macro'
          description: 'Triggers when a new macro is created.'
          entityName: 'Macro'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Macro'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMacro':
          summary: 'New Or Updated Macro'
          description: 'Triggers when a  macro is created or existing macro is updated.'
          entityName: 'Macro'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Macro'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMacro':
          summary: 'All Macros'
          description: 'Retrieves the list of all records for selected macro entity.'
          entityName: 'Macro'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Macro'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMacroHistory':
          summary: 'New Macro History'
          description: 'Triggers when a new macro history is created.'
          entityName: 'MacroHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MacroHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMacroHistory':
          summary: 'All Macro Historys'
          description: 'Retrieves the list of all records for selected macro history entity.'
          entityName: 'MacroHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MacroHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMacroInstruction':
          summary: 'New Macro Instruction'
          description: 'Triggers when a new macro instruction is created.'
          entityName: 'MacroInstruction'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MacroInstruction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMacroInstruction':
          summary: 'New Or Updated Macro Instruction'
          description: 'Triggers when a  macro instruction is created or existing macro
            instruction is updated.'
          entityName: 'MacroInstruction'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MacroInstruction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMacroInstruction':
          summary: 'All Macro Instructions'
          description: 'Retrieves the list of all records for selected macro instruction
            entity.'
          entityName: 'MacroInstruction'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MacroInstruction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMacroShare':
          summary: 'New Macro Share'
          description: 'Triggers when a new macro share is created.'
          entityName: 'MacroShare'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MacroShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMacroShare':
          summary: 'New Or Updated Macro Share'
          description: 'Triggers when a  macro share is created or existing macro share
            is updated.'
          entityName: 'MacroShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MacroShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMacroShare':
          summary: 'All Macro Shares'
          description: 'Retrieves the list of all records for selected macro share entity.'
          entityName: 'MacroShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MacroShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMacroUsage':
          summary: 'New Macro Usage'
          description: 'Triggers when a new macro usage is created.'
          entityName: 'MacroUsage'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MacroUsage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMacroUsage':
          summary: 'New Or Updated Macro Usage'
          description: 'Triggers when a  macro usage is created or existing macro usage
            is updated.'
          entityName: 'MacroUsage'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MacroUsage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMacroUsage':
          summary: 'All Macro Usages'
          description: 'Retrieves the list of all records for selected macro usage entity.'
          entityName: 'MacroUsage'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MacroUsage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMacroUsageShare':
          summary: 'New Or Updated Macro Usage Share'
          description: 'Triggers when a  macro usage share is created or existing macro
            usage share is updated.'
          entityName: 'MacroUsageShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MacroUsageShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMacroUsageShare':
          summary: 'All Macro Usage Shares'
          description: 'Retrieves the list of all records for selected macro usage share
            entity.'
          entityName: 'MacroUsageShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MacroUsageShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMailmergeTemplate':
          summary: 'New Mail Merge Template'
          description: 'Triggers when a new mail merge template is created.'
          entityName: 'MailmergeTemplate'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MailmergeTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMailmergeTemplate':
          summary: 'New Or Updated Mail Merge Template'
          description: 'Triggers when a mail merge template is created or existing mail
            merge template is updated.'
          entityName: 'MailmergeTemplate'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MailmergeTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMailmergeTemplate':
          summary: 'All Mail Merge Templates'
          description: 'Retrieves the list of all records for selected mail merge template
            entity.'
          entityName: 'MailmergeTemplate'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MailmergeTemplate'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewManagedContent':
          summary: 'New Managed Content'
          description: 'Triggers when a new managed content is created.'
          entityName: 'ManagedContent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ManagedContent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedManagedContent':
          summary: 'New Or Updated Managed Content'
          description: 'Triggers when a  managed content is created or existing managed
            content is updated.'
          entityName: 'ManagedContent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ManagedContent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllManagedContent':
          summary: 'All Managed Contents'
          description: 'Retrieves the list of all records for selected managed content
            entity.'
          entityName: 'ManagedContent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ManagedContent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewManagedContentChannel':
          summary: 'New Managed Content Channel'
          description: 'Triggers when a new managed content channel is created.'
          entityName: 'ManagedContentChannel'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ManagedContentChannel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedManagedContentChannel':
          summary: 'New Or Updated Managed Content Channel'
          description: 'Triggers when a  managed content channel is created or existing
            managed content channel is updated.'
          entityName: 'ManagedContentChannel'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ManagedContentChannel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllManagedContentChannel':
          summary: 'All Managed Content Channels'
          description: 'Retrieves the list of all records for selected managed content
            channel entity.'
          entityName: 'ManagedContentChannel'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ManagedContentChannel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewManagedContentSpace':
          summary: 'New Managed Content Space'
          description: 'Triggers when a new managed content space is created.'
          entityName: 'ManagedContentSpace'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ManagedContentSpace'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedManagedContentSpace':
          summary: 'New Or Updated Managed Content Space'
          description: 'Triggers when a  managed content space is created or existing managed
            content space is updated.'
          entityName: 'ManagedContentSpace'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ManagedContentSpace'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllManagedContentSpace':
          summary: 'All Managed Content Spaces'
          description: 'Retrieves the list of all records for selected managed content
            space entity.'
          entityName: 'ManagedContentSpace'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ManagedContentSpace'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewManagedContentVariant':
          summary: 'New Managed Content Variant'
          description: 'Triggers when a new managed content variant is created.'
          entityName: 'ManagedContentVariant'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ManagedContentVariant'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedManagedContentVariant':
          summary: 'New Or Updated Managed Content Variant'
          description: 'Triggers when a  managed content variant is created or existing
            managed content variant is updated.'
          entityName: 'ManagedContentVariant'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ManagedContentVariant'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllManagedContentVariant':
          summary: 'All Managed Content Variants'
          description: 'Retrieves the list of all records for selected managed content
            variant entity.'
          entityName: 'ManagedContentVariant'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ManagedContentVariant'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMatchingInformation':
          summary: 'New Matching Information'
          description: 'Triggers when a new matching information is created.'
          entityName: 'MatchingInformation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MatchingInformation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMatchingInformation':
          summary: 'New Or Updated Matching Information'
          description: 'Triggers when a  matching information is created or existing matching
            information is updated.'
          entityName: 'MatchingInformation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MatchingInformation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMatchingInformation':
          summary: 'All Matching Informations'
          description: 'Retrieves the list of all records for selected matching information
            entity.'
          entityName: 'MatchingInformation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MatchingInformation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMatchingRule':
          summary: 'New Matching Rule'
          description: 'Triggers when a new matching rule is created.'
          entityName: 'MatchingRule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MatchingRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMatchingRule':
          summary: 'New Or Updated Matching Rule'
          description: 'Triggers when a  matching rule is created or existing matching rule
            is updated.'
          entityName: 'MatchingRule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MatchingRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMatchingRule':
          summary: 'All Matching Rules'
          description: 'Retrieves the list of all records for selected matching rule entity.'
          entityName: 'MatchingRule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MatchingRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMatchingRuleItem':
          summary: 'New Matching Rule Item'
          description: 'Triggers when a new matching rule item is created.'
          entityName: 'MatchingRuleItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MatchingRuleItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMatchingRuleItem':
          summary: 'New Or Updated Matching Rule Item'
          description: 'Triggers when a  matching rule item is created or existing matching
            rule item is updated.'
          entityName: 'MatchingRuleItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MatchingRuleItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMatchingRuleItem':
          summary: 'All Matching Rule Items'
          description: 'Retrieves the list of all records for selected matching rule item
            entity.'
          entityName: 'MatchingRuleItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MatchingRuleItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMobileApplicationDetail':
          summary: 'New Mobile Application Detail'
          description: 'Triggers when a new mobile application detail is created.'
          entityName: 'MobileApplicationDetail'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MobileApplicationDetail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMobileApplicationDetail':
          summary: 'New Or Updated Mobile Application Detail'
          description: 'Triggers when a  mobile application detail is created or existing
            mobile application detail is updated.'
          entityName: 'MobileApplicationDetail'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MobileApplicationDetail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMobileApplicationDetail':
          summary: 'All Mobile Application Details'
          description: 'Retrieves the list of all records for selected mobile application
            detail entity.'
          entityName: 'MobileApplicationDetail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MobileApplicationDetail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewMyDomainDiscoverableLogin':
          summary: 'New My Domain Discoverable Login'
          description: 'Triggers when a new my domain discoverable login is created.'
          entityName: 'MyDomainDiscoverableLogin'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from MyDomainDiscoverableLogin'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedMyDomainDiscoverableLogin':
          summary: 'New Or Updated My Domain Discoverable Login'
          description: 'Triggers when a  my domain discoverable login is created or existing
            my domain discoverable login is updated.'
          entityName: 'MyDomainDiscoverableLogin'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from MyDomainDiscoverableLogin'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllMyDomainDiscoverableLogin':
          summary: 'All My Domain Discoverable Logins'
          description: 'Retrieves the list of all records for selected my domain discoverable
            login entity.'
          entityName: 'MyDomainDiscoverableLogin'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from MyDomainDiscoverableLogin'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewNamedCredential':
          summary: 'New Named Credential'
          description: 'Triggers when a new named credential is created.'
          entityName: 'NamedCredential'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from NamedCredential'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedNamedCredential':
          summary: 'New Or Updated Named Credential'
          description: 'Triggers when a  named credential is created or existing named credential
            is updated.'
          entityName: 'NamedCredential'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from NamedCredential'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllNamedCredential':
          summary: 'All Named Credentials'
          description: 'Retrieves the list of all records for selected named credential
            entity.'
          entityName: 'NamedCredential'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from NamedCredential'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewNote':
          summary: 'New Note'
          description: 'Triggers when a new note is created.'
          entityName: 'Note'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Note'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedNote':
          summary: 'New Or Updated Note'
          description: 'Triggers when a  note is created or existing note is updated.'
          entityName: 'Note'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Note'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllNote':
          summary: 'All Notes'
          description: 'Retrieves the list of all records for selected note entity.'
          entityName: 'Note'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Note'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOauthCustomScope':
          summary: 'New OAuth Custom Scope'
          description: 'Triggers when a new oauth custom scope is created.'
          entityName: 'OauthCustomScope'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OauthCustomScope'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOauthCustomScope':
          summary: 'New Or Updated OAuth Custom Scope'
          description: 'Triggers when a  oauth custom scope is created or existing oauth
            custom scope is updated.'
          entityName: 'OauthCustomScope'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OauthCustomScope'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOauthCustomScope':
          summary: 'All OAuth Custom Scopes'
          description: 'Retrieves the list of all records for selected oauth custom scope
            entity.'
          entityName: 'OauthCustomScope'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OauthCustomScope'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOauthCustomScopeApp':
          summary: 'New OAuth Custom Scope App '
          description: 'Triggers when a new oauth custom scope app  is created.'
          entityName: 'OauthCustomScopeApp'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OauthCustomScopeApp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOauthCustomScopeApp':
          summary: 'New Or Updated OAuth Custom Scope App '
          description: 'Triggers when a  oauth custom scope app  is created or existing
            oauth custom scope app  is updated.'
          entityName: 'OauthCustomScopeApp'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OauthCustomScopeApp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOauthCustomScopeApp':
          summary: 'All OAuth Custom Scope App s'
          description: 'Retrieves the list of all records for selected oauth custom scope
            app  entity.'
          entityName: 'OauthCustomScopeApp'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OauthCustomScopeApp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOauthToken':
          summary: 'New Oauth Token'
          description: 'Triggers when a new oauth token is created.'
          entityName: 'OauthToken'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OauthToken'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOauthToken':
          summary: 'All Oauth Tokens'
          description: 'Retrieves the list of all records for selected oauth token entity.'
          entityName: 'OauthToken'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OauthToken'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewObjectName2__History':
          summary: 'New History: label2InDevelopment'
          description: 'Triggers when a new history: label2indevelopment is created.'
          entityName: 'ObjectName2__History'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ObjectName2__History'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllObjectName2__History':
          summary: 'All History: label2InDevelopments'
          description: 'Retrieves the list of all records for selected history: label2indevelopment
            entity.'
          entityName: 'ObjectName2__History'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ObjectName2__History'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewObjectPermissions':
          summary: 'New Object Permissions'
          description: 'Triggers when a new object permissions is created.'
          entityName: 'ObjectPermissions'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ObjectPermissions'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedObjectPermissions':
          summary: 'New Or Updated Object Permissions'
          description: 'Triggers when a  object permissions is created or existing object
            permissions is updated.'
          entityName: 'ObjectPermissions'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ObjectPermissions'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllObjectPermissions':
          summary: 'All Object Permissionss'
          description: 'Retrieves the list of all records for selected object permissions
            entity.'
          entityName: 'ObjectPermissions'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ObjectPermissions'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOnboardingMetrics':
          summary: 'New Onboarding Metrics'
          description: 'Triggers when a new onboarding metrics is created.'
          entityName: 'OnboardingMetrics'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OnboardingMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOnboardingMetrics':
          summary: 'New Or Updated Onboarding Metrics'
          description: 'Triggers when a  onboarding metrics is created or existing onboarding
            metrics is updated.'
          entityName: 'OnboardingMetrics'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OnboardingMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOnboardingMetrics':
          summary: 'All Onboarding Metricss'
          description: 'Retrieves the list of all records for selected onboarding metrics
            entity.'
          entityName: 'OnboardingMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OnboardingMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunity':
          summary: 'New Opportunity'
          description: 'Triggers when a new opportunity is created.'
          entityName: 'Opportunity'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Opportunity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunity':
          summary: 'New Or Updated Opportunity'
          description: 'Triggers when a  opportunity is created or existing opportunity
            is updated.'
          entityName: 'Opportunity'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Opportunity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunity':
          summary: 'All Opportunitys'
          description: 'Retrieves the list of all records for selected opportunity entity.'
          entityName: 'Opportunity'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Opportunity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityCompetitor':
          summary: 'New Opportunity: Competitor'
          description: 'Triggers when a new opportunity: competitor is created.'
          entityName: 'OpportunityCompetitor'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityCompetitor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunityCompetitor':
          summary: 'New Or Updated Opportunity: Competitor'
          description: 'Triggers when a  opportunity: competitor is created or existing
            opportunity: competitor is updated.'
          entityName: 'OpportunityCompetitor'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OpportunityCompetitor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityCompetitor':
          summary: 'All Opportunity: Competitors'
          description: 'Retrieves the list of all records for selected opportunity: competitor
            entity.'
          entityName: 'OpportunityCompetitor'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityCompetitor'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityContactRole':
          summary: 'New Opportunity Contact Role'
          description: 'Triggers when a new opportunity contact role is created.'
          entityName: 'OpportunityContactRole'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunityContactRole':
          summary: 'New Or Updated Opportunity Contact Role'
          description: 'Triggers when a  opportunity contact role is created or existing
            opportunity contact role is updated.'
          entityName: 'OpportunityContactRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OpportunityContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityContactRole':
          summary: 'All Opportunity Contact Roles'
          description: 'Retrieves the list of all records for selected opportunity contact
            role entity.'
          entityName: 'OpportunityContactRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityContactRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityFieldHistory':
          summary: 'New Opportunity Field History'
          description: 'Triggers when a new opportunity field history is created.'
          entityName: 'OpportunityFieldHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityFieldHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityFieldHistory':
          summary: 'All Opportunity Field Historys'
          description: 'Retrieves the list of all records for selected opportunity field
            history entity.'
          entityName: 'OpportunityFieldHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityFieldHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityHistory':
          summary: 'New Opportunity History'
          description: 'Triggers when a new opportunity history is created.'
          entityName: 'OpportunityHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityHistory':
          summary: 'All Opportunity Historys'
          description: 'Retrieves the list of all records for selected opportunity history
            entity.'
          entityName: 'OpportunityHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityLineItem':
          summary: 'New Opportunity Product'
          description: 'Triggers when a new opportunity product is created.'
          entityName: 'OpportunityLineItem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityLineItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunityLineItem':
          summary: 'New Or Updated Opportunity Product'
          description: 'Triggers when a  opportunity product is created or existing opportunity
            product is updated.'
          entityName: 'OpportunityLineItem'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OpportunityLineItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityLineItem':
          summary: 'All Opportunity Products'
          description: 'Retrieves the list of all records for selected opportunity product
            entity.'
          entityName: 'OpportunityLineItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityLineItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityPartner':
          summary: 'New Opportunity Partner'
          description: 'Triggers when a new opportunity partner is created.'
          entityName: 'OpportunityPartner'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityPartner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunityPartner':
          summary: 'New Or Updated Opportunity Partner'
          description: 'Triggers when a  opportunity partner is created or existing opportunity
            partner is updated.'
          entityName: 'OpportunityPartner'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OpportunityPartner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityPartner':
          summary: 'All Opportunity Partners'
          description: 'Retrieves the list of all records for selected opportunity partner
            entity.'
          entityName: 'OpportunityPartner'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityPartner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunityShare':
          summary: 'New Or Updated Opportunity Share'
          description: 'Triggers when a  opportunity share is created or existing opportunity
            share is updated.'
          entityName: 'OpportunityShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OpportunityShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityShare':
          summary: 'All Opportunity Shares'
          description: 'Retrieves the list of all records for selected opportunity share
            entity.'
          entityName: 'OpportunityShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOpportunityStage':
          summary: 'New Opportunity Stage'
          description: 'Triggers when a new opportunity stage is created.'
          entityName: 'OpportunityStage'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OpportunityStage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOpportunityStage':
          summary: 'New Or Updated Opportunity Stage'
          description: 'Triggers when a  opportunity stage is created or existing opportunity
            stage is updated.'
          entityName: 'OpportunityStage'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OpportunityStage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOpportunityStage':
          summary: 'All Opportunity Stages'
          description: 'Retrieves the list of all records for selected opportunity stage
            entity.'
          entityName: 'OpportunityStage'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OpportunityStage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrgDeleteRequest':
          summary: 'New Org Delete Request'
          description: 'Triggers when a new org delete request is created.'
          entityName: 'OrgDeleteRequest'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OrgDeleteRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgDeleteRequest':
          summary: 'New Or Updated Org Delete Request'
          description: 'Triggers when a  org delete request is created or existing org delete
            request is updated.'
          entityName: 'OrgDeleteRequest'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgDeleteRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgDeleteRequest':
          summary: 'All Org Delete Requests'
          description: 'Retrieves the list of all records for selected org delete request
            entity.'
          entityName: 'OrgDeleteRequest'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgDeleteRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgDeleteRequestShare':
          summary: 'New Or Updated Org Delete Request Share'
          description: 'Triggers when a  org delete request share is created or existing
            org delete request share is updated.'
          entityName: 'OrgDeleteRequestShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgDeleteRequestShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgDeleteRequestShare':
          summary: 'All Org Delete Request Shares'
          description: 'Retrieves the list of all records for selected org delete request
            share entity.'
          entityName: 'OrgDeleteRequestShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgDeleteRequestShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgEmailAddressSecurity':
          summary: 'New Or Updated Organization Email Address Security'
          description: 'Triggers when a  organization email address security is created
            or existing organization email address security is updated.'
          entityName: 'OrgEmailAddressSecurity'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgEmailAddressSecurity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgEmailAddressSecurity':
          summary: 'All Organization Email Address Securitys'
          description: 'Retrieves the list of all records for selected organization email
            address security entity.'
          entityName: 'OrgEmailAddressSecurity'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgEmailAddressSecurity'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrgMetric':
          summary: 'New Org Metric'
          description: 'Triggers when a new org metric is created.'
          entityName: 'OrgMetric'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OrgMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgMetric':
          summary: 'New Or Updated Org Metric'
          description: 'Triggers when a  org metric is created or existing org metric is
            updated.'
          entityName: 'OrgMetric'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgMetric':
          summary: 'All Org Metrics'
          description: 'Retrieves the list of all records for selected org metric entity.'
          entityName: 'OrgMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrgMetricScanResult':
          summary: 'New Org Metric Scan Result'
          description: 'Triggers when a new org metric scan result is created.'
          entityName: 'OrgMetricScanResult'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OrgMetricScanResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgMetricScanResult':
          summary: 'New Or Updated Org Metric Scan Result'
          description: 'Triggers when a  org metric scan result is created or existing org
            metric scan result is updated.'
          entityName: 'OrgMetricScanResult'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgMetricScanResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgMetricScanResult':
          summary: 'All Org Metric Scan Results'
          description: 'Retrieves the list of all records for selected org metric scan
            result entity.'
          entityName: 'OrgMetricScanResult'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgMetricScanResult'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrgMetricScanSummary':
          summary: 'New Org Metric Scan Summary'
          description: 'Triggers when a new org metric scan summary is created.'
          entityName: 'OrgMetricScanSummary'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OrgMetricScanSummary'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgMetricScanSummary':
          summary: 'New Or Updated Org Metric Scan Summary'
          description: 'Triggers when a  org metric scan summary is created or existing
            org metric scan summary is updated.'
          entityName: 'OrgMetricScanSummary'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgMetricScanSummary'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgMetricScanSummary':
          summary: 'All Org Metric Scan Summarys'
          description: 'Retrieves the list of all records for selected org metric scan
            summary entity.'
          entityName: 'OrgMetricScanSummary'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgMetricScanSummary'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrgWideEmailAddress':
          summary: 'New Organization-wide From Email Address'
          description: 'Triggers when a new organization-wide from email address is created.'
          entityName: 'OrgWideEmailAddress'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from OrgWideEmailAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrgWideEmailAddress':
          summary: 'New Or Updated Organization-wide From Email Address'
          description: 'Triggers when a  organization-wide from email address is created
            or existing organization-wide from email address is updated.'
          entityName: 'OrgWideEmailAddress'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from OrgWideEmailAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrgWideEmailAddress':
          summary: 'All Organization-wide From Email Addresss'
          description: 'Retrieves the list of all records for selected organization-wide
            from email address entity.'
          entityName: 'OrgWideEmailAddress'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OrgWideEmailAddress'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrganization':
          summary: 'New Organization'
          description: 'Triggers when a new organization is created.'
          entityName: 'Organization'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Organization'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedOrganization':
          summary: 'New Or Updated Organization'
          description: 'Triggers when a  organization is created or existing organization
            is updated.'
          entityName: 'Organization'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Organization'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOrganization':
          summary: 'All Organizations'
          description: 'Retrieves the list of all records for selected organization entity.'
          entityName: 'Organization'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Organization'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOutgoingEmail':
          summary: 'All Outgoing Emails'
          description: 'Retrieves the list of all records for selected outgoing email entity.'
          entityName: 'OutgoingEmail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OutgoingEmail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOutgoingEmailRelation':
          summary: 'All Outgoing Email Relations'
          description: 'Retrieves the list of all records for selected outgoing email relation
            entity.'
          entityName: 'OutgoingEmailRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OutgoingEmailRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllOwnerChangeOptionInfo':
          summary: 'All Change Owner Option Infos'
          description: 'Retrieves the list of all records for selected change owner option
            info entity.'
          entityName: 'OwnerChangeOptionInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from OwnerChangeOptionInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPackageLicense':
          summary: 'New Package License'
          description: 'Triggers when a new package license is created.'
          entityName: 'PackageLicense'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PackageLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPackageLicense':
          summary: 'New Or Updated Package License'
          description: 'Triggers when a  package license is created or existing package
            license is updated.'
          entityName: 'PackageLicense'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PackageLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPackageLicense':
          summary: 'All Package Licenses'
          description: 'Retrieves the list of all records for selected package license
            entity.'
          entityName: 'PackageLicense'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PackageLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPartner':
          summary: 'New Partner'
          description: 'Triggers when a new partner is created.'
          entityName: 'Partner'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Partner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPartner':
          summary: 'New Or Updated Partner'
          description: 'Triggers when a  partner is created or existing partner is updated.'
          entityName: 'Partner'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Partner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPartner':
          summary: 'All Partners'
          description: 'Retrieves the list of all records for selected partner entity.'
          entityName: 'Partner'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Partner'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPartnerRole':
          summary: 'New Partner Role Value'
          description: 'Triggers when a new partner role value is created.'
          entityName: 'PartnerRole'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PartnerRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPartnerRole':
          summary: 'New Or Updated Partner Role Value'
          description: 'Triggers when a  partner role value is created or existing partner
            role value is updated.'
          entityName: 'PartnerRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PartnerRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPartnerRole':
          summary: 'All Partner Role Values'
          description: 'Retrieves the list of all records for selected partner role value
            entity.'
          entityName: 'PartnerRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PartnerRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPartyConsent':
          summary: 'New Party Consent'
          description: 'Triggers when a new party consent is created.'
          entityName: 'PartyConsent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PartyConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPartyConsent':
          summary: 'New Or Updated Party Consent'
          description: 'Triggers when a  party consent is created or existing party consent
            is updated.'
          entityName: 'PartyConsent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PartyConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPartyConsent':
          summary: 'All Party Consents'
          description: 'Retrieves the list of all records for selected party consent entity.'
          entityName: 'PartyConsent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PartyConsent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPartyConsentHistory':
          summary: 'New Party Consent  History'
          description: 'Triggers when a new party consent  history is created.'
          entityName: 'PartyConsentHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PartyConsentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPartyConsentHistory':
          summary: 'All Party Consent  Historys'
          description: 'Retrieves the list of all records for selected party consent  history
            entity.'
          entityName: 'PartyConsentHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PartyConsentHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPartyConsentShare':
          summary: 'New Or Updated Party Consent Share'
          description: 'Triggers when a  party consent share is created or existing party
            consent share is updated.'
          entityName: 'PartyConsentShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PartyConsentShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPartyConsentShare':
          summary: 'All Party Consent Shares'
          description: 'Retrieves the list of all records for selected party consent share
            entity.'
          entityName: 'PartyConsentShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PartyConsentShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPeriod':
          summary: 'All Periods'
          description: 'Retrieves the list of all records for selected period entity.'
          entityName: 'Period'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Period'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPermissionSet':
          summary: 'New Permission Set'
          description: 'Triggers when a new permission set is created.'
          entityName: 'PermissionSet'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PermissionSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPermissionSet':
          summary: 'New Or Updated Permission Set'
          description: 'Triggers when a  permission set is created or existing permission
            set is updated.'
          entityName: 'PermissionSet'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PermissionSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPermissionSet':
          summary: 'All Permission Sets'
          description: 'Retrieves the list of all records for selected permission set entity.'
          entityName: 'PermissionSet'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PermissionSet'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPermissionSetAssignment':
          summary: 'All Permission Set Assignments'
          description: 'Retrieves the list of all records for selected permission set assignment
            entity.'
          entityName: 'PermissionSetAssignment'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PermissionSetAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPermissionSetEventStore':
          summary: 'New Permission Set Event Store '
          description: 'Triggers when a new permission set event store  is created.'
          entityName: 'PermissionSetEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PermissionSetEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPermissionSetEventStore':
          summary: 'New Or Updated Permission Set Event Store '
          description: 'Triggers when a  permission set event store  is created or existing
            permission set event store  is updated.'
          entityName: 'PermissionSetEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PermissionSetEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPermissionSetEventStore':
          summary: 'All Permission Set Event Store s'
          description: 'Retrieves the list of all records for selected permission set event
            store  entity.'
          entityName: 'PermissionSetEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PermissionSetEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPermissionSetLicense':
          summary: 'New Permission Set License'
          description: 'Triggers when a new permission set license is created.'
          entityName: 'PermissionSetLicense'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PermissionSetLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPermissionSetLicense':
          summary: 'New Or Updated Permission Set License'
          description: 'Triggers when a  permission set license is created or existing permission
            set license is updated.'
          entityName: 'PermissionSetLicense'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PermissionSetLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPermissionSetLicense':
          summary: 'All Permission Set Licenses'
          description: 'Retrieves the list of all records for selected permission set license
            entity.'
          entityName: 'PermissionSetLicense'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PermissionSetLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPermissionSetLicenseAssign':
          summary: 'New Permission Set License Assignment'
          description: 'Triggers when a new permission set license assignment is created.'
          entityName: 'PermissionSetLicenseAssign'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PermissionSetLicenseAssign'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPermissionSetLicenseAssign':
          summary: 'New Or Updated Permission Set License Assignment'
          description: 'Triggers when a  permission set license assignment is created or
            existing permission set license assignment is updated.'
          entityName: 'PermissionSetLicenseAssign'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PermissionSetLicenseAssign'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPermissionSetLicenseAssign':
          summary: 'All Permission Set License Assignments'
          description: 'Retrieves the list of all records for selected permission set license
            assignment entity.'
          entityName: 'PermissionSetLicenseAssign'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PermissionSetLicenseAssign'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPermissionSetTabSetting':
          summary: 'All Permission Set Tab Settings'
          description: 'Retrieves the list of all records for selected permission set tab
            setting entity.'
          entityName: 'PermissionSetTabSetting'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PermissionSetTabSetting'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPicklistValueInfo':
          summary: 'All Picklist Value Infos'
          description: 'Retrieves the list of all records for selected picklist value info
            entity.'
          entityName: 'PicklistValueInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PicklistValueInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPlatformAction':
          summary: 'New Or Updated Platform Action'
          description: 'Triggers when a  platform action is created or existing platform
            action is updated.'
          entityName: 'PlatformAction'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PlatformAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPlatformAction':
          summary: 'All Platform Actions'
          description: 'Retrieves the list of all records for selected platform action
            entity.'
          entityName: 'PlatformAction'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PlatformAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPlatformCachePartition':
          summary: 'New Platform Cache Partition'
          description: 'Triggers when a new platform cache partition is created.'
          entityName: 'PlatformCachePartition'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PlatformCachePartition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPlatformCachePartition':
          summary: 'New Or Updated Platform Cache Partition'
          description: 'Triggers when a  platform cache partition is created or existing
            platform cache partition is updated.'
          entityName: 'PlatformCachePartition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PlatformCachePartition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPlatformCachePartition':
          summary: 'All Platform Cache Partitions'
          description: 'Retrieves the list of all records for selected platform cache partition
            entity.'
          entityName: 'PlatformCachePartition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PlatformCachePartition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPlatformCachePartitionType':
          summary: 'New Platform Cache Partition Type'
          description: 'Triggers when a new platform cache partition type is created.'
          entityName: 'PlatformCachePartitionType'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PlatformCachePartitionType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPlatformCachePartitionType':
          summary: 'New Or Updated Platform Cache Partition Type'
          description: 'Triggers when a  platform cache partition type is created or existing
            platform cache partition type is updated.'
          entityName: 'PlatformCachePartitionType'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PlatformCachePartitionType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPlatformCachePartitionType':
          summary: 'All Platform Cache Partition Types'
          description: 'Retrieves the list of all records for selected platform cache partition
            type entity.'
          entityName: 'PlatformCachePartitionType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PlatformCachePartitionType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPlatformEventUsageMetric':
          summary: 'New Or Updated Platform Event Usage Metric'
          description: 'Triggers when a  platform event usage metric is created or existing
            platform event usage metric is updated.'
          entityName: 'PlatformEventUsageMetric'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PlatformEventUsageMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPlatformEventUsageMetric':
          summary: 'All Platform Event Usage Metrics'
          description: 'Retrieves the list of all records for selected platform event usage
            metric entity.'
          entityName: 'PlatformEventUsageMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PlatformEventUsageMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPricebook2':
          summary: 'New Price Book'
          description: 'Triggers when a new price book is created.'
          entityName: 'Pricebook2'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Pricebook2'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPricebook2':
          summary: 'New Or Updated Price Book'
          description: 'Triggers when a  price book is created or existing price book is
            updated.'
          entityName: 'Pricebook2'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Pricebook2'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPricebook2':
          summary: 'All Price Books'
          description: 'Retrieves the list of all records for selected price book entity.'
          entityName: 'Pricebook2'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Pricebook2'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPricebook2History':
          summary: 'New Price Book History'
          description: 'Triggers when a new price book history is created.'
          entityName: 'Pricebook2History'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Pricebook2History'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPricebook2History':
          summary: 'All Price Book Historys'
          description: 'Retrieves the list of all records for selected price book history
            entity.'
          entityName: 'Pricebook2History'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Pricebook2History'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPricebookEntry':
          summary: 'New Price Book Entry'
          description: 'Triggers when a new price book entry is created.'
          entityName: 'PricebookEntry'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PricebookEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPricebookEntry':
          summary: 'New Or Updated Price Book Entry'
          description: 'Triggers when a  price book entry is created or existing price book
            entry is updated.'
          entityName: 'PricebookEntry'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PricebookEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPricebookEntry':
          summary: 'All Price Book Entrys'
          description: 'Retrieves the list of all records for selected price book entry
            entity.'
          entityName: 'PricebookEntry'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PricebookEntry'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPricebookEntryHistory':
          summary: 'New Price Book Entry History'
          description: 'Triggers when a new price book entry history is created.'
          entityName: 'PricebookEntryHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PricebookEntryHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPricebookEntryHistory':
          summary: 'All Price Book Entry Historys'
          description: 'Retrieves the list of all records for selected price book entry
            history entity.'
          entityName: 'PricebookEntryHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PricebookEntryHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProcessDefinition':
          summary: 'New Process Definition'
          description: 'Triggers when a new process definition is created.'
          entityName: 'ProcessDefinition'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProcessDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProcessDefinition':
          summary: 'New Or Updated Process Definition'
          description: 'Triggers when a  process definition is created or existing process
            definition is updated.'
          entityName: 'ProcessDefinition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ProcessDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessDefinition':
          summary: 'All Process Definitions'
          description: 'Retrieves the list of all records for selected process definition
            entity.'
          entityName: 'ProcessDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProcessFlowMigration':
          summary: 'New Process Flow Migration'
          description: 'Triggers when a new process flow migration is created.'
          entityName: 'ProcessFlowMigration'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProcessFlowMigration'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProcessFlowMigration':
          summary: 'New Or Updated Process Flow Migration'
          description: 'Triggers when a  process flow migration is created or existing process
            flow migration is updated.'
          entityName: 'ProcessFlowMigration'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ProcessFlowMigration'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessFlowMigration':
          summary: 'All Process Flow Migrations'
          description: 'Retrieves the list of all records for selected process flow migration
            entity.'
          entityName: 'ProcessFlowMigration'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessFlowMigration'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProcessInstance':
          summary: 'New Process Instance'
          description: 'Triggers when a new process instance is created.'
          entityName: 'ProcessInstance'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProcessInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProcessInstance':
          summary: 'New Or Updated Process Instance'
          description: 'Triggers when a  process instance is created or existing process
            instance is updated.'
          entityName: 'ProcessInstance'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ProcessInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessInstance':
          summary: 'All Process Instances'
          description: 'Retrieves the list of all records for selected process instance
            entity.'
          entityName: 'ProcessInstance'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessInstance'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProcessInstanceNode':
          summary: 'New Process Instance Node'
          description: 'Triggers when a new process instance node is created.'
          entityName: 'ProcessInstanceNode'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProcessInstanceNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProcessInstanceNode':
          summary: 'New Or Updated Process Instance Node'
          description: 'Triggers when a  process instance node is created or existing process
            instance node is updated.'
          entityName: 'ProcessInstanceNode'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ProcessInstanceNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessInstanceNode':
          summary: 'All Process Instance Nodes'
          description: 'Retrieves the list of all records for selected process instance
            node entity.'
          entityName: 'ProcessInstanceNode'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessInstanceNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProcessInstanceStep':
          summary: 'New Process Instance Step'
          description: 'Triggers when a new process instance step is created.'
          entityName: 'ProcessInstanceStep'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProcessInstanceStep'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessInstanceStep':
          summary: 'All Process Instance Steps'
          description: 'Retrieves the list of all records for selected process instance
            step entity.'
          entityName: 'ProcessInstanceStep'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessInstanceStep'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProcessInstanceWorkitem':
          summary: 'New Approval Request'
          description: 'Triggers when a new approval request is created.'
          entityName: 'ProcessInstanceWorkitem'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProcessInstanceWorkitem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessInstanceWorkitem':
          summary: 'All Approval Requests'
          description: 'Retrieves the list of all records for selected approval request
            entity.'
          entityName: 'ProcessInstanceWorkitem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessInstanceWorkitem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProcessNode':
          summary: 'All Process Nodes'
          description: 'Retrieves the list of all records for selected process node entity.'
          entityName: 'ProcessNode'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProcessNode'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProduct2':
          summary: 'New Product'
          description: 'Triggers when a new product is created.'
          entityName: 'Product2'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Product2'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProduct2':
          summary: 'New Or Updated Product'
          description: 'Triggers when a  product is created or existing product is updated.'
          entityName: 'Product2'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Product2'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProduct2':
          summary: 'All Products'
          description: 'Retrieves the list of all records for selected product entity.'
          entityName: 'Product2'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Product2'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProduct2History':
          summary: 'New Product History'
          description: 'Triggers when a new product history is created.'
          entityName: 'Product2History'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Product2History'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProduct2History':
          summary: 'All Product Historys'
          description: 'Retrieves the list of all records for selected product history
            entity.'
          entityName: 'Product2History'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Product2History'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProductConsumptionSchedule':
          summary: 'New Product Consumption Schedule'
          description: 'Triggers when a new product consumption schedule is created.'
          entityName: 'ProductConsumptionSchedule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ProductConsumptionSchedule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProductConsumptionSchedule':
          summary: 'New Or Updated Product Consumption Schedule'
          description: 'Triggers when a  product consumption schedule is created or existing
            product consumption schedule is updated.'
          entityName: 'ProductConsumptionSchedule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ProductConsumptionSchedule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProductConsumptionSchedule':
          summary: 'All Product Consumption Schedules'
          description: 'Retrieves the list of all records for selected product consumption
            schedule entity.'
          entityName: 'ProductConsumptionSchedule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ProductConsumptionSchedule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewProfile':
          summary: 'New Profile'
          description: 'Triggers when a new profile is created.'
          entityName: 'Profile'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Profile'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedProfile':
          summary: 'New Or Updated Profile'
          description: 'Triggers when a  profile is created or existing profile is updated.'
          entityName: 'Profile'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Profile'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllProfile':
          summary: 'All Profiles'
          description: 'Retrieves the list of all records for selected profile entity.'
          entityName: 'Profile'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Profile'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPrompt':
          summary: 'New Prompt'
          description: 'Triggers when a new prompt is created.'
          entityName: 'Prompt'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Prompt'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPrompt':
          summary: 'New Or Updated Prompt'
          description: 'Triggers when a  prompt is created or existing prompt is updated.'
          entityName: 'Prompt'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Prompt'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPrompt':
          summary: 'All Prompts'
          description: 'Retrieves the list of all records for selected prompt entity.'
          entityName: 'Prompt'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Prompt'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPromptAction':
          summary: 'New Prompt Action'
          description: 'Triggers when a new prompt action is created.'
          entityName: 'PromptAction'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PromptAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPromptAction':
          summary: 'New Or Updated Prompt Action'
          description: 'Triggers when a  prompt action is created or existing prompt action
            is updated.'
          entityName: 'PromptAction'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PromptAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPromptAction':
          summary: 'All Prompt Actions'
          description: 'Retrieves the list of all records for selected prompt action entity.'
          entityName: 'PromptAction'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PromptAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPromptActionShare':
          summary: 'New Or Updated Prompt Action Share'
          description: 'Triggers when a  prompt action share is created or existing prompt
            action share is updated.'
          entityName: 'PromptActionShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PromptActionShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPromptActionShare':
          summary: 'All Prompt Action Shares'
          description: 'Retrieves the list of all records for selected prompt action share
            entity.'
          entityName: 'PromptActionShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PromptActionShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPromptError':
          summary: 'New Prompt Error'
          description: 'Triggers when a new prompt error is created.'
          entityName: 'PromptError'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PromptError'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPromptError':
          summary: 'New Or Updated Prompt Error'
          description: 'Triggers when a  prompt error is created or existing prompt error
            is updated.'
          entityName: 'PromptError'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PromptError'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPromptError':
          summary: 'All Prompt Errors'
          description: 'Retrieves the list of all records for selected prompt error entity.'
          entityName: 'PromptError'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PromptError'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPromptErrorShare':
          summary: 'New Or Updated Prompt Error Share'
          description: 'Triggers when a  prompt error share is created or existing prompt
            error share is updated.'
          entityName: 'PromptErrorShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PromptErrorShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPromptErrorShare':
          summary: 'All Prompt Error Shares'
          description: 'Retrieves the list of all records for selected prompt error share
            entity.'
          entityName: 'PromptErrorShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PromptErrorShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPromptVersion':
          summary: 'New Prompt Version'
          description: 'Triggers when a new prompt version is created.'
          entityName: 'PromptVersion'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PromptVersion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPromptVersion':
          summary: 'New Or Updated Prompt Version'
          description: 'Triggers when a  prompt version is created or existing prompt version
            is updated.'
          entityName: 'PromptVersion'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PromptVersion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPromptVersion':
          summary: 'All Prompt Versions'
          description: 'Retrieves the list of all records for selected prompt version entity.'
          entityName: 'PromptVersion'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PromptVersion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPublisher':
          summary: 'All Publishers'
          description: 'Retrieves the list of all records for selected publisher entity.'
          entityName: 'Publisher'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Publisher'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewPushTopic':
          summary: 'New Push Topic'
          description: 'Triggers when a new push topic is created.'
          entityName: 'PushTopic'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from PushTopic'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedPushTopic':
          summary: 'New Or Updated Push Topic'
          description: 'Triggers when a  push topic is created or existing push topic is
            updated.'
          entityName: 'PushTopic'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from PushTopic'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllPushTopic':
          summary: 'All Push Topics'
          description: 'Retrieves the list of all records for selected push topic entity.'
          entityName: 'PushTopic'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from PushTopic'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuestion':
          summary: 'New Question'
          description: 'Triggers when a new question is created.'
          entityName: 'Question'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Question'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuestion':
          summary: 'New Or Updated Question'
          description: 'Triggers when a  question is created or existing question is updated.'
          entityName: 'Question'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Question'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuestion':
          summary: 'All Questions'
          description: 'Retrieves the list of all records for selected question entity.'
          entityName: 'Question'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Question'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuestionDataCategorySelection':
          summary: 'New Question Data Category Selection'
          description: 'Triggers when a new question data category selection is created.'
          entityName: 'QuestionDataCategorySelection'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from QuestionDataCategorySelection'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuestionDataCategorySelection':
          summary: 'All Question Data Category Selections'
          description: 'Retrieves the list of all records for selected question data category
            selection entity.'
          entityName: 'QuestionDataCategorySelection'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuestionDataCategorySelection'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuestionReportAbuse':
          summary: 'New Question Report Abuse'
          description: 'Triggers when a new question report abuse is created.'
          entityName: 'QuestionReportAbuse'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from QuestionReportAbuse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuestionReportAbuse':
          summary: 'New Or Updated Question Report Abuse'
          description: 'Triggers when a  question report abuse is created or existing question
            report abuse is updated.'
          entityName: 'QuestionReportAbuse'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from QuestionReportAbuse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuestionReportAbuse':
          summary: 'All Question Report Abuses'
          description: 'Retrieves the list of all records for selected question report
            abuse entity.'
          entityName: 'QuestionReportAbuse'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuestionReportAbuse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuestionSubscription':
          summary: 'New Question Subscription'
          description: 'Triggers when a new question subscription is created.'
          entityName: 'QuestionSubscription'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from QuestionSubscription'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuestionSubscription':
          summary: 'New Or Updated Question Subscription'
          description: 'Triggers when a  question subscription is created or existing question
            subscription is updated.'
          entityName: 'QuestionSubscription'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from QuestionSubscription'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuestionSubscription':
          summary: 'All Question Subscriptions'
          description: 'Retrieves the list of all records for selected question subscription
            entity.'
          entityName: 'QuestionSubscription'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuestionSubscription'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQueueSobject':
          summary: 'All Queue sObjects'
          description: 'Retrieves the list of all records for selected queue sobject entity.'
          entityName: 'QueueSobject'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QueueSobject'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuickText':
          summary: 'New Quick Text'
          description: 'Triggers when a new quick text is created.'
          entityName: 'QuickText'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from QuickText'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuickText':
          summary: 'New Or Updated Quick Text'
          description: 'Triggers when a  quick text is created or existing quick text is
            updated.'
          entityName: 'QuickText'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from QuickText'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuickText':
          summary: 'All Quick Texts'
          description: 'Retrieves the list of all records for selected quick text entity.'
          entityName: 'QuickText'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuickText'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuickTextHistory':
          summary: 'New Quick Text History'
          description: 'Triggers when a new quick text history is created.'
          entityName: 'QuickTextHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from QuickTextHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuickTextHistory':
          summary: 'All Quick Text Historys'
          description: 'Retrieves the list of all records for selected quick text history
            entity.'
          entityName: 'QuickTextHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuickTextHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuickTextShare':
          summary: 'New Or Updated Quick Text Share'
          description: 'Triggers when a  quick text share is created or existing quick text
            share is updated.'
          entityName: 'QuickTextShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from QuickTextShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuickTextShare':
          summary: 'All Quick Text Shares'
          description: 'Retrieves the list of all records for selected quick text share
            entity.'
          entityName: 'QuickTextShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuickTextShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewQuickTextUsage':
          summary: 'New Quick Text Usage'
          description: 'Triggers when a new quick text usage is created.'
          entityName: 'QuickTextUsage'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from QuickTextUsage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuickTextUsage':
          summary: 'New Or Updated Quick Text Usage'
          description: 'Triggers when a  quick text usage is created or existing quick text
            usage is updated.'
          entityName: 'QuickTextUsage'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from QuickTextUsage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuickTextUsage':
          summary: 'All Quick Text Usages'
          description: 'Retrieves the list of all records for selected quick text usage
            entity.'
          entityName: 'QuickTextUsage'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuickTextUsage'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedQuickTextUsageShare':
          summary: 'New Or Updated Quick Text Usage Share'
          description: 'Triggers when a  quick text usage share is created or existing quick
            text usage share is updated.'
          entityName: 'QuickTextUsageShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from QuickTextUsageShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllQuickTextUsageShare':
          summary: 'All Quick Text Usage Shares'
          description: 'Retrieves the list of all records for selected quick text usage
            share entity.'
          entityName: 'QuickTextUsageShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from QuickTextUsageShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRecentlyViewed':
          summary: 'All Recently Vieweds'
          description: 'Retrieves the list of all records for selected recently viewed
            entity.'
          entityName: 'RecentlyViewed'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RecentlyViewed'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewRecommendation':
          summary: 'New Recommendation'
          description: 'Triggers when a new recommendation is created.'
          entityName: 'Recommendation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Recommendation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRecommendation':
          summary: 'New Or Updated Recommendation'
          description: 'Triggers when a  recommendation is created or existing recommendation
            is updated.'
          entityName: 'Recommendation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Recommendation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRecommendation':
          summary: 'All Recommendations'
          description: 'Retrieves the list of all records for selected recommendation entity.'
          entityName: 'Recommendation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Recommendation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewRecommendationResponse':
          summary: 'New Recommendation Response'
          description: 'Triggers when a new recommendation response is created.'
          entityName: 'RecommendationResponse'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from RecommendationResponse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRecommendationResponse':
          summary: 'New Or Updated Recommendation Response'
          description: 'Triggers when a  recommendation response is created or existing
            recommendation response is updated.'
          entityName: 'RecommendationResponse'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from RecommendationResponse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRecommendationResponse':
          summary: 'All Recommendation Responses'
          description: 'Retrieves the list of all records for selected recommendation response
            entity.'
          entityName: 'RecommendationResponse'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RecommendationResponse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewRecordAction':
          summary: 'New RecordAction'
          description: 'Triggers when a new recordaction is created.'
          entityName: 'RecordAction'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from RecordAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRecordAction':
          summary: 'New Or Updated RecordAction'
          description: 'Triggers when a  recordaction is created or existing recordaction
            is updated.'
          entityName: 'RecordAction'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from RecordAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRecordAction':
          summary: 'All RecordActions'
          description: 'Retrieves the list of all records for selected recordaction entity.'
          entityName: 'RecordAction'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RecordAction'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewRecordActionHistory':
          summary: 'New RecordActionHistory'
          description: 'Triggers when a new recordactionhistory is created.'
          entityName: 'RecordActionHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from RecordActionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRecordActionHistory':
          summary: 'New Or Updated RecordActionHistory'
          description: 'Triggers when a  recordactionhistory is created or existing recordactionhistory
            is updated.'
          entityName: 'RecordActionHistory'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from RecordActionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRecordActionHistory':
          summary: 'All RecordActionHistorys'
          description: 'Retrieves the list of all records for selected recordactionhistory
            entity.'
          entityName: 'RecordActionHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RecordActionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewRecordType':
          summary: 'New Record Type'
          description: 'Triggers when a new record type is created.'
          entityName: 'RecordType'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from RecordType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRecordType':
          summary: 'New Or Updated Record Type'
          description: 'Triggers when a  record type is created or existing record type
            is updated.'
          entityName: 'RecordType'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from RecordType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRecordType':
          summary: 'All Record Types'
          description: 'Retrieves the list of all records for selected record type entity.'
          entityName: 'RecordType'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RecordType'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewRedirectWhitelistUrl':
          summary: 'New Allow URL for Redirects'
          description: 'Triggers when a new allow url for redirects is created.'
          entityName: 'RedirectWhitelistUrl'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from RedirectWhitelistUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRedirectWhitelistUrl':
          summary: 'New Or Updated Allow URL for Redirects'
          description: 'Triggers when a  allow url for redirects is created or existing
            allow url for redirects is updated.'
          entityName: 'RedirectWhitelistUrl'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from RedirectWhitelistUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRedirectWhitelistUrl':
          summary: 'All Allow URL for Redirectss'
          description: 'Retrieves the list of all records for selected allow url for redirects
            entity.'
          entityName: 'RedirectWhitelistUrl'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RedirectWhitelistUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRelatedListColumnDefinition':
          summary: 'All Related List Column Definitions'
          description: 'Retrieves the list of all records for selected related list column
            definition entity.'
          entityName: 'RelatedListColumnDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RelatedListColumnDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedRelatedListDefinition':
          summary: 'New Or Updated Related List Definition'
          description: 'Triggers when a  related list definition is created or existing
            related list definition is updated.'
          entityName: 'RelatedListDefinition'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from RelatedListDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRelatedListDefinition':
          summary: 'All Related List Definitions'
          description: 'Retrieves the list of all records for selected related list definition
            entity.'
          entityName: 'RelatedListDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RelatedListDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRelationshipDomain':
          summary: 'All Relationship Domains'
          description: 'Retrieves the list of all records for selected relationship domain
            entity.'
          entityName: 'RelationshipDomain'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RelationshipDomain'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllRelationshipInfo':
          summary: 'All Relationships'
          description: 'Retrieves the list of all records for selected relationship entity.'
          entityName: 'RelationshipInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from RelationshipInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewReply':
          summary: 'New Reply'
          description: 'Triggers when a new reply is created.'
          entityName: 'Reply'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Reply'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedReply':
          summary: 'New Or Updated Reply'
          description: 'Triggers when a  reply is created or existing reply is updated.'
          entityName: 'Reply'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Reply'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllReply':
          summary: 'All Replys'
          description: 'Retrieves the list of all records for selected reply entity.'
          entityName: 'Reply'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Reply'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewReplyReportAbuse':
          summary: 'New Reply Report Abuse'
          description: 'Triggers when a new reply report abuse is created.'
          entityName: 'ReplyReportAbuse'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ReplyReportAbuse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedReplyReportAbuse':
          summary: 'New Or Updated Reply Report Abuse'
          description: 'Triggers when a  reply report abuse is created or existing reply
            report abuse is updated.'
          entityName: 'ReplyReportAbuse'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ReplyReportAbuse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllReplyReportAbuse':
          summary: 'All Reply Report Abuses'
          description: 'Retrieves the list of all records for selected reply report abuse
            entity.'
          entityName: 'ReplyReportAbuse'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ReplyReportAbuse'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewReport':
          summary: 'New Report'
          description: 'Triggers when a new report is created.'
          entityName: 'Report'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Report'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedReport':
          summary: 'New Or Updated Report'
          description: 'Triggers when a  report is created or existing report is updated.'
          entityName: 'Report'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Report'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllReport':
          summary: 'All Reports'
          description: 'Retrieves the list of all records for selected report entity.'
          entityName: 'Report'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Report'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewReportAnomalyEventStore':
          summary: 'New Report Anomaly Event Store'
          description: 'Triggers when a new report anomaly event store is created.'
          entityName: 'ReportAnomalyEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ReportAnomalyEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedReportAnomalyEventStore':
          summary: 'New Or Updated Report Anomaly Event Store'
          description: 'Triggers when a  report anomaly event store is created or existing
            report anomaly event store is updated.'
          entityName: 'ReportAnomalyEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ReportAnomalyEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllReportAnomalyEventStore':
          summary: 'All Report Anomaly Event Stores'
          description: 'Retrieves the list of all records for selected report anomaly event
            store entity.'
          entityName: 'ReportAnomalyEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ReportAnomalyEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewReportEvent':
          summary: 'New Report Event'
          description: 'Triggers when a new report event is created.'
          entityName: 'ReportEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ReportEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedReportEvent':
          summary: 'New Or Updated Report Event'
          description: 'Triggers when a  report event is created or existing report event
            is updated.'
          entityName: 'ReportEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ReportEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllReportEvent':
          summary: 'All Report Events'
          description: 'Retrieves the list of all records for selected report event entity.'
          entityName: 'ReportEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ReportEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSamlSsoConfig':
          summary: 'New SAML Single Sign-On Setting'
          description: 'Triggers when a new saml single sign-on setting is created.'
          entityName: 'SamlSsoConfig'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SamlSsoConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSamlSsoConfig':
          summary: 'New Or Updated SAML Single Sign-On Setting'
          description: 'Triggers when a  saml single sign-on setting is created or existing
            saml single sign-on setting is updated.'
          entityName: 'SamlSsoConfig'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SamlSsoConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSamlSsoConfig':
          summary: 'All SAML Single Sign-On Settings'
          description: 'Retrieves the list of all records for selected saml single sign-on
            setting entity.'
          entityName: 'SamlSsoConfig'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SamlSsoConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewScontrol':
          summary: 'New Custom S-Control'
          description: 'Triggers when a new custom s-control is created.'
          entityName: 'Scontrol'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Scontrol'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedScontrol':
          summary: 'New Or Updated Custom S-Control'
          description: 'Triggers when a  custom s-control is created or existing custom
            s-control is updated.'
          entityName: 'Scontrol'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Scontrol'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllScontrol':
          summary: 'All Custom S-Controls'
          description: 'Retrieves the list of all records for selected custom s-control
            entity.'
          entityName: 'Scontrol'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Scontrol'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewScorecard':
          summary: 'New Scorecard'
          description: 'Triggers when a new scorecard is created.'
          entityName: 'Scorecard'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Scorecard'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedScorecard':
          summary: 'New Or Updated Scorecard'
          description: 'Triggers when a  scorecard is created or existing scorecard is updated.'
          entityName: 'Scorecard'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Scorecard'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllScorecard':
          summary: 'All Scorecards'
          description: 'Retrieves the list of all records for selected scorecard entity.'
          entityName: 'Scorecard'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Scorecard'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewScorecardAssociation':
          summary: 'New Scorecard Association'
          description: 'Triggers when a new scorecard association is created.'
          entityName: 'ScorecardAssociation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ScorecardAssociation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedScorecardAssociation':
          summary: 'New Or Updated Scorecard Association'
          description: 'Triggers when a  scorecard association is created or existing scorecard
            association is updated.'
          entityName: 'ScorecardAssociation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ScorecardAssociation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllScorecardAssociation':
          summary: 'All Scorecard Associations'
          description: 'Retrieves the list of all records for selected scorecard association
            entity.'
          entityName: 'ScorecardAssociation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ScorecardAssociation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewScorecardMetric':
          summary: 'New Scorecard Metric'
          description: 'Triggers when a new scorecard metric is created.'
          entityName: 'ScorecardMetric'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ScorecardMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedScorecardMetric':
          summary: 'New Or Updated Scorecard Metric'
          description: 'Triggers when a  scorecard metric is created or existing scorecard
            metric is updated.'
          entityName: 'ScorecardMetric'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ScorecardMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllScorecardMetric':
          summary: 'All Scorecard Metrics'
          description: 'Retrieves the list of all records for selected scorecard metric
            entity.'
          entityName: 'ScorecardMetric'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ScorecardMetric'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedScorecardShare':
          summary: 'New Or Updated Scorecard Share'
          description: 'Triggers when a  scorecard share is created or existing scorecard
            share is updated.'
          entityName: 'ScorecardShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ScorecardShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllScorecardShare':
          summary: 'All Scorecard Shares'
          description: 'Retrieves the list of all records for selected scorecard share
            entity.'
          entityName: 'ScorecardShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ScorecardShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSearchLayout':
          summary: 'New Or Updated Search Layout'
          description: 'Triggers when a  search layout is created or existing search layout
            is updated.'
          entityName: 'SearchLayout'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SearchLayout'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSearchLayout':
          summary: 'All Search Layouts'
          description: 'Retrieves the list of all records for selected search layout entity.'
          entityName: 'SearchLayout'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SearchLayout'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSearchPromotionRule':
          summary: 'New Promoted Search Term'
          description: 'Triggers when a new promoted search term is created.'
          entityName: 'SearchPromotionRule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SearchPromotionRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSearchPromotionRule':
          summary: 'New Or Updated Promoted Search Term'
          description: 'Triggers when a  promoted search term is created or existing promoted
            search term is updated.'
          entityName: 'SearchPromotionRule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SearchPromotionRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSearchPromotionRule':
          summary: 'All Promoted Search Terms'
          description: 'Retrieves the list of all records for selected promoted search
            term entity.'
          entityName: 'SearchPromotionRule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SearchPromotionRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSecurityCustomBaseline':
          summary: 'New Security Custom Baseline'
          description: 'Triggers when a new security custom baseline is created.'
          entityName: 'SecurityCustomBaseline'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SecurityCustomBaseline'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSecurityCustomBaseline':
          summary: 'New Or Updated Security Custom Baseline'
          description: 'Triggers when a  security custom baseline is created or existing
            security custom baseline is updated.'
          entityName: 'SecurityCustomBaseline'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SecurityCustomBaseline'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSecurityCustomBaseline':
          summary: 'All Security Custom Baselines'
          description: 'Retrieves the list of all records for selected security custom
            baseline entity.'
          entityName: 'SecurityCustomBaseline'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SecurityCustomBaseline'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSeller':
          summary: 'New Seller'
          description: 'Triggers when a new seller is created.'
          entityName: 'Seller'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Seller'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSeller':
          summary: 'New Or Updated Seller'
          description: 'Triggers when a  seller is created or existing seller is updated.'
          entityName: 'Seller'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Seller'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSeller':
          summary: 'All Sellers'
          description: 'Retrieves the list of all records for selected seller entity.'
          entityName: 'Seller'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Seller'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSellerHistory':
          summary: 'New Seller History'
          description: 'Triggers when a new seller history is created.'
          entityName: 'SellerHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SellerHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSellerHistory':
          summary: 'All Seller Historys'
          description: 'Retrieves the list of all records for selected seller history entity.'
          entityName: 'SellerHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SellerHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSellerShare':
          summary: 'New Or Updated Seller Share'
          description: 'Triggers when a  seller share is created or existing seller share
            is updated.'
          entityName: 'SellerShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SellerShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSellerShare':
          summary: 'All Seller Shares'
          description: 'Retrieves the list of all records for selected seller share entity.'
          entityName: 'SellerShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SellerShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSessionHijackingEventStore':
          summary: 'New Session Hijacking Event Store'
          description: 'Triggers when a new session hijacking event store is created.'
          entityName: 'SessionHijackingEventStore'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SessionHijackingEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSessionHijackingEventStore':
          summary: 'New Or Updated Session Hijacking Event Store'
          description: 'Triggers when a  session hijacking event store is created or existing
            session hijacking event store is updated.'
          entityName: 'SessionHijackingEventStore'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SessionHijackingEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSessionHijackingEventStore':
          summary: 'All Session Hijacking Event Stores'
          description: 'Retrieves the list of all records for selected session hijacking
            event store entity.'
          entityName: 'SessionHijackingEventStore'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SessionHijackingEventStore'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSessionPermSetActivation':
          summary: 'New Session Permission Set Activation'
          description: 'Triggers when a new session permission set activation is created.'
          entityName: 'SessionPermSetActivation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SessionPermSetActivation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSessionPermSetActivation':
          summary: 'New Or Updated Session Permission Set Activation'
          description: 'Triggers when a  session permission set activation is created or
            existing session permission set activation is updated.'
          entityName: 'SessionPermSetActivation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SessionPermSetActivation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSessionPermSetActivation':
          summary: 'All Session Permission Set Activations'
          description: 'Retrieves the list of all records for selected session permission
            set activation entity.'
          entityName: 'SessionPermSetActivation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SessionPermSetActivation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSetupAssistantStep':
          summary: 'New Setup Assistant Step'
          description: 'Triggers when a new setup assistant step is created.'
          entityName: 'SetupAssistantStep'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SetupAssistantStep'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSetupAssistantStep':
          summary: 'New Or Updated Setup Assistant Step'
          description: 'Triggers when a  setup assistant step is created or existing setup
            assistant step is updated.'
          entityName: 'SetupAssistantStep'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SetupAssistantStep'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSetupAssistantStep':
          summary: 'All Setup Assistant Steps'
          description: 'Retrieves the list of all records for selected setup assistant
            step entity.'
          entityName: 'SetupAssistantStep'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SetupAssistantStep'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSetupAuditTrail':
          summary: 'New Setup Audit Trail Entry'
          description: 'Triggers when a new setup audit trail entry is created.'
          entityName: 'SetupAuditTrail'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SetupAuditTrail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSetupAuditTrail':
          summary: 'All Setup Audit Trail Entrys'
          description: 'Retrieves the list of all records for selected setup audit trail
            entry entity.'
          entityName: 'SetupAuditTrail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SetupAuditTrail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSetupEntityAccess':
          summary: 'All Setup Entity Accesss'
          description: 'Retrieves the list of all records for selected setup entity access
            entity.'
          entityName: 'SetupEntityAccess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SetupEntityAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSite':
          summary: 'New Site'
          description: 'Triggers when a new site is created.'
          entityName: 'Site'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Site'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSite':
          summary: 'New Or Updated Site'
          description: 'Triggers when a  site is created or existing site is updated.'
          entityName: 'Site'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Site'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSite':
          summary: 'All Sites'
          description: 'Retrieves the list of all records for selected site entity.'
          entityName: 'Site'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Site'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSiteDetail':
          summary: 'All Site Details'
          description: 'Retrieves the list of all records for selected site detail entity.'
          entityName: 'SiteDetail'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SiteDetail'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSiteHistory':
          summary: 'New Site History'
          description: 'Triggers when a new site history is created.'
          entityName: 'SiteHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SiteHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSiteHistory':
          summary: 'All Site Historys'
          description: 'Retrieves the list of all records for selected site history entity.'
          entityName: 'SiteHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SiteHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSiteIframeWhiteListUrl':
          summary: 'New Trusted Domains for Inline Frames'
          description: 'Triggers when a new trusted domains for inline frames is created.'
          entityName: 'SiteIframeWhiteListUrl'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SiteIframeWhiteListUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSiteIframeWhiteListUrl':
          summary: 'New Or Updated Trusted Domains for Inline Frames'
          description: 'Triggers when a  trusted domains for inline frames is created or
            existing trusted domains for inline frames is updated.'
          entityName: 'SiteIframeWhiteListUrl'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SiteIframeWhiteListUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSiteIframeWhiteListUrl':
          summary: 'All Trusted Domains for Inline Framess'
          description: 'Retrieves the list of all records for selected trusted domains
            for inline frames entity.'
          entityName: 'SiteIframeWhiteListUrl'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SiteIframeWhiteListUrl'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSiteRedirectMapping':
          summary: 'New Site Redirect Mapping'
          description: 'Triggers when a new site redirect mapping is created.'
          entityName: 'SiteRedirectMapping'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SiteRedirectMapping'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSiteRedirectMapping':
          summary: 'New Or Updated Site Redirect Mapping'
          description: 'Triggers when a  site redirect mapping is created or existing site
            redirect mapping is updated.'
          entityName: 'SiteRedirectMapping'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SiteRedirectMapping'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSiteRedirectMapping':
          summary: 'All Site Redirect Mappings'
          description: 'Retrieves the list of all records for selected site redirect mapping
            entity.'
          entityName: 'SiteRedirectMapping'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SiteRedirectMapping'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSolution':
          summary: 'New Solution'
          description: 'Triggers when a new solution is created.'
          entityName: 'Solution'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Solution'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSolution':
          summary: 'New Or Updated Solution'
          description: 'Triggers when a  solution is created or existing solution is updated.'
          entityName: 'Solution'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Solution'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSolution':
          summary: 'All Solutions'
          description: 'Retrieves the list of all records for selected solution entity.'
          entityName: 'Solution'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Solution'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSolutionHistory':
          summary: 'New Solution History'
          description: 'Triggers when a new solution history is created.'
          entityName: 'SolutionHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SolutionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSolutionHistory':
          summary: 'All Solution Historys'
          description: 'Retrieves the list of all records for selected solution history
            entity.'
          entityName: 'SolutionHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SolutionHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewSolutionStatus':
          summary: 'New Solution Status Value'
          description: 'Triggers when a new solution status value is created.'
          entityName: 'SolutionStatus'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from SolutionStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedSolutionStatus':
          summary: 'New Or Updated Solution Status Value'
          description: 'Triggers when a  solution status value is created or existing solution
            status value is updated.'
          entityName: 'SolutionStatus'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from SolutionStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllSolutionStatus':
          summary: 'All Solution Status Values'
          description: 'Retrieves the list of all records for selected solution status
            value entity.'
          entityName: 'SolutionStatus'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from SolutionStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewStamp':
          summary: 'New Stamp'
          description: 'Triggers when a new stamp is created.'
          entityName: 'Stamp'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Stamp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedStamp':
          summary: 'New Or Updated Stamp'
          description: 'Triggers when a  stamp is created or existing stamp is updated.'
          entityName: 'Stamp'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Stamp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllStamp':
          summary: 'All Stamps'
          description: 'Retrieves the list of all records for selected stamp entity.'
          entityName: 'Stamp'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Stamp'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewStampAssignment':
          summary: 'New Stamp Assignment'
          description: 'Triggers when a new stamp assignment is created.'
          entityName: 'StampAssignment'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from StampAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedStampAssignment':
          summary: 'New Or Updated Stamp Assignment'
          description: 'Triggers when a  stamp assignment is created or existing stamp assignment
            is updated.'
          entityName: 'StampAssignment'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from StampAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllStampAssignment':
          summary: 'All Stamp Assignments'
          description: 'Retrieves the list of all records for selected stamp assignment
            entity.'
          entityName: 'StampAssignment'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from StampAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewStaticResource':
          summary: 'New Static Resource'
          description: 'Triggers when a new static resource is created.'
          entityName: 'StaticResource'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from StaticResource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedStaticResource':
          summary: 'New Or Updated Static Resource'
          description: 'Triggers when a  static resource is created or existing static resource
            is updated.'
          entityName: 'StaticResource'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from StaticResource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllStaticResource':
          summary: 'All Static Resources'
          description: 'Retrieves the list of all records for selected static resource
            entity.'
          entityName: 'StaticResource'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from StaticResource'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewStreamingChannel':
          summary: 'New Streaming Channel'
          description: 'Triggers when a new streaming channel is created.'
          entityName: 'StreamingChannel'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from StreamingChannel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedStreamingChannel':
          summary: 'New Or Updated Streaming Channel'
          description: 'Triggers when a  streaming channel is created or existing streaming
            channel is updated.'
          entityName: 'StreamingChannel'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from StreamingChannel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllStreamingChannel':
          summary: 'All Streaming Channels'
          description: 'Retrieves the list of all records for selected streaming channel
            entity.'
          entityName: 'StreamingChannel'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from StreamingChannel'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedStreamingChannelShare':
          summary: 'New Or Updated Streaming Channel Share'
          description: 'Triggers when a  streaming channel share is created or existing
            streaming channel share is updated.'
          entityName: 'StreamingChannelShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from StreamingChannelShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllStreamingChannelShare':
          summary: 'All Streaming Channel Shares'
          description: 'Retrieves the list of all records for selected streaming channel
            share entity.'
          entityName: 'StreamingChannelShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from StreamingChannelShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTabDefinition':
          summary: 'All Tab Definitions'
          description: 'Retrieves the list of all records for selected tab definition entity.'
          entityName: 'TabDefinition'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TabDefinition'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTask':
          summary: 'New Task'
          description: 'Triggers when a new task is created.'
          entityName: 'Task'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Task'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTask':
          summary: 'New Or Updated Task'
          description: 'Triggers when a  task is created or existing task is updated.'
          entityName: 'Task'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Task'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTask':
          summary: 'All Tasks'
          description: 'Retrieves the list of all records for selected task entity.'
          entityName: 'Task'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Task'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTaskPriority':
          summary: 'New Task Priority Value'
          description: 'Triggers when a new task priority value is created.'
          entityName: 'TaskPriority'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TaskPriority'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTaskPriority':
          summary: 'New Or Updated Task Priority Value'
          description: 'Triggers when a  task priority value is created or existing task
            priority value is updated.'
          entityName: 'TaskPriority'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TaskPriority'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTaskPriority':
          summary: 'All Task Priority Values'
          description: 'Retrieves the list of all records for selected task priority value
            entity.'
          entityName: 'TaskPriority'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TaskPriority'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTaskStatus':
          summary: 'New Task Status Value'
          description: 'Triggers when a new task status value is created.'
          entityName: 'TaskStatus'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TaskStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTaskStatus':
          summary: 'New Or Updated Task Status Value'
          description: 'Triggers when a  task status value is created or existing task status
            value is updated.'
          entityName: 'TaskStatus'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TaskStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTaskStatus':
          summary: 'All Task Status Values'
          description: 'Retrieves the list of all records for selected task status value
            entity.'
          entityName: 'TaskStatus'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TaskStatus'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTenantSecret':
          summary: 'New Tenant Secret'
          description: 'Triggers when a new tenant secret is created.'
          entityName: 'TenantSecret'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TenantSecret'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTenantSecret':
          summary: 'New Or Updated Tenant Secret'
          description: 'Triggers when a  tenant secret is created or existing tenant secret
            is updated.'
          entityName: 'TenantSecret'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TenantSecret'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTenantSecret':
          summary: 'All Tenant Secrets'
          description: 'Retrieves the list of all records for selected tenant secret entity.'
          entityName: 'TenantSecret'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TenantSecret'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTenantUsageEntitlement':
          summary: 'New Tenant Usage Entitlement'
          description: 'Triggers when a new tenant usage entitlement is created.'
          entityName: 'TenantUsageEntitlement'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TenantUsageEntitlement'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTenantUsageEntitlement':
          summary: 'New Or Updated Tenant Usage Entitlement'
          description: 'Triggers when a  tenant usage entitlement is created or existing
            tenant usage entitlement is updated.'
          entityName: 'TenantUsageEntitlement'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TenantUsageEntitlement'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTenantUsageEntitlement':
          summary: 'All Tenant Usage Entitlements'
          description: 'Retrieves the list of all records for selected tenant usage entitlement
            entity.'
          entityName: 'TenantUsageEntitlement'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TenantUsageEntitlement'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTestSuiteMembership':
          summary: 'New Test Suite Membership'
          description: 'Triggers when a new test suite membership is created.'
          entityName: 'TestSuiteMembership'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TestSuiteMembership'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTestSuiteMembership':
          summary: 'New Or Updated Test Suite Membership'
          description: 'Triggers when a  test suite membership is created or existing test
            suite membership is updated.'
          entityName: 'TestSuiteMembership'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TestSuiteMembership'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTestSuiteMembership':
          summary: 'All Test Suite Memberships'
          description: 'Retrieves the list of all records for selected test suite membership
            entity.'
          entityName: 'TestSuiteMembership'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TestSuiteMembership'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllThirdPartyAccountLink':
          summary: 'All Third Party Account Links'
          description: 'Retrieves the list of all records for selected third party account
            link entity.'
          entityName: 'ThirdPartyAccountLink'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ThirdPartyAccountLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewThreatDetectionFeedback':
          summary: 'New Threat Detection Feedback'
          description: 'Triggers when a new threat detection feedback is created.'
          entityName: 'ThreatDetectionFeedback'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from ThreatDetectionFeedback'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedThreatDetectionFeedback':
          summary: 'New Or Updated Threat Detection Feedback'
          description: 'Triggers when a  threat detection feedback is created or existing
            threat detection feedback is updated.'
          entityName: 'ThreatDetectionFeedback'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from ThreatDetectionFeedback'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllThreatDetectionFeedback':
          summary: 'All Threat Detection Feedbacks'
          description: 'Retrieves the list of all records for selected threat detection
            feedback entity.'
          entityName: 'ThreatDetectionFeedback'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from ThreatDetectionFeedback'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTodayGoal':
          summary: 'New Goal'
          description: 'Triggers when a new goal is created.'
          entityName: 'TodayGoal'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TodayGoal'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTodayGoal':
          summary: 'New Or Updated Goal'
          description: 'Triggers when a  goal is created or existing goal is updated.'
          entityName: 'TodayGoal'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TodayGoal'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTodayGoal':
          summary: 'All Goals'
          description: 'Retrieves the list of all records for selected goal entity.'
          entityName: 'TodayGoal'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TodayGoal'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTodayGoalShare':
          summary: 'New Or Updated Goal Share'
          description: 'Triggers when a  goal share is created or existing goal share is
            updated.'
          entityName: 'TodayGoalShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TodayGoalShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTodayGoalShare':
          summary: 'All Goal Shares'
          description: 'Retrieves the list of all records for selected goal share entity.'
          entityName: 'TodayGoalShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TodayGoalShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTopic':
          summary: 'New Topic'
          description: 'Triggers when a new topic is created.'
          entityName: 'Topic'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Topic'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTopic':
          summary: 'All Topics'
          description: 'Retrieves the list of all records for selected topic entity.'
          entityName: 'Topic'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Topic'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTopicAssignment':
          summary: 'New Topic Assignment'
          description: 'Triggers when a new topic assignment is created.'
          entityName: 'TopicAssignment'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TopicAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTopicAssignment':
          summary: 'All Topic Assignments'
          description: 'Retrieves the list of all records for selected topic assignment
            entity.'
          entityName: 'TopicAssignment'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TopicAssignment'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTransactionSecurityPolicy':
          summary: 'New Transaction Security Policy'
          description: 'Triggers when a new transaction security policy is created.'
          entityName: 'TransactionSecurityPolicy'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from TransactionSecurityPolicy'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTransactionSecurityPolicy':
          summary: 'New Or Updated Transaction Security Policy'
          description: 'Triggers when a  transaction security policy is created or existing
            transaction security policy is updated.'
          entityName: 'TransactionSecurityPolicy'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from TransactionSecurityPolicy'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTransactionSecurityPolicy':
          summary: 'All Transaction Security Policys'
          description: 'Retrieves the list of all records for selected transaction security
            policy entity.'
          entityName: 'TransactionSecurityPolicy'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from TransactionSecurityPolicy'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewTranslation':
          summary: 'New Language Translation'
          description: 'Triggers when a new language translation is created.'
          entityName: 'Translation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Translation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedTranslation':
          summary: 'New Or Updated Language Translation'
          description: 'Triggers when a  language translation is created or existing language
            translation is updated.'
          entityName: 'Translation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Translation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllTranslation':
          summary: 'All Language Translations'
          description: 'Retrieves the list of all records for selected language translation
            entity.'
          entityName: 'Translation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Translation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUiFormulaCriterion':
          summary: 'New Ui Formula Criterion'
          description: 'Triggers when a new ui formula criterion is created.'
          entityName: 'UiFormulaCriterion'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UiFormulaCriterion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUiFormulaCriterion':
          summary: 'New Or Updated Ui Formula Criterion'
          description: 'Triggers when a  ui formula criterion is created or existing ui
            formula criterion is updated.'
          entityName: 'UiFormulaCriterion'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UiFormulaCriterion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUiFormulaCriterion':
          summary: 'All Ui Formula Criterions'
          description: 'Retrieves the list of all records for selected ui formula criterion
            entity.'
          entityName: 'UiFormulaCriterion'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UiFormulaCriterion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUiFormulaRule':
          summary: 'New Ui Formula Rule'
          description: 'Triggers when a new ui formula rule is created.'
          entityName: 'UiFormulaRule'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UiFormulaRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUiFormulaRule':
          summary: 'New Or Updated Ui Formula Rule'
          description: 'Triggers when a  ui formula rule is created or existing ui formula
            rule is updated.'
          entityName: 'UiFormulaRule'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UiFormulaRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUiFormulaRule':
          summary: 'All Ui Formula Rules'
          description: 'Retrieves the list of all records for selected ui formula rule
            entity.'
          entityName: 'UiFormulaRule'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UiFormulaRule'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUndecidedEventRelation':
          summary: 'New Undecided Event Relation'
          description: 'Triggers when a new undecided event relation is created.'
          entityName: 'UndecidedEventRelation'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UndecidedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUndecidedEventRelation':
          summary: 'New Or Updated Undecided Event Relation'
          description: 'Triggers when a  undecided event relation is created or existing
            undecided event relation is updated.'
          entityName: 'UndecidedEventRelation'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UndecidedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUndecidedEventRelation':
          summary: 'All Undecided Event Relations'
          description: 'Retrieves the list of all records for selected undecided event
            relation entity.'
          entityName: 'UndecidedEventRelation'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UndecidedEventRelation'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUriEvent':
          summary: 'New URI Event'
          description: 'Triggers when a new uri event is created.'
          entityName: 'UriEvent'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UriEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUriEvent':
          summary: 'New Or Updated URI Event'
          description: 'Triggers when a  uri event is created or existing uri event is updated.'
          entityName: 'UriEvent'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UriEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUriEvent':
          summary: 'All URI Events'
          description: 'Retrieves the list of all records for selected uri event entity.'
          entityName: 'UriEvent'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UriEvent'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUser':
          summary: 'New User'
          description: 'Triggers when a new user is created.'
          entityName: 'User'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from User'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUser':
          summary: 'New Or Updated User'
          description: 'Triggers when a  user is created or existing user is updated.'
          entityName: 'User'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from User'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUser':
          summary: 'All Users'
          description: 'Retrieves the list of all records for selected user entity.'
          entityName: 'User'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from User'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserAppInfo':
          summary: 'New Last Used App'
          description: 'Triggers when a new last used app is created.'
          entityName: 'UserAppInfo'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserAppInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserAppInfo':
          summary: 'New Or Updated Last Used App'
          description: 'Triggers when a  last used app is created or existing last used
            app is updated.'
          entityName: 'UserAppInfo'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserAppInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserAppInfo':
          summary: 'All Last Used Apps'
          description: 'Retrieves the list of all records for selected last used app entity.'
          entityName: 'UserAppInfo'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserAppInfo'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserAppMenuCustomization':
          summary: 'New UserAppMenuCustomization'
          description: 'Triggers when a new userappmenucustomization is created.'
          entityName: 'UserAppMenuCustomization'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserAppMenuCustomization'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserAppMenuCustomization':
          summary: 'New Or Updated UserAppMenuCustomization'
          description: 'Triggers when a  userappmenucustomization is created or existing
            userappmenucustomization is updated.'
          entityName: 'UserAppMenuCustomization'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserAppMenuCustomization'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserAppMenuCustomization':
          summary: 'All UserAppMenuCustomizations'
          description: 'Retrieves the list of all records for selected userappmenucustomization
            entity.'
          entityName: 'UserAppMenuCustomization'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserAppMenuCustomization'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserAppMenuCustomizationShare':
          summary: 'New Or Updated UserAppMenuCustomization Share'
          description: 'Triggers when a  userappmenucustomization share is created or existing
            userappmenucustomization share is updated.'
          entityName: 'UserAppMenuCustomizationShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserAppMenuCustomizationShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserAppMenuCustomizationShare':
          summary: 'All UserAppMenuCustomization Shares'
          description: 'Retrieves the list of all records for selected userappmenucustomization
            share entity.'
          entityName: 'UserAppMenuCustomizationShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserAppMenuCustomizationShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserAppMenuItem':
          summary: 'All Applications'
          description: 'Retrieves the list of all records for selected application entity.'
          entityName: 'UserAppMenuItem'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserAppMenuItem'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserEmailPreferredPerson':
          summary: 'New User Email Preferred Person'
          description: 'Triggers when a new user email preferred person is created.'
          entityName: 'UserEmailPreferredPerson'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserEmailPreferredPerson'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserEmailPreferredPerson':
          summary: 'New Or Updated User Email Preferred Person'
          description: 'Triggers when a  user email preferred person is created or existing
            user email preferred person is updated.'
          entityName: 'UserEmailPreferredPerson'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserEmailPreferredPerson'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserEmailPreferredPerson':
          summary: 'All User Email Preferred Persons'
          description: 'Retrieves the list of all records for selected user email preferred
            person entity.'
          entityName: 'UserEmailPreferredPerson'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserEmailPreferredPerson'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserEmailPreferredPersonShare':
          summary: 'New Or Updated User Email Preferred Person Share'
          description: 'Triggers when a  user email preferred person share is created or
            existing user email preferred person share is updated.'
          entityName: 'UserEmailPreferredPersonShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserEmailPreferredPersonShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserEmailPreferredPersonShare':
          summary: 'All User Email Preferred Person Shares'
          description: 'Retrieves the list of all records for selected user email preferred
            person share entity.'
          entityName: 'UserEmailPreferredPersonShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserEmailPreferredPersonShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserEntityAccess':
          summary: 'All User Entity Accesss'
          description: 'Retrieves the list of all records for selected user entity access
            entity.'
          entityName: 'UserEntityAccess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserEntityAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserFieldAccess':
          summary: 'All User Field Accesss'
          description: 'Retrieves the list of all records for selected user field access
            entity.'
          entityName: 'UserFieldAccess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserFieldAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserLicense':
          summary: 'New User License'
          description: 'Triggers when a new user license is created.'
          entityName: 'UserLicense'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserLicense':
          summary: 'New Or Updated User License'
          description: 'Triggers when a  user license is created or existing user license
            is updated.'
          entityName: 'UserLicense'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserLicense':
          summary: 'All User Licenses'
          description: 'Retrieves the list of all records for selected user license entity.'
          entityName: 'UserLicense'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserListView':
          summary: 'New User List View'
          description: 'Triggers when a new user list view is created.'
          entityName: 'UserListView'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserListView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserListView':
          summary: 'New Or Updated User List View'
          description: 'Triggers when a  user list view is created or existing user list
            view is updated.'
          entityName: 'UserListView'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserListView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserListView':
          summary: 'All User List Views'
          description: 'Retrieves the list of all records for selected user list view entity.'
          entityName: 'UserListView'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserListView'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserListViewCriterion':
          summary: 'New User List View Criteria'
          description: 'Triggers when a new user list view criteria is created.'
          entityName: 'UserListViewCriterion'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserListViewCriterion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserListViewCriterion':
          summary: 'New Or Updated User List View Criteria'
          description: 'Triggers when a  user list view criteria is created or existing
            user list view criteria is updated.'
          entityName: 'UserListViewCriterion'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserListViewCriterion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserListViewCriterion':
          summary: 'All User List View Criterias'
          description: 'Retrieves the list of all records for selected user list view criteria
            entity.'
          entityName: 'UserListViewCriterion'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserListViewCriterion'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserLogin':
          summary: 'New Or Updated User Login'
          description: 'Triggers when a  user login is created or existing user login is
            updated.'
          entityName: 'UserLogin'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserLogin'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserLogin':
          summary: 'All User Logins'
          description: 'Retrieves the list of all records for selected user login entity.'
          entityName: 'UserLogin'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserLogin'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserPackageLicense':
          summary: 'New User Package License'
          description: 'Triggers when a new user package license is created.'
          entityName: 'UserPackageLicense'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserPackageLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserPackageLicense':
          summary: 'New Or Updated User Package License'
          description: 'Triggers when a  user package license is created or existing user
            package license is updated.'
          entityName: 'UserPackageLicense'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserPackageLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserPackageLicense':
          summary: 'All User Package Licenses'
          description: 'Retrieves the list of all records for selected user package license
            entity.'
          entityName: 'UserPackageLicense'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserPackageLicense'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserPermissionAccess':
          summary: 'All User Permission Accesss'
          description: 'Retrieves the list of all records for selected user permission
            access entity.'
          entityName: 'UserPermissionAccess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserPermissionAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserPreference':
          summary: 'All User Preferences'
          description: 'Retrieves the list of all records for selected user preference
            entity.'
          entityName: 'UserPreference'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserPreference'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserProvAccount':
          summary: 'New User Provisioning Account'
          description: 'Triggers when a new user provisioning account is created.'
          entityName: 'UserProvAccount'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserProvAccount'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvAccount':
          summary: 'New Or Updated User Provisioning Account'
          description: 'Triggers when a  user provisioning account is created or existing
            user provisioning account is updated.'
          entityName: 'UserProvAccount'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvAccount'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvAccount':
          summary: 'All User Provisioning Accounts'
          description: 'Retrieves the list of all records for selected user provisioning
            account entity.'
          entityName: 'UserProvAccount'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvAccount'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserProvAccountStaging':
          summary: 'New User Provisioning Account Staging'
          description: 'Triggers when a new user provisioning account staging is created.'
          entityName: 'UserProvAccountStaging'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserProvAccountStaging'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvAccountStaging':
          summary: 'New Or Updated User Provisioning Account Staging'
          description: 'Triggers when a  user provisioning account staging is created or
            existing user provisioning account staging is updated.'
          entityName: 'UserProvAccountStaging'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvAccountStaging'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvAccountStaging':
          summary: 'All User Provisioning Account Stagings'
          description: 'Retrieves the list of all records for selected user provisioning
            account staging entity.'
          entityName: 'UserProvAccountStaging'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvAccountStaging'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserProvMockTarget':
          summary: 'New User Provisioning Mock Target'
          description: 'Triggers when a new user provisioning mock target is created.'
          entityName: 'UserProvMockTarget'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserProvMockTarget'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvMockTarget':
          summary: 'New Or Updated User Provisioning Mock Target'
          description: 'Triggers when a  user provisioning mock target is created or existing
            user provisioning mock target is updated.'
          entityName: 'UserProvMockTarget'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvMockTarget'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvMockTarget':
          summary: 'All User Provisioning Mock Targets'
          description: 'Retrieves the list of all records for selected user provisioning
            mock target entity.'
          entityName: 'UserProvMockTarget'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvMockTarget'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserProvisioningConfig':
          summary: 'New User Provisioning Config'
          description: 'Triggers when a new user provisioning config is created.'
          entityName: 'UserProvisioningConfig'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvisioningConfig':
          summary: 'New Or Updated User Provisioning Config'
          description: 'Triggers when a  user provisioning config is created or existing
            user provisioning config is updated.'
          entityName: 'UserProvisioningConfig'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvisioningConfig':
          summary: 'All User Provisioning Configs'
          description: 'Retrieves the list of all records for selected user provisioning
            config entity.'
          entityName: 'UserProvisioningConfig'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvisioningConfig'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserProvisioningLog':
          summary: 'New User Provisioning Log'
          description: 'Triggers when a new user provisioning log is created.'
          entityName: 'UserProvisioningLog'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvisioningLog':
          summary: 'New Or Updated User Provisioning Log'
          description: 'Triggers when a  user provisioning log is created or existing user
            provisioning log is updated.'
          entityName: 'UserProvisioningLog'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvisioningLog':
          summary: 'All User Provisioning Logs'
          description: 'Retrieves the list of all records for selected user provisioning
            log entity.'
          entityName: 'UserProvisioningLog'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvisioningLog'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserProvisioningRequest':
          summary: 'New User Provisioning Request'
          description: 'Triggers when a new user provisioning request is created.'
          entityName: 'UserProvisioningRequest'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvisioningRequest':
          summary: 'New Or Updated User Provisioning Request'
          description: 'Triggers when a  user provisioning request is created or existing
            user provisioning request is updated.'
          entityName: 'UserProvisioningRequest'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvisioningRequest':
          summary: 'All User Provisioning Requests'
          description: 'Retrieves the list of all records for selected user provisioning
            request entity.'
          entityName: 'UserProvisioningRequest'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvisioningRequest'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserProvisioningRequestShare':
          summary: 'New Or Updated User Provisioning Request Share'
          description: 'Triggers when a  user provisioning request share is created or existing
            user provisioning request share is updated.'
          entityName: 'UserProvisioningRequestShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserProvisioningRequestShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserProvisioningRequestShare':
          summary: 'All User Provisioning Request Shares'
          description: 'Retrieves the list of all records for selected user provisioning
            request share entity.'
          entityName: 'UserProvisioningRequestShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserProvisioningRequestShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewUserRecordAccess':
          summary: 'New User Record Access'
          description: 'Triggers when a new user record access is created.'
          entityName: 'UserRecordAccess'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from UserRecordAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserRecordAccess':
          summary: 'New Or Updated User Record Access'
          description: 'Triggers when a  user record access is created or existing user
            record access is updated.'
          entityName: 'UserRecordAccess'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserRecordAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserRecordAccess':
          summary: 'All User Record Accesss'
          description: 'Retrieves the list of all records for selected user record access
            entity.'
          entityName: 'UserRecordAccess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserRecordAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserRole':
          summary: 'New Or Updated Role'
          description: 'Triggers when a  role is created or existing role is updated.'
          entityName: 'UserRole'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserRole':
          summary: 'All Roles'
          description: 'Retrieves the list of all records for selected role entity.'
          entityName: 'UserRole'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserRole'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserSetupEntityAccess':
          summary: 'All User Setup Entity Accesss'
          description: 'Retrieves the list of all records for selected user setup entity
            access entity.'
          entityName: 'UserSetupEntityAccess'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserSetupEntityAccess'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedUserShare':
          summary: 'New Or Updated User Share'
          description: 'Triggers when a  user share is created or existing user share is
            updated.'
          entityName: 'UserShare'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from UserShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllUserShare':
          summary: 'All User Shares'
          description: 'Retrieves the list of all records for selected user share entity.'
          entityName: 'UserShare'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from UserShare'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewVerificationHistory':
          summary: 'New Identity Verification History'
          description: 'Triggers when a new identity verification history is created.'
          entityName: 'VerificationHistory'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from VerificationHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedVerificationHistory':
          summary: 'New Or Updated Identity Verification History'
          description: 'Triggers when a  identity verification history is created or existing
            identity verification history is updated.'
          entityName: 'VerificationHistory'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from VerificationHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllVerificationHistory':
          summary: 'All Identity Verification Historys'
          description: 'Retrieves the list of all records for selected identity verification
            history entity.'
          entityName: 'VerificationHistory'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from VerificationHistory'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllVisualforceAccessMetrics':
          summary: 'All Visualforce Access Metrics'
          description: 'Retrieves the list of all records for selected visualforce access
            metric entity.'
          entityName: 'VisualforceAccessMetrics'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from VisualforceAccessMetrics'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewVote':
          summary: 'New Vote'
          description: 'Triggers when a new vote is created.'
          entityName: 'Vote'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from Vote'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedVote':
          summary: 'New Or Updated Vote'
          description: 'Triggers when a vote is created or existing vote is updated.'
          entityName: 'Vote'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from Vote'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllVote':
          summary: 'All Votes'
          description: 'Retrieves the list of all records for selected vote entity.'
          entityName: 'Vote'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from Vote'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewWebLink':
          summary: 'New Custom Button or Link'
          description: 'Triggers when a new custom button or link is created.'
          entityName: 'WebLink'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from WebLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewOrUpdatedWebLink':
          summary: 'New Or Updated Custom Button or Link'
          description: 'Triggers when a  custom button or link is created or existing custom
            button or link is updated.'
          entityName: 'WebLink'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from WebLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'AllWebLink':
          summary: 'All Custom Button or Links'
          description: 'Retrieves the list of all records for selected custom button or
            link entity.'
          entityName: 'WebLink'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from WebLink'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'NewCustomObject':
          summary: 'New Custom Object'
          description: 'Triggers when a new custom object is created.'
          entityName: 'Custom Object'
          recordXpath: 'records'
          cursorField: CreatedDate
          paramValues:
            query: 'Select fields(all) from {entityName}'
            triggerOperation: new
            isCustom: true
          schema:
            dynamic-schema:
              operationId: "GetObjectSchema"
        'NewOrUpdatedCustomObject':
          summary: 'New Or Updated CustomObject'
          description: 'Triggers when an custom object is created or existing custom object is updated.'
          entityName: 'Custom Object'
          recordXpath: 'records'
          cursorField: LastModifiedDate
          paramValues:
            query: 'Select fields(all) from {entityName}'
            triggerOperation: newOrUpdated
            isCustom: true
          schema:
            dynamic-schema:
              operationId: "GetObjectSchema"
        'AllCustomObjects':
          summary: 'All Custom Objects'
          description: 'Retrieves the list of all records for selected custom entity.'
          entityName: 'Custom Object'
          recordXpath: 'records'
          paramValues:
            query: 'Select fields(all) from {entityName}'
            triggerOperation: all
            isCustom: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
          content:
            'application/json':
              schema:
                x-adeptia-dynamic-schema:
                  operationId: 'GetObjectSchema'
  /services/data/v58.0/sobjects/AcceptedEventRelation:
    post:
      summary: 'Create AcceptedEventRelation'
      description: 'CreateAcceptedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAcceptedEventRelation':
          summary: 'Create Accepted Event Relation'
          description: 'Create a new accepted event relation'
          entityName: 'AcceptedEventRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Account:
    post:
      summary: 'Create Account'
      description: 'CreateAccount'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccount':
          summary: 'Create Account'
          description: 'Create a new account'
          entityName: 'Account'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountChangeEvent:
    post:
      summary: 'Create AccountChangeEvent'
      description: 'CreateAccountChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccountChangeEvent':
          summary: 'Create Account Change Event'
          description: 'Create a new account change event'
          entityName: 'AccountChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountContactRole:
    post:
      summary: 'Create AccountContactRole'
      description: 'CreateAccountContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccountContactRole':
          summary: 'Create Account Contact Role'
          description: 'Create a new account contact role'
          entityName: 'AccountContactRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountContactRoleChangeEvent:
    post:
      summary: 'Create AccountContactRoleChangeEvent'
      description: 'CreateAccountContactRoleChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccountContactRoleChangeEvent':
          summary: 'Create Account Contact Role Change Event'
          description: 'Create a new account contact role change event'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountHistory:
    post:
      summary: 'Create AccountHistory'
      description: 'CreateAccountHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccountHistory':
          summary: 'Create Account History'
          description: 'Create a new account history'
          entityName: 'AccountHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountPartner:
    post:
      summary: 'Create AccountPartner'
      description: 'CreateAccountPartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccountPartner':
          summary: 'Create Account Partner'
          description: 'Create a new account partner'
          entityName: 'AccountPartner'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountShare:
    post:
      summary: 'Create AccountShare'
      description: 'CreateAccountShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAccountShare':
          summary: 'Create Account Share'
          description: 'Create a new account share'
          entityName: 'AccountShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActionLinkGroupTemplate:
    post:
      summary: 'Create ActionLinkGroupTemplate'
      description: 'CreateActionLinkGroupTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActionLinkGroupTemplate':
          summary: 'Create Action Link Group Template'
          description: 'Create a new action link group template'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActionLinkTemplate:
    post:
      summary: 'Create ActionLinkTemplate'
      description: 'CreateActionLinkTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActionLinkTemplate':
          summary: 'Create Action Link Template'
          description: 'Create a new action link template'
          entityName: 'ActionLinkTemplate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActiveFeatureLicenseMetric:
    post:
      summary: 'Create ActiveFeatureLicenseMetric'
      description: 'CreateActiveFeatureLicenseMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActiveFeatureLicenseMetric':
          summary: 'Create Active Feature License Metric'
          description: 'Create a new active feature license metric'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActivePermSetLicenseMetric:
    post:
      summary: 'Create ActivePermSetLicenseMetric'
      description: 'CreateActivePermSetLicenseMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActivePermSetLicenseMetric':
          summary: 'Create Active Permission Set License Metric'
          description: 'Create a new active permission set license metric'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActiveProfileMetric:
    post:
      summary: 'Create ActiveProfileMetric'
      description: 'CreateActiveProfileMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActiveProfileMetric':
          summary: 'Create Active Profile Metric'
          description: 'Create a new active profile metric'
          entityName: 'ActiveProfileMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActivityFieldHistory:
    post:
      summary: 'Create ActivityFieldHistory'
      description: 'CreateActivityFieldHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActivityFieldHistory':
          summary: 'Create Activity Field History'
          description: 'Create a new activity field history'
          entityName: 'ActivityFieldHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActivityHistory:
    post:
      summary: 'Create ActivityHistory'
      description: 'CreateActivityHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateActivityHistory':
          summary: 'Create Activity History'
          description: 'Create a new activity history'
          entityName: 'ActivityHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AdditionalNumber:
    post:
      summary: 'Create AdditionalNumber'
      description: 'CreateAdditionalNumber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAdditionalNumber':
          summary: 'Create Additional Directory Number'
          description: 'Create a new additional directory number'
          entityName: 'AdditionalNumber'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AggregateResult:
    post:
      summary: 'Create AggregateResult'
      description: 'CreateAggregateResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAggregateResult':
          summary: 'Create Aggregate Result'
          description: 'Create a new aggregate result'
          entityName: 'AggregateResult'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Anshu__ChangeEvent:
    post:
      summary: 'Create Anshu__ChangeEvent'
      description: 'CreateAnshu__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAnshu__ChangeEvent':
          summary: 'Create Change Event: Anshu Label'
          description: 'Create a new change event: anshu label'
          entityName: 'Anshu__ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Anshu__c:
    post:
      summary: 'Create Anshu__c'
      description: 'CreateAnshu__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAnshu__c':
          summary: 'Create Anshu Label'
          description: 'Create a new anshu label'
          entityName: 'Anshu__c'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexClass:
    post:
      summary: 'Create ApexClass'
      description: 'CreateApexClass'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexClass':
          summary: 'Create Apex Class'
          description: 'Create a new apex class'
          entityName: 'ApexClass'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexComponent:
    post:
      summary: 'Create ApexComponent'
      description: 'CreateApexComponent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexComponent':
          summary: 'Create Visualforce Component'
          description: 'Create a new visualforce component'
          entityName: 'ApexComponent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexEmailNotification:
    post:
      summary: 'Create ApexEmailNotification'
      description: 'CreateApexEmailNotification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexEmailNotification':
          summary: 'Create Apex Email Notification'
          description: 'Create a new apex email notification'
          entityName: 'ApexEmailNotification'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexLog:
    post:
      summary: 'Create ApexLog'
      description: 'CreateApexLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexLog':
          summary: 'Create Apex Debug Log'
          description: 'Create a new apex debug log'
          entityName: 'ApexLog'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexPage:
    post:
      summary: 'Create ApexPage'
      description: 'CreateApexPage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexPage':
          summary: 'Create Visualforce Page'
          description: 'Create a new visualforce page'
          entityName: 'ApexPage'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexPageInfo:
    post:
      summary: 'Create ApexPageInfo'
      description: 'CreateApexPageInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexPageInfo':
          summary: 'Create Apex Page Info'
          description: 'Create a new apex page info'
          entityName: 'ApexPageInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestQueueItem:
    post:
      summary: 'Create ApexTestQueueItem'
      description: 'CreateApexTestQueueItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTestQueueItem':
          summary: 'Create Apex Test Queue Item'
          description: 'Create a new apex test queue item'
          entityName: 'ApexTestQueueItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestResult:
    post:
      summary: 'Create ApexTestResult'
      description: 'CreateApexTestResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTestResult':
          summary: 'Create Apex Test Result'
          description: 'Create a new apex test result'
          entityName: 'ApexTestResult'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestResultLimits:
    post:
      summary: 'Create ApexTestResultLimits'
      description: 'CreateApexTestResultLimits'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTestResultLimits':
          summary: 'Create Apex Test Result Limit'
          description: 'Create a new apex test result limit'
          entityName: 'ApexTestResultLimits'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestRunResult:
    post:
      summary: 'Create ApexTestRunResult'
      description: 'CreateApexTestRunResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTestRunResult':
          summary: 'Create Apex Test Run Result'
          description: 'Create a new apex test run result'
          entityName: 'ApexTestRunResult'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestSuite:
    post:
      summary: 'Create ApexTestSuite'
      description: 'CreateApexTestSuite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTestSuite':
          summary: 'Create Apex Test Suite'
          description: 'Create a new apex test suite'
          entityName: 'ApexTestSuite'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTrigger:
    post:
      summary: 'Create ApexTrigger'
      description: 'CreateApexTrigger'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTrigger':
          summary: 'Create Apex Trigger'
          description: 'Create a new apex trigger'
          entityName: 'ApexTrigger'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTypeImplementor:
    post:
      summary: 'Create ApexTypeImplementor'
      description: 'CreateApexTypeImplementor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApexTypeImplementor':
          summary: 'Create Apex Type Implementor'
          description: 'Create a new apex type implementor'
          entityName: 'ApexTypeImplementor'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiAnomalyEvent:
    post:
      summary: 'Create ApiAnomalyEvent'
      description: 'CreateApiAnomalyEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApiAnomalyEvent':
          summary: 'Create API Anomaly Event'
          description: 'Create a new api anomaly event'
          entityName: 'ApiAnomalyEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiAnomalyEventStore:
    post:
      summary: 'Create ApiAnomalyEventStore'
      description: 'CreateApiAnomalyEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApiAnomalyEventStore':
          summary: 'Create API Anomaly Event Store'
          description: 'Create a new api anomaly event store'
          entityName: 'ApiAnomalyEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiEvent:
    post:
      summary: 'Create ApiEvent'
      description: 'CreateApiEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApiEvent':
          summary: 'Create API Event'
          description: 'Create a new api event'
          entityName: 'ApiEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiEventStream:
    post:
      summary: 'Create ApiEventStream'
      description: 'CreateApiEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApiEventStream':
          summary: 'Create API Event Stream'
          description: 'Create a new api event stream'
          entityName: 'ApiEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppAnalyticsQueryRequest:
    post:
      summary: 'Create AppAnalyticsQueryRequest'
      description: 'CreateAppAnalyticsQueryRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAppAnalyticsQueryRequest':
          summary: 'Create App Analytics Query Request'
          description: 'Create a new app analytics query request'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppDefinition:
    post:
      summary: 'Create AppDefinition'
      description: 'CreateAppDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAppDefinition':
          summary: 'Create App Definition'
          description: 'Create a new app definition'
          entityName: 'AppDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppMenuItem:
    post:
      summary: 'Create AppMenuItem'
      description: 'CreateAppMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAppMenuItem':
          summary: 'Create AppMenuItem'
          description: 'Create a new appmenuitem'
          entityName: 'AppMenuItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppTabMember:
    post:
      summary: 'Create AppTabMember'
      description: 'CreateAppTabMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAppTabMember':
          summary: 'Create App Tab Member'
          description: 'Create a new app tab member'
          entityName: 'AppTabMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Approval:
    post:
      summary: 'Create Approval'
      description: 'CreateApproval'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateApproval':
          summary: 'Create Approval'
          description: 'Create a new approval'
          entityName: 'Approval'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Asset:
    post:
      summary: 'Create Asset'
      description: 'CreateAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAsset':
          summary: 'Create Asset'
          description: 'Create a new asset'
          entityName: 'Asset'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetChangeEvent:
    post:
      summary: 'Create AssetChangeEvent'
      description: 'CreateAssetChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAssetChangeEvent':
          summary: 'Create Asset Change Event'
          description: 'Create a new asset change event'
          entityName: 'AssetChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetHistory:
    post:
      summary: 'Create AssetHistory'
      description: 'CreateAssetHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAssetHistory':
          summary: 'Create Asset History'
          description: 'Create a new asset history'
          entityName: 'AssetHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetRelationship:
    post:
      summary: 'Create AssetRelationship'
      description: 'CreateAssetRelationship'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAssetRelationship':
          summary: 'Create Asset Relationship'
          description: 'Create a new asset relationship'
          entityName: 'AssetRelationship'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetRelationshipHistory:
    post:
      summary: 'Create AssetRelationshipHistory'
      description: 'CreateAssetRelationshipHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAssetRelationshipHistory':
          summary: 'Create Asset Relationship History'
          description: 'Create a new asset relationship history'
          entityName: 'AssetRelationshipHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetTokenEvent:
    post:
      summary: 'Create AssetTokenEvent'
      description: 'CreateAssetTokenEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAssetTokenEvent':
          summary: 'Create Asset Token Event'
          description: 'Create a new asset token event'
          entityName: 'AssetTokenEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssignmentRule:
    post:
      summary: 'Create AssignmentRule'
      description: 'CreateAssignmentRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAssignmentRule':
          summary: 'Create Assignment Rule'
          description: 'Create a new assignment rule'
          entityName: 'AssignmentRule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AsyncApexJob:
    post:
      summary: 'Create AsyncApexJob'
      description: 'CreateAsyncApexJob'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAsyncApexJob':
          summary: 'Create Apex Job'
          description: 'Create a new apex job'
          entityName: 'AsyncApexJob'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AsyncOperationEvent:
    post:
      summary: 'Create AsyncOperationEvent'
      description: 'CreateAsyncOperationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAsyncOperationEvent':
          summary: 'Create Async Operation Event'
          description: 'Create a new async operation event'
          entityName: 'AsyncOperationEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AsyncOperationStatus:
    post:
      summary: 'Create AsyncOperationStatus'
      description: 'CreateAsyncOperationStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAsyncOperationStatus':
          summary: 'Create Async Operation Status'
          description: 'Create a new async operation status'
          entityName: 'AsyncOperationStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AttachedContentDocument:
    post:
      summary: 'Create AttachedContentDocument'
      description: 'CreateAttachedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAttachedContentDocument':
          summary: 'Create Attached Content Document'
          description: 'Create a new attached content document'
          entityName: 'AttachedContentDocument'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AttachedContentNote:
    post:
      summary: 'Create AttachedContentNote'
      description: 'CreateAttachedContentNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAttachedContentNote':
          summary: 'Create Note'
          description: 'Create a new note'
          entityName: 'AttachedContentNote'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Attachment:
    post:
      summary: 'Create Attachment'
      description: 'CreateAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAttachment':
          summary: 'Create Attachment'
          description: 'Create a new attachment'
          entityName: 'Attachment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinition:
    post:
      summary: 'Create AuraDefinition'
      description: 'CreateAuraDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuraDefinition':
          summary: 'Create Lightning Component Definition'
          description: 'Create a new lightning component definition'
          entityName: 'AuraDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinitionBundle:
    post:
      summary: 'Create AuraDefinitionBundle'
      description: 'CreateAuraDefinitionBundle'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuraDefinitionBundle':
          summary: 'Create Aura Component Bundle'
          description: 'Create a new aura component bundle'
          entityName: 'AuraDefinitionBundle'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinitionBundleInfo:
    post:
      summary: 'Create AuraDefinitionBundleInfo'
      description: 'CreateAuraDefinitionBundleInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuraDefinitionBundleInfo':
          summary: 'Create AuraDefinitionBundle Info'
          description: 'Create a new auradefinitionbundle info'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinitionInfo:
    post:
      summary: 'Create AuraDefinitionInfo'
      description: 'CreateAuraDefinitionInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuraDefinitionInfo':
          summary: 'Create AuraDefinition Info'
          description: 'Create a new auradefinition info'
          entityName: 'AuraDefinitionInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthConfig:
    post:
      summary: 'Create AuthConfig'
      description: 'CreateAuthConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthConfig':
          summary: 'Create Authentication Configuration'
          description: 'Create a new authentication configuration'
          entityName: 'AuthConfig'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthConfigProviders:
    post:
      summary: 'Create AuthConfigProviders'
      description: 'CreateAuthConfigProviders'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthConfigProviders':
          summary: 'Create Authentication Configuration Auth. Provider'
          description: 'Create a new authentication configuration auth. provider'
          entityName: 'AuthConfigProviders'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthProvider:
    post:
      summary: 'Create AuthProvider'
      description: 'CreateAuthProvider'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthProvider':
          summary: 'Create Auth. Provider'
          description: 'Create a new auth. provider'
          entityName: 'AuthProvider'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthSession:
    post:
      summary: 'Create AuthSession'
      description: 'CreateAuthSession'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthSession':
          summary: 'Create Auth Session'
          description: 'Create a new auth session'
          entityName: 'AuthSession'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationForm:
    post:
      summary: 'Create AuthorizationForm'
      description: 'CreateAuthorizationForm'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationForm':
          summary: 'Create Authorization Form'
          description: 'Create a new authorization form'
          entityName: 'AuthorizationForm'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsent:
    post:
      summary: 'Create AuthorizationFormConsent'
      description: 'CreateAuthorizationFormConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormConsent':
          summary: 'Create Authorization Form Consent'
          description: 'Create a new authorization form consent'
          entityName: 'AuthorizationFormConsent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsentChangeEvent:
    post:
      summary: 'Create AuthorizationFormConsentChangeEvent'
      description: 'CreateAuthorizationFormConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormConsentChangeEvent':
          summary: 'Create Authorization Form Consent Change Event'
          description: 'Create a new authorization form consent change event'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsentHistory:
    post:
      summary: 'Create AuthorizationFormConsentHistory'
      description: 'CreateAuthorizationFormConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormConsentHistory':
          summary: 'Create Authorization Form Consent History'
          description: 'Create a new authorization form consent history'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsentShare:
    post:
      summary: 'Create AuthorizationFormConsentShare'
      description: 'CreateAuthorizationFormConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormConsentShare':
          summary: 'Create Authorization Form Consent Share'
          description: 'Create a new authorization form consent share'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormDataUse:
    post:
      summary: 'Create AuthorizationFormDataUse'
      description: 'CreateAuthorizationFormDataUse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormDataUse':
          summary: 'Create Authorization Form Data Use'
          description: 'Create a new authorization form data use'
          entityName: 'AuthorizationFormDataUse'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormDataUseHistory:
    post:
      summary: 'Create AuthorizationFormDataUseHistory'
      description: 'CreateAuthorizationFormDataUseHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormDataUseHistory':
          summary: 'Create Authorization Form Data Use History'
          description: 'Create a new authorization form data use history'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormDataUseShare:
    post:
      summary: 'Create AuthorizationFormDataUseShare'
      description: 'CreateAuthorizationFormDataUseShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormDataUseShare':
          summary: 'Create Authorization Form Data Use Share'
          description: 'Create a new authorization form data use share'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormHistory:
    post:
      summary: 'Create AuthorizationFormHistory'
      description: 'CreateAuthorizationFormHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormHistory':
          summary: 'Create Authorization Form History'
          description: 'Create a new authorization form history'
          entityName: 'AuthorizationFormHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormShare:
    post:
      summary: 'Create AuthorizationFormShare'
      description: 'CreateAuthorizationFormShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormShare':
          summary: 'Create Authorization Form Share'
          description: 'Create a new authorization form share'
          entityName: 'AuthorizationFormShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormText:
    post:
      summary: 'Create AuthorizationFormText'
      description: 'CreateAuthorizationFormText'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormText':
          summary: 'Create Authorization Form Text'
          description: 'Create a new authorization form text'
          entityName: 'AuthorizationFormText'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormTextHistory:
    post:
      summary: 'Create AuthorizationFormTextHistory'
      description: 'CreateAuthorizationFormTextHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateAuthorizationFormTextHistory':
          summary: 'Create Authorization Form Text History'
          description: 'Create a new authorization form text history'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BackgroundOperation:
    post:
      summary: 'Create BackgroundOperation'
      description: 'CreateBackgroundOperation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBackgroundOperation':
          summary: 'Create Background Operation'
          description: 'Create a new background operation'
          entityName: 'BackgroundOperation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BatchApexErrorEvent:
    post:
      summary: 'Create BatchApexErrorEvent'
      description: 'CreateBatchApexErrorEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBatchApexErrorEvent':
          summary: 'Create Batch Apex Error Platform Event'
          description: 'Create a new batch apex error platform event'
          entityName: 'BatchApexErrorEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BrandTemplate:
    post:
      summary: 'Create BrandTemplate'
      description: 'CreateBrandTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBrandTemplate':
          summary: 'Create Letterhead'
          description: 'Create a new letterhead'
          entityName: 'BrandTemplate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BrandingSet:
    post:
      summary: 'Create BrandingSet'
      description: 'CreateBrandingSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBrandingSet':
          summary: 'Create Branding Set'
          description: 'Create a new branding set'
          entityName: 'BrandingSet'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BrandingSetProperty:
    post:
      summary: 'Create BrandingSetProperty'
      description: 'CreateBrandingSetProperty'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBrandingSetProperty':
          summary: 'Create Branding Set Property'
          description: 'Create a new branding set property'
          entityName: 'BrandingSetProperty'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseAssignment:
    post:
      summary: 'Create BriefcaseAssignment'
      description: 'CreateBriefcaseAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBriefcaseAssignment':
          summary: 'Create Briefcase Assignment'
          description: 'Create a new briefcase assignment'
          entityName: 'BriefcaseAssignment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseAssignmentChangeEvent:
    post:
      summary: 'Create BriefcaseAssignmentChangeEvent'
      description: 'CreateBriefcaseAssignmentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBriefcaseAssignmentChangeEvent':
          summary: 'Create Briefcase Assignment Change Event'
          description: 'Create a new briefcase assignment change event'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseDefinition:
    post:
      summary: 'Create BriefcaseDefinition'
      description: 'CreateBriefcaseDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBriefcaseDefinition':
          summary: 'Create Briefcase Definition'
          description: 'Create a new briefcase definition'
          entityName: 'BriefcaseDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseDefinitionChangeEvent:
    post:
      summary: 'Create BriefcaseDefinitionChangeEvent'
      description: 'CreateBriefcaseDefinitionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBriefcaseDefinitionChangeEvent':
          summary: 'Create Briefcase Definition Change Event'
          description: 'Create a new briefcase definition change event'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseRule:
    post:
      summary: 'Create BriefcaseRule'
      description: 'CreateBriefcaseRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBriefcaseRule':
          summary: 'Create Briefcase Rule'
          description: 'Create a new briefcase rule'
          entityName: 'BriefcaseRule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseRuleFilter:
    post:
      summary: 'Create BriefcaseRuleFilter'
      description: 'CreateBriefcaseRuleFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBriefcaseRuleFilter':
          summary: 'Create Briefcase Rule Filter'
          description: 'Create a new briefcase rule filter'
          entityName: 'BriefcaseRuleFilter'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BulkApiResultEvent:
    post:
      summary: 'Create BulkApiResultEvent'
      description: 'CreateBulkApiResultEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBulkApiResultEvent':
          summary: 'Create Bulk API Result Event'
          description: 'Create a new bulk api result event'
          entityName: 'BulkApiResultEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BulkApiResultEventStore:
    post:
      summary: 'Create BulkApiResultEventStore'
      description: 'CreateBulkApiResultEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBulkApiResultEventStore':
          summary: 'Create Bulk API Result Event Store'
          description: 'Create a new bulk api result event store'
          entityName: 'BulkApiResultEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessBrand:
    post:
      summary: 'Create BusinessBrand'
      description: 'CreateBusinessBrand'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBusinessBrand':
          summary: 'Create Business Brand'
          description: 'Create a new business brand'
          entityName: 'BusinessBrand'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessBrandShare:
    post:
      summary: 'Create BusinessBrandShare'
      description: 'CreateBusinessBrandShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBusinessBrandShare':
          summary: 'Create Business Brand Share'
          description: 'Create a new business brand share'
          entityName: 'BusinessBrandShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessHours:
    post:
      summary: 'Create BusinessHours'
      description: 'CreateBusinessHours'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBusinessHours':
          summary: 'Create Business Hours'
          description: 'Create a new business hours'
          entityName: 'BusinessHours'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessProcess:
    post:
      summary: 'Create BusinessProcess'
      description: 'CreateBusinessProcess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateBusinessProcess':
          summary: 'Create Business Process'
          description: 'Create a new business process'
          entityName: 'BusinessProcess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CE_SSD_Client_c__ChangeEvent:
    post:
      summary: 'Create CE_SSD_Client_c__ChangeEvent'
      description: 'CreateCE_SSD_Client_c__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCE_SSD_Client_c__ChangeEvent':
          summary: 'Create Change Event: CE_SSD_Client__c'
          description: 'Create a new change event: ce_ssd_client__c'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CE_SSD_Client_c__c:
    post:
      summary: 'Create CE_SSD_Client_c__c'
      description: 'CreateCE_SSD_Client_c__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCE_SSD_Client_c__c':
          summary: 'Create CE_SSD_Client__c'
          description: 'Create a new ce_ssd_client__c'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Calendar:
    post:
      summary: 'Create Calendar'
      description: 'CreateCalendar'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCalendar':
          summary: 'Create Calendar'
          description: 'Create a new calendar'
          entityName: 'Calendar'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CalendarView:
    post:
      summary: 'Create CalendarView'
      description: 'CreateCalendarView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCalendarView':
          summary: 'Create Calendar'
          description: 'Create a new calendar'
          entityName: 'CalendarView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CalendarViewShare:
    post:
      summary: 'Create CalendarViewShare'
      description: 'CreateCalendarViewShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCalendarViewShare':
          summary: 'Create Calendar Share'
          description: 'Create a new calendar share'
          entityName: 'CalendarViewShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CallCenter:
    post:
      summary: 'Create CallCenter'
      description: 'CreateCallCenter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCallCenter':
          summary: 'Create Call Center'
          description: 'Create a new call center'
          entityName: 'CallCenter'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CallCoachingMediaProvider:
    post:
      summary: 'Create CallCoachingMediaProvider'
      description: 'CreateCallCoachingMediaProvider'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCallCoachingMediaProvider':
          summary: 'Create CallCoachingMediaProvider'
          description: 'Create a new callcoachingmediaprovider'
          entityName: 'CallCoachingMediaProvider'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Campaign:
    post:
      summary: 'Create Campaign'
      description: 'CreateCampaign'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaign':
          summary: 'Create Campaign'
          description: 'Create a new campaign'
          entityName: 'Campaign'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignChangeEvent:
    post:
      summary: 'Create CampaignChangeEvent'
      description: 'CreateCampaignChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignChangeEvent':
          summary: 'Create Campaign Change Event'
          description: 'Create a new campaign change event'
          entityName: 'CampaignChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignHistory:
    post:
      summary: 'Create CampaignHistory'
      description: 'CreateCampaignHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignHistory':
          summary: 'Create Campaign Field History'
          description: 'Create a new campaign field history'
          entityName: 'CampaignHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMember:
    post:
      summary: 'Create CampaignMember'
      description: 'CreateCampaignMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignMember':
          summary: 'Create Campaign Member'
          description: 'Create a new campaign member'
          entityName: 'CampaignMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMemberChangeEvent:
    post:
      summary: 'Create CampaignMemberChangeEvent'
      description: 'CreateCampaignMemberChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignMemberChangeEvent':
          summary: 'Create Campaign Member Change Event'
          description: 'Create a new campaign member change event'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMemberStatus:
    post:
      summary: 'Create CampaignMemberStatus'
      description: 'CreateCampaignMemberStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignMemberStatus':
          summary: 'Create Campaign Member Status'
          description: 'Create a new campaign member status'
          entityName: 'CampaignMemberStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMemberStatusChangeEvent:
    post:
      summary: 'Create CampaignMemberStatusChangeEvent'
      description: 'CreateCampaignMemberStatusChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignMemberStatusChangeEvent':
          summary: 'Create Campaign Member Status Change Event'
          description: 'Create a new campaign member status change event'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignShare:
    post:
      summary: 'Create CampaignShare'
      description: 'CreateCampaignShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCampaignShare':
          summary: 'Create Campaign Share'
          description: 'Create a new campaign share'
          entityName: 'CampaignShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Case:
    post:
      summary: 'Create Case'
      description: 'CreateCase'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCase':
          summary: 'Create Case'
          description: 'Create a new case'
          entityName: 'Case'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseChangeEvent:
    post:
      summary: 'Create CaseChangeEvent'
      description: 'CreateCaseChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseChangeEvent':
          summary: 'Create Case Change Event'
          description: 'Create a new case change event'
          entityName: 'CaseChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseComment:
    post:
      summary: 'Create CaseComment'
      description: 'CreateCaseComment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseComment':
          summary: 'Create Case Comment'
          description: 'Create a new case comment'
          entityName: 'CaseComment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseContactRole:
    post:
      summary: 'Create CaseContactRole'
      description: 'CreateCaseContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseContactRole':
          summary: 'Create Case Contact Role'
          description: 'Create a new case contact role'
          entityName: 'CaseContactRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseHistory:
    post:
      summary: 'Create CaseHistory'
      description: 'CreateCaseHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseHistory':
          summary: 'Create Case History'
          description: 'Create a new case history'
          entityName: 'CaseHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseShare:
    post:
      summary: 'Create CaseShare'
      description: 'CreateCaseShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseShare':
          summary: 'Create Case Share'
          description: 'Create a new case share'
          entityName: 'CaseShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseSolution:
    post:
      summary: 'Create CaseSolution'
      description: 'CreateCaseSolution'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseSolution':
          summary: 'Create Case Solution'
          description: 'Create a new case solution'
          entityName: 'CaseSolution'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseStatus:
    post:
      summary: 'Create CaseStatus'
      description: 'CreateCaseStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseStatus':
          summary: 'Create Case Status Value'
          description: 'Create a new case status value'
          entityName: 'CaseStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamMember:
    post:
      summary: 'Create CaseTeamMember'
      description: 'CreateCaseTeamMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseTeamMember':
          summary: 'Create Case Team Member'
          description: 'Create a new case team member'
          entityName: 'CaseTeamMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamRole:
    post:
      summary: 'Create CaseTeamRole'
      description: 'CreateCaseTeamRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseTeamRole':
          summary: 'Create Case Team Member Role'
          description: 'Create a new case team member role'
          entityName: 'CaseTeamRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamTemplate:
    post:
      summary: 'Create CaseTeamTemplate'
      description: 'CreateCaseTeamTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseTeamTemplate':
          summary: 'Create Predefined Case Team'
          description: 'Create a new predefined case team'
          entityName: 'CaseTeamTemplate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamTemplateMember:
    post:
      summary: 'Create CaseTeamTemplateMember'
      description: 'CreateCaseTeamTemplateMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseTeamTemplateMember':
          summary: 'Create Predefined Case Team Member'
          description: 'Create a new predefined case team member'
          entityName: 'CaseTeamTemplateMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamTemplateRecord:
    post:
      summary: 'Create CaseTeamTemplateRecord'
      description: 'CreateCaseTeamTemplateRecord'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCaseTeamTemplateRecord':
          summary: 'Create Predefined Case Team Record'
          description: 'Create a new predefined case team record'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CategoryData:
    post:
      summary: 'Create CategoryData'
      description: 'CreateCategoryData'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCategoryData':
          summary: 'Create Category Data'
          description: 'Create a new category data'
          entityName: 'CategoryData'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CategoryNode:
    post:
      summary: 'Create CategoryNode'
      description: 'CreateCategoryNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCategoryNode':
          summary: 'Create Category Node'
          description: 'Create a new category node'
          entityName: 'CategoryNode'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ChatterAnswersActivity:
    post:
      summary: 'Create ChatterAnswersActivity'
      description: 'CreateChatterAnswersActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateChatterAnswersActivity':
          summary: 'Create Chatter Answers Activity'
          description: 'Create a new chatter answers activity'
          entityName: 'ChatterAnswersActivity'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ChatterAnswersReputationLevel:
    post:
      summary: 'Create ChatterAnswersReputationLevel'
      description: 'CreateChatterAnswersReputationLevel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateChatterAnswersReputationLevel':
          summary: 'Create Chatter Answers Reputation Level'
          description: 'Create a new chatter answers reputation level'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ClientBrowser:
    post:
      summary: 'Create ClientBrowser'
      description: 'CreateClientBrowser'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateClientBrowser':
          summary: 'Create Client Browser'
          description: 'Create a new client browser'
          entityName: 'ClientBrowser'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ColorDefinition:
    post:
      summary: 'Create ColorDefinition'
      description: 'CreateColorDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateColorDefinition':
          summary: 'Create Color Definition'
          description: 'Create a new color definition'
          entityName: 'ColorDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CombinedAttachment:
    post:
      summary: 'Create CombinedAttachment'
      description: 'CreateCombinedAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCombinedAttachment':
          summary: 'Create Note, Attachment, Google Doc And File'
          description: 'Create a new note, attachment, google doc and file'
          entityName: 'CombinedAttachment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscription:
    post:
      summary: 'Create CommSubscription'
      description: 'CreateCommSubscription'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommSubscription':
          summary: 'Create Communication Subscription'
          description: 'Create a new communication subscription'
          entityName: 'CommSubscription'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionChannelType:
    post:
      summary: 'Create CommSubscriptionChannelType'
      description: 'CreateCommSubscriptionChannelType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommSubscriptionChannelType':
          summary: 'Create Communication Subscription Channel Type'
          description: 'Create a new communication subscription channel type'
          entityName: 'CommSubscriptionChannelType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionChannelTypeHistory:
    post:
      summary: 'Create CommSubscriptionChannelTypeHistory'
      description: 'CreateCommSubscriptionChannelTypeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommSubscriptionChannelTypeHistory':
          summary: 'Create Communication Subscription Channel Type  History'
          description: 'Create a new communication subscription channel type  history'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionChannelTypeShare:
    post:
      summary: 'Create CommSubscriptionChannelTypeShare'
      description: 'CreateCommSubscriptionChannelTypeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommSubscriptionChannelTypeShare':
          summary: 'Create Communication Subscription Channel Type Share'
          description: 'Create a new communication subscription channel type share'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionHistory:
    post:
      summary: 'Create CommSubscriptionHistory'
      description: 'CreateCommSubscriptionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommSubscriptionHistory':
          summary: 'Create Communication Subscription  History'
          description: 'Create a new communication subscription  history'
          entityName: 'CommSubscriptionHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionShare:
    post:
      summary: 'Create CommSubscriptionShare'
      description: 'CreateCommSubscriptionShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommSubscriptionShare':
          summary: 'Create Communication Subscription Share'
          description: 'Create a new communication subscription share'
          entityName: 'CommSubscriptionShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Community:
    post:
      summary: 'Create Community'
      description: 'CreateCommunity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCommunity':
          summary: 'Create Zone'
          description: 'Create a new zone'
          entityName: 'Community'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConcurLongRunApexErrEvent:
    post:
      summary: 'Create ConcurLongRunApexErrEvent'
      description: 'CreateConcurLongRunApexErrEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConcurLongRunApexErrEvent':
          summary: 'Create Concurrent Long Running Apex Error Event'
          description: 'Create a new concurrent long running apex error event'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConferenceNumber:
    post:
      summary: 'Create ConferenceNumber'
      description: 'CreateConferenceNumber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConferenceNumber':
          summary: 'Create Conference Number'
          description: 'Create a new conference number'
          entityName: 'ConferenceNumber'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConnectedApplication:
    post:
      summary: 'Create ConnectedApplication'
      description: 'CreateConnectedApplication'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConnectedApplication':
          summary: 'Create Connected App'
          description: 'Create a new connected app'
          entityName: 'ConnectedApplication'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionRate:
    post:
      summary: 'Create ConsumptionRate'
      description: 'CreateConsumptionRate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConsumptionRate':
          summary: 'Create Consumption Rate'
          description: 'Create a new consumption rate'
          entityName: 'ConsumptionRate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionRateHistory:
    post:
      summary: 'Create ConsumptionRateHistory'
      description: 'CreateConsumptionRateHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConsumptionRateHistory':
          summary: 'Create Consumption Rate History ID'
          description: 'Create a new consumption rate history id'
          entityName: 'ConsumptionRateHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionSchedule:
    post:
      summary: 'Create ConsumptionSchedule'
      description: 'CreateConsumptionSchedule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConsumptionSchedule':
          summary: 'Create Consumption Schedule'
          description: 'Create a new consumption schedule'
          entityName: 'ConsumptionSchedule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionScheduleHistory:
    post:
      summary: 'Create ConsumptionScheduleHistory'
      description: 'CreateConsumptionScheduleHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConsumptionScheduleHistory':
          summary: 'Create Consumption Schedule History ID'
          description: 'Create a new consumption schedule history id'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionScheduleShare:
    post:
      summary: 'Create ConsumptionScheduleShare'
      description: 'CreateConsumptionScheduleShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateConsumptionScheduleShare':
          summary: 'Create Consumption Schedule Share'
          description: 'Create a new consumption schedule share'
          entityName: 'ConsumptionScheduleShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Contact:
    post:
      summary: 'Create Contact'
      description: 'CreateContact'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContact':
          summary: 'Create Contact'
          description: 'Create a new contact'
          entityName: 'Contact'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactChangeEvent:
    post:
      summary: 'Create ContactChangeEvent'
      description: 'CreateContactChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactChangeEvent':
          summary: 'Create Contact Change Event'
          description: 'Create a new contact change event'
          entityName: 'ContactChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactHistory:
    post:
      summary: 'Create ContactHistory'
      description: 'CreateContactHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactHistory':
          summary: 'Create Contact History'
          description: 'Create a new contact history'
          entityName: 'ContactHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsent:
    post:
      summary: 'Create ContactPointTypeConsent'
      description: 'CreateContactPointTypeConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactPointTypeConsent':
          summary: 'Create Contact Point Type Consent'
          description: 'Create a new contact point type consent'
          entityName: 'ContactPointTypeConsent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsentChangeEvent:
    post:
      summary: 'Create ContactPointTypeConsentChangeEvent'
      description: 'CreateContactPointTypeConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactPointTypeConsentChangeEvent':
          summary: 'Create Contact Point Type Consent Change Event'
          description: 'Create a new contact point type consent change event'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsentHistory:
    post:
      summary: 'Create ContactPointTypeConsentHistory'
      description: 'CreateContactPointTypeConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactPointTypeConsentHistory':
          summary: 'Create Contact Point Type Consent  History'
          description: 'Create a new contact point type consent  history'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsentShare:
    post:
      summary: 'Create ContactPointTypeConsentShare'
      description: 'CreateContactPointTypeConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactPointTypeConsentShare':
          summary: 'Create Contact Point Type Consent Share'
          description: 'Create a new contact point type consent share'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactRequest:
    post:
      summary: 'Create ContactRequest'
      description: 'CreateContactRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactRequest':
          summary: 'Create Contact Request'
          description: 'Create a new contact request'
          entityName: 'ContactRequest'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactRequestShare:
    post:
      summary: 'Create ContactRequestShare'
      description: 'CreateContactRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactRequestShare':
          summary: 'Create Contact Request Share'
          description: 'Create a new contact request share'
          entityName: 'ContactRequestShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactShare:
    post:
      summary: 'Create ContactShare'
      description: 'CreateContactShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContactShare':
          summary: 'Create Contact Share'
          description: 'Create a new contact share'
          entityName: 'ContactShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentAsset:
    post:
      summary: 'Create ContentAsset'
      description: 'CreateContentAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentAsset':
          summary: 'Create Asset File'
          description: 'Create a new asset file'
          entityName: 'ContentAsset'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentBody:
    post:
      summary: 'Create ContentBody'
      description: 'CreateContentBody'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentBody':
          summary: 'Create Content Body'
          description: 'Create a new content body'
          entityName: 'ContentBody'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocument:
    post:
      summary: 'Create ContentDocument'
      description: 'CreateContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentDocument':
          summary: 'Create Content Document'
          description: 'Create a new content document'
          entityName: 'ContentDocument'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentChangeEvent:
    post:
      summary: 'Create ContentDocumentChangeEvent'
      description: 'CreateContentDocumentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentDocumentChangeEvent':
          summary: 'Create Content Document Change Event'
          description: 'Create a new content document change event'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentHistory:
    post:
      summary: 'Create ContentDocumentHistory'
      description: 'CreateContentDocumentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentDocumentHistory':
          summary: 'Create Content Document History'
          description: 'Create a new content document history'
          entityName: 'ContentDocumentHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentLink:
    post:
      summary: 'Create ContentDocumentLink'
      description: 'CreateContentDocumentLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentDocumentLink':
          summary: 'Create Content Document Link'
          description: 'Create a new content document link'
          entityName: 'ContentDocumentLink'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentLinkChangeEvent:
    post:
      summary: 'Create ContentDocumentLinkChangeEvent'
      description: 'CreateContentDocumentLinkChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentDocumentLinkChangeEvent':
          summary: 'Create Content Document Link Change Event'
          description: 'Create a new content document link change event'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolder:
    post:
      summary: 'Create ContentFolder'
      description: 'CreateContentFolder'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentFolder':
          summary: 'Create Content Folder'
          description: 'Create a new content folder'
          entityName: 'ContentFolder'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolderItem:
    post:
      summary: 'Create ContentFolderItem'
      description: 'CreateContentFolderItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentFolderItem':
          summary: 'Create Content Folder Item'
          description: 'Create a new content folder item'
          entityName: 'ContentFolderItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolderLink:
    post:
      summary: 'Create ContentFolderLink'
      description: 'CreateContentFolderLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentFolderLink':
          summary: 'Create Content Folder Link'
          description: 'Create a new content folder link'
          entityName: 'ContentFolderLink'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolderMember:
    post:
      summary: 'Create ContentFolderMember'
      description: 'CreateContentFolderMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentFolderMember':
          summary: 'Create Content Folder Member'
          description: 'Create a new content folder member'
          entityName: 'ContentFolderMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentNote:
    post:
      summary: 'Create ContentNote'
      description: 'CreateContentNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentNote':
          summary: 'Create Note'
          description: 'Create a new note'
          entityName: 'ContentNote'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentVersion:
    post:
      summary: 'Create ContentVersion'
      description: 'CreateContentVersion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentVersion':
          summary: 'Create Content Version'
          description: 'Create a new content version'
          entityName: 'ContentVersion'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentVersionChangeEvent:
    post:
      summary: 'Create ContentVersionChangeEvent'
      description: 'CreateContentVersionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentVersionChangeEvent':
          summary: 'Create Content Version Change Event'
          description: 'Create a new content version change event'
          entityName: 'ContentVersionChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentVersionHistory:
    post:
      summary: 'Create ContentVersionHistory'
      description: 'CreateContentVersionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentVersionHistory':
          summary: 'Create Content Version History'
          description: 'Create a new content version history'
          entityName: 'ContentVersionHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspace:
    post:
      summary: 'Create ContentWorkspace'
      description: 'CreateContentWorkspace'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentWorkspace':
          summary: 'Create Library'
          description: 'Create a new library'
          entityName: 'ContentWorkspace'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspaceDoc:
    post:
      summary: 'Create ContentWorkspaceDoc'
      description: 'CreateContentWorkspaceDoc'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentWorkspaceDoc':
          summary: 'Create Library Document'
          description: 'Create a new library document'
          entityName: 'ContentWorkspaceDoc'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspaceMember:
    post:
      summary: 'Create ContentWorkspaceMember'
      description: 'CreateContentWorkspaceMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentWorkspaceMember':
          summary: 'Create Library Member'
          description: 'Create a new library member'
          entityName: 'ContentWorkspaceMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspacePermission:
    post:
      summary: 'Create ContentWorkspacePermission'
      description: 'CreateContentWorkspacePermission'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContentWorkspacePermission':
          summary: 'Create Library Permission'
          description: 'Create a new library permission'
          entityName: 'ContentWorkspacePermission'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Contract:
    post:
      summary: 'Create Contract'
      description: 'CreateContract'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContract':
          summary: 'Create Contract'
          description: 'Create a new contract'
          entityName: 'Contract'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractChangeEvent:
    post:
      summary: 'Create ContractChangeEvent'
      description: 'CreateContractChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContractChangeEvent':
          summary: 'Create Contract Change Event'
          description: 'Create a new contract change event'
          entityName: 'ContractChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractContactRole:
    post:
      summary: 'Create ContractContactRole'
      description: 'CreateContractContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContractContactRole':
          summary: 'Create Contract Contact Role'
          description: 'Create a new contract contact role'
          entityName: 'ContractContactRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractHistory:
    post:
      summary: 'Create ContractHistory'
      description: 'CreateContractHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContractHistory':
          summary: 'Create Contract History'
          description: 'Create a new contract history'
          entityName: 'ContractHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractStatus:
    post:
      summary: 'Create ContractStatus'
      description: 'CreateContractStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateContractStatus':
          summary: 'Create Contract Status Value'
          description: 'Create a new contract status value'
          entityName: 'ContractStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CorsWhitelistEntry:
    post:
      summary: 'Create CorsWhitelistEntry'
      description: 'CreateCorsWhitelistEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCorsWhitelistEntry':
          summary: 'Create CORS Allowed Origin List'
          description: 'Create a new cors allowed origin list'
          entityName: 'CorsWhitelistEntry'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CredentialStuffingEvent:
    post:
      summary: 'Create CredentialStuffingEvent'
      description: 'CreateCredentialStuffingEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCredentialStuffingEvent':
          summary: 'Create Credential Stuffing Event'
          description: 'Create a new credential stuffing event'
          entityName: 'CredentialStuffingEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CredentialStuffingEventStore:
    post:
      summary: 'Create CredentialStuffingEventStore'
      description: 'CreateCredentialStuffingEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCredentialStuffingEventStore':
          summary: 'Create Credential Stuffing Event Store'
          description: 'Create a new credential stuffing event store'
          entityName: 'CredentialStuffingEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CronJobDetail:
    post:
      summary: 'Create CronJobDetail'
      description: 'CreateCronJobDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCronJobDetail':
          summary: 'Create Cron Job'
          description: 'Create a new cron job'
          entityName: 'CronJobDetail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CronTrigger:
    post:
      summary: 'Create CronTrigger'
      description: 'CreateCronTrigger'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCronTrigger':
          summary: 'Create Scheduled Jobs'
          description: 'Create a new scheduled jobs'
          entityName: 'CronTrigger'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CspTrustedSite:
    post:
      summary: 'Create CspTrustedSite'
      description: 'CreateCspTrustedSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCspTrustedSite':
          summary: 'Create Content Security Policy Trusted Site'
          description: 'Create a new content security policy trusted site'
          entityName: 'CspTrustedSite'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomBrand:
    post:
      summary: 'Create CustomBrand'
      description: 'CreateCustomBrand'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomBrand':
          summary: 'Create Custom Brand'
          description: 'Create a new custom brand'
          entityName: 'CustomBrand'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomBrandAsset:
    post:
      summary: 'Create CustomBrandAsset'
      description: 'CreateCustomBrandAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomBrandAsset':
          summary: 'Create Custom Brand Asset'
          description: 'Create a new custom brand asset'
          entityName: 'CustomBrandAsset'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomHelpMenuItem:
    post:
      summary: 'Create CustomHelpMenuItem'
      description: 'CreateCustomHelpMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomHelpMenuItem':
          summary: 'Create Custom Help Menu Item'
          description: 'Create a new custom help menu item'
          entityName: 'CustomHelpMenuItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomHelpMenuSection:
    post:
      summary: 'Create CustomHelpMenuSection'
      description: 'CreateCustomHelpMenuSection'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomHelpMenuSection':
          summary: 'Create Custom Help Menu Section'
          description: 'Create a new custom help menu section'
          entityName: 'CustomHelpMenuSection'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomHttpHeader:
    post:
      summary: 'Create CustomHttpHeader'
      description: 'CreateCustomHttpHeader'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomHttpHeader':
          summary: 'Create Custom HTTP Header'
          description: 'Create a new custom http header'
          entityName: 'CustomHttpHeader'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomNotificationType:
    post:
      summary: 'Create CustomNotificationType'
      description: 'CreateCustomNotificationType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomNotificationType':
          summary: 'Create Custom Notification Type'
          description: 'Create a new custom notification type'
          entityName: 'CustomNotificationType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomObjectUserLicenseMetrics:
    post:
      summary: 'Create CustomObjectUserLicenseMetrics'
      description: 'CreateCustomObjectUserLicenseMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomObjectUserLicenseMetrics':
          summary: 'Create Custom Object Usage By User License Metric'
          description: 'Create a new custom object usage by user license metric'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomPermission:
    post:
      summary: 'Create CustomPermission'
      description: 'CreateCustomPermission'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomPermission':
          summary: 'Create Custom Permission'
          description: 'Create a new custom permission'
          entityName: 'CustomPermission'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomPermissionDependency:
    post:
      summary: 'Create CustomPermissionDependency'
      description: 'CreateCustomPermissionDependency'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomPermissionDependency':
          summary: 'Create Custom Permission Dependency'
          description: 'Create a new custom permission dependency'
          entityName: 'CustomPermissionDependency'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Customer:
    post:
      summary: 'Create Customer'
      description: 'CreateCustomer'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomer':
          summary: 'Create Customer'
          description: 'Create a new customer'
          entityName: 'Customer'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomerShare:
    post:
      summary: 'Create CustomerShare'
      description: 'CreateCustomerShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateCustomerShare':
          summary: 'Create Customer Share'
          description: 'Create a new customer share'
          entityName: 'CustomerShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Dashboard:
    post:
      summary: 'Create Dashboard'
      description: 'CreateDashboard'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDashboard':
          summary: 'Create Dashboard'
          description: 'Create a new dashboard'
          entityName: 'Dashboard'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DashboardComponent:
    post:
      summary: 'Create DashboardComponent'
      description: 'CreateDashboardComponent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDashboardComponent':
          summary: 'Create Dashboard Component'
          description: 'Create a new dashboard component'
          entityName: 'DashboardComponent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataAssessmentFieldMetric:
    post:
      summary: 'Create DataAssessmentFieldMetric'
      description: 'CreateDataAssessmentFieldMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataAssessmentFieldMetric':
          summary: 'Create Data Assessment Field Metric'
          description: 'Create a new data assessment field metric'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataAssessmentMetric:
    post:
      summary: 'Create DataAssessmentMetric'
      description: 'CreateDataAssessmentMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataAssessmentMetric':
          summary: 'Create Data Assessment Metric'
          description: 'Create a new data assessment metric'
          entityName: 'DataAssessmentMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataAssessmentValueMetric:
    post:
      summary: 'Create DataAssessmentValueMetric'
      description: 'CreateDataAssessmentValueMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataAssessmentValueMetric':
          summary: 'Create Data Assessment Field Value Metric'
          description: 'Create a new data assessment field value metric'
          entityName: 'DataAssessmentValueMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataObjectDataChgEvent:
    post:
      summary: 'Create DataObjectDataChgEvent'
      description: 'CreateDataObjectDataChgEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataObjectDataChgEvent':
          summary: 'Create Data Object Data Change Event'
          description: 'Create a new data object data change event'
          entityName: 'DataObjectDataChgEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataStatistics:
    post:
      summary: 'Create DataStatistics'
      description: 'CreateDataStatistics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataStatistics':
          summary: 'Create Data Statistics'
          description: 'Create a new data statistics'
          entityName: 'DataStatistics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataType:
    post:
      summary: 'Create DataType'
      description: 'CreateDataType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataType':
          summary: 'Create Data Type'
          description: 'Create a new data type'
          entityName: 'DataType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUseLegalBasis:
    post:
      summary: 'Create DataUseLegalBasis'
      description: 'CreateDataUseLegalBasis'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataUseLegalBasis':
          summary: 'Create Data Use Legal Basis'
          description: 'Create a new data use legal basis'
          entityName: 'DataUseLegalBasis'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUseLegalBasisHistory:
    post:
      summary: 'Create DataUseLegalBasisHistory'
      description: 'CreateDataUseLegalBasisHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataUseLegalBasisHistory':
          summary: 'Create Data Use Legal Basis  History'
          description: 'Create a new data use legal basis  history'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUseLegalBasisShare:
    post:
      summary: 'Create DataUseLegalBasisShare'
      description: 'CreateDataUseLegalBasisShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataUseLegalBasisShare':
          summary: 'Create Data Use Legal Basis Share'
          description: 'Create a new data use legal basis share'
          entityName: 'DataUseLegalBasisShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUsePurpose:
    post:
      summary: 'Create DataUsePurpose'
      description: 'CreateDataUsePurpose'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataUsePurpose':
          summary: 'Create Data Use Purpose'
          description: 'Create a new data use purpose'
          entityName: 'DataUsePurpose'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUsePurposeHistory:
    post:
      summary: 'Create DataUsePurposeHistory'
      description: 'CreateDataUsePurposeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataUsePurposeHistory':
          summary: 'Create Data Use Purpose  History'
          description: 'Create a new data use purpose  history'
          entityName: 'DataUsePurposeHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUsePurposeShare:
    post:
      summary: 'Create DataUsePurposeShare'
      description: 'CreateDataUsePurposeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDataUsePurposeShare':
          summary: 'Create Data Use Purpose Share'
          description: 'Create a new data use purpose share'
          entityName: 'DataUsePurposeShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DatacloudAddress:
    post:
      summary: 'Create DatacloudAddress'
      description: 'CreateDatacloudAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDatacloudAddress':
          summary: 'Create Data.com Address'
          description: 'Create a new data.com address'
          entityName: 'DatacloudAddress'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DeclinedEventRelation:
    post:
      summary: 'Create DeclinedEventRelation'
      description: 'CreateDeclinedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDeclinedEventRelation':
          summary: 'Create Declined Event Relation'
          description: 'Create a new declined event relation'
          entityName: 'DeclinedEventRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DeleteEvent:
    post:
      summary: 'Create DeleteEvent'
      description: 'CreateDeleteEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDeleteEvent':
          summary: 'Create Recycle Bin Item'
          description: 'Create a new recycle bin item'
          entityName: 'DeleteEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Document:
    post:
      summary: 'Create Document'
      description: 'CreateDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDocument':
          summary: 'Create Document'
          description: 'Create a new document'
          entityName: 'Document'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DocumentAttachmentMap:
    post:
      summary: 'Create DocumentAttachmentMap'
      description: 'CreateDocumentAttachmentMap'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDocumentAttachmentMap':
          summary: 'Create Document Entity Map'
          description: 'Create a new document entity map'
          entityName: 'DocumentAttachmentMap'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Domain:
    post:
      summary: 'Create Domain'
      description: 'CreateDomain'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDomain':
          summary: 'Create Domain'
          description: 'Create a new domain'
          entityName: 'Domain'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DomainSite:
    post:
      summary: 'Create DomainSite'
      description: 'CreateDomainSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDomainSite':
          summary: 'Create Custom URL'
          description: 'Create a new custom url'
          entityName: 'DomainSite'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DuplicateRecordItem:
    post:
      summary: 'Create DuplicateRecordItem'
      description: 'CreateDuplicateRecordItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDuplicateRecordItem':
          summary: 'Create Duplicate Record Item'
          description: 'Create a new duplicate record item'
          entityName: 'DuplicateRecordItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DuplicateRecordSet:
    post:
      summary: 'Create DuplicateRecordSet'
      description: 'CreateDuplicateRecordSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDuplicateRecordSet':
          summary: 'Create Duplicate Record Set'
          description: 'Create a new duplicate record set'
          entityName: 'DuplicateRecordSet'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DuplicateRule:
    post:
      summary: 'Create DuplicateRule'
      description: 'CreateDuplicateRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateDuplicateRule':
          summary: 'Create Duplicate Rule'
          description: 'Create a new duplicate rule'
          entityName: 'DuplicateRule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailCapture:
    post:
      summary: 'Create EmailCapture'
      description: 'CreateEmailCapture'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailCapture':
          summary: 'Create EmailCapture'
          description: 'Create a new emailcapture'
          entityName: 'EmailCapture'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailDomainFilter:
    post:
      summary: 'Create EmailDomainFilter'
      description: 'CreateEmailDomainFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailDomainFilter':
          summary: 'Create Email Domain Filter'
          description: 'Create a new email domain filter'
          entityName: 'EmailDomainFilter'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailDomainKey:
    post:
      summary: 'Create EmailDomainKey'
      description: 'CreateEmailDomainKey'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailDomainKey':
          summary: 'Create Email Domain Key'
          description: 'Create a new email domain key'
          entityName: 'EmailDomainKey'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailMessage:
    post:
      summary: 'Create EmailMessage'
      description: 'CreateEmailMessage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailMessage':
          summary: 'Create Email Message'
          description: 'Create a new email message'
          entityName: 'EmailMessage'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailMessageChangeEvent:
    post:
      summary: 'Create EmailMessageChangeEvent'
      description: 'CreateEmailMessageChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailMessageChangeEvent':
          summary: 'Create Email Message Change Event'
          description: 'Create a new email message change event'
          entityName: 'EmailMessageChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailMessageRelation:
    post:
      summary: 'Create EmailMessageRelation'
      description: 'CreateEmailMessageRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailMessageRelation':
          summary: 'Create Email Message Relation'
          description: 'Create a new email message relation'
          entityName: 'EmailMessageRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailRelay:
    post:
      summary: 'Create EmailRelay'
      description: 'CreateEmailRelay'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailRelay':
          summary: 'Create Email Relay'
          description: 'Create a new email relay'
          entityName: 'EmailRelay'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailServicesAddress:
    post:
      summary: 'Create EmailServicesAddress'
      description: 'CreateEmailServicesAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailServicesAddress':
          summary: 'Create Email Services Address'
          description: 'Create a new email services address'
          entityName: 'EmailServicesAddress'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailServicesFunction:
    post:
      summary: 'Create EmailServicesFunction'
      description: 'CreateEmailServicesFunction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailServicesFunction':
          summary: 'Create Email Service'
          description: 'Create a new email service'
          entityName: 'EmailServicesFunction'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailStatus:
    post:
      summary: 'Create EmailStatus'
      description: 'CreateEmailStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailStatus':
          summary: 'Create Email Status'
          description: 'Create a new email status'
          entityName: 'EmailStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailTemplate:
    post:
      summary: 'Create EmailTemplate'
      description: 'CreateEmailTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailTemplate':
          summary: 'Create Email Template'
          description: 'Create a new email template'
          entityName: 'EmailTemplate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailTemplateChangeEvent:
    post:
      summary: 'Create EmailTemplateChangeEvent'
      description: 'CreateEmailTemplateChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmailTemplateChangeEvent':
          summary: 'Create Email Template Change Event'
          description: 'Create a new email template change event'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmbeddedServiceDetail:
    post:
      summary: 'Create EmbeddedServiceDetail'
      description: 'CreateEmbeddedServiceDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmbeddedServiceDetail':
          summary: 'Create Embedded Service'
          description: 'Create a new embedded service'
          entityName: 'EmbeddedServiceDetail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmbeddedServiceLabel:
    post:
      summary: 'Create EmbeddedServiceLabel'
      description: 'CreateEmbeddedServiceLabel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEmbeddedServiceLabel':
          summary: 'Create Embedded Service Label'
          description: 'Create a new embedded service label'
          entityName: 'EmbeddedServiceLabel'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EngagementChannelType:
    post:
      summary: 'Create EngagementChannelType'
      description: 'CreateEngagementChannelType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEngagementChannelType':
          summary: 'Create Engagement Channel Type'
          description: 'Create a new engagement channel type'
          entityName: 'EngagementChannelType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EngagementChannelTypeHistory:
    post:
      summary: 'Create EngagementChannelTypeHistory'
      description: 'CreateEngagementChannelTypeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEngagementChannelTypeHistory':
          summary: 'Create Engagement Channel Type  History'
          description: 'Create a new engagement channel type  history'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EngagementChannelTypeShare:
    post:
      summary: 'Create EngagementChannelTypeShare'
      description: 'CreateEngagementChannelTypeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEngagementChannelTypeShare':
          summary: 'Create Engagement Channel Type Share'
          description: 'Create a new engagement channel type share'
          entityName: 'EngagementChannelTypeShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EntityDefinition:
    post:
      summary: 'Create EntityDefinition'
      description: 'CreateEntityDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEntityDefinition':
          summary: 'Create Entity Definition'
          description: 'Create a new entity definition'
          entityName: 'EntityDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EntityParticle:
    post:
      summary: 'Create EntityParticle'
      description: 'CreateEntityParticle'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEntityParticle':
          summary: 'Create Entity Particle'
          description: 'Create a new entity particle'
          entityName: 'EntityParticle'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Event:
    post:
      summary: 'Create Event'
      description: 'CreateEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEvent':
          summary: 'Create Event'
          description: 'Create a new event'
          entityName: 'Event'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventBusSubscriber:
    post:
      summary: 'Create EventBusSubscriber'
      description: 'CreateEventBusSubscriber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventBusSubscriber':
          summary: 'Create Platform Event Subscription'
          description: 'Create a new platform event subscription'
          entityName: 'EventBusSubscriber'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventChangeEvent:
    post:
      summary: 'Create EventChangeEvent'
      description: 'CreateEventChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventChangeEvent':
          summary: 'Create Event Change Event'
          description: 'Create a new event change event'
          entityName: 'EventChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventLogFile:
    post:
      summary: 'Create EventLogFile'
      description: 'CreateEventLogFile'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventLogFile':
          summary: 'Create Event Log File'
          description: 'Create a new event log file'
          entityName: 'EventLogFile'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelation:
    post:
      summary: 'Create EventRelation'
      description: 'CreateEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventRelation':
          summary: 'Create Event Relation'
          description: 'Create a new event relation'
          entityName: 'EventRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelationChangeEvent:
    post:
      summary: 'Create EventRelationChangeEvent'
      description: 'CreateEventRelationChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventRelationChangeEvent':
          summary: 'Create Event Relation Change Event'
          description: 'Create a new event relation change event'
          entityName: 'EventRelationChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelayConfig:
    post:
      summary: 'Create EventRelayConfig'
      description: 'CreateEventRelayConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventRelayConfig':
          summary: 'Create Event Relay Config'
          description: 'Create a new event relay config'
          entityName: 'EventRelayConfig'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelayConfigChangeEvent:
    post:
      summary: 'Create EventRelayConfigChangeEvent'
      description: 'CreateEventRelayConfigChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventRelayConfigChangeEvent':
          summary: 'Create Event Relay Config Change Event'
          description: 'Create a new event relay config change event'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelayFeedback:
    post:
      summary: 'Create EventRelayFeedback'
      description: 'CreateEventRelayFeedback'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateEventRelayFeedback':
          summary: 'Create Event Relay Feedback'
          description: 'Create a new event relay feedback'
          entityName: 'EventRelayFeedback'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Expenses__ChangeEvent:
    post:
      summary: 'Create Expenses__ChangeEvent'
      description: 'CreateExpenses__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExpenses__ChangeEvent':
          summary: 'Create Change Event: Expense'
          description: 'Create a new change event: expense'
          entityName: 'Expenses__ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Expenses__c:
    post:
      summary: 'Create Expenses__c'
      description: 'CreateExpenses__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExpenses__c':
          summary: 'Create Expense'
          description: 'Create a new expense'
          entityName: 'Expenses__c'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExpressionFilter:
    post:
      summary: 'Create ExpressionFilter'
      description: 'CreateExpressionFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExpressionFilter':
          summary: 'Create ExpressionFilter'
          description: 'Create a new expressionfilter'
          entityName: 'ExpressionFilter'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExpressionFilterCriteria:
    post:
      summary: 'Create ExpressionFilterCriteria'
      description: 'CreateExpressionFilterCriteria'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExpressionFilterCriteria':
          summary: 'Create ExpressionFilterCriteria'
          description: 'Create a new expressionfiltercriteria'
          entityName: 'ExpressionFilterCriteria'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExpressionSetView:
    post:
      summary: 'Create ExpressionSetView'
      description: 'CreateExpressionSetView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExpressionSetView':
          summary: 'Create Expression Set View'
          description: 'Create a new expression set view'
          entityName: 'ExpressionSetView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalDataSource:
    post:
      summary: 'Create ExternalDataSource'
      description: 'CreateExternalDataSource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExternalDataSource':
          summary: 'Create External Data Source'
          description: 'Create a new external data source'
          entityName: 'ExternalDataSource'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalDataSrcDescriptor:
    post:
      summary: 'Create ExternalDataSrcDescriptor'
      description: 'CreateExternalDataSrcDescriptor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExternalDataSrcDescriptor':
          summary: 'Create External Data Source Descriptor'
          description: 'Create a new external data source descriptor'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalDataUserAuth:
    post:
      summary: 'Create ExternalDataUserAuth'
      description: 'CreateExternalDataUserAuth'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExternalDataUserAuth':
          summary: 'Create External Data User Authentication'
          description: 'Create a new external data user authentication'
          entityName: 'ExternalDataUserAuth'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalEvent:
    post:
      summary: 'Create ExternalEvent'
      description: 'CreateExternalEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExternalEvent':
          summary: 'Create External Event'
          description: 'Create a new external event'
          entityName: 'ExternalEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalEventMapping:
    post:
      summary: 'Create ExternalEventMapping'
      description: 'CreateExternalEventMapping'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExternalEventMapping':
          summary: 'Create External Event Mapping'
          description: 'Create a new external event mapping'
          entityName: 'ExternalEventMapping'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalEventMappingShare:
    post:
      summary: 'Create ExternalEventMappingShare'
      description: 'CreateExternalEventMappingShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateExternalEventMappingShare':
          summary: 'Create External Event Mapping Share'
          description: 'Create a new external event mapping share'
          entityName: 'ExternalEventMappingShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FieldDefinition:
    post:
      summary: 'Create FieldDefinition'
      description: 'CreateFieldDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFieldDefinition':
          summary: 'Create Field Definition'
          description: 'Create a new field definition'
          entityName: 'FieldDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FieldPermissions:
    post:
      summary: 'Create FieldPermissions'
      description: 'CreateFieldPermissions'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFieldPermissions':
          summary: 'Create Field Permissions'
          description: 'Create a new field permissions'
          entityName: 'FieldPermissions'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FieldSecurityClassification:
    post:
      summary: 'Create FieldSecurityClassification'
      description: 'CreateFieldSecurityClassification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFieldSecurityClassification':
          summary: 'Create Field Security Classification'
          description: 'Create a new field security classification'
          entityName: 'FieldSecurityClassification'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FileEvent:
    post:
      summary: 'Create FileEvent'
      description: 'CreateFileEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFileEvent':
          summary: 'Create File Event'
          description: 'Create a new file event'
          entityName: 'FileEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FileEventStore:
    post:
      summary: 'Create FileEventStore'
      description: 'CreateFileEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFileEventStore':
          summary: 'Create File Event Store'
          description: 'Create a new file event store'
          entityName: 'FileEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FileSearchActivity:
    post:
      summary: 'Create FileSearchActivity'
      description: 'CreateFileSearchActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFileSearchActivity':
          summary: 'Create FileSearchActivity'
          description: 'Create a new filesearchactivity'
          entityName: 'FileSearchActivity'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FiscalYearSettings:
    post:
      summary: 'Create FiscalYearSettings'
      description: 'CreateFiscalYearSettings'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFiscalYearSettings':
          summary: 'Create Fiscal Year Settings'
          description: 'Create a new fiscal year settings'
          entityName: 'FiscalYearSettings'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlexQueueItem:
    post:
      summary: 'Create FlexQueueItem'
      description: 'CreateFlexQueueItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlexQueueItem':
          summary: 'Create Flex Queue Item'
          description: 'Create a new flex queue item'
          entityName: 'FlexQueueItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowDefinitionView:
    post:
      summary: 'Create FlowDefinitionView'
      description: 'CreateFlowDefinitionView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowDefinitionView':
          summary: 'Create Flow Definition'
          description: 'Create a new flow definition'
          entityName: 'FlowDefinitionView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowExecutionErrorEvent:
    post:
      summary: 'Create FlowExecutionErrorEvent'
      description: 'CreateFlowExecutionErrorEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowExecutionErrorEvent':
          summary: 'Create Flow Execution Error Event'
          description: 'Create a new flow execution error event'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterview:
    post:
      summary: 'Create FlowInterview'
      description: 'CreateFlowInterview'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowInterview':
          summary: 'Create Flow Interview'
          description: 'Create a new flow interview'
          entityName: 'FlowInterview'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewLog:
    post:
      summary: 'Create FlowInterviewLog'
      description: 'CreateFlowInterviewLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowInterviewLog':
          summary: 'Create Flow Interview Log'
          description: 'Create a new flow interview log'
          entityName: 'FlowInterviewLog'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewLogEntry:
    post:
      summary: 'Create FlowInterviewLogEntry'
      description: 'CreateFlowInterviewLogEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowInterviewLogEntry':
          summary: 'Create Flow Interview Log Entry'
          description: 'Create a new flow interview log entry'
          entityName: 'FlowInterviewLogEntry'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewLogShare:
    post:
      summary: 'Create FlowInterviewLogShare'
      description: 'CreateFlowInterviewLogShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowInterviewLogShare':
          summary: 'Create Flow Interview Log Share'
          description: 'Create a new flow interview log share'
          entityName: 'FlowInterviewLogShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewShare:
    post:
      summary: 'Create FlowInterviewShare'
      description: 'CreateFlowInterviewShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowInterviewShare':
          summary: 'Create Flow Interview Share'
          description: 'Create a new flow interview share'
          entityName: 'FlowInterviewShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationEvent:
    post:
      summary: 'Create FlowOrchestrationEvent'
      description: 'CreateFlowOrchestrationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationEvent':
          summary: 'Create Orchestration Event'
          description: 'Create a new orchestration event'
          entityName: 'FlowOrchestrationEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationInstance:
    post:
      summary: 'Create FlowOrchestrationInstance'
      description: 'CreateFlowOrchestrationInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationInstance':
          summary: 'Create Orchestration Run'
          description: 'Create a new orchestration run'
          entityName: 'FlowOrchestrationInstance'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationInstanceShare:
    post:
      summary: 'Create FlowOrchestrationInstanceShare'
      description: 'CreateFlowOrchestrationInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationInstanceShare':
          summary: 'Create Orchestration Run Share'
          description: 'Create a new orchestration run share'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStageInstance:
    post:
      summary: 'Create FlowOrchestrationStageInstance'
      description: 'CreateFlowOrchestrationStageInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationStageInstance':
          summary: 'Create Orchestration Stage Run'
          description: 'Create a new orchestration stage run'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStageInstanceShare:
    post:
      summary: 'Create FlowOrchestrationStageInstanceShare'
      description: 'CreateFlowOrchestrationStageInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationStageInstanceShare':
          summary: 'Create Orchestration Stage Run Share'
          description: 'Create a new orchestration stage run share'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStepInstance:
    post:
      summary: 'Create FlowOrchestrationStepInstance'
      description: 'CreateFlowOrchestrationStepInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationStepInstance':
          summary: 'Create Orchestration Step Run'
          description: 'Create a new orchestration step run'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStepInstanceShare:
    post:
      summary: 'Create FlowOrchestrationStepInstanceShare'
      description: 'CreateFlowOrchestrationStepInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationStepInstanceShare':
          summary: 'Create Orchestration Step Run Share'
          description: 'Create a new orchestration step run share'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationWorkItem:
    post:
      summary: 'Create FlowOrchestrationWorkItem'
      description: 'CreateFlowOrchestrationWorkItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationWorkItem':
          summary: 'Create Orchestration Work Item'
          description: 'Create a new orchestration work item'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationWorkItemShare:
    post:
      summary: 'Create FlowOrchestrationWorkItemShare'
      description: 'CreateFlowOrchestrationWorkItemShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowOrchestrationWorkItemShare':
          summary: 'Create Orchestration Work Item Share'
          description: 'Create a new orchestration work item share'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowRecordRelation:
    post:
      summary: 'Create FlowRecordRelation'
      description: 'CreateFlowRecordRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowRecordRelation':
          summary: 'Create Flow Record Relation'
          description: 'Create a new flow record relation'
          entityName: 'FlowRecordRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowStageRelation:
    post:
      summary: 'Create FlowStageRelation'
      description: 'CreateFlowStageRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowStageRelation':
          summary: 'Create Flow Interview Stage Relation'
          description: 'Create a new flow interview stage relation'
          entityName: 'FlowStageRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowTestResult:
    post:
      summary: 'Create FlowTestResult'
      description: 'CreateFlowTestResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowTestResult':
          summary: 'Create Flow Test Result'
          description: 'Create a new flow test result'
          entityName: 'FlowTestResult'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowTestResultShare:
    post:
      summary: 'Create FlowTestResultShare'
      description: 'CreateFlowTestResultShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowTestResultShare':
          summary: 'Create Flow Test Result Share'
          description: 'Create a new flow test result share'
          entityName: 'FlowTestResultShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowTestView:
    post:
      summary: 'Create FlowTestView'
      description: 'CreateFlowTestView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowTestView':
          summary: 'Create Flow Test View'
          description: 'Create a new flow test view'
          entityName: 'FlowTestView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowVariableView:
    post:
      summary: 'Create FlowVariableView'
      description: 'CreateFlowVariableView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowVariableView':
          summary: 'Create Flow Variable'
          description: 'Create a new flow variable'
          entityName: 'FlowVariableView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowVersionView:
    post:
      summary: 'Create FlowVersionView'
      description: 'CreateFlowVersionView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFlowVersionView':
          summary: 'Create Flow Version'
          description: 'Create a new flow version'
          entityName: 'FlowVersionView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Folder:
    post:
      summary: 'Create Folder'
      description: 'CreateFolder'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFolder':
          summary: 'Create Folder'
          description: 'Create a new folder'
          entityName: 'Folder'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FolderedContentDocument:
    post:
      summary: 'Create FolderedContentDocument'
      description: 'CreateFolderedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFolderedContentDocument':
          summary: 'Create Foldered Content Document'
          description: 'Create a new foldered content document'
          entityName: 'FolderedContentDocument'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FormulaFunction:
    post:
      summary: 'Create FormulaFunction'
      description: 'CreateFormulaFunction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFormulaFunction':
          summary: 'Create Formula Function'
          description: 'Create a new formula function'
          entityName: 'FormulaFunction'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FormulaFunctionAllowedType:
    post:
      summary: 'Create FormulaFunctionAllowedType'
      description: 'CreateFormulaFunctionAllowedType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFormulaFunctionAllowedType':
          summary: 'Create Formula Context Function'
          description: 'Create a new formula context function'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FormulaFunctionCategory:
    post:
      summary: 'Create FormulaFunctionCategory'
      description: 'CreateFormulaFunctionCategory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateFormulaFunctionCategory':
          summary: 'Create Formula Function Category'
          description: 'Create a new formula function category'
          entityName: 'FormulaFunctionCategory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/GrantedByLicense:
    post:
      summary: 'Create GrantedByLicense'
      description: 'CreateGrantedByLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateGrantedByLicense':
          summary: 'Create Setting Granted By License'
          description: 'Create a new setting granted by license'
          entityName: 'GrantedByLicense'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Group:
    post:
      summary: 'Create Group'
      description: 'CreateGroup'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateGroup':
          summary: 'Create Group'
          description: 'Create a new group'
          entityName: 'Group'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/GroupMember:
    post:
      summary: 'Create GroupMember'
      description: 'CreateGroupMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateGroupMember':
          summary: 'Create Group Member'
          description: 'Create a new group member'
          entityName: 'GroupMember'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/HarishO__ChangeEvent:
    post:
      summary: 'Create HarishO__ChangeEvent'
      description: 'CreateHarishO__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateHarishO__ChangeEvent':
          summary: 'Create Change Event: HarishL'
          description: 'Create a new change event: harishl'
          entityName: 'HarishO__ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/HarishO__c:
    post:
      summary: 'Create HarishO__c'
      description: 'CreateHarishO__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateHarishO__c':
          summary: 'Create HarishL'
          description: 'Create a new harishl'
          entityName: 'HarishO__c'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Holiday:
    post:
      summary: 'Create Holiday'
      description: 'CreateHoliday'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateHoliday':
          summary: 'Create Holiday'
          description: 'Create a new holiday'
          entityName: 'Holiday'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IPAddressRange:
    post:
      summary: 'Create IPAddressRange'
      description: 'CreateIPAddressRange'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIPAddressRange':
          summary: 'Create IP Address Range'
          description: 'Create a new ip address range'
          entityName: 'IPAddressRange'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IconDefinition:
    post:
      summary: 'Create IconDefinition'
      description: 'CreateIconDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIconDefinition':
          summary: 'Create Icon Definition'
          description: 'Create a new icon definition'
          entityName: 'IconDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IdentityProviderEventStore:
    post:
      summary: 'Create IdentityProviderEventStore'
      description: 'CreateIdentityProviderEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIdentityProviderEventStore':
          summary: 'Create Identity Provider Event Store'
          description: 'Create a new identity provider event store'
          entityName: 'IdentityProviderEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IdentityVerificationEvent:
    post:
      summary: 'Create IdentityVerificationEvent'
      description: 'CreateIdentityVerificationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIdentityVerificationEvent':
          summary: 'Create Identity Verification Event'
          description: 'Create a new identity verification event'
          entityName: 'IdentityVerificationEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IdpEventLog:
    post:
      summary: 'Create IdpEventLog'
      description: 'CreateIdpEventLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIdpEventLog':
          summary: 'Create Identity Provider Event Log'
          description: 'Create a new identity provider event log'
          entityName: 'IdpEventLog'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IframeWhiteListUrl:
    post:
      summary: 'Create IframeWhiteListUrl'
      description: 'CreateIframeWhiteListUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIframeWhiteListUrl':
          summary: 'Create Trusted Domain for Inline Frames'
          description: 'Create a new trusted domain for inline frames'
          entityName: 'IframeWhiteListUrl'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Image:
    post:
      summary: 'Create Image'
      description: 'CreateImage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateImage':
          summary: 'Create Image'
          description: 'Create a new image'
          entityName: 'Image'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ImageHistory:
    post:
      summary: 'Create ImageHistory'
      description: 'CreateImageHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateImageHistory':
          summary: 'Create Image History'
          description: 'Create a new image history'
          entityName: 'ImageHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ImageShare:
    post:
      summary: 'Create ImageShare'
      description: 'CreateImageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateImageShare':
          summary: 'Create Image Share'
          description: 'Create a new image share'
          entityName: 'ImageShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Individual:
    post:
      summary: 'Create Individual'
      description: 'CreateIndividual'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIndividual':
          summary: 'Create Individual'
          description: 'Create a new individual'
          entityName: 'Individual'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IndividualChangeEvent:
    post:
      summary: 'Create IndividualChangeEvent'
      description: 'CreateIndividualChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIndividualChangeEvent':
          summary: 'Create Individual Change Event'
          description: 'Create a new individual change event'
          entityName: 'IndividualChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IndividualHistory:
    post:
      summary: 'Create IndividualHistory'
      description: 'CreateIndividualHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIndividualHistory':
          summary: 'Create Individual History'
          description: 'Create a new individual history'
          entityName: 'IndividualHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IndividualShare:
    post:
      summary: 'Create IndividualShare'
      description: 'CreateIndividualShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateIndividualShare':
          summary: 'Create Individual Share'
          description: 'Create a new individual share'
          entityName: 'IndividualShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/InstalledMobileApp:
    post:
      summary: 'Create InstalledMobileApp'
      description: 'CreateInstalledMobileApp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateInstalledMobileApp':
          summary: 'Create Installed Mobile App'
          description: 'Create a new installed mobile app'
          entityName: 'InstalledMobileApp'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Lead:
    post:
      summary: 'Create Lead'
      description: 'CreateLead'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLead':
          summary: 'Create Lead'
          description: 'Create a new lead'
          entityName: 'Lead'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadChangeEvent:
    post:
      summary: 'Create LeadChangeEvent'
      description: 'CreateLeadChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLeadChangeEvent':
          summary: 'Create Lead Change Event'
          description: 'Create a new lead change event'
          entityName: 'LeadChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadHistory:
    post:
      summary: 'Create LeadHistory'
      description: 'CreateLeadHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLeadHistory':
          summary: 'Create Lead History'
          description: 'Create a new lead history'
          entityName: 'LeadHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadShare:
    post:
      summary: 'Create LeadShare'
      description: 'CreateLeadShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLeadShare':
          summary: 'Create Lead Share'
          description: 'Create a new lead share'
          entityName: 'LeadShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadStatus:
    post:
      summary: 'Create LeadStatus'
      description: 'CreateLeadStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLeadStatus':
          summary: 'Create Lead Status Value'
          description: 'Create a new lead status value'
          entityName: 'LeadStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningExitByPageMetrics:
    post:
      summary: 'Create LightningExitByPageMetrics'
      description: 'CreateLightningExitByPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningExitByPageMetrics':
          summary: 'Create Lightning Exit By Page Metrics'
          description: 'Create a new lightning exit by page metrics'
          entityName: 'LightningExitByPageMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningExperienceTheme:
    post:
      summary: 'Create LightningExperienceTheme'
      description: 'CreateLightningExperienceTheme'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningExperienceTheme':
          summary: 'Create Lightning Experience Theme'
          description: 'Create a new lightning experience theme'
          entityName: 'LightningExperienceTheme'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningOnboardingConfig:
    post:
      summary: 'Create LightningOnboardingConfig'
      description: 'CreateLightningOnboardingConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningOnboardingConfig':
          summary: 'Create LightningOnboardingConfig'
          description: 'Create a new lightningonboardingconfig'
          entityName: 'LightningOnboardingConfig'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningToggleMetrics:
    post:
      summary: 'Create LightningToggleMetrics'
      description: 'CreateLightningToggleMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningToggleMetrics':
          summary: 'Create Lightning Toggle Metrics'
          description: 'Create a new lightning toggle metrics'
          entityName: 'LightningToggleMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUriEvent:
    post:
      summary: 'Create LightningUriEvent'
      description: 'CreateLightningUriEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningUriEvent':
          summary: 'Create Lightning URI Event'
          description: 'Create a new lightning uri event'
          entityName: 'LightningUriEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUriEventStream:
    post:
      summary: 'Create LightningUriEventStream'
      description: 'CreateLightningUriEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningUriEventStream':
          summary: 'Create Lightning URI Event Stream'
          description: 'Create a new lightning uri event stream'
          entityName: 'LightningUriEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByAppTypeMetrics:
    post:
      summary: 'Create LightningUsageByAppTypeMetrics'
      description: 'CreateLightningUsageByAppTypeMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningUsageByAppTypeMetrics':
          summary: 'Create Lightning Usage By App Type Metrics'
          description: 'Create a new lightning usage by app type metrics'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByBrowserMetrics:
    post:
      summary: 'Create LightningUsageByBrowserMetrics'
      description: 'CreateLightningUsageByBrowserMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningUsageByBrowserMetrics':
          summary: 'Create Lightning Usage By Browser Metrics'
          description: 'Create a new lightning usage by browser metrics'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByFlexiPageMetrics:
    post:
      summary: 'Create LightningUsageByFlexiPageMetrics'
      description: 'CreateLightningUsageByFlexiPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningUsageByFlexiPageMetrics':
          summary: 'Create Lightning Usage By FlexiPage Metrics'
          description: 'Create a new lightning usage by flexipage metrics'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByPageMetrics:
    post:
      summary: 'Create LightningUsageByPageMetrics'
      description: 'CreateLightningUsageByPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLightningUsageByPageMetrics':
          summary: 'Create Lightning Usage By Page Metrics'
          description: 'Create a new lightning usage by page metrics'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmail:
    post:
      summary: 'Create ListEmail'
      description: 'CreateListEmail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListEmail':
          summary: 'Create List Email'
          description: 'Create a new list email'
          entityName: 'ListEmail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailChangeEvent:
    post:
      summary: 'Create ListEmailChangeEvent'
      description: 'CreateListEmailChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListEmailChangeEvent':
          summary: 'Create List Email Change Event'
          description: 'Create a new list email change event'
          entityName: 'ListEmailChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailIndividualRecipient:
    post:
      summary: 'Create ListEmailIndividualRecipient'
      description: 'CreateListEmailIndividualRecipient'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListEmailIndividualRecipient':
          summary: 'Create List Email Individual Recipient'
          description: 'Create a new list email individual recipient'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailRecipientSource:
    post:
      summary: 'Create ListEmailRecipientSource'
      description: 'CreateListEmailRecipientSource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListEmailRecipientSource':
          summary: 'Create List Email Recipient Source'
          description: 'Create a new list email recipient source'
          entityName: 'ListEmailRecipientSource'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailShare:
    post:
      summary: 'Create ListEmailShare'
      description: 'CreateListEmailShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListEmailShare':
          summary: 'Create List Email Share'
          description: 'Create a new list email share'
          entityName: 'ListEmailShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListView:
    post:
      summary: 'Create ListView'
      description: 'CreateListView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListView':
          summary: 'Create List View'
          description: 'Create a new list view'
          entityName: 'ListView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewChart:
    post:
      summary: 'Create ListViewChart'
      description: 'CreateListViewChart'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListViewChart':
          summary: 'Create List View Chart'
          description: 'Create a new list view chart'
          entityName: 'ListViewChart'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewChartInstance:
    post:
      summary: 'Create ListViewChartInstance'
      description: 'CreateListViewChartInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListViewChartInstance':
          summary: 'Create List View Chart Instance'
          description: 'Create a new list view chart instance'
          entityName: 'ListViewChartInstance'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewEvent:
    post:
      summary: 'Create ListViewEvent'
      description: 'CreateListViewEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListViewEvent':
          summary: 'Create List View Event'
          description: 'Create a new list view event'
          entityName: 'ListViewEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewEventStream:
    post:
      summary: 'Create ListViewEventStream'
      description: 'CreateListViewEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateListViewEventStream':
          summary: 'Create List View Event Stream'
          description: 'Create a new list view event stream'
          entityName: 'ListViewEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginAsEvent:
    post:
      summary: 'Create LoginAsEvent'
      description: 'CreateLoginAsEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginAsEvent':
          summary: 'Create LoginAs Event'
          description: 'Create a new loginas event'
          entityName: 'LoginAsEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginAsEventStream:
    post:
      summary: 'Create LoginAsEventStream'
      description: 'CreateLoginAsEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginAsEventStream':
          summary: 'Create LoginAs Event Stream'
          description: 'Create a new loginas event stream'
          entityName: 'LoginAsEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginEvent:
    post:
      summary: 'Create LoginEvent'
      description: 'CreateLoginEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginEvent':
          summary: 'Create Login Event'
          description: 'Create a new login event'
          entityName: 'LoginEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginEventStream:
    post:
      summary: 'Create LoginEventStream'
      description: 'CreateLoginEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginEventStream':
          summary: 'Create Login Event Stream'
          description: 'Create a new login event stream'
          entityName: 'LoginEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginGeo:
    post:
      summary: 'Create LoginGeo'
      description: 'CreateLoginGeo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginGeo':
          summary: 'Create Login Geo Data'
          description: 'Create a new login geo data'
          entityName: 'LoginGeo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginHistory:
    post:
      summary: 'Create LoginHistory'
      description: 'CreateLoginHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginHistory':
          summary: 'Create Login History'
          description: 'Create a new login history'
          entityName: 'LoginHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginIp:
    post:
      summary: 'Create LoginIp'
      description: 'CreateLoginIp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLoginIp':
          summary: 'Create Login IP'
          description: 'Create a new login ip'
          entityName: 'LoginIp'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Login__ChangeEvent:
    post:
      summary: 'Create Login__ChangeEvent'
      description: 'CreateLogin__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLogin__ChangeEvent':
          summary: 'Create Change Event: Login'
          description: 'Create a new change event: login'
          entityName: 'Login__ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Login__c:
    post:
      summary: 'Create Login__c'
      description: 'CreateLogin__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLogin__c':
          summary: 'Create Login'
          description: 'Create a new login'
          entityName: 'Login__c'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LogoutEvent:
    post:
      summary: 'Create LogoutEvent'
      description: 'CreateLogoutEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLogoutEvent':
          summary: 'Create Logout Event'
          description: 'Create a new logout event'
          entityName: 'LogoutEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LogoutEventStream:
    post:
      summary: 'Create LogoutEventStream'
      description: 'CreateLogoutEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLogoutEventStream':
          summary: 'Create Logout Event Stream'
          description: 'Create a new logout event stream'
          entityName: 'LogoutEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LookedUpFromActivity:
    post:
      summary: 'Create LookedUpFromActivity'
      description: 'CreateLookedUpFromActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateLookedUpFromActivity':
          summary: 'Create Lookups from Activity'
          description: 'Create a new lookups from activity'
          entityName: 'LookedUpFromActivity'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Macro:
    post:
      summary: 'Create Macro'
      description: 'CreateMacro'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacro':
          summary: 'Create Macro'
          description: 'Create a new macro'
          entityName: 'Macro'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroChangeEvent:
    post:
      summary: 'Create MacroChangeEvent'
      description: 'CreateMacroChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroChangeEvent':
          summary: 'Create Macro Change Event'
          description: 'Create a new macro change event'
          entityName: 'MacroChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroHistory:
    post:
      summary: 'Create MacroHistory'
      description: 'CreateMacroHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroHistory':
          summary: 'Create Macro History'
          description: 'Create a new macro history'
          entityName: 'MacroHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroInstruction:
    post:
      summary: 'Create MacroInstruction'
      description: 'CreateMacroInstruction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroInstruction':
          summary: 'Create Macro Instruction'
          description: 'Create a new macro instruction'
          entityName: 'MacroInstruction'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroInstructionChangeEvent:
    post:
      summary: 'Create MacroInstructionChangeEvent'
      description: 'CreateMacroInstructionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroInstructionChangeEvent':
          summary: 'Create Macro Instruction Change Event'
          description: 'Create a new macro instruction change event'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroShare:
    post:
      summary: 'Create MacroShare'
      description: 'CreateMacroShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroShare':
          summary: 'Create Macro Share'
          description: 'Create a new macro share'
          entityName: 'MacroShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroUsage:
    post:
      summary: 'Create MacroUsage'
      description: 'CreateMacroUsage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroUsage':
          summary: 'Create Macro Usage'
          description: 'Create a new macro usage'
          entityName: 'MacroUsage'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroUsageShare:
    post:
      summary: 'Create MacroUsageShare'
      description: 'CreateMacroUsageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMacroUsageShare':
          summary: 'Create Macro Usage Share'
          description: 'Create a new macro usage share'
          entityName: 'MacroUsageShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MailmergeTemplate:
    post:
      summary: 'Create MailmergeTemplate'
      description: 'CreateMailmergeTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMailmergeTemplate':
          summary: 'Create Mail Merge Template'
          description: 'Create a new mail merge template'
          entityName: 'MailmergeTemplate'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContent:
    post:
      summary: 'Create ManagedContent'
      description: 'CreateManagedContent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateManagedContent':
          summary: 'Create Managed Content'
          description: 'Create a new managed content'
          entityName: 'ManagedContent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentChannel:
    post:
      summary: 'Create ManagedContentChannel'
      description: 'CreateManagedContentChannel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateManagedContentChannel':
          summary: 'Create Managed Content Channel'
          description: 'Create a new managed content channel'
          entityName: 'ManagedContentChannel'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentSpace:
    post:
      summary: 'Create ManagedContentSpace'
      description: 'CreateManagedContentSpace'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateManagedContentSpace':
          summary: 'Create Managed Content Space'
          description: 'Create a new managed content space'
          entityName: 'ManagedContentSpace'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentVariant:
    post:
      summary: 'Create ManagedContentVariant'
      description: 'CreateManagedContentVariant'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateManagedContentVariant':
          summary: 'Create Managed Content Variant'
          description: 'Create a new managed content variant'
          entityName: 'ManagedContentVariant'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentVariantChangeEvent:
    post:
      summary: 'Create ManagedContentVariantChangeEvent'
      description: 'CreateManagedContentVariantChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateManagedContentVariantChangeEvent':
          summary: 'Create Managed Content Variant Change Event'
          description: 'Create a new managed content variant change event'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MatchingInformation:
    post:
      summary: 'Create MatchingInformation'
      description: 'CreateMatchingInformation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMatchingInformation':
          summary: 'Create Matching Information'
          description: 'Create a new matching information'
          entityName: 'MatchingInformation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MatchingRule:
    post:
      summary: 'Create MatchingRule'
      description: 'CreateMatchingRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMatchingRule':
          summary: 'Create Matching Rule'
          description: 'Create a new matching rule'
          entityName: 'MatchingRule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MatchingRuleItem:
    post:
      summary: 'Create MatchingRuleItem'
      description: 'CreateMatchingRuleItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMatchingRuleItem':
          summary: 'Create Matching Rule Item'
          description: 'Create a new matching rule item'
          entityName: 'MatchingRuleItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MobileApplicationDetail:
    post:
      summary: 'Create MobileApplicationDetail'
      description: 'CreateMobileApplicationDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMobileApplicationDetail':
          summary: 'Create Mobile Application Detail'
          description: 'Create a new mobile application detail'
          entityName: 'MobileApplicationDetail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MyDomainDiscoverableLogin:
    post:
      summary: 'Create MyDomainDiscoverableLogin'
      description: 'CreateMyDomainDiscoverableLogin'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateMyDomainDiscoverableLogin':
          summary: 'Create My Domain Discoverable Login'
          description: 'Create a new my domain discoverable login'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Name:
    post:
      summary: 'Create Name'
      description: 'CreateName'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateName':
          summary: 'Create Name'
          description: 'Create a new name'
          entityName: 'Name'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/NamedCredential:
    post:
      summary: 'Create NamedCredential'
      description: 'CreateNamedCredential'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateNamedCredential':
          summary: 'Create Named Credential'
          description: 'Create a new named credential'
          entityName: 'NamedCredential'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Note:
    post:
      summary: 'Create Note'
      description: 'CreateNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateNote':
          summary: 'Create Note'
          description: 'Create a new note'
          entityName: 'Note'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/NoteAndAttachment:
    post:
      summary: 'Create NoteAndAttachment'
      description: 'CreateNoteAndAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateNoteAndAttachment':
          summary: 'Create Note and Attachment'
          description: 'Create a new note and attachment'
          entityName: 'NoteAndAttachment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OauthCustomScope:
    post:
      summary: 'Create OauthCustomScope'
      description: 'CreateOauthCustomScope'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOauthCustomScope':
          summary: 'Create OAuth Custom Scope'
          description: 'Create a new oauth custom scope'
          entityName: 'OauthCustomScope'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OauthCustomScopeApp:
    post:
      summary: 'Create OauthCustomScopeApp'
      description: 'CreateOauthCustomScopeApp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOauthCustomScopeApp':
          summary: 'Create OAuth Custom Scope App '
          description: 'Create a new oauth custom scope app '
          entityName: 'OauthCustomScopeApp'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OauthToken:
    post:
      summary: 'Create OauthToken'
      description: 'CreateOauthToken'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOauthToken':
          summary: 'Create Oauth Token'
          description: 'Create a new oauth token'
          entityName: 'OauthToken'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ObjectPermissions:
    post:
      summary: 'Create ObjectPermissions'
      description: 'CreateObjectPermissions'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateObjectPermissions':
          summary: 'Create Object Permissions'
          description: 'Create a new object permissions'
          entityName: 'ObjectPermissions'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OnboardingMetrics:
    post:
      summary: 'Create OnboardingMetrics'
      description: 'CreateOnboardingMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOnboardingMetrics':
          summary: 'Create Onboarding Metrics'
          description: 'Create a new onboarding metrics'
          entityName: 'OnboardingMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpenActivity:
    post:
      summary: 'Create OpenActivity'
      description: 'CreateOpenActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpenActivity':
          summary: 'Create Open Activity'
          description: 'Create a new open activity'
          entityName: 'OpenActivity'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Opportunity:
    post:
      summary: 'Create Opportunity'
      description: 'CreateOpportunity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunity':
          summary: 'Create Opportunity'
          description: 'Create a new opportunity'
          entityName: 'Opportunity'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityChangeEvent:
    post:
      summary: 'Create OpportunityChangeEvent'
      description: 'CreateOpportunityChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityChangeEvent':
          summary: 'Create Opportunity Change Event'
          description: 'Create a new opportunity change event'
          entityName: 'OpportunityChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityCompetitor:
    post:
      summary: 'Create OpportunityCompetitor'
      description: 'CreateOpportunityCompetitor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityCompetitor':
          summary: 'Create Opportunity: Competitor'
          description: 'Create a new opportunity: competitor'
          entityName: 'OpportunityCompetitor'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityContactRole:
    post:
      summary: 'Create OpportunityContactRole'
      description: 'CreateOpportunityContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityContactRole':
          summary: 'Create Opportunity Contact Role'
          description: 'Create a new opportunity contact role'
          entityName: 'OpportunityContactRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityContactRoleChangeEvent:
    post:
      summary: 'Create OpportunityContactRoleChangeEvent'
      description: 'CreateOpportunityContactRoleChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityContactRoleChangeEvent':
          summary: 'Create Opportunity Contact Role Change Event'
          description: 'Create a new opportunity contact role change event'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityFieldHistory:
    post:
      summary: 'Create OpportunityFieldHistory'
      description: 'CreateOpportunityFieldHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityFieldHistory':
          summary: 'Create Opportunity Field History'
          description: 'Create a new opportunity field history'
          entityName: 'OpportunityFieldHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityHistory:
    post:
      summary: 'Create OpportunityHistory'
      description: 'CreateOpportunityHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityHistory':
          summary: 'Create Opportunity History'
          description: 'Create a new opportunity history'
          entityName: 'OpportunityHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityLineItem:
    post:
      summary: 'Create OpportunityLineItem'
      description: 'CreateOpportunityLineItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityLineItem':
          summary: 'Create Opportunity Product'
          description: 'Create a new opportunity product'
          entityName: 'OpportunityLineItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityPartner:
    post:
      summary: 'Create OpportunityPartner'
      description: 'CreateOpportunityPartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityPartner':
          summary: 'Create Opportunity Partner'
          description: 'Create a new opportunity partner'
          entityName: 'OpportunityPartner'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityShare:
    post:
      summary: 'Create OpportunityShare'
      description: 'CreateOpportunityShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityShare':
          summary: 'Create Opportunity Share'
          description: 'Create a new opportunity share'
          entityName: 'OpportunityShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityStage:
    post:
      summary: 'Create OpportunityStage'
      description: 'CreateOpportunityStage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOpportunityStage':
          summary: 'Create Opportunity Stage'
          description: 'Create a new opportunity stage'
          entityName: 'OpportunityStage'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgDeleteRequest:
    post:
      summary: 'Create OrgDeleteRequest'
      description: 'CreateOrgDeleteRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgDeleteRequest':
          summary: 'Create Org Delete Request'
          description: 'Create a new org delete request'
          entityName: 'OrgDeleteRequest'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgDeleteRequestShare:
    post:
      summary: 'Create OrgDeleteRequestShare'
      description: 'CreateOrgDeleteRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgDeleteRequestShare':
          summary: 'Create Org Delete Request Share'
          description: 'Create a new org delete request share'
          entityName: 'OrgDeleteRequestShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgEmailAddressSecurity:
    post:
      summary: 'Create OrgEmailAddressSecurity'
      description: 'CreateOrgEmailAddressSecurity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgEmailAddressSecurity':
          summary: 'Create Organization Email Address Security'
          description: 'Create a new organization email address security'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgLifecycleNotification:
    post:
      summary: 'Create OrgLifecycleNotification'
      description: 'CreateOrgLifecycleNotification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgLifecycleNotification':
          summary: 'Create Org Lifecycle Notification'
          description: 'Create a new org lifecycle notification'
          entityName: 'OrgLifecycleNotification'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgMetric:
    post:
      summary: 'Create OrgMetric'
      description: 'CreateOrgMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgMetric':
          summary: 'Create Org Metric'
          description: 'Create a new org metric'
          entityName: 'OrgMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgMetricScanResult:
    post:
      summary: 'Create OrgMetricScanResult'
      description: 'CreateOrgMetricScanResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgMetricScanResult':
          summary: 'Create Org Metric Scan Result'
          description: 'Create a new org metric scan result'
          entityName: 'OrgMetricScanResult'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgMetricScanSummary:
    post:
      summary: 'Create OrgMetricScanSummary'
      description: 'CreateOrgMetricScanSummary'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgMetricScanSummary':
          summary: 'Create Org Metric Scan Summary'
          description: 'Create a new org metric scan summary'
          entityName: 'OrgMetricScanSummary'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgWideEmailAddress:
    post:
      summary: 'Create OrgWideEmailAddress'
      description: 'CreateOrgWideEmailAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrgWideEmailAddress':
          summary: 'Create Organization-wide From Email Address'
          description: 'Create a new organization-wide from email address'
          entityName: 'OrgWideEmailAddress'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Organization:
    post:
      summary: 'Create Organization'
      description: 'CreateOrganization'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOrganization':
          summary: 'Create Organization'
          description: 'Create a new organization'
          entityName: 'Organization'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OutgoingEmail:
    post:
      summary: 'Create OutgoingEmail'
      description: 'CreateOutgoingEmail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOutgoingEmail':
          summary: 'Create Outgoing Email'
          description: 'Create a new outgoing email'
          entityName: 'OutgoingEmail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OutgoingEmailRelation:
    post:
      summary: 'Create OutgoingEmailRelation'
      description: 'CreateOutgoingEmailRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOutgoingEmailRelation':
          summary: 'Create Outgoing Email Relation'
          description: 'Create a new outgoing email relation'
          entityName: 'OutgoingEmailRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OwnedContentDocument:
    post:
      summary: 'Create OwnedContentDocument'
      description: 'CreateOwnedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOwnedContentDocument':
          summary: 'Create User Owned File'
          description: 'Create a new user owned file'
          entityName: 'OwnedContentDocument'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OwnerChangeOptionInfo:
    post:
      summary: 'Create OwnerChangeOptionInfo'
      description: 'CreateOwnerChangeOptionInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateOwnerChangeOptionInfo':
          summary: 'Create Change Owner Option Info'
          description: 'Create a new change owner option info'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PackageLicense:
    post:
      summary: 'Create PackageLicense'
      description: 'CreatePackageLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePackageLicense':
          summary: 'Create Package License'
          description: 'Create a new package license'
          entityName: 'PackageLicense'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Partner:
    post:
      summary: 'Create Partner'
      description: 'CreatePartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePartner':
          summary: 'Create Partner'
          description: 'Create a new partner'
          entityName: 'Partner'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartnerRole:
    post:
      summary: 'Create PartnerRole'
      description: 'CreatePartnerRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePartnerRole':
          summary: 'Create Partner Role Value'
          description: 'Create a new partner role value'
          entityName: 'PartnerRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsent:
    post:
      summary: 'Create PartyConsent'
      description: 'CreatePartyConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePartyConsent':
          summary: 'Create Party Consent'
          description: 'Create a new party consent'
          entityName: 'PartyConsent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsentChangeEvent:
    post:
      summary: 'Create PartyConsentChangeEvent'
      description: 'CreatePartyConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePartyConsentChangeEvent':
          summary: 'Create Party Consent Change Event'
          description: 'Create a new party consent change event'
          entityName: 'PartyConsentChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsentHistory:
    post:
      summary: 'Create PartyConsentHistory'
      description: 'CreatePartyConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePartyConsentHistory':
          summary: 'Create Party Consent  History'
          description: 'Create a new party consent  history'
          entityName: 'PartyConsentHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsentShare:
    post:
      summary: 'Create PartyConsentShare'
      description: 'CreatePartyConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePartyConsentShare':
          summary: 'Create Party Consent Share'
          description: 'Create a new party consent share'
          entityName: 'PartyConsentShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Period:
    post:
      summary: 'Create Period'
      description: 'CreatePeriod'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePeriod':
          summary: 'Create Period'
          description: 'Create a new period'
          entityName: 'Period'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSet:
    post:
      summary: 'Create PermissionSet'
      description: 'CreatePermissionSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSet':
          summary: 'Create Permission Set'
          description: 'Create a new permission set'
          entityName: 'PermissionSet'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetAssignment:
    post:
      summary: 'Create PermissionSetAssignment'
      description: 'CreatePermissionSetAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSetAssignment':
          summary: 'Create Permission Set Assignment'
          description: 'Create a new permission set assignment'
          entityName: 'PermissionSetAssignment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetEvent:
    post:
      summary: 'Create PermissionSetEvent'
      description: 'CreatePermissionSetEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSetEvent':
          summary: 'Create Permission Set Event'
          description: 'Create a new permission set event'
          entityName: 'PermissionSetEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetEventStore:
    post:
      summary: 'Create PermissionSetEventStore'
      description: 'CreatePermissionSetEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSetEventStore':
          summary: 'Create Permission Set Event Store '
          description: 'Create a new permission set event store '
          entityName: 'PermissionSetEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetLicense:
    post:
      summary: 'Create PermissionSetLicense'
      description: 'CreatePermissionSetLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSetLicense':
          summary: 'Create Permission Set License'
          description: 'Create a new permission set license'
          entityName: 'PermissionSetLicense'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetLicenseAssign:
    post:
      summary: 'Create PermissionSetLicenseAssign'
      description: 'CreatePermissionSetLicenseAssign'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSetLicenseAssign':
          summary: 'Create Permission Set License Assignment'
          description: 'Create a new permission set license assignment'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetTabSetting:
    post:
      summary: 'Create PermissionSetTabSetting'
      description: 'CreatePermissionSetTabSetting'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePermissionSetTabSetting':
          summary: 'Create Permission Set Tab Setting'
          description: 'Create a new permission set tab setting'
          entityName: 'PermissionSetTabSetting'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PicklistValueInfo:
    post:
      summary: 'Create PicklistValueInfo'
      description: 'CreatePicklistValueInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePicklistValueInfo':
          summary: 'Create Picklist Value Info'
          description: 'Create a new picklist value info'
          entityName: 'PicklistValueInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformAction:
    post:
      summary: 'Create PlatformAction'
      description: 'CreatePlatformAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePlatformAction':
          summary: 'Create Platform Action'
          description: 'Create a new platform action'
          entityName: 'PlatformAction'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformCachePartition:
    post:
      summary: 'Create PlatformCachePartition'
      description: 'CreatePlatformCachePartition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePlatformCachePartition':
          summary: 'Create Platform Cache Partition'
          description: 'Create a new platform cache partition'
          entityName: 'PlatformCachePartition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformCachePartitionType:
    post:
      summary: 'Create PlatformCachePartitionType'
      description: 'CreatePlatformCachePartitionType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePlatformCachePartitionType':
          summary: 'Create Platform Cache Partition Type'
          description: 'Create a new platform cache partition type'
          entityName: 'PlatformCachePartitionType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformEventUsageMetric:
    post:
      summary: 'Create PlatformEventUsageMetric'
      description: 'CreatePlatformEventUsageMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePlatformEventUsageMetric':
          summary: 'Create Platform Event Usage Metric'
          description: 'Create a new platform event usage metric'
          entityName: 'PlatformEventUsageMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformStatusAlertEvent:
    post:
      summary: 'Create PlatformStatusAlertEvent'
      description: 'CreatePlatformStatusAlertEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePlatformStatusAlertEvent':
          summary: 'Create Platform Status Alert Event'
          description: 'Create a new platform status alert event'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Policy__ChangeEvent:
    post:
      summary: 'Create Policy__ChangeEvent'
      description: 'CreatePolicy__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePolicy__ChangeEvent':
          summary: 'Create Change Event: Policy'
          description: 'Create a new change event: policy'
          entityName: 'Policy__ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Policy__c:
    post:
      summary: 'Create Policy__c'
      description: 'CreatePolicy__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePolicy__c':
          summary: 'Create Policy'
          description: 'Create a new policy'
          entityName: 'Policy__c'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Pricebook2:
    post:
      summary: 'Create Pricebook2'
      description: 'CreatePricebook2'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePricebook2':
          summary: 'Create Price Book'
          description: 'Create a new price book'
          entityName: 'Pricebook2'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Pricebook2ChangeEvent:
    post:
      summary: 'Create Pricebook2ChangeEvent'
      description: 'CreatePricebook2ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePricebook2ChangeEvent':
          summary: 'Create Price Book Change Event'
          description: 'Create a new price book change event'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Pricebook2History:
    post:
      summary: 'Create Pricebook2History'
      description: 'CreatePricebook2History'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePricebook2History':
          summary: 'Create Price Book History'
          description: 'Create a new price book history'
          entityName: 'Pricebook2History'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PricebookEntry:
    post:
      summary: 'Create PricebookEntry'
      description: 'CreatePricebookEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePricebookEntry':
          summary: 'Create Price Book Entry'
          description: 'Create a new price book entry'
          entityName: 'PricebookEntry'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PricebookEntryChangeEvent:
    post:
      summary: 'Create PricebookEntryChangeEvent'
      description: 'CreatePricebookEntryChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePricebookEntryChangeEvent':
          summary: 'Create Price Book Entry Change Event'
          description: 'Create a new price book entry change event'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PricebookEntryHistory:
    post:
      summary: 'Create PricebookEntryHistory'
      description: 'CreatePricebookEntryHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePricebookEntryHistory':
          summary: 'Create Price Book Entry History'
          description: 'Create a new price book entry history'
          entityName: 'PricebookEntryHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessDefinition:
    post:
      summary: 'Create ProcessDefinition'
      description: 'CreateProcessDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessDefinition':
          summary: 'Create Process Definition'
          description: 'Create a new process definition'
          entityName: 'ProcessDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessFlowMigration:
    post:
      summary: 'Create ProcessFlowMigration'
      description: 'CreateProcessFlowMigration'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessFlowMigration':
          summary: 'Create Process Flow Migration'
          description: 'Create a new process flow migration'
          entityName: 'ProcessFlowMigration'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstance:
    post:
      summary: 'Create ProcessInstance'
      description: 'CreateProcessInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessInstance':
          summary: 'Create Process Instance'
          description: 'Create a new process instance'
          entityName: 'ProcessInstance'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceHistory:
    post:
      summary: 'Create ProcessInstanceHistory'
      description: 'CreateProcessInstanceHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessInstanceHistory':
          summary: 'Create Process Instance History'
          description: 'Create a new process instance history'
          entityName: 'ProcessInstanceHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceNode:
    post:
      summary: 'Create ProcessInstanceNode'
      description: 'CreateProcessInstanceNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessInstanceNode':
          summary: 'Create Process Instance Node'
          description: 'Create a new process instance node'
          entityName: 'ProcessInstanceNode'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceStep:
    post:
      summary: 'Create ProcessInstanceStep'
      description: 'CreateProcessInstanceStep'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessInstanceStep':
          summary: 'Create Process Instance Step'
          description: 'Create a new process instance step'
          entityName: 'ProcessInstanceStep'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceWorkitem:
    post:
      summary: 'Create ProcessInstanceWorkitem'
      description: 'CreateProcessInstanceWorkitem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessInstanceWorkitem':
          summary: 'Create Approval Request'
          description: 'Create a new approval request'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessNode:
    post:
      summary: 'Create ProcessNode'
      description: 'CreateProcessNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProcessNode':
          summary: 'Create Process Node'
          description: 'Create a new process node'
          entityName: 'ProcessNode'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Product2:
    post:
      summary: 'Create Product2'
      description: 'CreateProduct2'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProduct2':
          summary: 'Create Product'
          description: 'Create a new product'
          entityName: 'Product2'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Product2ChangeEvent:
    post:
      summary: 'Create Product2ChangeEvent'
      description: 'CreateProduct2ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProduct2ChangeEvent':
          summary: 'Create Product Change Event'
          description: 'Create a new product change event'
          entityName: 'Product2ChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Product2History:
    post:
      summary: 'Create Product2History'
      description: 'CreateProduct2History'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProduct2History':
          summary: 'Create Product History'
          description: 'Create a new product history'
          entityName: 'Product2History'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProductConsumptionSchedule:
    post:
      summary: 'Create ProductConsumptionSchedule'
      description: 'CreateProductConsumptionSchedule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProductConsumptionSchedule':
          summary: 'Create Product Consumption Schedule'
          description: 'Create a new product consumption schedule'
          entityName: 'ProductConsumptionSchedule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Profile:
    post:
      summary: 'Create Profile'
      description: 'CreateProfile'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateProfile':
          summary: 'Create Profile'
          description: 'Create a new profile'
          entityName: 'Profile'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Prompt:
    post:
      summary: 'Create Prompt'
      description: 'CreatePrompt'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePrompt':
          summary: 'Create Prompt'
          description: 'Create a new prompt'
          entityName: 'Prompt'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptAction:
    post:
      summary: 'Create PromptAction'
      description: 'CreatePromptAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePromptAction':
          summary: 'Create Prompt Action'
          description: 'Create a new prompt action'
          entityName: 'PromptAction'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptActionShare:
    post:
      summary: 'Create PromptActionShare'
      description: 'CreatePromptActionShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePromptActionShare':
          summary: 'Create Prompt Action Share'
          description: 'Create a new prompt action share'
          entityName: 'PromptActionShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptError:
    post:
      summary: 'Create PromptError'
      description: 'CreatePromptError'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePromptError':
          summary: 'Create Prompt Error'
          description: 'Create a new prompt error'
          entityName: 'PromptError'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptErrorShare:
    post:
      summary: 'Create PromptErrorShare'
      description: 'CreatePromptErrorShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePromptErrorShare':
          summary: 'Create Prompt Error Share'
          description: 'Create a new prompt error share'
          entityName: 'PromptErrorShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptVersion:
    post:
      summary: 'Create PromptVersion'
      description: 'CreatePromptVersion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePromptVersion':
          summary: 'Create Prompt Version'
          description: 'Create a new prompt version'
          entityName: 'PromptVersion'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Publisher:
    post:
      summary: 'Create Publisher'
      description: 'CreatePublisher'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePublisher':
          summary: 'Create Publisher'
          description: 'Create a new publisher'
          entityName: 'Publisher'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PushTopic:
    post:
      summary: 'Create PushTopic'
      description: 'CreatePushTopic'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreatePushTopic':
          summary: 'Create Push Topic'
          description: 'Create a new push topic'
          entityName: 'PushTopic'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Question:
    post:
      summary: 'Create Question'
      description: 'CreateQuestion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuestion':
          summary: 'Create Question'
          description: 'Create a new question'
          entityName: 'Question'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuestionDataCategorySelection:
    post:
      summary: 'Create QuestionDataCategorySelection'
      description: 'CreateQuestionDataCategorySelection'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuestionDataCategorySelection':
          summary: 'Create Question Data Category Selection'
          description: 'Create a new question data category selection'
          entityName: 'QuestionDataCategorySelection'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuestionReportAbuse:
    post:
      summary: 'Create QuestionReportAbuse'
      description: 'CreateQuestionReportAbuse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuestionReportAbuse':
          summary: 'Create Question Report Abuse'
          description: 'Create a new question report abuse'
          entityName: 'QuestionReportAbuse'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuestionSubscription:
    post:
      summary: 'Create QuestionSubscription'
      description: 'CreateQuestionSubscription'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuestionSubscription':
          summary: 'Create Question Subscription'
          description: 'Create a new question subscription'
          entityName: 'QuestionSubscription'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QueueSobject:
    post:
      summary: 'Create QueueSobject'
      description: 'CreateQueueSobject'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQueueSobject':
          summary: 'Create Queue sObject'
          description: 'Create a new queue sobject'
          entityName: 'QueueSobject'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickText:
    post:
      summary: 'Create QuickText'
      description: 'CreateQuickText'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuickText':
          summary: 'Create Quick Text'
          description: 'Create a new quick text'
          entityName: 'QuickText'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextChangeEvent:
    post:
      summary: 'Create QuickTextChangeEvent'
      description: 'CreateQuickTextChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuickTextChangeEvent':
          summary: 'Create Quick Text Change Event'
          description: 'Create a new quick text change event'
          entityName: 'QuickTextChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextHistory:
    post:
      summary: 'Create QuickTextHistory'
      description: 'CreateQuickTextHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuickTextHistory':
          summary: 'Create Quick Text History'
          description: 'Create a new quick text history'
          entityName: 'QuickTextHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextShare:
    post:
      summary: 'Create QuickTextShare'
      description: 'CreateQuickTextShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuickTextShare':
          summary: 'Create Quick Text Share'
          description: 'Create a new quick text share'
          entityName: 'QuickTextShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextUsage:
    post:
      summary: 'Create QuickTextUsage'
      description: 'CreateQuickTextUsage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuickTextUsage':
          summary: 'Create Quick Text Usage'
          description: 'Create a new quick text usage'
          entityName: 'QuickTextUsage'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextUsageShare:
    post:
      summary: 'Create QuickTextUsageShare'
      description: 'CreateQuickTextUsageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateQuickTextUsageShare':
          summary: 'Create Quick Text Usage Share'
          description: 'Create a new quick text usage share'
          entityName: 'QuickTextUsageShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecentlyViewed:
    post:
      summary: 'Create RecentlyViewed'
      description: 'CreateRecentlyViewed'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecentlyViewed':
          summary: 'Create Recently Viewed'
          description: 'Create a new recently viewed'
          entityName: 'RecentlyViewed'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Recommendation:
    post:
      summary: 'Create Recommendation'
      description: 'CreateRecommendation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecommendation':
          summary: 'Create Recommendation'
          description: 'Create a new recommendation'
          entityName: 'Recommendation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecommendationChangeEvent:
    post:
      summary: 'Create RecommendationChangeEvent'
      description: 'CreateRecommendationChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecommendationChangeEvent':
          summary: 'Create Recommendation Change Event'
          description: 'Create a new recommendation change event'
          entityName: 'RecommendationChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecommendationResponse:
    post:
      summary: 'Create RecommendationResponse'
      description: 'CreateRecommendationResponse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecommendationResponse':
          summary: 'Create Recommendation Response'
          description: 'Create a new recommendation response'
          entityName: 'RecommendationResponse'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecordAction:
    post:
      summary: 'Create RecordAction'
      description: 'CreateRecordAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecordAction':
          summary: 'Create RecordAction'
          description: 'Create a new recordaction'
          entityName: 'RecordAction'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecordActionHistory:
    post:
      summary: 'Create RecordActionHistory'
      description: 'CreateRecordActionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecordActionHistory':
          summary: 'Create RecordActionHistory'
          description: 'Create a new recordactionhistory'
          entityName: 'RecordActionHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecordType:
    post:
      summary: 'Create RecordType'
      description: 'CreateRecordType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRecordType':
          summary: 'Create Record Type'
          description: 'Create a new record type'
          entityName: 'RecordType'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RedirectWhitelistUrl:
    post:
      summary: 'Create RedirectWhitelistUrl'
      description: 'CreateRedirectWhitelistUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRedirectWhitelistUrl':
          summary: 'Create Allow URL for Redirects'
          description: 'Create a new allow url for redirects'
          entityName: 'RedirectWhitelistUrl'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelatedListColumnDefinition:
    post:
      summary: 'Create RelatedListColumnDefinition'
      description: 'CreateRelatedListColumnDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRelatedListColumnDefinition':
          summary: 'Create Related List Column Definition'
          description: 'Create a new related list column definition'
          entityName: 'RelatedListColumnDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelatedListDefinition:
    post:
      summary: 'Create RelatedListDefinition'
      description: 'CreateRelatedListDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRelatedListDefinition':
          summary: 'Create Related List Definition'
          description: 'Create a new related list definition'
          entityName: 'RelatedListDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelationshipDomain:
    post:
      summary: 'Create RelationshipDomain'
      description: 'CreateRelationshipDomain'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRelationshipDomain':
          summary: 'Create Relationship Domain'
          description: 'Create a new relationship domain'
          entityName: 'RelationshipDomain'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelationshipInfo:
    post:
      summary: 'Create RelationshipInfo'
      description: 'CreateRelationshipInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateRelationshipInfo':
          summary: 'Create Relationship'
          description: 'Create a new relationship'
          entityName: 'RelationshipInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Reply:
    post:
      summary: 'Create Reply'
      description: 'CreateReply'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReply':
          summary: 'Create Reply'
          description: 'Create a new reply'
          entityName: 'Reply'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReplyReportAbuse:
    post:
      summary: 'Create ReplyReportAbuse'
      description: 'CreateReplyReportAbuse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReplyReportAbuse':
          summary: 'Create Reply Report Abuse'
          description: 'Create a new reply report abuse'
          entityName: 'ReplyReportAbuse'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Report:
    post:
      summary: 'Create Report'
      description: 'CreateReport'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReport':
          summary: 'Create Report'
          description: 'Create a new report'
          entityName: 'Report'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportAnomalyEvent:
    post:
      summary: 'Create ReportAnomalyEvent'
      description: 'CreateReportAnomalyEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReportAnomalyEvent':
          summary: 'Create Report Anomaly Event'
          description: 'Create a new report anomaly event'
          entityName: 'ReportAnomalyEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportAnomalyEventStore:
    post:
      summary: 'Create ReportAnomalyEventStore'
      description: 'CreateReportAnomalyEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReportAnomalyEventStore':
          summary: 'Create Report Anomaly Event Store'
          description: 'Create a new report anomaly event store'
          entityName: 'ReportAnomalyEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportEvent:
    post:
      summary: 'Create ReportEvent'
      description: 'CreateReportEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReportEvent':
          summary: 'Create Report Event'
          description: 'Create a new report event'
          entityName: 'ReportEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportEventStream:
    post:
      summary: 'Create ReportEventStream'
      description: 'CreateReportEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateReportEventStream':
          summary: 'Create Report Event Stream'
          description: 'Create a new report event stream'
          entityName: 'ReportEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SamlSsoConfig:
    post:
      summary: 'Create SamlSsoConfig'
      description: 'CreateSamlSsoConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSamlSsoConfig':
          summary: 'Create SAML Single Sign-On Setting'
          description: 'Create a new saml single sign-on setting'
          entityName: 'SamlSsoConfig'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Scontrol:
    post:
      summary: 'Create Scontrol'
      description: 'CreateScontrol'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateScontrol':
          summary: 'Create Custom S-Control'
          description: 'Create a new custom s-control'
          entityName: 'Scontrol'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Scorecard:
    post:
      summary: 'Create Scorecard'
      description: 'CreateScorecard'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateScorecard':
          summary: 'Create Scorecard'
          description: 'Create a new scorecard'
          entityName: 'Scorecard'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ScorecardAssociation:
    post:
      summary: 'Create ScorecardAssociation'
      description: 'CreateScorecardAssociation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateScorecardAssociation':
          summary: 'Create Scorecard Association'
          description: 'Create a new scorecard association'
          entityName: 'ScorecardAssociation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ScorecardMetric:
    post:
      summary: 'Create ScorecardMetric'
      description: 'CreateScorecardMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateScorecardMetric':
          summary: 'Create Scorecard Metric'
          description: 'Create a new scorecard metric'
          entityName: 'ScorecardMetric'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ScorecardShare:
    post:
      summary: 'Create ScorecardShare'
      description: 'CreateScorecardShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateScorecardShare':
          summary: 'Create Scorecard Share'
          description: 'Create a new scorecard share'
          entityName: 'ScorecardShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SearchLayout:
    post:
      summary: 'Create SearchLayout'
      description: 'CreateSearchLayout'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSearchLayout':
          summary: 'Create Search Layout'
          description: 'Create a new search layout'
          entityName: 'SearchLayout'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SearchPromotionRule:
    post:
      summary: 'Create SearchPromotionRule'
      description: 'CreateSearchPromotionRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSearchPromotionRule':
          summary: 'Create Promoted Search Term'
          description: 'Create a new promoted search term'
          entityName: 'SearchPromotionRule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SecurityCustomBaseline:
    post:
      summary: 'Create SecurityCustomBaseline'
      description: 'CreateSecurityCustomBaseline'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSecurityCustomBaseline':
          summary: 'Create Security Custom Baseline'
          description: 'Create a new security custom baseline'
          entityName: 'SecurityCustomBaseline'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Seller:
    post:
      summary: 'Create Seller'
      description: 'CreateSeller'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSeller':
          summary: 'Create Seller'
          description: 'Create a new seller'
          entityName: 'Seller'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SellerHistory:
    post:
      summary: 'Create SellerHistory'
      description: 'CreateSellerHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSellerHistory':
          summary: 'Create Seller History'
          description: 'Create a new seller history'
          entityName: 'SellerHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SellerShare:
    post:
      summary: 'Create SellerShare'
      description: 'CreateSellerShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSellerShare':
          summary: 'Create Seller Share'
          description: 'Create a new seller share'
          entityName: 'SellerShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SessionHijackingEvent:
    post:
      summary: 'Create SessionHijackingEvent'
      description: 'CreateSessionHijackingEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSessionHijackingEvent':
          summary: 'Create Session Hijacking Event'
          description: 'Create a new session hijacking event'
          entityName: 'SessionHijackingEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SessionHijackingEventStore:
    post:
      summary: 'Create SessionHijackingEventStore'
      description: 'CreateSessionHijackingEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSessionHijackingEventStore':
          summary: 'Create Session Hijacking Event Store'
          description: 'Create a new session hijacking event store'
          entityName: 'SessionHijackingEventStore'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SessionPermSetActivation:
    post:
      summary: 'Create SessionPermSetActivation'
      description: 'CreateSessionPermSetActivation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSessionPermSetActivation':
          summary: 'Create Session Permission Set Activation'
          description: 'Create a new session permission set activation'
          entityName: 'SessionPermSetActivation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SetupAssistantStep:
    post:
      summary: 'Create SetupAssistantStep'
      description: 'CreateSetupAssistantStep'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSetupAssistantStep':
          summary: 'Create Setup Assistant Step'
          description: 'Create a new setup assistant step'
          entityName: 'SetupAssistantStep'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SetupAuditTrail:
    post:
      summary: 'Create SetupAuditTrail'
      description: 'CreateSetupAuditTrail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSetupAuditTrail':
          summary: 'Create Setup Audit Trail Entry'
          description: 'Create a new setup audit trail entry'
          entityName: 'SetupAuditTrail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SetupEntityAccess:
    post:
      summary: 'Create SetupEntityAccess'
      description: 'CreateSetupEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSetupEntityAccess':
          summary: 'Create Setup Entity Access'
          description: 'Create a new setup entity access'
          entityName: 'SetupEntityAccess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Site:
    post:
      summary: 'Create Site'
      description: 'CreateSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSite':
          summary: 'Create Site'
          description: 'Create a new site'
          entityName: 'Site'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteDetail:
    post:
      summary: 'Create SiteDetail'
      description: 'CreateSiteDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSiteDetail':
          summary: 'Create Site Detail'
          description: 'Create a new site detail'
          entityName: 'SiteDetail'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteHistory:
    post:
      summary: 'Create SiteHistory'
      description: 'CreateSiteHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSiteHistory':
          summary: 'Create Site History'
          description: 'Create a new site history'
          entityName: 'SiteHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteIframeWhiteListUrl:
    post:
      summary: 'Create SiteIframeWhiteListUrl'
      description: 'CreateSiteIframeWhiteListUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSiteIframeWhiteListUrl':
          summary: 'Create Trusted Domains for Inline Frames'
          description: 'Create a new trusted domains for inline frames'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteRedirectMapping:
    post:
      summary: 'Create SiteRedirectMapping'
      description: 'CreateSiteRedirectMapping'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSiteRedirectMapping':
          summary: 'Create Site Redirect Mapping'
          description: 'Create a new site redirect mapping'
          entityName: 'SiteRedirectMapping'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Solution:
    post:
      summary: 'Create Solution'
      description: 'CreateSolution'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSolution':
          summary: 'Create Solution'
          description: 'Create a new solution'
          entityName: 'Solution'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SolutionHistory:
    post:
      summary: 'Create SolutionHistory'
      description: 'CreateSolutionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSolutionHistory':
          summary: 'Create Solution History'
          description: 'Create a new solution history'
          entityName: 'SolutionHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SolutionStatus:
    post:
      summary: 'Create SolutionStatus'
      description: 'CreateSolutionStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateSolutionStatus':
          summary: 'Create Solution Status Value'
          description: 'Create a new solution status value'
          entityName: 'SolutionStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Stamp:
    post:
      summary: 'Create Stamp'
      description: 'CreateStamp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateStamp':
          summary: 'Create Stamp'
          description: 'Create a new stamp'
          entityName: 'Stamp'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StampAssignment:
    post:
      summary: 'Create StampAssignment'
      description: 'CreateStampAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateStampAssignment':
          summary: 'Create Stamp Assignment'
          description: 'Create a new stamp assignment'
          entityName: 'StampAssignment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StaticResource:
    post:
      summary: 'Create StaticResource'
      description: 'CreateStaticResource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateStaticResource':
          summary: 'Create Static Resource'
          description: 'Create a new static resource'
          entityName: 'StaticResource'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StreamingChannel:
    post:
      summary: 'Create StreamingChannel'
      description: 'CreateStreamingChannel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateStreamingChannel':
          summary: 'Create Streaming Channel'
          description: 'Create a new streaming channel'
          entityName: 'StreamingChannel'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StreamingChannelShare:
    post:
      summary: 'Create StreamingChannelShare'
      description: 'CreateStreamingChannelShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateStreamingChannelShare':
          summary: 'Create Streaming Channel Share'
          description: 'Create a new streaming channel share'
          entityName: 'StreamingChannelShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TabDefinition:
    post:
      summary: 'Create TabDefinition'
      description: 'CreateTabDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTabDefinition':
          summary: 'Create Tab Definition'
          description: 'Create a new tab definition'
          entityName: 'TabDefinition'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Task:
    post:
      summary: 'Create Task'
      description: 'CreateTask'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTask':
          summary: 'Create Task'
          description: 'Create a new task'
          entityName: 'Task'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TaskChangeEvent:
    post:
      summary: 'Create TaskChangeEvent'
      description: 'CreateTaskChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTaskChangeEvent':
          summary: 'Create Task Change Event'
          description: 'Create a new task change event'
          entityName: 'TaskChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TaskPriority:
    post:
      summary: 'Create TaskPriority'
      description: 'CreateTaskPriority'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTaskPriority':
          summary: 'Create Task Priority Value'
          description: 'Create a new task priority value'
          entityName: 'TaskPriority'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TaskStatus:
    post:
      summary: 'Create TaskStatus'
      description: 'CreateTaskStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTaskStatus':
          summary: 'Create Task Status Value'
          description: 'Create a new task status value'
          entityName: 'TaskStatus'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TenantSecret:
    post:
      summary: 'Create TenantSecret'
      description: 'CreateTenantSecret'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTenantSecret':
          summary: 'Create Tenant Secret'
          description: 'Create a new tenant secret'
          entityName: 'TenantSecret'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TenantUsageEntitlement:
    post:
      summary: 'Create TenantUsageEntitlement'
      description: 'CreateTenantUsageEntitlement'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTenantUsageEntitlement':
          summary: 'Create Tenant Usage Entitlement'
          description: 'Create a new tenant usage entitlement'
          entityName: 'TenantUsageEntitlement'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TestSuiteMembership:
    post:
      summary: 'Create TestSuiteMembership'
      description: 'CreateTestSuiteMembership'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTestSuiteMembership':
          summary: 'Create Test Suite Membership'
          description: 'Create a new test suite membership'
          entityName: 'TestSuiteMembership'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ThirdPartyAccountLink:
    post:
      summary: 'Create ThirdPartyAccountLink'
      description: 'CreateThirdPartyAccountLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateThirdPartyAccountLink':
          summary: 'Create Third Party Account Link'
          description: 'Create a new third party account link'
          entityName: 'ThirdPartyAccountLink'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ThreatDetectionFeedback:
    post:
      summary: 'Create ThreatDetectionFeedback'
      description: 'CreateThreatDetectionFeedback'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateThreatDetectionFeedback':
          summary: 'Create Threat Detection Feedback'
          description: 'Create a new threat detection feedback'
          entityName: 'ThreatDetectionFeedback'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TodayGoal:
    post:
      summary: 'Create TodayGoal'
      description: 'CreateTodayGoal'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTodayGoal':
          summary: 'Create Goal'
          description: 'Create a new goal'
          entityName: 'TodayGoal'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TodayGoalShare:
    post:
      summary: 'Create TodayGoalShare'
      description: 'CreateTodayGoalShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTodayGoalShare':
          summary: 'Create Goal Share'
          description: 'Create a new goal share'
          entityName: 'TodayGoalShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Topic:
    post:
      summary: 'Create Topic'
      description: 'CreateTopic'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTopic':
          summary: 'Create Topic'
          description: 'Create a new topic'
          entityName: 'Topic'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TopicAssignment:
    post:
      summary: 'Create TopicAssignment'
      description: 'CreateTopicAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTopicAssignment':
          summary: 'Create Topic Assignment'
          description: 'Create a new topic assignment'
          entityName: 'TopicAssignment'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TransactionSecurityPolicy:
    post:
      summary: 'Create TransactionSecurityPolicy'
      description: 'CreateTransactionSecurityPolicy'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTransactionSecurityPolicy':
          summary: 'Create Transaction Security Policy'
          description: 'Create a new transaction security policy'
          entityName: 'TransactionSecurityPolicy'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Translation:
    post:
      summary: 'Create Translation'
      description: 'CreateTranslation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateTranslation':
          summary: 'Create Language Translation'
          description: 'Create a new language translation'
          entityName: 'Translation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UiFormulaCriterion:
    post:
      summary: 'Create UiFormulaCriterion'
      description: 'CreateUiFormulaCriterion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUiFormulaCriterion':
          summary: 'Create Ui Formula Criterion'
          description: 'Create a new ui formula criterion'
          entityName: 'UiFormulaCriterion'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UiFormulaRule:
    post:
      summary: 'Create UiFormulaRule'
      description: 'CreateUiFormulaRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUiFormulaRule':
          summary: 'Create Ui Formula Rule'
          description: 'Create a new ui formula rule'
          entityName: 'UiFormulaRule'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UndecidedEventRelation:
    post:
      summary: 'Create UndecidedEventRelation'
      description: 'CreateUndecidedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUndecidedEventRelation':
          summary: 'Create Undecided Event Relation'
          description: 'Create a new undecided event relation'
          entityName: 'UndecidedEventRelation'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UriEvent:
    post:
      summary: 'Create UriEvent'
      description: 'CreateUriEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUriEvent':
          summary: 'Create URI Event'
          description: 'Create a new uri event'
          entityName: 'UriEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UriEventStream:
    post:
      summary: 'Create UriEventStream'
      description: 'CreateUriEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUriEventStream':
          summary: 'Create URI Event Stream '
          description: 'Create a new uri event stream '
          entityName: 'UriEventStream'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/User:
    post:
      summary: 'Create User'
      description: 'CreateUser'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUser':
          summary: 'Create User'
          description: 'Create a new user'
          entityName: 'User'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppInfo:
    post:
      summary: 'Create UserAppInfo'
      description: 'CreateUserAppInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserAppInfo':
          summary: 'Create Last Used App'
          description: 'Create a new last used app'
          entityName: 'UserAppInfo'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppMenuCustomization:
    post:
      summary: 'Create UserAppMenuCustomization'
      description: 'CreateUserAppMenuCustomization'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserAppMenuCustomization':
          summary: 'Create UserAppMenuCustomization'
          description: 'Create a new userappmenucustomization'
          entityName: 'UserAppMenuCustomization'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppMenuCustomizationShare:
    post:
      summary: 'Create UserAppMenuCustomizationShare'
      description: 'CreateUserAppMenuCustomizationShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserAppMenuCustomizationShare':
          summary: 'Create UserAppMenuCustomization Share'
          description: 'Create a new userappmenucustomization share'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppMenuItem:
    post:
      summary: 'Create UserAppMenuItem'
      description: 'CreateUserAppMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserAppMenuItem':
          summary: 'Create Application'
          description: 'Create a new application'
          entityName: 'UserAppMenuItem'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserChangeEvent:
    post:
      summary: 'Create UserChangeEvent'
      description: 'CreateUserChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserChangeEvent':
          summary: 'Create User Change Event'
          description: 'Create a new user change event'
          entityName: 'UserChangeEvent'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserEmailPreferredPerson:
    post:
      summary: 'Create UserEmailPreferredPerson'
      description: 'CreateUserEmailPreferredPerson'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserEmailPreferredPerson':
          summary: 'Create User Email Preferred Person'
          description: 'Create a new user email preferred person'
          entityName: 'UserEmailPreferredPerson'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserEmailPreferredPersonShare:
    post:
      summary: 'Create UserEmailPreferredPersonShare'
      description: 'CreateUserEmailPreferredPersonShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserEmailPreferredPersonShare':
          summary: 'Create User Email Preferred Person Share'
          description: 'Create a new user email preferred person share'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserEntityAccess:
    post:
      summary: 'Create UserEntityAccess'
      description: 'CreateUserEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserEntityAccess':
          summary: 'Create User Entity Access'
          description: 'Create a new user entity access'
          entityName: 'UserEntityAccess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserFieldAccess:
    post:
      summary: 'Create UserFieldAccess'
      description: 'CreateUserFieldAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserFieldAccess':
          summary: 'Create User Field Access'
          description: 'Create a new user field access'
          entityName: 'UserFieldAccess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserLicense:
    post:
      summary: 'Create UserLicense'
      description: 'CreateUserLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserLicense':
          summary: 'Create User License'
          description: 'Create a new user license'
          entityName: 'UserLicense'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserListView:
    post:
      summary: 'Create UserListView'
      description: 'CreateUserListView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserListView':
          summary: 'Create User List View'
          description: 'Create a new user list view'
          entityName: 'UserListView'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserListViewCriterion:
    post:
      summary: 'Create UserListViewCriterion'
      description: 'CreateUserListViewCriterion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserListViewCriterion':
          summary: 'Create User List View Criteria'
          description: 'Create a new user list view criteria'
          entityName: 'UserListViewCriterion'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserLogin:
    post:
      summary: 'Create UserLogin'
      description: 'CreateUserLogin'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserLogin':
          summary: 'Create User Login'
          description: 'Create a new user login'
          entityName: 'UserLogin'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserPackageLicense:
    post:
      summary: 'Create UserPackageLicense'
      description: 'CreateUserPackageLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserPackageLicense':
          summary: 'Create User Package License'
          description: 'Create a new user package license'
          entityName: 'UserPackageLicense'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserPermissionAccess:
    post:
      summary: 'Create UserPermissionAccess'
      description: 'CreateUserPermissionAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserPermissionAccess':
          summary: 'Create User Permission Access'
          description: 'Create a new user permission access'
          entityName: 'UserPermissionAccess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserPreference:
    post:
      summary: 'Create UserPreference'
      description: 'CreateUserPreference'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserPreference':
          summary: 'Create User Preference'
          description: 'Create a new user preference'
          entityName: 'UserPreference'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvAccount:
    post:
      summary: 'Create UserProvAccount'
      description: 'CreateUserProvAccount'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvAccount':
          summary: 'Create User Provisioning Account'
          description: 'Create a new user provisioning account'
          entityName: 'UserProvAccount'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvAccountStaging:
    post:
      summary: 'Create UserProvAccountStaging'
      description: 'CreateUserProvAccountStaging'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvAccountStaging':
          summary: 'Create User Provisioning Account Staging'
          description: 'Create a new user provisioning account staging'
          entityName: 'UserProvAccountStaging'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvMockTarget:
    post:
      summary: 'Create UserProvMockTarget'
      description: 'CreateUserProvMockTarget'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvMockTarget':
          summary: 'Create User Provisioning Mock Target'
          description: 'Create a new user provisioning mock target'
          entityName: 'UserProvMockTarget'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningConfig:
    post:
      summary: 'Create UserProvisioningConfig'
      description: 'CreateUserProvisioningConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvisioningConfig':
          summary: 'Create User Provisioning Config'
          description: 'Create a new user provisioning config'
          entityName: 'UserProvisioningConfig'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningLog:
    post:
      summary: 'Create UserProvisioningLog'
      description: 'CreateUserProvisioningLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvisioningLog':
          summary: 'Create User Provisioning Log'
          description: 'Create a new user provisioning log'
          entityName: 'UserProvisioningLog'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningRequest:
    post:
      summary: 'Create UserProvisioningRequest'
      description: 'CreateUserProvisioningRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvisioningRequest':
          summary: 'Create User Provisioning Request'
          description: 'Create a new user provisioning request'
          entityName: 'UserProvisioningRequest'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningRequestShare:
    post:
      summary: 'Create UserProvisioningRequestShare'
      description: 'CreateUserProvisioningRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserProvisioningRequestShare':
          summary: 'Create User Provisioning Request Share'
          description: 'Create a new user provisioning request share'
          entityName: 'UserProvisioningRequestShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserRecordAccess:
    post:
      summary: 'Create UserRecordAccess'
      description: 'CreateUserRecordAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserRecordAccess':
          summary: 'Create User Record Access'
          description: 'Create a new user record access'
          entityName: 'UserRecordAccess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserRole:
    post:
      summary: 'Create UserRole'
      description: 'CreateUserRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserRole':
          summary: 'Create Role'
          description: 'Create a new role'
          entityName: 'UserRole'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserSetupEntityAccess:
    post:
      summary: 'Create UserSetupEntityAccess'
      description: 'CreateUserSetupEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserSetupEntityAccess':
          summary: 'Create User Setup Entity Access'
          description: 'Create a new user setup entity access'
          entityName: 'UserSetupEntityAccess'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserShare:
    post:
      summary: 'Create UserShare'
      description: 'CreateUserShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateUserShare':
          summary: 'Create User Share'
          description: 'Create a new user share'
          entityName: 'UserShare'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/VerificationHistory:
    post:
      summary: 'Create VerificationHistory'
      description: 'CreateVerificationHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateVerificationHistory':
          summary: 'Create Identity Verification History'
          description: 'Create a new identity verification history'
          entityName: 'VerificationHistory'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/VisualforceAccessMetrics:
    post:
      summary: 'Create VisualforceAccessMetrics'
      description: 'CreateVisualforceAccessMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateVisualforceAccessMetrics':
          summary: 'Create Visualforce Access Metric'
          description: 'Create a new visualforce access metric'
          entityName: 'VisualforceAccessMetrics'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Vote:
    post:
      summary: 'Create Vote'
      description: 'CreateVote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateVote':
          summary: 'Create Vote'
          description: 'Create a new vote'
          entityName: 'Vote'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/WebLink:
    post:
      summary: 'Create WebLink'
      description: 'CreateWebLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'CreateWebLink':
          summary: 'Create Custom Button or Link'
          description: 'Create a new custom button or link'
          entityName: 'WebLink'
          operation: 'create'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomObject:
    post:
      summary: 'Create CustomObject'
      description: 'CreateCustomObject'
      x-adeptia-action:
        'CreateCustomObject':
          summary: 'Create Custom Object'
          description: 'Create a new custom object'
          entityName: 'Custom Object'
          operation: 'create'
          paramValues:
            isCustom: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomObject/{Id}:
    patch:
      summary: 'Update CustomObject'
      description: 'UpdateCustomObject'
      x-adeptia-action:
        'UpdateCustomObject':
          summary: 'Update Custom Object'
          description: 'Updates an existing custom object; only elements
            specified in the request are updated.'
          entityName: 'Custom Object'
          operation: 'update'
          paramValues:
            isCustom: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomObject':
          summary: 'Upsert Custom Object'
          description: 'Upsert an existing custom object only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Custom Object'
          operation: 'upsert'
          paramValues:
            isCustom: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomObject'
      description: 'DeleteCustomObject'
      x-adeptia-action:
        'DeleteCustomObject':
          summary: 'Delete Custom Object'
          description: 'Delete an existing custom object only elements specified
            in the request are deleted.'
          entityName: 'Custom Object'
          operation: 'delete'
          paramValues:
            isCustom: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AcceptedEventRelation/{Id}:
    patch:
      summary: 'Update AcceptedEventRelation'
      description: 'UpdateAcceptedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAcceptedEventRelation':
          summary: 'Update Accepted Event Relation'
          description: 'Updates an existing accepted event relation; only elements
            specified in the request are updated.'
          entityName: 'AcceptedEventRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAcceptedEventRelation':
          summary: 'Upsert Accepted Event Relation'
          description: 'Upsert an existing accepted event relation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AcceptedEventRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AcceptedEventRelation'
      description: 'DeleteAcceptedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAcceptedEventRelation':
          summary: 'Delete Accepted Event Relation'
          description: 'Delete an existing accepted event relation only elements specified
            in the request are deleted.'
          entityName: 'AcceptedEventRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Account/{Id}:
    patch:
      summary: 'Update Account'
      description: 'UpdateAccount'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccount':
          summary: 'Update Account'
          description: 'Updates an existing account; only elements specified in the
            request are updated.'
          entityName: 'Account'
          operation: 'update'
          IdField: 'Id'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccount':
          summary: 'Upsert Account'
          description: 'Upsert an existing account only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Account'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Account'
      description: 'DeleteAccount'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccount':
          summary: 'Delete Account'
          description: 'Delete an existing account only elements specified in the
            request are deleted.'
          entityName: 'Account'
          operation: 'delete'
          IdField: 'Id'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountChangeEvent/{Id}:
    patch:
      summary: 'Update AccountChangeEvent'
      description: 'UpdateAccountChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccountChangeEvent':
          summary: 'Update Account Change Event'
          description: 'Updates an existing account change event; only elements specified
            in the request are updated.'
          entityName: 'AccountChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountChangeEvent':
          summary: 'Upsert Account Change Event'
          description: 'Upsert an existing account change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AccountChangeEvent'
      description: 'DeleteAccountChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccountChangeEvent':
          summary: 'Delete Account Change Event'
          description: 'Delete an existing account change event only elements specified
            in the request are deleted.'
          entityName: 'AccountChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountContactRole/{Id}:
    patch:
      summary: 'Update AccountContactRole'
      description: 'UpdateAccountContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccountContactRole':
          summary: 'Update Account Contact Role'
          description: 'Updates an existing account contact role; only elements specified
            in the request are updated.'
          entityName: 'AccountContactRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountContactRole':
          summary: 'Upsert Account Contact Role'
          description: 'Upsert an existing account contact role only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountContactRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AccountContactRole'
      description: 'DeleteAccountContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccountContactRole':
          summary: 'Delete Account Contact Role'
          description: 'Delete an existing account contact role only elements specified
            in the request are deleted.'
          entityName: 'AccountContactRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountContactRoleChangeEvent/{Id}:
    patch:
      summary: 'Update AccountContactRoleChangeEvent'
      description: 'UpdateAccountContactRoleChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccountContactRoleChangeEvent':
          summary: 'Update Account Contact Role Change Event'
          description: 'Updates an existing account contact role change event; only
            elements specified in the request are updated.'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountContactRoleChangeEvent':
          summary: 'Upsert Account Contact Role Change Event'
          description: 'Upsert an existing account contact role change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AccountContactRoleChangeEvent'
      description: 'DeleteAccountContactRoleChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccountContactRoleChangeEvent':
          summary: 'Delete Account Contact Role Change Event'
          description: 'Delete an existing account contact role change event only
            elements specified in the request are deleted.'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountHistory/{Id}:
    patch:
      summary: 'Update AccountHistory'
      description: 'UpdateAccountHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccountHistory':
          summary: 'Update Account History'
          description: 'Updates an existing account history; only elements specified
            in the request are updated.'
          entityName: 'AccountHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountHistory':
          summary: 'Upsert Account History'
          description: 'Upsert an existing account history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AccountHistory'
      description: 'DeleteAccountHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccountHistory':
          summary: 'Delete Account History'
          description: 'Delete an existing account history only elements specified
            in the request are deleted.'
          entityName: 'AccountHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountPartner/{Id}:
    patch:
      summary: 'Update AccountPartner'
      description: 'UpdateAccountPartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccountPartner':
          summary: 'Update Account Partner'
          description: 'Updates an existing account partner; only elements specified
            in the request are updated.'
          entityName: 'AccountPartner'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountPartner':
          summary: 'Upsert Account Partner'
          description: 'Upsert an existing account partner only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountPartner'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AccountPartner'
      description: 'DeleteAccountPartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccountPartner':
          summary: 'Delete Account Partner'
          description: 'Delete an existing account partner only elements specified
            in the request are deleted.'
          entityName: 'AccountPartner'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AccountShare/{Id}:
    patch:
      summary: 'Update AccountShare'
      description: 'UpdateAccountShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAccountShare':
          summary: 'Update Account Share'
          description: 'Updates an existing account share; only elements specified
            in the request are updated.'
          entityName: 'AccountShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountShare':
          summary: 'Upsert Account Share'
          description: 'Upsert an existing account share only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AccountShare'
      description: 'DeleteAccountShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAccountShare':
          summary: 'Delete Account Share'
          description: 'Delete an existing account share only elements specified in
            the request are deleted.'
          entityName: 'AccountShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActionLinkGroupTemplate/{Id}:
    patch:
      summary: 'Update ActionLinkGroupTemplate'
      description: 'UpdateActionLinkGroupTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActionLinkGroupTemplate':
          summary: 'Update Action Link Group Template'
          description: 'Updates an existing action link group template; only elements
            specified in the request are updated.'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActionLinkGroupTemplate':
          summary: 'Upsert Action Link Group Template'
          description: 'Upsert an existing action link group template only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActionLinkGroupTemplate'
      description: 'DeleteActionLinkGroupTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActionLinkGroupTemplate':
          summary: 'Delete Action Link Group Template'
          description: 'Delete an existing action link group template only elements
            specified in the request are deleted.'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActionLinkTemplate/{Id}:
    patch:
      summary: 'Update ActionLinkTemplate'
      description: 'UpdateActionLinkTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActionLinkTemplate':
          summary: 'Update Action Link Template'
          description: 'Updates an existing action link template; only elements specified
            in the request are updated.'
          entityName: 'ActionLinkTemplate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActionLinkTemplate':
          summary: 'Upsert Action Link Template'
          description: 'Upsert an existing action link template only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActionLinkTemplate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActionLinkTemplate'
      description: 'DeleteActionLinkTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActionLinkTemplate':
          summary: 'Delete Action Link Template'
          description: 'Delete an existing action link template only elements specified
            in the request are deleted.'
          entityName: 'ActionLinkTemplate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActiveFeatureLicenseMetric/{Id}:
    patch:
      summary: 'Update ActiveFeatureLicenseMetric'
      description: 'UpdateActiveFeatureLicenseMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActiveFeatureLicenseMetric':
          summary: 'Update Active Feature License Metric'
          description: 'Updates an existing active feature license metric; only elements
            specified in the request are updated.'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActiveFeatureLicenseMetric':
          summary: 'Upsert Active Feature License Metric'
          description: 'Upsert an existing active feature license metric only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActiveFeatureLicenseMetric'
      description: 'DeleteActiveFeatureLicenseMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActiveFeatureLicenseMetric':
          summary: 'Delete Active Feature License Metric'
          description: 'Delete an existing active feature license metric only elements
            specified in the request are deleted.'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActivePermSetLicenseMetric/{Id}:
    patch:
      summary: 'Update ActivePermSetLicenseMetric'
      description: 'UpdateActivePermSetLicenseMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActivePermSetLicenseMetric':
          summary: 'Update Active Permission Set License Metric'
          description: 'Updates an existing active permission set license metric;
            only elements specified in the request are updated.'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActivePermSetLicenseMetric':
          summary: 'Upsert Active Permission Set License Metric'
          description: 'Upsert an existing active permission set license metric only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActivePermSetLicenseMetric'
      description: 'DeleteActivePermSetLicenseMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActivePermSetLicenseMetric':
          summary: 'Delete Active Permission Set License Metric'
          description: 'Delete an existing active permission set license metric only
            elements specified in the request are deleted.'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActiveProfileMetric/{Id}:
    patch:
      summary: 'Update ActiveProfileMetric'
      description: 'UpdateActiveProfileMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActiveProfileMetric':
          summary: 'Update Active Profile Metric'
          description: 'Updates an existing active profile metric; only elements specified
            in the request are updated.'
          entityName: 'ActiveProfileMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActiveProfileMetric':
          summary: 'Upsert Active Profile Metric'
          description: 'Upsert an existing active profile metric only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActiveProfileMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActiveProfileMetric'
      description: 'DeleteActiveProfileMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActiveProfileMetric':
          summary: 'Delete Active Profile Metric'
          description: 'Delete an existing active profile metric only elements specified
            in the request are deleted.'
          entityName: 'ActiveProfileMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActivityFieldHistory/{Id}:
    patch:
      summary: 'Update ActivityFieldHistory'
      description: 'UpdateActivityFieldHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActivityFieldHistory':
          summary: 'Update Activity Field History'
          description: 'Updates an existing activity field history; only elements
            specified in the request are updated.'
          entityName: 'ActivityFieldHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActivityFieldHistory':
          summary: 'Upsert Activity Field History'
          description: 'Upsert an existing activity field history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActivityFieldHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActivityFieldHistory'
      description: 'DeleteActivityFieldHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActivityFieldHistory':
          summary: 'Delete Activity Field History'
          description: 'Delete an existing activity field history only elements specified
            in the request are deleted.'
          entityName: 'ActivityFieldHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ActivityHistory/{Id}:
    patch:
      summary: 'Update ActivityHistory'
      description: 'UpdateActivityHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateActivityHistory':
          summary: 'Update Activity History'
          description: 'Updates an existing activity history; only elements specified
            in the request are updated.'
          entityName: 'ActivityHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActivityHistory':
          summary: 'Upsert Activity History'
          description: 'Upsert an existing activity history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActivityHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ActivityHistory'
      description: 'DeleteActivityHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteActivityHistory':
          summary: 'Delete Activity History'
          description: 'Delete an existing activity history only elements specified
            in the request are deleted.'
          entityName: 'ActivityHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AdditionalNumber/{Id}:
    patch:
      summary: 'Update AdditionalNumber'
      description: 'UpdateAdditionalNumber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAdditionalNumber':
          summary: 'Update Additional Directory Number'
          description: 'Updates an existing additional directory number; only elements
            specified in the request are updated.'
          entityName: 'AdditionalNumber'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAdditionalNumber':
          summary: 'Upsert Additional Directory Number'
          description: 'Upsert an existing additional directory number only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AdditionalNumber'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AdditionalNumber'
      description: 'DeleteAdditionalNumber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAdditionalNumber':
          summary: 'Delete Additional Directory Number'
          description: 'Delete an existing additional directory number only elements
            specified in the request are deleted.'
          entityName: 'AdditionalNumber'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AggregateResult/{Id}:
    patch:
      summary: 'Update AggregateResult'
      description: 'UpdateAggregateResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAggregateResult':
          summary: 'Update Aggregate Result'
          description: 'Updates an existing aggregate result; only elements specified
            in the request are updated.'
          entityName: 'AggregateResult'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAggregateResult':
          summary: 'Upsert Aggregate Result'
          description: 'Upsert an existing aggregate result only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AggregateResult'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AggregateResult'
      description: 'DeleteAggregateResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAggregateResult':
          summary: 'Delete Aggregate Result'
          description: 'Delete an existing aggregate result only elements specified
            in the request are deleted.'
          entityName: 'AggregateResult'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Anshu__ChangeEvent/{Id}:
    patch:
      summary: 'Update Anshu__ChangeEvent'
      description: 'UpdateAnshu__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAnshu__ChangeEvent':
          summary: 'Update Change Event: Anshu Label'
          description: 'Updates an existing change event: anshu label; only elements
            specified in the request are updated.'
          entityName: 'Anshu__ChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAnshu__ChangeEvent':
          summary: 'Upsert Change Event: Anshu Label'
          description: 'Upsert an existing change event: anshu label only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Anshu__ChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Anshu__ChangeEvent'
      description: 'DeleteAnshu__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAnshu__ChangeEvent':
          summary: 'Delete Change Event: Anshu Label'
          description: 'Delete an existing change event: anshu label only elements
            specified in the request are deleted.'
          entityName: 'Anshu__ChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Anshu__c/{Id}:
    patch:
      summary: 'Update Anshu__c'
      description: 'UpdateAnshu__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAnshu__c':
          summary: 'Update Anshu Label'
          description: 'Updates an existing anshu label; only elements specified in
            the request are updated.'
          entityName: 'Anshu__c'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAnshu__c':
          summary: 'Upsert Anshu Label'
          description: 'Upsert an existing anshu label only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Anshu__c'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Anshu__c'
      description: 'DeleteAnshu__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAnshu__c':
          summary: 'Delete Anshu Label'
          description: 'Delete an existing anshu label only elements specified in
            the request are deleted.'
          entityName: 'Anshu__c'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexClass/{Id}:
    patch:
      summary: 'Update ApexClass'
      description: 'UpdateApexClass'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexClass':
          summary: 'Update Apex Class'
          description: 'Updates an existing apex class; only elements specified in
            the request are updated.'
          entityName: 'ApexClass'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexClass':
          summary: 'Upsert Apex Class'
          description: 'Upsert an existing apex class only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'ApexClass'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexClass'
      description: 'DeleteApexClass'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexClass':
          summary: 'Delete Apex Class'
          description: 'Delete an existing apex class only elements specified in the
            request are deleted.'
          entityName: 'ApexClass'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexComponent/{Id}:
    patch:
      summary: 'Update ApexComponent'
      description: 'UpdateApexComponent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexComponent':
          summary: 'Update Visualforce Component'
          description: 'Updates an existing visualforce component; only elements specified
            in the request are updated.'
          entityName: 'ApexComponent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexComponent':
          summary: 'Upsert Visualforce Component'
          description: 'Upsert an existing visualforce component only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexComponent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexComponent'
      description: 'DeleteApexComponent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexComponent':
          summary: 'Delete Visualforce Component'
          description: 'Delete an existing visualforce component only elements specified
            in the request are deleted.'
          entityName: 'ApexComponent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexEmailNotification/{Id}:
    patch:
      summary: 'Update ApexEmailNotification'
      description: 'UpdateApexEmailNotification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexEmailNotification':
          summary: 'Update Apex Email Notification'
          description: 'Updates an existing apex email notification; only elements
            specified in the request are updated.'
          entityName: 'ApexEmailNotification'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexEmailNotification':
          summary: 'Upsert Apex Email Notification'
          description: 'Upsert an existing apex email notification only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexEmailNotification'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexEmailNotification'
      description: 'DeleteApexEmailNotification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexEmailNotification':
          summary: 'Delete Apex Email Notification'
          description: 'Delete an existing apex email notification only elements specified
            in the request are deleted.'
          entityName: 'ApexEmailNotification'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexLog/{Id}:
    patch:
      summary: 'Update ApexLog'
      description: 'UpdateApexLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexLog':
          summary: 'Update Apex Debug Log'
          description: 'Updates an existing apex debug log; only elements specified
            in the request are updated.'
          entityName: 'ApexLog'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexLog':
          summary: 'Upsert Apex Debug Log'
          description: 'Upsert an existing apex debug log only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexLog'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexLog'
      description: 'DeleteApexLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexLog':
          summary: 'Delete Apex Debug Log'
          description: 'Delete an existing apex debug log only elements specified
            in the request are deleted.'
          entityName: 'ApexLog'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexPage/{Id}:
    patch:
      summary: 'Update ApexPage'
      description: 'UpdateApexPage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexPage':
          summary: 'Update Visualforce Page'
          description: 'Updates an existing visualforce page; only elements specified
            in the request are updated.'
          entityName: 'ApexPage'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexPage':
          summary: 'Upsert Visualforce Page'
          description: 'Upsert an existing visualforce page only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexPage'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexPage'
      description: 'DeleteApexPage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexPage':
          summary: 'Delete Visualforce Page'
          description: 'Delete an existing visualforce page only elements specified
            in the request are deleted.'
          entityName: 'ApexPage'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexPageInfo/{Id}:
    patch:
      summary: 'Update ApexPageInfo'
      description: 'UpdateApexPageInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexPageInfo':
          summary: 'Update Apex Page Info'
          description: 'Updates an existing apex page info; only elements specified
            in the request are updated.'
          entityName: 'ApexPageInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexPageInfo':
          summary: 'Upsert Apex Page Info'
          description: 'Upsert an existing apex page info only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexPageInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexPageInfo'
      description: 'DeleteApexPageInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexPageInfo':
          summary: 'Delete Apex Page Info'
          description: 'Delete an existing apex page info only elements specified
            in the request are deleted.'
          entityName: 'ApexPageInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestQueueItem/{Id}:
    patch:
      summary: 'Update ApexTestQueueItem'
      description: 'UpdateApexTestQueueItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTestQueueItem':
          summary: 'Update Apex Test Queue Item'
          description: 'Updates an existing apex test queue item; only elements specified
            in the request are updated.'
          entityName: 'ApexTestQueueItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestQueueItem':
          summary: 'Upsert Apex Test Queue Item'
          description: 'Upsert an existing apex test queue item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestQueueItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTestQueueItem'
      description: 'DeleteApexTestQueueItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTestQueueItem':
          summary: 'Delete Apex Test Queue Item'
          description: 'Delete an existing apex test queue item only elements specified
            in the request are deleted.'
          entityName: 'ApexTestQueueItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestResult/{Id}:
    patch:
      summary: 'Update ApexTestResult'
      description: 'UpdateApexTestResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTestResult':
          summary: 'Update Apex Test Result'
          description: 'Updates an existing apex test result; only elements specified
            in the request are updated.'
          entityName: 'ApexTestResult'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestResult':
          summary: 'Upsert Apex Test Result'
          description: 'Upsert an existing apex test result only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestResult'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTestResult'
      description: 'DeleteApexTestResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTestResult':
          summary: 'Delete Apex Test Result'
          description: 'Delete an existing apex test result only elements specified
            in the request are deleted.'
          entityName: 'ApexTestResult'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestResultLimits/{Id}:
    patch:
      summary: 'Update ApexTestResultLimits'
      description: 'UpdateApexTestResultLimits'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTestResultLimits':
          summary: 'Update Apex Test Result Limit'
          description: 'Updates an existing apex test result limit; only elements
            specified in the request are updated.'
          entityName: 'ApexTestResultLimits'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestResultLimits':
          summary: 'Upsert Apex Test Result Limit'
          description: 'Upsert an existing apex test result limit only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestResultLimits'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTestResultLimits'
      description: 'DeleteApexTestResultLimits'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTestResultLimits':
          summary: 'Delete Apex Test Result Limit'
          description: 'Delete an existing apex test result limit only elements specified
            in the request are deleted.'
          entityName: 'ApexTestResultLimits'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestRunResult/{Id}:
    patch:
      summary: 'Update ApexTestRunResult'
      description: 'UpdateApexTestRunResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTestRunResult':
          summary: 'Update Apex Test Run Result'
          description: 'Updates an existing apex test run result; only elements specified
            in the request are updated.'
          entityName: 'ApexTestRunResult'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestRunResult':
          summary: 'Upsert Apex Test Run Result'
          description: 'Upsert an existing apex test run result only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestRunResult'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTestRunResult'
      description: 'DeleteApexTestRunResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTestRunResult':
          summary: 'Delete Apex Test Run Result'
          description: 'Delete an existing apex test run result only elements specified
            in the request are deleted.'
          entityName: 'ApexTestRunResult'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTestSuite/{Id}:
    patch:
      summary: 'Update ApexTestSuite'
      description: 'UpdateApexTestSuite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTestSuite':
          summary: 'Update Apex Test Suite'
          description: 'Updates an existing apex test suite; only elements specified
            in the request are updated.'
          entityName: 'ApexTestSuite'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestSuite':
          summary: 'Upsert Apex Test Suite'
          description: 'Upsert an existing apex test suite only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestSuite'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTestSuite'
      description: 'DeleteApexTestSuite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTestSuite':
          summary: 'Delete Apex Test Suite'
          description: 'Delete an existing apex test suite only elements specified
            in the request are deleted.'
          entityName: 'ApexTestSuite'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTrigger/{Id}:
    patch:
      summary: 'Update ApexTrigger'
      description: 'UpdateApexTrigger'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTrigger':
          summary: 'Update Apex Trigger'
          description: 'Updates an existing apex trigger; only elements specified
            in the request are updated.'
          entityName: 'ApexTrigger'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTrigger':
          summary: 'Upsert Apex Trigger'
          description: 'Upsert an existing apex trigger only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTrigger'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTrigger'
      description: 'DeleteApexTrigger'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTrigger':
          summary: 'Delete Apex Trigger'
          description: 'Delete an existing apex trigger only elements specified in
            the request are deleted.'
          entityName: 'ApexTrigger'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApexTypeImplementor/{Id}:
    patch:
      summary: 'Update ApexTypeImplementor'
      description: 'UpdateApexTypeImplementor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApexTypeImplementor':
          summary: 'Update Apex Type Implementor'
          description: 'Updates an existing apex type implementor; only elements specified
            in the request are updated.'
          entityName: 'ApexTypeImplementor'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTypeImplementor':
          summary: 'Upsert Apex Type Implementor'
          description: 'Upsert an existing apex type implementor only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTypeImplementor'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApexTypeImplementor'
      description: 'DeleteApexTypeImplementor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApexTypeImplementor':
          summary: 'Delete Apex Type Implementor'
          description: 'Delete an existing apex type implementor only elements specified
            in the request are deleted.'
          entityName: 'ApexTypeImplementor'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiAnomalyEvent/{Id}:
    patch:
      summary: 'Update ApiAnomalyEvent'
      description: 'UpdateApiAnomalyEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApiAnomalyEvent':
          summary: 'Update API Anomaly Event'
          description: 'Updates an existing api anomaly event; only elements specified
            in the request are updated.'
          entityName: 'ApiAnomalyEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiAnomalyEvent':
          summary: 'Upsert API Anomaly Event'
          description: 'Upsert an existing api anomaly event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiAnomalyEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApiAnomalyEvent'
      description: 'DeleteApiAnomalyEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApiAnomalyEvent':
          summary: 'Delete API Anomaly Event'
          description: 'Delete an existing api anomaly event only elements specified
            in the request are deleted.'
          entityName: 'ApiAnomalyEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiAnomalyEventStore/{Id}:
    patch:
      summary: 'Update ApiAnomalyEventStore'
      description: 'UpdateApiAnomalyEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApiAnomalyEventStore':
          summary: 'Update API Anomaly Event Store'
          description: 'Updates an existing api anomaly event store; only elements
            specified in the request are updated.'
          entityName: 'ApiAnomalyEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiAnomalyEventStore':
          summary: 'Upsert API Anomaly Event Store'
          description: 'Upsert an existing api anomaly event store only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiAnomalyEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApiAnomalyEventStore'
      description: 'DeleteApiAnomalyEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApiAnomalyEventStore':
          summary: 'Delete API Anomaly Event Store'
          description: 'Delete an existing api anomaly event store only elements specified
            in the request are deleted.'
          entityName: 'ApiAnomalyEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiEvent/{Id}:
    patch:
      summary: 'Update ApiEvent'
      description: 'UpdateApiEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApiEvent':
          summary: 'Update API Event'
          description: 'Updates an existing api event; only elements specified in
            the request are updated.'
          entityName: 'ApiEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiEvent':
          summary: 'Upsert API Event'
          description: 'Upsert an existing api event only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'ApiEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApiEvent'
      description: 'DeleteApiEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApiEvent':
          summary: 'Delete API Event'
          description: 'Delete an existing api event only elements specified in the
            request are deleted.'
          entityName: 'ApiEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ApiEventStream/{Id}:
    patch:
      summary: 'Update ApiEventStream'
      description: 'UpdateApiEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApiEventStream':
          summary: 'Update API Event Stream'
          description: 'Updates an existing api event stream; only elements specified
            in the request are updated.'
          entityName: 'ApiEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiEventStream':
          summary: 'Upsert API Event Stream'
          description: 'Upsert an existing api event stream only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ApiEventStream'
      description: 'DeleteApiEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApiEventStream':
          summary: 'Delete API Event Stream'
          description: 'Delete an existing api event stream only elements specified
            in the request are deleted.'
          entityName: 'ApiEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppAnalyticsQueryRequest/{Id}:
    patch:
      summary: 'Update AppAnalyticsQueryRequest'
      description: 'UpdateAppAnalyticsQueryRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAppAnalyticsQueryRequest':
          summary: 'Update App Analytics Query Request'
          description: 'Updates an existing app analytics query request; only elements
            specified in the request are updated.'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppAnalyticsQueryRequest':
          summary: 'Upsert App Analytics Query Request'
          description: 'Upsert an existing app analytics query request only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AppAnalyticsQueryRequest'
      description: 'DeleteAppAnalyticsQueryRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAppAnalyticsQueryRequest':
          summary: 'Delete App Analytics Query Request'
          description: 'Delete an existing app analytics query request only elements
            specified in the request are deleted.'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppDefinition/{Id}:
    patch:
      summary: 'Update AppDefinition'
      description: 'UpdateAppDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAppDefinition':
          summary: 'Update App Definition'
          description: 'Updates an existing app definition; only elements specified
            in the request are updated.'
          entityName: 'AppDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppDefinition':
          summary: 'Upsert App Definition'
          description: 'Upsert an existing app definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AppDefinition'
      description: 'DeleteAppDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAppDefinition':
          summary: 'Delete App Definition'
          description: 'Delete an existing app definition only elements specified
            in the request are deleted.'
          entityName: 'AppDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppMenuItem/{Id}:
    patch:
      summary: 'Update AppMenuItem'
      description: 'UpdateAppMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAppMenuItem':
          summary: 'Update AppMenuItem'
          description: 'Updates an existing appmenuitem; only elements specified in
            the request are updated.'
          entityName: 'AppMenuItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppMenuItem':
          summary: 'Upsert AppMenuItem'
          description: 'Upsert an existing appmenuitem only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'AppMenuItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AppMenuItem'
      description: 'DeleteAppMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAppMenuItem':
          summary: 'Delete AppMenuItem'
          description: 'Delete an existing appmenuitem only elements specified in
            the request are deleted.'
          entityName: 'AppMenuItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AppTabMember/{Id}:
    patch:
      summary: 'Update AppTabMember'
      description: 'UpdateAppTabMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAppTabMember':
          summary: 'Update App Tab Member'
          description: 'Updates an existing app tab member; only elements specified
            in the request are updated.'
          entityName: 'AppTabMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppTabMember':
          summary: 'Upsert App Tab Member'
          description: 'Upsert an existing app tab member only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppTabMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AppTabMember'
      description: 'DeleteAppTabMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAppTabMember':
          summary: 'Delete App Tab Member'
          description: 'Delete an existing app tab member only elements specified
            in the request are deleted.'
          entityName: 'AppTabMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Approval/{Id}:
    patch:
      summary: 'Update Approval'
      description: 'UpdateApproval'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateApproval':
          summary: 'Update Approval'
          description: 'Updates an existing approval; only elements specified in the
            request are updated.'
          entityName: 'Approval'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApproval':
          summary: 'Upsert Approval'
          description: 'Upsert an existing approval only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Approval'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Approval'
      description: 'DeleteApproval'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteApproval':
          summary: 'Delete Approval'
          description: 'Delete an existing approval only elements specified in the
            request are deleted.'
          entityName: 'Approval'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Asset/{Id}:
    patch:
      summary: 'Update Asset'
      description: 'UpdateAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAsset':
          summary: 'Update Asset'
          description: 'Updates an existing asset; only elements specified in the
            request are updated.'
          entityName: 'Asset'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsset':
          summary: 'Upsert Asset'
          description: 'Upsert an existing asset only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Asset'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Asset'
      description: 'DeleteAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAsset':
          summary: 'Delete Asset'
          description: 'Delete an existing asset only elements specified in the request
            are deleted.'
          entityName: 'Asset'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetChangeEvent/{Id}:
    patch:
      summary: 'Update AssetChangeEvent'
      description: 'UpdateAssetChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAssetChangeEvent':
          summary: 'Update Asset Change Event'
          description: 'Updates an existing asset change event; only elements specified
            in the request are updated.'
          entityName: 'AssetChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetChangeEvent':
          summary: 'Upsert Asset Change Event'
          description: 'Upsert an existing asset change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AssetChangeEvent'
      description: 'DeleteAssetChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAssetChangeEvent':
          summary: 'Delete Asset Change Event'
          description: 'Delete an existing asset change event only elements specified
            in the request are deleted.'
          entityName: 'AssetChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetHistory/{Id}:
    patch:
      summary: 'Update AssetHistory'
      description: 'UpdateAssetHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAssetHistory':
          summary: 'Update Asset History'
          description: 'Updates an existing asset history; only elements specified
            in the request are updated.'
          entityName: 'AssetHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetHistory':
          summary: 'Upsert Asset History'
          description: 'Upsert an existing asset history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AssetHistory'
      description: 'DeleteAssetHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAssetHistory':
          summary: 'Delete Asset History'
          description: 'Delete an existing asset history only elements specified in
            the request are deleted.'
          entityName: 'AssetHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetRelationship/{Id}:
    patch:
      summary: 'Update AssetRelationship'
      description: 'UpdateAssetRelationship'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAssetRelationship':
          summary: 'Update Asset Relationship'
          description: 'Updates an existing asset relationship; only elements specified
            in the request are updated.'
          entityName: 'AssetRelationship'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetRelationship':
          summary: 'Upsert Asset Relationship'
          description: 'Upsert an existing asset relationship only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetRelationship'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AssetRelationship'
      description: 'DeleteAssetRelationship'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAssetRelationship':
          summary: 'Delete Asset Relationship'
          description: 'Delete an existing asset relationship only elements specified
            in the request are deleted.'
          entityName: 'AssetRelationship'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetRelationshipHistory/{Id}:
    patch:
      summary: 'Update AssetRelationshipHistory'
      description: 'UpdateAssetRelationshipHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAssetRelationshipHistory':
          summary: 'Update Asset Relationship History'
          description: 'Updates an existing asset relationship history; only elements
            specified in the request are updated.'
          entityName: 'AssetRelationshipHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetRelationshipHistory':
          summary: 'Upsert Asset Relationship History'
          description: 'Upsert an existing asset relationship history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetRelationshipHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AssetRelationshipHistory'
      description: 'DeleteAssetRelationshipHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAssetRelationshipHistory':
          summary: 'Delete Asset Relationship History'
          description: 'Delete an existing asset relationship history only elements
            specified in the request are deleted.'
          entityName: 'AssetRelationshipHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssetTokenEvent/{Id}:
    patch:
      summary: 'Update AssetTokenEvent'
      description: 'UpdateAssetTokenEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAssetTokenEvent':
          summary: 'Update Asset Token Event'
          description: 'Updates an existing asset token event; only elements specified
            in the request are updated.'
          entityName: 'AssetTokenEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetTokenEvent':
          summary: 'Upsert Asset Token Event'
          description: 'Upsert an existing asset token event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetTokenEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AssetTokenEvent'
      description: 'DeleteAssetTokenEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAssetTokenEvent':
          summary: 'Delete Asset Token Event'
          description: 'Delete an existing asset token event only elements specified
            in the request are deleted.'
          entityName: 'AssetTokenEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AssignmentRule/{Id}:
    patch:
      summary: 'Update AssignmentRule'
      description: 'UpdateAssignmentRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAssignmentRule':
          summary: 'Update Assignment Rule'
          description: 'Updates an existing assignment rule; only elements specified
            in the request are updated.'
          entityName: 'AssignmentRule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssignmentRule':
          summary: 'Upsert Assignment Rule'
          description: 'Upsert an existing assignment rule only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssignmentRule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AssignmentRule'
      description: 'DeleteAssignmentRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAssignmentRule':
          summary: 'Delete Assignment Rule'
          description: 'Delete an existing assignment rule only elements specified
            in the request are deleted.'
          entityName: 'AssignmentRule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AsyncApexJob/{Id}:
    patch:
      summary: 'Update AsyncApexJob'
      description: 'UpdateAsyncApexJob'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAsyncApexJob':
          summary: 'Update Apex Job'
          description: 'Updates an existing apex job; only elements specified in the
            request are updated.'
          entityName: 'AsyncApexJob'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsyncApexJob':
          summary: 'Upsert Apex Job'
          description: 'Upsert an existing apex job only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncApexJob'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AsyncApexJob'
      description: 'DeleteAsyncApexJob'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAsyncApexJob':
          summary: 'Delete Apex Job'
          description: 'Delete an existing apex job only elements specified in the
            request are deleted.'
          entityName: 'AsyncApexJob'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AsyncOperationEvent/{Id}:
    patch:
      summary: 'Update AsyncOperationEvent'
      description: 'UpdateAsyncOperationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAsyncOperationEvent':
          summary: 'Update Async Operation Event'
          description: 'Updates an existing async operation event; only elements specified
            in the request are updated.'
          entityName: 'AsyncOperationEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsyncOperationEvent':
          summary: 'Upsert Async Operation Event'
          description: 'Upsert an existing async operation event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncOperationEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AsyncOperationEvent'
      description: 'DeleteAsyncOperationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAsyncOperationEvent':
          summary: 'Delete Async Operation Event'
          description: 'Delete an existing async operation event only elements specified
            in the request are deleted.'
          entityName: 'AsyncOperationEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AsyncOperationStatus/{Id}:
    patch:
      summary: 'Update AsyncOperationStatus'
      description: 'UpdateAsyncOperationStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAsyncOperationStatus':
          summary: 'Update Async Operation Status'
          description: 'Updates an existing async operation status; only elements
            specified in the request are updated.'
          entityName: 'AsyncOperationStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsyncOperationStatus':
          summary: 'Upsert Async Operation Status'
          description: 'Upsert an existing async operation status only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncOperationStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AsyncOperationStatus'
      description: 'DeleteAsyncOperationStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAsyncOperationStatus':
          summary: 'Delete Async Operation Status'
          description: 'Delete an existing async operation status only elements specified
            in the request are deleted.'
          entityName: 'AsyncOperationStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AttachedContentDocument/{Id}:
    patch:
      summary: 'Update AttachedContentDocument'
      description: 'UpdateAttachedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAttachedContentDocument':
          summary: 'Update Attached Content Document'
          description: 'Updates an existing attached content document; only elements
            specified in the request are updated.'
          entityName: 'AttachedContentDocument'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAttachedContentDocument':
          summary: 'Upsert Attached Content Document'
          description: 'Upsert an existing attached content document only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AttachedContentDocument'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AttachedContentDocument'
      description: 'DeleteAttachedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAttachedContentDocument':
          summary: 'Delete Attached Content Document'
          description: 'Delete an existing attached content document only elements
            specified in the request are deleted.'
          entityName: 'AttachedContentDocument'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AttachedContentNote/{Id}:
    patch:
      summary: 'Update AttachedContentNote'
      description: 'UpdateAttachedContentNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAttachedContentNote':
          summary: 'Update Note'
          description: 'Updates an existing note; only elements specified in the request
            are updated.'
          entityName: 'AttachedContentNote'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAttachedContentNote':
          summary: 'Upsert Note'
          description: 'Upsert an existing note only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'AttachedContentNote'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AttachedContentNote'
      description: 'DeleteAttachedContentNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAttachedContentNote':
          summary: 'Delete Note'
          description: 'Delete an existing note only elements specified in the request
            are deleted.'
          entityName: 'AttachedContentNote'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Attachment/{Id}:
    patch:
      summary: 'Update Attachment'
      description: 'UpdateAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAttachment':
          summary: 'Update Attachment'
          description: 'Updates an existing attachment; only elements specified in
            the request are updated.'
          entityName: 'Attachment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAttachment':
          summary: 'Upsert Attachment'
          description: 'Upsert an existing attachment only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Attachment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Attachment'
      description: 'DeleteAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAttachment':
          summary: 'Delete Attachment'
          description: 'Delete an existing attachment only elements specified in the
            request are deleted.'
          entityName: 'Attachment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinition/{Id}:
    patch:
      summary: 'Update AuraDefinition'
      description: 'UpdateAuraDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuraDefinition':
          summary: 'Update Lightning Component Definition'
          description: 'Updates an existing lightning component definition; only elements
            specified in the request are updated.'
          entityName: 'AuraDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinition':
          summary: 'Upsert Lightning Component Definition'
          description: 'Upsert an existing lightning component definition only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuraDefinition'
      description: 'DeleteAuraDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuraDefinition':
          summary: 'Delete Lightning Component Definition'
          description: 'Delete an existing lightning component definition only elements
            specified in the request are deleted.'
          entityName: 'AuraDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinitionBundle/{Id}:
    patch:
      summary: 'Update AuraDefinitionBundle'
      description: 'UpdateAuraDefinitionBundle'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuraDefinitionBundle':
          summary: 'Update Aura Component Bundle'
          description: 'Updates an existing aura component bundle; only elements specified
            in the request are updated.'
          entityName: 'AuraDefinitionBundle'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionBundle':
          summary: 'Upsert Aura Component Bundle'
          description: 'Upsert an existing aura component bundle only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionBundle'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuraDefinitionBundle'
      description: 'DeleteAuraDefinitionBundle'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuraDefinitionBundle':
          summary: 'Delete Aura Component Bundle'
          description: 'Delete an existing aura component bundle only elements specified
            in the request are deleted.'
          entityName: 'AuraDefinitionBundle'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinitionBundleInfo/{Id}:
    patch:
      summary: 'Update AuraDefinitionBundleInfo'
      description: 'UpdateAuraDefinitionBundleInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuraDefinitionBundleInfo':
          summary: 'Update AuraDefinitionBundle Info'
          description: 'Updates an existing auradefinitionbundle info; only elements
            specified in the request are updated.'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionBundleInfo':
          summary: 'Upsert AuraDefinitionBundle Info'
          description: 'Upsert an existing auradefinitionbundle info only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuraDefinitionBundleInfo'
      description: 'DeleteAuraDefinitionBundleInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuraDefinitionBundleInfo':
          summary: 'Delete AuraDefinitionBundle Info'
          description: 'Delete an existing auradefinitionbundle info only elements
            specified in the request are deleted.'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuraDefinitionInfo/{Id}:
    patch:
      summary: 'Update AuraDefinitionInfo'
      description: 'UpdateAuraDefinitionInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuraDefinitionInfo':
          summary: 'Update AuraDefinition Info'
          description: 'Updates an existing auradefinition info; only elements specified
            in the request are updated.'
          entityName: 'AuraDefinitionInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionInfo':
          summary: 'Upsert AuraDefinition Info'
          description: 'Upsert an existing auradefinition info only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuraDefinitionInfo'
      description: 'DeleteAuraDefinitionInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuraDefinitionInfo':
          summary: 'Delete AuraDefinition Info'
          description: 'Delete an existing auradefinition info only elements specified
            in the request are deleted.'
          entityName: 'AuraDefinitionInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthConfig/{Id}:
    patch:
      summary: 'Update AuthConfig'
      description: 'UpdateAuthConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthConfig':
          summary: 'Update Authentication Configuration'
          description: 'Updates an existing authentication configuration; only elements
            specified in the request are updated.'
          entityName: 'AuthConfig'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthConfig':
          summary: 'Upsert Authentication Configuration'
          description: 'Upsert an existing authentication configuration only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthConfig'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthConfig'
      description: 'DeleteAuthConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthConfig':
          summary: 'Delete Authentication Configuration'
          description: 'Delete an existing authentication configuration only elements
            specified in the request are deleted.'
          entityName: 'AuthConfig'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthConfigProviders/{Id}:
    patch:
      summary: 'Update AuthConfigProviders'
      description: 'UpdateAuthConfigProviders'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthConfigProviders':
          summary: 'Update Authentication Configuration Auth. Provider'
          description: 'Updates an existing authentication configuration auth. provider;
            only elements specified in the request are updated.'
          entityName: 'AuthConfigProviders'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthConfigProviders':
          summary: 'Upsert Authentication Configuration Auth. Provider'
          description: 'Upsert an existing authentication configuration auth. provider
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthConfigProviders'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthConfigProviders'
      description: 'DeleteAuthConfigProviders'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthConfigProviders':
          summary: 'Delete Authentication Configuration Auth. Provider'
          description: 'Delete an existing authentication configuration auth. provider
            only elements specified in the request are deleted.'
          entityName: 'AuthConfigProviders'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthProvider/{Id}:
    patch:
      summary: 'Update AuthProvider'
      description: 'UpdateAuthProvider'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthProvider':
          summary: 'Update Auth. Provider'
          description: 'Updates an existing auth. provider; only elements specified
            in the request are updated.'
          entityName: 'AuthProvider'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthProvider':
          summary: 'Upsert Auth. Provider'
          description: 'Upsert an existing auth. provider only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthProvider'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthProvider'
      description: 'DeleteAuthProvider'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthProvider':
          summary: 'Delete Auth. Provider'
          description: 'Delete an existing auth. provider only elements specified
            in the request are deleted.'
          entityName: 'AuthProvider'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthSession/{Id}:
    patch:
      summary: 'Update AuthSession'
      description: 'UpdateAuthSession'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthSession':
          summary: 'Update Auth Session'
          description: 'Updates an existing auth session; only elements specified
            in the request are updated.'
          entityName: 'AuthSession'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthSession':
          summary: 'Upsert Auth Session'
          description: 'Upsert an existing auth session only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthSession'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthSession'
      description: 'DeleteAuthSession'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthSession':
          summary: 'Delete Auth Session'
          description: 'Delete an existing auth session only elements specified in
            the request are deleted.'
          entityName: 'AuthSession'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationForm/{Id}:
    patch:
      summary: 'Update AuthorizationForm'
      description: 'UpdateAuthorizationForm'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationForm':
          summary: 'Update Authorization Form'
          description: 'Updates an existing authorization form; only elements specified
            in the request are updated.'
          entityName: 'AuthorizationForm'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationForm':
          summary: 'Upsert Authorization Form'
          description: 'Upsert an existing authorization form only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationForm'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationForm'
      description: 'DeleteAuthorizationForm'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationForm':
          summary: 'Delete Authorization Form'
          description: 'Delete an existing authorization form only elements specified
            in the request are deleted.'
          entityName: 'AuthorizationForm'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsent/{Id}:
    patch:
      summary: 'Update AuthorizationFormConsent'
      description: 'UpdateAuthorizationFormConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormConsent':
          summary: 'Update Authorization Form Consent'
          description: 'Updates an existing authorization form consent; only elements
            specified in the request are updated.'
          entityName: 'AuthorizationFormConsent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsent':
          summary: 'Upsert Authorization Form Consent'
          description: 'Upsert an existing authorization form consent only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormConsent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormConsent'
      description: 'DeleteAuthorizationFormConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormConsent':
          summary: 'Delete Authorization Form Consent'
          description: 'Delete an existing authorization form consent only elements
            specified in the request are deleted.'
          entityName: 'AuthorizationFormConsent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsentChangeEvent/{Id}:
    patch:
      summary: 'Update AuthorizationFormConsentChangeEvent'
      description: 'UpdateAuthorizationFormConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormConsentChangeEvent':
          summary: 'Update Authorization Form Consent Change Event'
          description: 'Updates an existing authorization form consent change event;
            only elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentChangeEvent':
          summary: 'Upsert Authorization Form Consent Change Event'
          description: 'Upsert an existing authorization form consent change event
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormConsentChangeEvent'
      description: 'DeleteAuthorizationFormConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormConsentChangeEvent':
          summary: 'Delete Authorization Form Consent Change Event'
          description: 'Delete an existing authorization form consent change event
            only elements specified in the request are deleted.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsentHistory/{Id}:
    patch:
      summary: 'Update AuthorizationFormConsentHistory'
      description: 'UpdateAuthorizationFormConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormConsentHistory':
          summary: 'Update Authorization Form Consent History'
          description: 'Updates an existing authorization form consent history; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentHistory':
          summary: 'Upsert Authorization Form Consent History'
          description: 'Upsert an existing authorization form consent history only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormConsentHistory'
      description: 'DeleteAuthorizationFormConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormConsentHistory':
          summary: 'Delete Authorization Form Consent History'
          description: 'Delete an existing authorization form consent history only
            elements specified in the request are deleted.'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormConsentShare/{Id}:
    patch:
      summary: 'Update AuthorizationFormConsentShare'
      description: 'UpdateAuthorizationFormConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormConsentShare':
          summary: 'Update Authorization Form Consent Share'
          description: 'Updates an existing authorization form consent share; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentShare':
          summary: 'Upsert Authorization Form Consent Share'
          description: 'Upsert an existing authorization form consent share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormConsentShare'
      description: 'DeleteAuthorizationFormConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormConsentShare':
          summary: 'Delete Authorization Form Consent Share'
          description: 'Delete an existing authorization form consent share only elements
            specified in the request are deleted.'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormDataUse/{Id}:
    patch:
      summary: 'Update AuthorizationFormDataUse'
      description: 'UpdateAuthorizationFormDataUse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormDataUse':
          summary: 'Update Authorization Form Data Use'
          description: 'Updates an existing authorization form data use; only elements
            specified in the request are updated.'
          entityName: 'AuthorizationFormDataUse'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormDataUse':
          summary: 'Upsert Authorization Form Data Use'
          description: 'Upsert an existing authorization form data use only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormDataUse'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormDataUse'
      description: 'DeleteAuthorizationFormDataUse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormDataUse':
          summary: 'Delete Authorization Form Data Use'
          description: 'Delete an existing authorization form data use only elements
            specified in the request are deleted.'
          entityName: 'AuthorizationFormDataUse'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormDataUseHistory/{Id}:
    patch:
      summary: 'Update AuthorizationFormDataUseHistory'
      description: 'UpdateAuthorizationFormDataUseHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormDataUseHistory':
          summary: 'Update Authorization Form Data Use History'
          description: 'Updates an existing authorization form data use history; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormDataUseHistory':
          summary: 'Upsert Authorization Form Data Use History'
          description: 'Upsert an existing authorization form data use history only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormDataUseHistory'
      description: 'DeleteAuthorizationFormDataUseHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormDataUseHistory':
          summary: 'Delete Authorization Form Data Use History'
          description: 'Delete an existing authorization form data use history only
            elements specified in the request are deleted.'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormDataUseShare/{Id}:
    patch:
      summary: 'Update AuthorizationFormDataUseShare'
      description: 'UpdateAuthorizationFormDataUseShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormDataUseShare':
          summary: 'Update Authorization Form Data Use Share'
          description: 'Updates an existing authorization form data use share; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormDataUseShare':
          summary: 'Upsert Authorization Form Data Use Share'
          description: 'Upsert an existing authorization form data use share only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormDataUseShare'
      description: 'DeleteAuthorizationFormDataUseShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormDataUseShare':
          summary: 'Delete Authorization Form Data Use Share'
          description: 'Delete an existing authorization form data use share only
            elements specified in the request are deleted.'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormHistory/{Id}:
    patch:
      summary: 'Update AuthorizationFormHistory'
      description: 'UpdateAuthorizationFormHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormHistory':
          summary: 'Update Authorization Form History'
          description: 'Updates an existing authorization form history; only elements
            specified in the request are updated.'
          entityName: 'AuthorizationFormHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormHistory':
          summary: 'Upsert Authorization Form History'
          description: 'Upsert an existing authorization form history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormHistory'
      description: 'DeleteAuthorizationFormHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormHistory':
          summary: 'Delete Authorization Form History'
          description: 'Delete an existing authorization form history only elements
            specified in the request are deleted.'
          entityName: 'AuthorizationFormHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormShare/{Id}:
    patch:
      summary: 'Update AuthorizationFormShare'
      description: 'UpdateAuthorizationFormShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormShare':
          summary: 'Update Authorization Form Share'
          description: 'Updates an existing authorization form share; only elements
            specified in the request are updated.'
          entityName: 'AuthorizationFormShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormShare':
          summary: 'Upsert Authorization Form Share'
          description: 'Upsert an existing authorization form share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormShare'
      description: 'DeleteAuthorizationFormShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormShare':
          summary: 'Delete Authorization Form Share'
          description: 'Delete an existing authorization form share only elements
            specified in the request are deleted.'
          entityName: 'AuthorizationFormShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormText/{Id}:
    patch:
      summary: 'Update AuthorizationFormText'
      description: 'UpdateAuthorizationFormText'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormText':
          summary: 'Update Authorization Form Text'
          description: 'Updates an existing authorization form text; only elements
            specified in the request are updated.'
          entityName: 'AuthorizationFormText'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormText':
          summary: 'Upsert Authorization Form Text'
          description: 'Upsert an existing authorization form text only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormText'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormText'
      description: 'DeleteAuthorizationFormText'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormText':
          summary: 'Delete Authorization Form Text'
          description: 'Delete an existing authorization form text only elements specified
            in the request are deleted.'
          entityName: 'AuthorizationFormText'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/AuthorizationFormTextHistory/{Id}:
    patch:
      summary: 'Update AuthorizationFormTextHistory'
      description: 'UpdateAuthorizationFormTextHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateAuthorizationFormTextHistory':
          summary: 'Update Authorization Form Text History'
          description: 'Updates an existing authorization form text history; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormTextHistory':
          summary: 'Upsert Authorization Form Text History'
          description: 'Upsert an existing authorization form text history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete AuthorizationFormTextHistory'
      description: 'DeleteAuthorizationFormTextHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteAuthorizationFormTextHistory':
          summary: 'Delete Authorization Form Text History'
          description: 'Delete an existing authorization form text history only elements
            specified in the request are deleted.'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BackgroundOperation/{Id}:
    patch:
      summary: 'Update BackgroundOperation'
      description: 'UpdateBackgroundOperation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBackgroundOperation':
          summary: 'Update Background Operation'
          description: 'Updates an existing background operation; only elements specified
            in the request are updated.'
          entityName: 'BackgroundOperation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBackgroundOperation':
          summary: 'Upsert Background Operation'
          description: 'Upsert an existing background operation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BackgroundOperation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BackgroundOperation'
      description: 'DeleteBackgroundOperation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBackgroundOperation':
          summary: 'Delete Background Operation'
          description: 'Delete an existing background operation only elements specified
            in the request are deleted.'
          entityName: 'BackgroundOperation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BatchApexErrorEvent/{Id}:
    patch:
      summary: 'Update BatchApexErrorEvent'
      description: 'UpdateBatchApexErrorEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBatchApexErrorEvent':
          summary: 'Update Batch Apex Error Platform Event'
          description: 'Updates an existing batch apex error platform event; only
            elements specified in the request are updated.'
          entityName: 'BatchApexErrorEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBatchApexErrorEvent':
          summary: 'Upsert Batch Apex Error Platform Event'
          description: 'Upsert an existing batch apex error platform event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BatchApexErrorEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BatchApexErrorEvent'
      description: 'DeleteBatchApexErrorEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBatchApexErrorEvent':
          summary: 'Delete Batch Apex Error Platform Event'
          description: 'Delete an existing batch apex error platform event only elements
            specified in the request are deleted.'
          entityName: 'BatchApexErrorEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BrandTemplate/{Id}:
    patch:
      summary: 'Update BrandTemplate'
      description: 'UpdateBrandTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBrandTemplate':
          summary: 'Update Letterhead'
          description: 'Updates an existing letterhead; only elements specified in
            the request are updated.'
          entityName: 'BrandTemplate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBrandTemplate':
          summary: 'Upsert Letterhead'
          description: 'Upsert an existing letterhead only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'BrandTemplate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BrandTemplate'
      description: 'DeleteBrandTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBrandTemplate':
          summary: 'Delete Letterhead'
          description: 'Delete an existing letterhead only elements specified in the
            request are deleted.'
          entityName: 'BrandTemplate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BrandingSet/{Id}:
    patch:
      summary: 'Update BrandingSet'
      description: 'UpdateBrandingSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBrandingSet':
          summary: 'Update Branding Set'
          description: 'Updates an existing branding set; only elements specified
            in the request are updated.'
          entityName: 'BrandingSet'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBrandingSet':
          summary: 'Upsert Branding Set'
          description: 'Upsert an existing branding set only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandingSet'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BrandingSet'
      description: 'DeleteBrandingSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBrandingSet':
          summary: 'Delete Branding Set'
          description: 'Delete an existing branding set only elements specified in
            the request are deleted.'
          entityName: 'BrandingSet'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BrandingSetProperty/{Id}:
    patch:
      summary: 'Update BrandingSetProperty'
      description: 'UpdateBrandingSetProperty'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBrandingSetProperty':
          summary: 'Update Branding Set Property'
          description: 'Updates an existing branding set property; only elements specified
            in the request are updated.'
          entityName: 'BrandingSetProperty'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBrandingSetProperty':
          summary: 'Upsert Branding Set Property'
          description: 'Upsert an existing branding set property only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandingSetProperty'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BrandingSetProperty'
      description: 'DeleteBrandingSetProperty'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBrandingSetProperty':
          summary: 'Delete Branding Set Property'
          description: 'Delete an existing branding set property only elements specified
            in the request are deleted.'
          entityName: 'BrandingSetProperty'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseAssignment/{Id}:
    patch:
      summary: 'Update BriefcaseAssignment'
      description: 'UpdateBriefcaseAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBriefcaseAssignment':
          summary: 'Update Briefcase Assignment'
          description: 'Updates an existing briefcase assignment; only elements specified
            in the request are updated.'
          entityName: 'BriefcaseAssignment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseAssignment':
          summary: 'Upsert Briefcase Assignment'
          description: 'Upsert an existing briefcase assignment only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseAssignment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BriefcaseAssignment'
      description: 'DeleteBriefcaseAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBriefcaseAssignment':
          summary: 'Delete Briefcase Assignment'
          description: 'Delete an existing briefcase assignment only elements specified
            in the request are deleted.'
          entityName: 'BriefcaseAssignment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseAssignmentChangeEvent/{Id}:
    patch:
      summary: 'Update BriefcaseAssignmentChangeEvent'
      description: 'UpdateBriefcaseAssignmentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBriefcaseAssignmentChangeEvent':
          summary: 'Update Briefcase Assignment Change Event'
          description: 'Updates an existing briefcase assignment change event; only
            elements specified in the request are updated.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseAssignmentChangeEvent':
          summary: 'Upsert Briefcase Assignment Change Event'
          description: 'Upsert an existing briefcase assignment change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BriefcaseAssignmentChangeEvent'
      description: 'DeleteBriefcaseAssignmentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBriefcaseAssignmentChangeEvent':
          summary: 'Delete Briefcase Assignment Change Event'
          description: 'Delete an existing briefcase assignment change event only
            elements specified in the request are deleted.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseDefinition/{Id}:
    patch:
      summary: 'Update BriefcaseDefinition'
      description: 'UpdateBriefcaseDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBriefcaseDefinition':
          summary: 'Update Briefcase Definition'
          description: 'Updates an existing briefcase definition; only elements specified
            in the request are updated.'
          entityName: 'BriefcaseDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseDefinition':
          summary: 'Upsert Briefcase Definition'
          description: 'Upsert an existing briefcase definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BriefcaseDefinition'
      description: 'DeleteBriefcaseDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBriefcaseDefinition':
          summary: 'Delete Briefcase Definition'
          description: 'Delete an existing briefcase definition only elements specified
            in the request are deleted.'
          entityName: 'BriefcaseDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseDefinitionChangeEvent/{Id}:
    patch:
      summary: 'Update BriefcaseDefinitionChangeEvent'
      description: 'UpdateBriefcaseDefinitionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBriefcaseDefinitionChangeEvent':
          summary: 'Update Briefcase Definition Change Event'
          description: 'Updates an existing briefcase definition change event; only
            elements specified in the request are updated.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseDefinitionChangeEvent':
          summary: 'Upsert Briefcase Definition Change Event'
          description: 'Upsert an existing briefcase definition change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BriefcaseDefinitionChangeEvent'
      description: 'DeleteBriefcaseDefinitionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBriefcaseDefinitionChangeEvent':
          summary: 'Delete Briefcase Definition Change Event'
          description: 'Delete an existing briefcase definition change event only
            elements specified in the request are deleted.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseRule/{Id}:
    patch:
      summary: 'Update BriefcaseRule'
      description: 'UpdateBriefcaseRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBriefcaseRule':
          summary: 'Update Briefcase Rule'
          description: 'Updates an existing briefcase rule; only elements specified
            in the request are updated.'
          entityName: 'BriefcaseRule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseRule':
          summary: 'Upsert Briefcase Rule'
          description: 'Upsert an existing briefcase rule only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseRule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BriefcaseRule'
      description: 'DeleteBriefcaseRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBriefcaseRule':
          summary: 'Delete Briefcase Rule'
          description: 'Delete an existing briefcase rule only elements specified
            in the request are deleted.'
          entityName: 'BriefcaseRule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BriefcaseRuleFilter/{Id}:
    patch:
      summary: 'Update BriefcaseRuleFilter'
      description: 'UpdateBriefcaseRuleFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBriefcaseRuleFilter':
          summary: 'Update Briefcase Rule Filter'
          description: 'Updates an existing briefcase rule filter; only elements specified
            in the request are updated.'
          entityName: 'BriefcaseRuleFilter'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseRuleFilter':
          summary: 'Upsert Briefcase Rule Filter'
          description: 'Upsert an existing briefcase rule filter only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseRuleFilter'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BriefcaseRuleFilter'
      description: 'DeleteBriefcaseRuleFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBriefcaseRuleFilter':
          summary: 'Delete Briefcase Rule Filter'
          description: 'Delete an existing briefcase rule filter only elements specified
            in the request are deleted.'
          entityName: 'BriefcaseRuleFilter'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BulkApiResultEvent/{Id}:
    patch:
      summary: 'Update BulkApiResultEvent'
      description: 'UpdateBulkApiResultEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBulkApiResultEvent':
          summary: 'Update Bulk API Result Event'
          description: 'Updates an existing bulk api result event; only elements specified
            in the request are updated.'
          entityName: 'BulkApiResultEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBulkApiResultEvent':
          summary: 'Upsert Bulk API Result Event'
          description: 'Upsert an existing bulk api result event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BulkApiResultEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BulkApiResultEvent'
      description: 'DeleteBulkApiResultEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBulkApiResultEvent':
          summary: 'Delete Bulk API Result Event'
          description: 'Delete an existing bulk api result event only elements specified
            in the request are deleted.'
          entityName: 'BulkApiResultEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BulkApiResultEventStore/{Id}:
    patch:
      summary: 'Update BulkApiResultEventStore'
      description: 'UpdateBulkApiResultEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBulkApiResultEventStore':
          summary: 'Update Bulk API Result Event Store'
          description: 'Updates an existing bulk api result event store; only elements
            specified in the request are updated.'
          entityName: 'BulkApiResultEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBulkApiResultEventStore':
          summary: 'Upsert Bulk API Result Event Store'
          description: 'Upsert an existing bulk api result event store only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BulkApiResultEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BulkApiResultEventStore'
      description: 'DeleteBulkApiResultEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBulkApiResultEventStore':
          summary: 'Delete Bulk API Result Event Store'
          description: 'Delete an existing bulk api result event store only elements
            specified in the request are deleted.'
          entityName: 'BulkApiResultEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessBrand/{Id}:
    patch:
      summary: 'Update BusinessBrand'
      description: 'UpdateBusinessBrand'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBusinessBrand':
          summary: 'Update Business Brand'
          description: 'Updates an existing business brand; only elements specified
            in the request are updated.'
          entityName: 'BusinessBrand'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessBrand':
          summary: 'Upsert Business Brand'
          description: 'Upsert an existing business brand only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessBrand'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BusinessBrand'
      description: 'DeleteBusinessBrand'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBusinessBrand':
          summary: 'Delete Business Brand'
          description: 'Delete an existing business brand only elements specified
            in the request are deleted.'
          entityName: 'BusinessBrand'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessBrandShare/{Id}:
    patch:
      summary: 'Update BusinessBrandShare'
      description: 'UpdateBusinessBrandShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBusinessBrandShare':
          summary: 'Update Business Brand Share'
          description: 'Updates an existing business brand share; only elements specified
            in the request are updated.'
          entityName: 'BusinessBrandShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessBrandShare':
          summary: 'Upsert Business Brand Share'
          description: 'Upsert an existing business brand share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessBrandShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BusinessBrandShare'
      description: 'DeleteBusinessBrandShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBusinessBrandShare':
          summary: 'Delete Business Brand Share'
          description: 'Delete an existing business brand share only elements specified
            in the request are deleted.'
          entityName: 'BusinessBrandShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessHours/{Id}:
    patch:
      summary: 'Update BusinessHours'
      description: 'UpdateBusinessHours'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBusinessHours':
          summary: 'Update Business Hours'
          description: 'Updates an existing business hours; only elements specified
            in the request are updated.'
          entityName: 'BusinessHours'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessHours':
          summary: 'Upsert Business Hours'
          description: 'Upsert an existing business hours only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessHours'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BusinessHours'
      description: 'DeleteBusinessHours'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBusinessHours':
          summary: 'Delete Business Hours'
          description: 'Delete an existing business hours only elements specified
            in the request are deleted.'
          entityName: 'BusinessHours'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/BusinessProcess/{Id}:
    patch:
      summary: 'Update BusinessProcess'
      description: 'UpdateBusinessProcess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateBusinessProcess':
          summary: 'Update Business Process'
          description: 'Updates an existing business process; only elements specified
            in the request are updated.'
          entityName: 'BusinessProcess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessProcess':
          summary: 'Upsert Business Process'
          description: 'Upsert an existing business process only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessProcess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete BusinessProcess'
      description: 'DeleteBusinessProcess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteBusinessProcess':
          summary: 'Delete Business Process'
          description: 'Delete an existing business process only elements specified
            in the request are deleted.'
          entityName: 'BusinessProcess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CE_SSD_Client_c__ChangeEvent/{Id}:
    patch:
      summary: 'Update CE_SSD_Client_c__ChangeEvent'
      description: 'UpdateCE_SSD_Client_c__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCE_SSD_Client_c__ChangeEvent':
          summary: 'Update Change Event: CE_SSD_Client__c'
          description: 'Updates an existing change event: ce_ssd_client__c; only elements
            specified in the request are updated.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCE_SSD_Client_c__ChangeEvent':
          summary: 'Upsert Change Event: CE_SSD_Client__c'
          description: 'Upsert an existing change event: ce_ssd_client__c only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CE_SSD_Client_c__ChangeEvent'
      description: 'DeleteCE_SSD_Client_c__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCE_SSD_Client_c__ChangeEvent':
          summary: 'Delete Change Event: CE_SSD_Client__c'
          description: 'Delete an existing change event: ce_ssd_client__c only elements
            specified in the request are deleted.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CE_SSD_Client_c__c/{Id}:
    patch:
      summary: 'Update CE_SSD_Client_c__c'
      description: 'UpdateCE_SSD_Client_c__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCE_SSD_Client_c__c':
          summary: 'Update CE_SSD_Client__c'
          description: 'Updates an existing ce_ssd_client__c; only elements specified
            in the request are updated.'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCE_SSD_Client_c__c':
          summary: 'Upsert CE_SSD_Client__c'
          description: 'Upsert an existing ce_ssd_client__c only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CE_SSD_Client_c__c'
      description: 'DeleteCE_SSD_Client_c__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCE_SSD_Client_c__c':
          summary: 'Delete CE_SSD_Client__c'
          description: 'Delete an existing ce_ssd_client__c only elements specified
            in the request are deleted.'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Calendar/{Id}:
    patch:
      summary: 'Update Calendar'
      description: 'UpdateCalendar'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCalendar':
          summary: 'Update Calendar'
          description: 'Updates an existing calendar; only elements specified in the
            request are updated.'
          entityName: 'Calendar'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCalendar':
          summary: 'Upsert Calendar'
          description: 'Upsert an existing calendar only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Calendar'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Calendar'
      description: 'DeleteCalendar'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCalendar':
          summary: 'Delete Calendar'
          description: 'Delete an existing calendar only elements specified in the
            request are deleted.'
          entityName: 'Calendar'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CalendarView/{Id}:
    patch:
      summary: 'Update CalendarView'
      description: 'UpdateCalendarView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCalendarView':
          summary: 'Update Calendar'
          description: 'Updates an existing calendar; only elements specified in the
            request are updated.'
          entityName: 'CalendarView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCalendarView':
          summary: 'Upsert Calendar'
          description: 'Upsert an existing calendar only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'CalendarView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CalendarView'
      description: 'DeleteCalendarView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCalendarView':
          summary: 'Delete Calendar'
          description: 'Delete an existing calendar only elements specified in the
            request are deleted.'
          entityName: 'CalendarView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CalendarViewShare/{Id}:
    patch:
      summary: 'Update CalendarViewShare'
      description: 'UpdateCalendarViewShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCalendarViewShare':
          summary: 'Update Calendar Share'
          description: 'Updates an existing calendar share; only elements specified
            in the request are updated.'
          entityName: 'CalendarViewShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCalendarViewShare':
          summary: 'Upsert Calendar Share'
          description: 'Upsert an existing calendar share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CalendarViewShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CalendarViewShare'
      description: 'DeleteCalendarViewShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCalendarViewShare':
          summary: 'Delete Calendar Share'
          description: 'Delete an existing calendar share only elements specified
            in the request are deleted.'
          entityName: 'CalendarViewShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CallCenter/{Id}:
    patch:
      summary: 'Update CallCenter'
      description: 'UpdateCallCenter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCallCenter':
          summary: 'Update Call Center'
          description: 'Updates an existing call center; only elements specified in
            the request are updated.'
          entityName: 'CallCenter'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCallCenter':
          summary: 'Upsert Call Center'
          description: 'Upsert an existing call center only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CallCenter'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CallCenter'
      description: 'DeleteCallCenter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCallCenter':
          summary: 'Delete Call Center'
          description: 'Delete an existing call center only elements specified in
            the request are deleted.'
          entityName: 'CallCenter'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CallCoachingMediaProvider/{Id}:
    patch:
      summary: 'Update CallCoachingMediaProvider'
      description: 'UpdateCallCoachingMediaProvider'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCallCoachingMediaProvider':
          summary: 'Update CallCoachingMediaProvider'
          description: 'Updates an existing callcoachingmediaprovider; only elements
            specified in the request are updated.'
          entityName: 'CallCoachingMediaProvider'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCallCoachingMediaProvider':
          summary: 'Upsert CallCoachingMediaProvider'
          description: 'Upsert an existing callcoachingmediaprovider only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CallCoachingMediaProvider'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CallCoachingMediaProvider'
      description: 'DeleteCallCoachingMediaProvider'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCallCoachingMediaProvider':
          summary: 'Delete CallCoachingMediaProvider'
          description: 'Delete an existing callcoachingmediaprovider only elements
            specified in the request are deleted.'
          entityName: 'CallCoachingMediaProvider'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Campaign/{Id}:
    patch:
      summary: 'Update Campaign'
      description: 'UpdateCampaign'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaign':
          summary: 'Update Campaign'
          description: 'Updates an existing campaign; only elements specified in the
            request are updated.'
          entityName: 'Campaign'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaign':
          summary: 'Upsert Campaign'
          description: 'Upsert an existing campaign only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Campaign'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Campaign'
      description: 'DeleteCampaign'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaign':
          summary: 'Delete Campaign'
          description: 'Delete an existing campaign only elements specified in the
            request are deleted.'
          entityName: 'Campaign'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignChangeEvent/{Id}:
    patch:
      summary: 'Update CampaignChangeEvent'
      description: 'UpdateCampaignChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignChangeEvent':
          summary: 'Update Campaign Change Event'
          description: 'Updates an existing campaign change event; only elements specified
            in the request are updated.'
          entityName: 'CampaignChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignChangeEvent':
          summary: 'Upsert Campaign Change Event'
          description: 'Upsert an existing campaign change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignChangeEvent'
      description: 'DeleteCampaignChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignChangeEvent':
          summary: 'Delete Campaign Change Event'
          description: 'Delete an existing campaign change event only elements specified
            in the request are deleted.'
          entityName: 'CampaignChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignHistory/{Id}:
    patch:
      summary: 'Update CampaignHistory'
      description: 'UpdateCampaignHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignHistory':
          summary: 'Update Campaign Field History'
          description: 'Updates an existing campaign field history; only elements
            specified in the request are updated.'
          entityName: 'CampaignHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignHistory':
          summary: 'Upsert Campaign Field History'
          description: 'Upsert an existing campaign field history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignHistory'
      description: 'DeleteCampaignHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignHistory':
          summary: 'Delete Campaign Field History'
          description: 'Delete an existing campaign field history only elements specified
            in the request are deleted.'
          entityName: 'CampaignHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMember/{Id}:
    patch:
      summary: 'Update CampaignMember'
      description: 'UpdateCampaignMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignMember':
          summary: 'Update Campaign Member'
          description: 'Updates an existing campaign member; only elements specified
            in the request are updated.'
          entityName: 'CampaignMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMember':
          summary: 'Upsert Campaign Member'
          description: 'Upsert an existing campaign member only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignMember'
      description: 'DeleteCampaignMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignMember':
          summary: 'Delete Campaign Member'
          description: 'Delete an existing campaign member only elements specified
            in the request are deleted.'
          entityName: 'CampaignMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMemberChangeEvent/{Id}:
    patch:
      summary: 'Update CampaignMemberChangeEvent'
      description: 'UpdateCampaignMemberChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignMemberChangeEvent':
          summary: 'Update Campaign Member Change Event'
          description: 'Updates an existing campaign member change event; only elements
            specified in the request are updated.'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberChangeEvent':
          summary: 'Upsert Campaign Member Change Event'
          description: 'Upsert an existing campaign member change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignMemberChangeEvent'
      description: 'DeleteCampaignMemberChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignMemberChangeEvent':
          summary: 'Delete Campaign Member Change Event'
          description: 'Delete an existing campaign member change event only elements
            specified in the request are deleted.'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMemberStatus/{Id}:
    patch:
      summary: 'Update CampaignMemberStatus'
      description: 'UpdateCampaignMemberStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignMemberStatus':
          summary: 'Update Campaign Member Status'
          description: 'Updates an existing campaign member status; only elements
            specified in the request are updated.'
          entityName: 'CampaignMemberStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberStatus':
          summary: 'Upsert Campaign Member Status'
          description: 'Upsert an existing campaign member status only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMemberStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignMemberStatus'
      description: 'DeleteCampaignMemberStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignMemberStatus':
          summary: 'Delete Campaign Member Status'
          description: 'Delete an existing campaign member status only elements specified
            in the request are deleted.'
          entityName: 'CampaignMemberStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignMemberStatusChangeEvent/{Id}:
    patch:
      summary: 'Update CampaignMemberStatusChangeEvent'
      description: 'UpdateCampaignMemberStatusChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignMemberStatusChangeEvent':
          summary: 'Update Campaign Member Status Change Event'
          description: 'Updates an existing campaign member status change event; only
            elements specified in the request are updated.'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberStatusChangeEvent':
          summary: 'Upsert Campaign Member Status Change Event'
          description: 'Upsert an existing campaign member status change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignMemberStatusChangeEvent'
      description: 'DeleteCampaignMemberStatusChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignMemberStatusChangeEvent':
          summary: 'Delete Campaign Member Status Change Event'
          description: 'Delete an existing campaign member status change event only
            elements specified in the request are deleted.'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CampaignShare/{Id}:
    patch:
      summary: 'Update CampaignShare'
      description: 'UpdateCampaignShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCampaignShare':
          summary: 'Update Campaign Share'
          description: 'Updates an existing campaign share; only elements specified
            in the request are updated.'
          entityName: 'CampaignShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignShare':
          summary: 'Upsert Campaign Share'
          description: 'Upsert an existing campaign share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CampaignShare'
      description: 'DeleteCampaignShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCampaignShare':
          summary: 'Delete Campaign Share'
          description: 'Delete an existing campaign share only elements specified
            in the request are deleted.'
          entityName: 'CampaignShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Case/{Id}:
    patch:
      summary: 'Update Case'
      description: 'UpdateCase'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCase':
          summary: 'Update Case'
          description: 'Updates an existing case; only elements specified in the request
            are updated.'
          entityName: 'Case'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCase':
          summary: 'Upsert Case'
          description: 'Upsert an existing case only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Case'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Case'
      description: 'DeleteCase'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCase':
          summary: 'Delete Case'
          description: 'Delete an existing case only elements specified in the request
            are deleted.'
          entityName: 'Case'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseChangeEvent/{Id}:
    patch:
      summary: 'Update CaseChangeEvent'
      description: 'UpdateCaseChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseChangeEvent':
          summary: 'Update Case Change Event'
          description: 'Updates an existing case change event; only elements specified
            in the request are updated.'
          entityName: 'CaseChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseChangeEvent':
          summary: 'Upsert Case Change Event'
          description: 'Upsert an existing case change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseChangeEvent'
      description: 'DeleteCaseChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseChangeEvent':
          summary: 'Delete Case Change Event'
          description: 'Delete an existing case change event only elements specified
            in the request are deleted.'
          entityName: 'CaseChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseComment/{Id}:
    patch:
      summary: 'Update CaseComment'
      description: 'UpdateCaseComment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseComment':
          summary: 'Update Case Comment'
          description: 'Updates an existing case comment; only elements specified
            in the request are updated.'
          entityName: 'CaseComment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseComment':
          summary: 'Upsert Case Comment'
          description: 'Upsert an existing case comment only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseComment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseComment'
      description: 'DeleteCaseComment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseComment':
          summary: 'Delete Case Comment'
          description: 'Delete an existing case comment only elements specified in
            the request are deleted.'
          entityName: 'CaseComment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseContactRole/{Id}:
    patch:
      summary: 'Update CaseContactRole'
      description: 'UpdateCaseContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseContactRole':
          summary: 'Update Case Contact Role'
          description: 'Updates an existing case contact role; only elements specified
            in the request are updated.'
          entityName: 'CaseContactRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseContactRole':
          summary: 'Upsert Case Contact Role'
          description: 'Upsert an existing case contact role only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseContactRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseContactRole'
      description: 'DeleteCaseContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseContactRole':
          summary: 'Delete Case Contact Role'
          description: 'Delete an existing case contact role only elements specified
            in the request are deleted.'
          entityName: 'CaseContactRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseHistory/{Id}:
    patch:
      summary: 'Update CaseHistory'
      description: 'UpdateCaseHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseHistory':
          summary: 'Update Case History'
          description: 'Updates an existing case history; only elements specified
            in the request are updated.'
          entityName: 'CaseHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseHistory':
          summary: 'Upsert Case History'
          description: 'Upsert an existing case history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseHistory'
      description: 'DeleteCaseHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseHistory':
          summary: 'Delete Case History'
          description: 'Delete an existing case history only elements specified in
            the request are deleted.'
          entityName: 'CaseHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseShare/{Id}:
    patch:
      summary: 'Update CaseShare'
      description: 'UpdateCaseShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseShare':
          summary: 'Update Case Share'
          description: 'Updates an existing case share; only elements specified in
            the request are updated.'
          entityName: 'CaseShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseShare':
          summary: 'Upsert Case Share'
          description: 'Upsert an existing case share only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'CaseShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseShare'
      description: 'DeleteCaseShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseShare':
          summary: 'Delete Case Share'
          description: 'Delete an existing case share only elements specified in the
            request are deleted.'
          entityName: 'CaseShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseSolution/{Id}:
    patch:
      summary: 'Update CaseSolution'
      description: 'UpdateCaseSolution'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseSolution':
          summary: 'Update Case Solution'
          description: 'Updates an existing case solution; only elements specified
            in the request are updated.'
          entityName: 'CaseSolution'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseSolution':
          summary: 'Upsert Case Solution'
          description: 'Upsert an existing case solution only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseSolution'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseSolution'
      description: 'DeleteCaseSolution'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseSolution':
          summary: 'Delete Case Solution'
          description: 'Delete an existing case solution only elements specified in
            the request are deleted.'
          entityName: 'CaseSolution'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseStatus/{Id}:
    patch:
      summary: 'Update CaseStatus'
      description: 'UpdateCaseStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseStatus':
          summary: 'Update Case Status Value'
          description: 'Updates an existing case status value; only elements specified
            in the request are updated.'
          entityName: 'CaseStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseStatus':
          summary: 'Upsert Case Status Value'
          description: 'Upsert an existing case status value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseStatus'
      description: 'DeleteCaseStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseStatus':
          summary: 'Delete Case Status Value'
          description: 'Delete an existing case status value only elements specified
            in the request are deleted.'
          entityName: 'CaseStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamMember/{Id}:
    patch:
      summary: 'Update CaseTeamMember'
      description: 'UpdateCaseTeamMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseTeamMember':
          summary: 'Update Case Team Member'
          description: 'Updates an existing case team member; only elements specified
            in the request are updated.'
          entityName: 'CaseTeamMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamMember':
          summary: 'Upsert Case Team Member'
          description: 'Upsert an existing case team member only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseTeamMember'
      description: 'DeleteCaseTeamMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseTeamMember':
          summary: 'Delete Case Team Member'
          description: 'Delete an existing case team member only elements specified
            in the request are deleted.'
          entityName: 'CaseTeamMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamRole/{Id}:
    patch:
      summary: 'Update CaseTeamRole'
      description: 'UpdateCaseTeamRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseTeamRole':
          summary: 'Update Case Team Member Role'
          description: 'Updates an existing case team member role; only elements specified
            in the request are updated.'
          entityName: 'CaseTeamRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamRole':
          summary: 'Upsert Case Team Member Role'
          description: 'Upsert an existing case team member role only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseTeamRole'
      description: 'DeleteCaseTeamRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseTeamRole':
          summary: 'Delete Case Team Member Role'
          description: 'Delete an existing case team member role only elements specified
            in the request are deleted.'
          entityName: 'CaseTeamRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamTemplate/{Id}:
    patch:
      summary: 'Update CaseTeamTemplate'
      description: 'UpdateCaseTeamTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseTeamTemplate':
          summary: 'Update Predefined Case Team'
          description: 'Updates an existing predefined case team; only elements specified
            in the request are updated.'
          entityName: 'CaseTeamTemplate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamTemplate':
          summary: 'Upsert Predefined Case Team'
          description: 'Upsert an existing predefined case team only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamTemplate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseTeamTemplate'
      description: 'DeleteCaseTeamTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseTeamTemplate':
          summary: 'Delete Predefined Case Team'
          description: 'Delete an existing predefined case team only elements specified
            in the request are deleted.'
          entityName: 'CaseTeamTemplate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamTemplateMember/{Id}:
    patch:
      summary: 'Update CaseTeamTemplateMember'
      description: 'UpdateCaseTeamTemplateMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseTeamTemplateMember':
          summary: 'Update Predefined Case Team Member'
          description: 'Updates an existing predefined case team member; only elements
            specified in the request are updated.'
          entityName: 'CaseTeamTemplateMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamTemplateMember':
          summary: 'Upsert Predefined Case Team Member'
          description: 'Upsert an existing predefined case team member only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamTemplateMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseTeamTemplateMember'
      description: 'DeleteCaseTeamTemplateMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseTeamTemplateMember':
          summary: 'Delete Predefined Case Team Member'
          description: 'Delete an existing predefined case team member only elements
            specified in the request are deleted.'
          entityName: 'CaseTeamTemplateMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CaseTeamTemplateRecord/{Id}:
    patch:
      summary: 'Update CaseTeamTemplateRecord'
      description: 'UpdateCaseTeamTemplateRecord'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCaseTeamTemplateRecord':
          summary: 'Update Predefined Case Team Record'
          description: 'Updates an existing predefined case team record; only elements
            specified in the request are updated.'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamTemplateRecord':
          summary: 'Upsert Predefined Case Team Record'
          description: 'Upsert an existing predefined case team record only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CaseTeamTemplateRecord'
      description: 'DeleteCaseTeamTemplateRecord'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCaseTeamTemplateRecord':
          summary: 'Delete Predefined Case Team Record'
          description: 'Delete an existing predefined case team record only elements
            specified in the request are deleted.'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CategoryData/{Id}:
    patch:
      summary: 'Update CategoryData'
      description: 'UpdateCategoryData'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCategoryData':
          summary: 'Update Category Data'
          description: 'Updates an existing category data; only elements specified
            in the request are updated.'
          entityName: 'CategoryData'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCategoryData':
          summary: 'Upsert Category Data'
          description: 'Upsert an existing category data only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CategoryData'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CategoryData'
      description: 'DeleteCategoryData'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCategoryData':
          summary: 'Delete Category Data'
          description: 'Delete an existing category data only elements specified in
            the request are deleted.'
          entityName: 'CategoryData'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CategoryNode/{Id}:
    patch:
      summary: 'Update CategoryNode'
      description: 'UpdateCategoryNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCategoryNode':
          summary: 'Update Category Node'
          description: 'Updates an existing category node; only elements specified
            in the request are updated.'
          entityName: 'CategoryNode'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCategoryNode':
          summary: 'Upsert Category Node'
          description: 'Upsert an existing category node only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CategoryNode'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CategoryNode'
      description: 'DeleteCategoryNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCategoryNode':
          summary: 'Delete Category Node'
          description: 'Delete an existing category node only elements specified in
            the request are deleted.'
          entityName: 'CategoryNode'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ChatterAnswersActivity/{Id}:
    patch:
      summary: 'Update ChatterAnswersActivity'
      description: 'UpdateChatterAnswersActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateChatterAnswersActivity':
          summary: 'Update Chatter Answers Activity'
          description: 'Updates an existing chatter answers activity; only elements
            specified in the request are updated.'
          entityName: 'ChatterAnswersActivity'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertChatterAnswersActivity':
          summary: 'Upsert Chatter Answers Activity'
          description: 'Upsert an existing chatter answers activity only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ChatterAnswersActivity'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ChatterAnswersActivity'
      description: 'DeleteChatterAnswersActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteChatterAnswersActivity':
          summary: 'Delete Chatter Answers Activity'
          description: 'Delete an existing chatter answers activity only elements
            specified in the request are deleted.'
          entityName: 'ChatterAnswersActivity'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ChatterAnswersReputationLevel/{Id}:
    patch:
      summary: 'Update ChatterAnswersReputationLevel'
      description: 'UpdateChatterAnswersReputationLevel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateChatterAnswersReputationLevel':
          summary: 'Update Chatter Answers Reputation Level'
          description: 'Updates an existing chatter answers reputation level; only
            elements specified in the request are updated.'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertChatterAnswersReputationLevel':
          summary: 'Upsert Chatter Answers Reputation Level'
          description: 'Upsert an existing chatter answers reputation level only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ChatterAnswersReputationLevel'
      description: 'DeleteChatterAnswersReputationLevel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteChatterAnswersReputationLevel':
          summary: 'Delete Chatter Answers Reputation Level'
          description: 'Delete an existing chatter answers reputation level only elements
            specified in the request are deleted.'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ClientBrowser/{Id}:
    patch:
      summary: 'Update ClientBrowser'
      description: 'UpdateClientBrowser'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateClientBrowser':
          summary: 'Update Client Browser'
          description: 'Updates an existing client browser; only elements specified
            in the request are updated.'
          entityName: 'ClientBrowser'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertClientBrowser':
          summary: 'Upsert Client Browser'
          description: 'Upsert an existing client browser only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ClientBrowser'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ClientBrowser'
      description: 'DeleteClientBrowser'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteClientBrowser':
          summary: 'Delete Client Browser'
          description: 'Delete an existing client browser only elements specified
            in the request are deleted.'
          entityName: 'ClientBrowser'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ColorDefinition/{Id}:
    patch:
      summary: 'Update ColorDefinition'
      description: 'UpdateColorDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateColorDefinition':
          summary: 'Update Color Definition'
          description: 'Updates an existing color definition; only elements specified
            in the request are updated.'
          entityName: 'ColorDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertColorDefinition':
          summary: 'Upsert Color Definition'
          description: 'Upsert an existing color definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ColorDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ColorDefinition'
      description: 'DeleteColorDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteColorDefinition':
          summary: 'Delete Color Definition'
          description: 'Delete an existing color definition only elements specified
            in the request are deleted.'
          entityName: 'ColorDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CombinedAttachment/{Id}:
    patch:
      summary: 'Update CombinedAttachment'
      description: 'UpdateCombinedAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCombinedAttachment':
          summary: 'Update Note, Attachment, Google Doc And File'
          description: 'Updates an existing note, attachment, google doc and file;
            only elements specified in the request are updated.'
          entityName: 'CombinedAttachment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCombinedAttachment':
          summary: 'Upsert Note, Attachment, Google Doc And File'
          description: 'Upsert an existing note, attachment, google doc and file only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CombinedAttachment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CombinedAttachment'
      description: 'DeleteCombinedAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCombinedAttachment':
          summary: 'Delete Note, Attachment, Google Doc And File'
          description: 'Delete an existing note, attachment, google doc and file only
            elements specified in the request are deleted.'
          entityName: 'CombinedAttachment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscription/{Id}:
    patch:
      summary: 'Update CommSubscription'
      description: 'UpdateCommSubscription'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommSubscription':
          summary: 'Update Communication Subscription'
          description: 'Updates an existing communication subscription; only elements
            specified in the request are updated.'
          entityName: 'CommSubscription'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscription':
          summary: 'Upsert Communication Subscription'
          description: 'Upsert an existing communication subscription only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CommSubscription'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CommSubscription'
      description: 'DeleteCommSubscription'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommSubscription':
          summary: 'Delete Communication Subscription'
          description: 'Delete an existing communication subscription only elements
            specified in the request are deleted.'
          entityName: 'CommSubscription'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionChannelType/{Id}:
    patch:
      summary: 'Update CommSubscriptionChannelType'
      description: 'UpdateCommSubscriptionChannelType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommSubscriptionChannelType':
          summary: 'Update Communication Subscription Channel Type'
          description: 'Updates an existing communication subscription channel type;
            only elements specified in the request are updated.'
          entityName: 'CommSubscriptionChannelType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionChannelType':
          summary: 'Upsert Communication Subscription Channel Type'
          description: 'Upsert an existing communication subscription channel type
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CommSubscriptionChannelType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CommSubscriptionChannelType'
      description: 'DeleteCommSubscriptionChannelType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommSubscriptionChannelType':
          summary: 'Delete Communication Subscription Channel Type'
          description: 'Delete an existing communication subscription channel type
            only elements specified in the request are deleted.'
          entityName: 'CommSubscriptionChannelType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionChannelTypeHistory/{Id}:
    patch:
      summary: 'Update CommSubscriptionChannelTypeHistory'
      description: 'UpdateCommSubscriptionChannelTypeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommSubscriptionChannelTypeHistory':
          summary: 'Update Communication Subscription Channel Type  History'
          description: 'Updates an existing communication subscription channel type  history;
            only elements specified in the request are updated.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionChannelTypeHistory':
          summary: 'Upsert Communication Subscription Channel Type  History'
          description: 'Upsert an existing communication subscription channel type  history
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CommSubscriptionChannelTypeHistory'
      description: 'DeleteCommSubscriptionChannelTypeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommSubscriptionChannelTypeHistory':
          summary: 'Delete Communication Subscription Channel Type  History'
          description: 'Delete an existing communication subscription channel type  history
            only elements specified in the request are deleted.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionChannelTypeShare/{Id}:
    patch:
      summary: 'Update CommSubscriptionChannelTypeShare'
      description: 'UpdateCommSubscriptionChannelTypeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommSubscriptionChannelTypeShare':
          summary: 'Update Communication Subscription Channel Type Share'
          description: 'Updates an existing communication subscription channel type
            share; only elements specified in the request are updated.'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionChannelTypeShare':
          summary: 'Upsert Communication Subscription Channel Type Share'
          description: 'Upsert an existing communication subscription channel type
            share only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CommSubscriptionChannelTypeShare'
      description: 'DeleteCommSubscriptionChannelTypeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommSubscriptionChannelTypeShare':
          summary: 'Delete Communication Subscription Channel Type Share'
          description: 'Delete an existing communication subscription channel type
            share only elements specified in the request are deleted.'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionHistory/{Id}:
    patch:
      summary: 'Update CommSubscriptionHistory'
      description: 'UpdateCommSubscriptionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommSubscriptionHistory':
          summary: 'Update Communication Subscription  History'
          description: 'Updates an existing communication subscription  history; only
            elements specified in the request are updated.'
          entityName: 'CommSubscriptionHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionHistory':
          summary: 'Upsert Communication Subscription  History'
          description: 'Upsert an existing communication subscription  history only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CommSubscriptionHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CommSubscriptionHistory'
      description: 'DeleteCommSubscriptionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommSubscriptionHistory':
          summary: 'Delete Communication Subscription  History'
          description: 'Delete an existing communication subscription  history only
            elements specified in the request are deleted.'
          entityName: 'CommSubscriptionHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CommSubscriptionShare/{Id}:
    patch:
      summary: 'Update CommSubscriptionShare'
      description: 'UpdateCommSubscriptionShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommSubscriptionShare':
          summary: 'Update Communication Subscription Share'
          description: 'Updates an existing communication subscription share; only
            elements specified in the request are updated.'
          entityName: 'CommSubscriptionShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionShare':
          summary: 'Upsert Communication Subscription Share'
          description: 'Upsert an existing communication subscription share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CommSubscriptionShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CommSubscriptionShare'
      description: 'DeleteCommSubscriptionShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommSubscriptionShare':
          summary: 'Delete Communication Subscription Share'
          description: 'Delete an existing communication subscription share only elements
            specified in the request are deleted.'
          entityName: 'CommSubscriptionShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Community/{Id}:
    patch:
      summary: 'Update Community'
      description: 'UpdateCommunity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCommunity':
          summary: 'Update Zone'
          description: 'Updates an existing zone; only elements specified in the request
            are updated.'
          entityName: 'Community'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommunity':
          summary: 'Upsert Zone'
          description: 'Upsert an existing zone only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Community'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Community'
      description: 'DeleteCommunity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCommunity':
          summary: 'Delete Zone'
          description: 'Delete an existing zone only elements specified in the request
            are deleted.'
          entityName: 'Community'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConcurLongRunApexErrEvent/{Id}:
    patch:
      summary: 'Update ConcurLongRunApexErrEvent'
      description: 'UpdateConcurLongRunApexErrEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConcurLongRunApexErrEvent':
          summary: 'Update Concurrent Long Running Apex Error Event'
          description: 'Updates an existing concurrent long running apex error event;
            only elements specified in the request are updated.'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConcurLongRunApexErrEvent':
          summary: 'Upsert Concurrent Long Running Apex Error Event'
          description: 'Upsert an existing concurrent long running apex error event
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConcurLongRunApexErrEvent'
      description: 'DeleteConcurLongRunApexErrEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConcurLongRunApexErrEvent':
          summary: 'Delete Concurrent Long Running Apex Error Event'
          description: 'Delete an existing concurrent long running apex error event
            only elements specified in the request are deleted.'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConferenceNumber/{Id}:
    patch:
      summary: 'Update ConferenceNumber'
      description: 'UpdateConferenceNumber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConferenceNumber':
          summary: 'Update Conference Number'
          description: 'Updates an existing conference number; only elements specified
            in the request are updated.'
          entityName: 'ConferenceNumber'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConferenceNumber':
          summary: 'Upsert Conference Number'
          description: 'Upsert an existing conference number only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConferenceNumber'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConferenceNumber'
      description: 'DeleteConferenceNumber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConferenceNumber':
          summary: 'Delete Conference Number'
          description: 'Delete an existing conference number only elements specified
            in the request are deleted.'
          entityName: 'ConferenceNumber'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConnectedApplication/{Id}:
    patch:
      summary: 'Update ConnectedApplication'
      description: 'UpdateConnectedApplication'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConnectedApplication':
          summary: 'Update Connected App'
          description: 'Updates an existing connected app; only elements specified
            in the request are updated.'
          entityName: 'ConnectedApplication'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConnectedApplication':
          summary: 'Upsert Connected App'
          description: 'Upsert an existing connected app only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ConnectedApplication'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConnectedApplication'
      description: 'DeleteConnectedApplication'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConnectedApplication':
          summary: 'Delete Connected App'
          description: 'Delete an existing connected app only elements specified in
            the request are deleted.'
          entityName: 'ConnectedApplication'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionRate/{Id}:
    patch:
      summary: 'Update ConsumptionRate'
      description: 'UpdateConsumptionRate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConsumptionRate':
          summary: 'Update Consumption Rate'
          description: 'Updates an existing consumption rate; only elements specified
            in the request are updated.'
          entityName: 'ConsumptionRate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionRate':
          summary: 'Upsert Consumption Rate'
          description: 'Upsert an existing consumption rate only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionRate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConsumptionRate'
      description: 'DeleteConsumptionRate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConsumptionRate':
          summary: 'Delete Consumption Rate'
          description: 'Delete an existing consumption rate only elements specified
            in the request are deleted.'
          entityName: 'ConsumptionRate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionRateHistory/{Id}:
    patch:
      summary: 'Update ConsumptionRateHistory'
      description: 'UpdateConsumptionRateHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConsumptionRateHistory':
          summary: 'Update Consumption Rate History ID'
          description: 'Updates an existing consumption rate history id; only elements
            specified in the request are updated.'
          entityName: 'ConsumptionRateHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionRateHistory':
          summary: 'Upsert Consumption Rate History ID'
          description: 'Upsert an existing consumption rate history id only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionRateHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConsumptionRateHistory'
      description: 'DeleteConsumptionRateHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConsumptionRateHistory':
          summary: 'Delete Consumption Rate History ID'
          description: 'Delete an existing consumption rate history id only elements
            specified in the request are deleted.'
          entityName: 'ConsumptionRateHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionSchedule/{Id}:
    patch:
      summary: 'Update ConsumptionSchedule'
      description: 'UpdateConsumptionSchedule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConsumptionSchedule':
          summary: 'Update Consumption Schedule'
          description: 'Updates an existing consumption schedule; only elements specified
            in the request are updated.'
          entityName: 'ConsumptionSchedule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionSchedule':
          summary: 'Upsert Consumption Schedule'
          description: 'Upsert an existing consumption schedule only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionSchedule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConsumptionSchedule'
      description: 'DeleteConsumptionSchedule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConsumptionSchedule':
          summary: 'Delete Consumption Schedule'
          description: 'Delete an existing consumption schedule only elements specified
            in the request are deleted.'
          entityName: 'ConsumptionSchedule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionScheduleHistory/{Id}:
    patch:
      summary: 'Update ConsumptionScheduleHistory'
      description: 'UpdateConsumptionScheduleHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConsumptionScheduleHistory':
          summary: 'Update Consumption Schedule History ID'
          description: 'Updates an existing consumption schedule history id; only
            elements specified in the request are updated.'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionScheduleHistory':
          summary: 'Upsert Consumption Schedule History ID'
          description: 'Upsert an existing consumption schedule history id only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConsumptionScheduleHistory'
      description: 'DeleteConsumptionScheduleHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConsumptionScheduleHistory':
          summary: 'Delete Consumption Schedule History ID'
          description: 'Delete an existing consumption schedule history id only elements
            specified in the request are deleted.'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ConsumptionScheduleShare/{Id}:
    patch:
      summary: 'Update ConsumptionScheduleShare'
      description: 'UpdateConsumptionScheduleShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateConsumptionScheduleShare':
          summary: 'Update Consumption Schedule Share'
          description: 'Updates an existing consumption schedule share; only elements
            specified in the request are updated.'
          entityName: 'ConsumptionScheduleShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionScheduleShare':
          summary: 'Upsert Consumption Schedule Share'
          description: 'Upsert an existing consumption schedule share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionScheduleShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ConsumptionScheduleShare'
      description: 'DeleteConsumptionScheduleShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteConsumptionScheduleShare':
          summary: 'Delete Consumption Schedule Share'
          description: 'Delete an existing consumption schedule share only elements
            specified in the request are deleted.'
          entityName: 'ConsumptionScheduleShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Contact/{Id}:
    patch:
      summary: 'Update Contact'
      description: 'UpdateContact'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContact':
          summary: 'Update Contact'
          description: 'Updates an existing contact; only elements specified in the
            request are updated.'
          entityName: 'Contact'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContact':
          summary: 'Upsert Contact'
          description: 'Upsert an existing contact only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Contact'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Contact'
      description: 'DeleteContact'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContact':
          summary: 'Delete Contact'
          description: 'Delete an existing contact only elements specified in the
            request are deleted.'
          entityName: 'Contact'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactChangeEvent/{Id}:
    patch:
      summary: 'Update ContactChangeEvent'
      description: 'UpdateContactChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactChangeEvent':
          summary: 'Update Contact Change Event'
          description: 'Updates an existing contact change event; only elements specified
            in the request are updated.'
          entityName: 'ContactChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactChangeEvent':
          summary: 'Upsert Contact Change Event'
          description: 'Upsert an existing contact change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactChangeEvent'
      description: 'DeleteContactChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactChangeEvent':
          summary: 'Delete Contact Change Event'
          description: 'Delete an existing contact change event only elements specified
            in the request are deleted.'
          entityName: 'ContactChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactHistory/{Id}:
    patch:
      summary: 'Update ContactHistory'
      description: 'UpdateContactHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactHistory':
          summary: 'Update Contact History'
          description: 'Updates an existing contact history; only elements specified
            in the request are updated.'
          entityName: 'ContactHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactHistory':
          summary: 'Upsert Contact History'
          description: 'Upsert an existing contact history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactHistory'
      description: 'DeleteContactHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactHistory':
          summary: 'Delete Contact History'
          description: 'Delete an existing contact history only elements specified
            in the request are deleted.'
          entityName: 'ContactHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsent/{Id}:
    patch:
      summary: 'Update ContactPointTypeConsent'
      description: 'UpdateContactPointTypeConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactPointTypeConsent':
          summary: 'Update Contact Point Type Consent'
          description: 'Updates an existing contact point type consent; only elements
            specified in the request are updated.'
          entityName: 'ContactPointTypeConsent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsent':
          summary: 'Upsert Contact Point Type Consent'
          description: 'Upsert an existing contact point type consent only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactPointTypeConsent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactPointTypeConsent'
      description: 'DeleteContactPointTypeConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactPointTypeConsent':
          summary: 'Delete Contact Point Type Consent'
          description: 'Delete an existing contact point type consent only elements
            specified in the request are deleted.'
          entityName: 'ContactPointTypeConsent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsentChangeEvent/{Id}:
    patch:
      summary: 'Update ContactPointTypeConsentChangeEvent'
      description: 'UpdateContactPointTypeConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactPointTypeConsentChangeEvent':
          summary: 'Update Contact Point Type Consent Change Event'
          description: 'Updates an existing contact point type consent change event;
            only elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentChangeEvent':
          summary: 'Upsert Contact Point Type Consent Change Event'
          description: 'Upsert an existing contact point type consent change event
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactPointTypeConsentChangeEvent'
      description: 'DeleteContactPointTypeConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactPointTypeConsentChangeEvent':
          summary: 'Delete Contact Point Type Consent Change Event'
          description: 'Delete an existing contact point type consent change event
            only elements specified in the request are deleted.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsentHistory/{Id}:
    patch:
      summary: 'Update ContactPointTypeConsentHistory'
      description: 'UpdateContactPointTypeConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactPointTypeConsentHistory':
          summary: 'Update Contact Point Type Consent  History'
          description: 'Updates an existing contact point type consent  history; only
            elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentHistory':
          summary: 'Upsert Contact Point Type Consent  History'
          description: 'Upsert an existing contact point type consent  history only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactPointTypeConsentHistory'
      description: 'DeleteContactPointTypeConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactPointTypeConsentHistory':
          summary: 'Delete Contact Point Type Consent  History'
          description: 'Delete an existing contact point type consent  history only
            elements specified in the request are deleted.'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactPointTypeConsentShare/{Id}:
    patch:
      summary: 'Update ContactPointTypeConsentShare'
      description: 'UpdateContactPointTypeConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactPointTypeConsentShare':
          summary: 'Update Contact Point Type Consent Share'
          description: 'Updates an existing contact point type consent share; only
            elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentShare':
          summary: 'Upsert Contact Point Type Consent Share'
          description: 'Upsert an existing contact point type consent share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactPointTypeConsentShare'
      description: 'DeleteContactPointTypeConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactPointTypeConsentShare':
          summary: 'Delete Contact Point Type Consent Share'
          description: 'Delete an existing contact point type consent share only elements
            specified in the request are deleted.'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactRequest/{Id}:
    patch:
      summary: 'Update ContactRequest'
      description: 'UpdateContactRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactRequest':
          summary: 'Update Contact Request'
          description: 'Updates an existing contact request; only elements specified
            in the request are updated.'
          entityName: 'ContactRequest'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactRequest':
          summary: 'Upsert Contact Request'
          description: 'Upsert an existing contact request only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactRequest'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactRequest'
      description: 'DeleteContactRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactRequest':
          summary: 'Delete Contact Request'
          description: 'Delete an existing contact request only elements specified
            in the request are deleted.'
          entityName: 'ContactRequest'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactRequestShare/{Id}:
    patch:
      summary: 'Update ContactRequestShare'
      description: 'UpdateContactRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactRequestShare':
          summary: 'Update Contact Request Share'
          description: 'Updates an existing contact request share; only elements specified
            in the request are updated.'
          entityName: 'ContactRequestShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactRequestShare':
          summary: 'Upsert Contact Request Share'
          description: 'Upsert an existing contact request share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactRequestShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactRequestShare'
      description: 'DeleteContactRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactRequestShare':
          summary: 'Delete Contact Request Share'
          description: 'Delete an existing contact request share only elements specified
            in the request are deleted.'
          entityName: 'ContactRequestShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContactShare/{Id}:
    patch:
      summary: 'Update ContactShare'
      description: 'UpdateContactShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContactShare':
          summary: 'Update Contact Share'
          description: 'Updates an existing contact share; only elements specified
            in the request are updated.'
          entityName: 'ContactShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactShare':
          summary: 'Upsert Contact Share'
          description: 'Upsert an existing contact share only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContactShare'
      description: 'DeleteContactShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContactShare':
          summary: 'Delete Contact Share'
          description: 'Delete an existing contact share only elements specified in
            the request are deleted.'
          entityName: 'ContactShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentAsset/{Id}:
    patch:
      summary: 'Update ContentAsset'
      description: 'UpdateContentAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentAsset':
          summary: 'Update Asset File'
          description: 'Updates an existing asset file; only elements specified in
            the request are updated.'
          entityName: 'ContentAsset'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentAsset':
          summary: 'Upsert Asset File'
          description: 'Upsert an existing asset file only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'ContentAsset'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentAsset'
      description: 'DeleteContentAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentAsset':
          summary: 'Delete Asset File'
          description: 'Delete an existing asset file only elements specified in the
            request are deleted.'
          entityName: 'ContentAsset'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentBody/{Id}:
    patch:
      summary: 'Update ContentBody'
      description: 'UpdateContentBody'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentBody':
          summary: 'Update Content Body'
          description: 'Updates an existing content body; only elements specified
            in the request are updated.'
          entityName: 'ContentBody'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentBody':
          summary: 'Upsert Content Body'
          description: 'Upsert an existing content body only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentBody'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentBody'
      description: 'DeleteContentBody'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentBody':
          summary: 'Delete Content Body'
          description: 'Delete an existing content body only elements specified in
            the request are deleted.'
          entityName: 'ContentBody'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocument/{Id}:
    patch:
      summary: 'Update ContentDocument'
      description: 'UpdateContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentDocument':
          summary: 'Update Content Document'
          description: 'Updates an existing content document; only elements specified
            in the request are updated.'
          entityName: 'ContentDocument'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocument':
          summary: 'Upsert Content Document'
          description: 'Upsert an existing content document only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocument'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentDocument'
      description: 'DeleteContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentDocument':
          summary: 'Delete Content Document'
          description: 'Delete an existing content document only elements specified
            in the request are deleted.'
          entityName: 'ContentDocument'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentChangeEvent/{Id}:
    patch:
      summary: 'Update ContentDocumentChangeEvent'
      description: 'UpdateContentDocumentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentDocumentChangeEvent':
          summary: 'Update Content Document Change Event'
          description: 'Updates an existing content document change event; only elements
            specified in the request are updated.'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentChangeEvent':
          summary: 'Upsert Content Document Change Event'
          description: 'Upsert an existing content document change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentDocumentChangeEvent'
      description: 'DeleteContentDocumentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentDocumentChangeEvent':
          summary: 'Delete Content Document Change Event'
          description: 'Delete an existing content document change event only elements
            specified in the request are deleted.'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentHistory/{Id}:
    patch:
      summary: 'Update ContentDocumentHistory'
      description: 'UpdateContentDocumentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentDocumentHistory':
          summary: 'Update Content Document History'
          description: 'Updates an existing content document history; only elements
            specified in the request are updated.'
          entityName: 'ContentDocumentHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentHistory':
          summary: 'Upsert Content Document History'
          description: 'Upsert an existing content document history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocumentHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentDocumentHistory'
      description: 'DeleteContentDocumentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentDocumentHistory':
          summary: 'Delete Content Document History'
          description: 'Delete an existing content document history only elements
            specified in the request are deleted.'
          entityName: 'ContentDocumentHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentLink/{Id}:
    patch:
      summary: 'Update ContentDocumentLink'
      description: 'UpdateContentDocumentLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentDocumentLink':
          summary: 'Update Content Document Link'
          description: 'Updates an existing content document link; only elements specified
            in the request are updated.'
          entityName: 'ContentDocumentLink'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentLink':
          summary: 'Upsert Content Document Link'
          description: 'Upsert an existing content document link only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocumentLink'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentDocumentLink'
      description: 'DeleteContentDocumentLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentDocumentLink':
          summary: 'Delete Content Document Link'
          description: 'Delete an existing content document link only elements specified
            in the request are deleted.'
          entityName: 'ContentDocumentLink'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentDocumentLinkChangeEvent/{Id}:
    patch:
      summary: 'Update ContentDocumentLinkChangeEvent'
      description: 'UpdateContentDocumentLinkChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentDocumentLinkChangeEvent':
          summary: 'Update Content Document Link Change Event'
          description: 'Updates an existing content document link change event; only
            elements specified in the request are updated.'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentLinkChangeEvent':
          summary: 'Upsert Content Document Link Change Event'
          description: 'Upsert an existing content document link change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentDocumentLinkChangeEvent'
      description: 'DeleteContentDocumentLinkChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentDocumentLinkChangeEvent':
          summary: 'Delete Content Document Link Change Event'
          description: 'Delete an existing content document link change event only
            elements specified in the request are deleted.'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolder/{Id}:
    patch:
      summary: 'Update ContentFolder'
      description: 'UpdateContentFolder'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentFolder':
          summary: 'Update Content Folder'
          description: 'Updates an existing content folder; only elements specified
            in the request are updated.'
          entityName: 'ContentFolder'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolder':
          summary: 'Upsert Content Folder'
          description: 'Upsert an existing content folder only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolder'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentFolder'
      description: 'DeleteContentFolder'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentFolder':
          summary: 'Delete Content Folder'
          description: 'Delete an existing content folder only elements specified
            in the request are deleted.'
          entityName: 'ContentFolder'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolderItem/{Id}:
    patch:
      summary: 'Update ContentFolderItem'
      description: 'UpdateContentFolderItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentFolderItem':
          summary: 'Update Content Folder Item'
          description: 'Updates an existing content folder item; only elements specified
            in the request are updated.'
          entityName: 'ContentFolderItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderItem':
          summary: 'Upsert Content Folder Item'
          description: 'Upsert an existing content folder item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentFolderItem'
      description: 'DeleteContentFolderItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentFolderItem':
          summary: 'Delete Content Folder Item'
          description: 'Delete an existing content folder item only elements specified
            in the request are deleted.'
          entityName: 'ContentFolderItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolderLink/{Id}:
    patch:
      summary: 'Update ContentFolderLink'
      description: 'UpdateContentFolderLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentFolderLink':
          summary: 'Update Content Folder Link'
          description: 'Updates an existing content folder link; only elements specified
            in the request are updated.'
          entityName: 'ContentFolderLink'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderLink':
          summary: 'Upsert Content Folder Link'
          description: 'Upsert an existing content folder link only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderLink'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentFolderLink'
      description: 'DeleteContentFolderLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentFolderLink':
          summary: 'Delete Content Folder Link'
          description: 'Delete an existing content folder link only elements specified
            in the request are deleted.'
          entityName: 'ContentFolderLink'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentFolderMember/{Id}:
    patch:
      summary: 'Update ContentFolderMember'
      description: 'UpdateContentFolderMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentFolderMember':
          summary: 'Update Content Folder Member'
          description: 'Updates an existing content folder member; only elements specified
            in the request are updated.'
          entityName: 'ContentFolderMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderMember':
          summary: 'Upsert Content Folder Member'
          description: 'Upsert an existing content folder member only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentFolderMember'
      description: 'DeleteContentFolderMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentFolderMember':
          summary: 'Delete Content Folder Member'
          description: 'Delete an existing content folder member only elements specified
            in the request are deleted.'
          entityName: 'ContentFolderMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentNote/{Id}:
    patch:
      summary: 'Update ContentNote'
      description: 'UpdateContentNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentNote':
          summary: 'Update Note'
          description: 'Updates an existing note; only elements specified in the request
            are updated.'
          entityName: 'ContentNote'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentNote':
          summary: 'Upsert Note'
          description: 'Upsert an existing note only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'ContentNote'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentNote'
      description: 'DeleteContentNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentNote':
          summary: 'Delete Note'
          description: 'Delete an existing note only elements specified in the request
            are deleted.'
          entityName: 'ContentNote'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentVersion/{Id}:
    patch:
      summary: 'Update ContentVersion'
      description: 'UpdateContentVersion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentVersion':
          summary: 'Update Content Version'
          description: 'Updates an existing content version; only elements specified
            in the request are updated.'
          entityName: 'ContentVersion'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentVersion':
          summary: 'Upsert Content Version'
          description: 'Upsert an existing content version only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersion'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentVersion'
      description: 'DeleteContentVersion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentVersion':
          summary: 'Delete Content Version'
          description: 'Delete an existing content version only elements specified
            in the request are deleted.'
          entityName: 'ContentVersion'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentVersionChangeEvent/{Id}:
    patch:
      summary: 'Update ContentVersionChangeEvent'
      description: 'UpdateContentVersionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentVersionChangeEvent':
          summary: 'Update Content Version Change Event'
          description: 'Updates an existing content version change event; only elements
            specified in the request are updated.'
          entityName: 'ContentVersionChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentVersionChangeEvent':
          summary: 'Upsert Content Version Change Event'
          description: 'Upsert an existing content version change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersionChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentVersionChangeEvent'
      description: 'DeleteContentVersionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentVersionChangeEvent':
          summary: 'Delete Content Version Change Event'
          description: 'Delete an existing content version change event only elements
            specified in the request are deleted.'
          entityName: 'ContentVersionChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentVersionHistory/{Id}:
    patch:
      summary: 'Update ContentVersionHistory'
      description: 'UpdateContentVersionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentVersionHistory':
          summary: 'Update Content Version History'
          description: 'Updates an existing content version history; only elements
            specified in the request are updated.'
          entityName: 'ContentVersionHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentVersionHistory':
          summary: 'Upsert Content Version History'
          description: 'Upsert an existing content version history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersionHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentVersionHistory'
      description: 'DeleteContentVersionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentVersionHistory':
          summary: 'Delete Content Version History'
          description: 'Delete an existing content version history only elements specified
            in the request are deleted.'
          entityName: 'ContentVersionHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspace/{Id}:
    patch:
      summary: 'Update ContentWorkspace'
      description: 'UpdateContentWorkspace'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentWorkspace':
          summary: 'Update Library'
          description: 'Updates an existing library; only elements specified in the
            request are updated.'
          entityName: 'ContentWorkspace'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspace':
          summary: 'Upsert Library'
          description: 'Upsert an existing library only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspace'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentWorkspace'
      description: 'DeleteContentWorkspace'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentWorkspace':
          summary: 'Delete Library'
          description: 'Delete an existing library only elements specified in the
            request are deleted.'
          entityName: 'ContentWorkspace'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspaceDoc/{Id}:
    patch:
      summary: 'Update ContentWorkspaceDoc'
      description: 'UpdateContentWorkspaceDoc'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentWorkspaceDoc':
          summary: 'Update Library Document'
          description: 'Updates an existing library document; only elements specified
            in the request are updated.'
          entityName: 'ContentWorkspaceDoc'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspaceDoc':
          summary: 'Upsert Library Document'
          description: 'Upsert an existing library document only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspaceDoc'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentWorkspaceDoc'
      description: 'DeleteContentWorkspaceDoc'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentWorkspaceDoc':
          summary: 'Delete Library Document'
          description: 'Delete an existing library document only elements specified
            in the request are deleted.'
          entityName: 'ContentWorkspaceDoc'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspaceMember/{Id}:
    patch:
      summary: 'Update ContentWorkspaceMember'
      description: 'UpdateContentWorkspaceMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentWorkspaceMember':
          summary: 'Update Library Member'
          description: 'Updates an existing library member; only elements specified
            in the request are updated.'
          entityName: 'ContentWorkspaceMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspaceMember':
          summary: 'Upsert Library Member'
          description: 'Upsert an existing library member only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspaceMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentWorkspaceMember'
      description: 'DeleteContentWorkspaceMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentWorkspaceMember':
          summary: 'Delete Library Member'
          description: 'Delete an existing library member only elements specified
            in the request are deleted.'
          entityName: 'ContentWorkspaceMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContentWorkspacePermission/{Id}:
    patch:
      summary: 'Update ContentWorkspacePermission'
      description: 'UpdateContentWorkspacePermission'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContentWorkspacePermission':
          summary: 'Update Library Permission'
          description: 'Updates an existing library permission; only elements specified
            in the request are updated.'
          entityName: 'ContentWorkspacePermission'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspacePermission':
          summary: 'Upsert Library Permission'
          description: 'Upsert an existing library permission only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspacePermission'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContentWorkspacePermission'
      description: 'DeleteContentWorkspacePermission'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContentWorkspacePermission':
          summary: 'Delete Library Permission'
          description: 'Delete an existing library permission only elements specified
            in the request are deleted.'
          entityName: 'ContentWorkspacePermission'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Contract/{Id}:
    patch:
      summary: 'Update Contract'
      description: 'UpdateContract'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContract':
          summary: 'Update Contract'
          description: 'Updates an existing contract; only elements specified in the
            request are updated.'
          entityName: 'Contract'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContract':
          summary: 'Upsert Contract'
          description: 'Upsert an existing contract only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Contract'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Contract'
      description: 'DeleteContract'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContract':
          summary: 'Delete Contract'
          description: 'Delete an existing contract only elements specified in the
            request are deleted.'
          entityName: 'Contract'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractChangeEvent/{Id}:
    patch:
      summary: 'Update ContractChangeEvent'
      description: 'UpdateContractChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContractChangeEvent':
          summary: 'Update Contract Change Event'
          description: 'Updates an existing contract change event; only elements specified
            in the request are updated.'
          entityName: 'ContractChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractChangeEvent':
          summary: 'Upsert Contract Change Event'
          description: 'Upsert an existing contract change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContractChangeEvent'
      description: 'DeleteContractChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContractChangeEvent':
          summary: 'Delete Contract Change Event'
          description: 'Delete an existing contract change event only elements specified
            in the request are deleted.'
          entityName: 'ContractChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractContactRole/{Id}:
    patch:
      summary: 'Update ContractContactRole'
      description: 'UpdateContractContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContractContactRole':
          summary: 'Update Contract Contact Role'
          description: 'Updates an existing contract contact role; only elements specified
            in the request are updated.'
          entityName: 'ContractContactRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractContactRole':
          summary: 'Upsert Contract Contact Role'
          description: 'Upsert an existing contract contact role only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractContactRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContractContactRole'
      description: 'DeleteContractContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContractContactRole':
          summary: 'Delete Contract Contact Role'
          description: 'Delete an existing contract contact role only elements specified
            in the request are deleted.'
          entityName: 'ContractContactRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractHistory/{Id}:
    patch:
      summary: 'Update ContractHistory'
      description: 'UpdateContractHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContractHistory':
          summary: 'Update Contract History'
          description: 'Updates an existing contract history; only elements specified
            in the request are updated.'
          entityName: 'ContractHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractHistory':
          summary: 'Upsert Contract History'
          description: 'Upsert an existing contract history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContractHistory'
      description: 'DeleteContractHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContractHistory':
          summary: 'Delete Contract History'
          description: 'Delete an existing contract history only elements specified
            in the request are deleted.'
          entityName: 'ContractHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ContractStatus/{Id}:
    patch:
      summary: 'Update ContractStatus'
      description: 'UpdateContractStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateContractStatus':
          summary: 'Update Contract Status Value'
          description: 'Updates an existing contract status value; only elements specified
            in the request are updated.'
          entityName: 'ContractStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractStatus':
          summary: 'Upsert Contract Status Value'
          description: 'Upsert an existing contract status value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ContractStatus'
      description: 'DeleteContractStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteContractStatus':
          summary: 'Delete Contract Status Value'
          description: 'Delete an existing contract status value only elements specified
            in the request are deleted.'
          entityName: 'ContractStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CorsWhitelistEntry/{Id}:
    patch:
      summary: 'Update CorsWhitelistEntry'
      description: 'UpdateCorsWhitelistEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCorsWhitelistEntry':
          summary: 'Update CORS Allowed Origin List'
          description: 'Updates an existing cors allowed origin list; only elements
            specified in the request are updated.'
          entityName: 'CorsWhitelistEntry'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCorsWhitelistEntry':
          summary: 'Upsert CORS Allowed Origin List'
          description: 'Upsert an existing cors allowed origin list only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CorsWhitelistEntry'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CorsWhitelistEntry'
      description: 'DeleteCorsWhitelistEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCorsWhitelistEntry':
          summary: 'Delete CORS Allowed Origin List'
          description: 'Delete an existing cors allowed origin list only elements
            specified in the request are deleted.'
          entityName: 'CorsWhitelistEntry'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CredentialStuffingEvent/{Id}:
    patch:
      summary: 'Update CredentialStuffingEvent'
      description: 'UpdateCredentialStuffingEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCredentialStuffingEvent':
          summary: 'Update Credential Stuffing Event'
          description: 'Updates an existing credential stuffing event; only elements
            specified in the request are updated.'
          entityName: 'CredentialStuffingEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCredentialStuffingEvent':
          summary: 'Upsert Credential Stuffing Event'
          description: 'Upsert an existing credential stuffing event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CredentialStuffingEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CredentialStuffingEvent'
      description: 'DeleteCredentialStuffingEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCredentialStuffingEvent':
          summary: 'Delete Credential Stuffing Event'
          description: 'Delete an existing credential stuffing event only elements
            specified in the request are deleted.'
          entityName: 'CredentialStuffingEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CredentialStuffingEventStore/{Id}:
    patch:
      summary: 'Update CredentialStuffingEventStore'
      description: 'UpdateCredentialStuffingEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCredentialStuffingEventStore':
          summary: 'Update Credential Stuffing Event Store'
          description: 'Updates an existing credential stuffing event store; only
            elements specified in the request are updated.'
          entityName: 'CredentialStuffingEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCredentialStuffingEventStore':
          summary: 'Upsert Credential Stuffing Event Store'
          description: 'Upsert an existing credential stuffing event store only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CredentialStuffingEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CredentialStuffingEventStore'
      description: 'DeleteCredentialStuffingEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCredentialStuffingEventStore':
          summary: 'Delete Credential Stuffing Event Store'
          description: 'Delete an existing credential stuffing event store only elements
            specified in the request are deleted.'
          entityName: 'CredentialStuffingEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CronJobDetail/{Id}:
    patch:
      summary: 'Update CronJobDetail'
      description: 'UpdateCronJobDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCronJobDetail':
          summary: 'Update Cron Job'
          description: 'Updates an existing cron job; only elements specified in the
            request are updated.'
          entityName: 'CronJobDetail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCronJobDetail':
          summary: 'Upsert Cron Job'
          description: 'Upsert an existing cron job only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'CronJobDetail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CronJobDetail'
      description: 'DeleteCronJobDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCronJobDetail':
          summary: 'Delete Cron Job'
          description: 'Delete an existing cron job only elements specified in the
            request are deleted.'
          entityName: 'CronJobDetail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CronTrigger/{Id}:
    patch:
      summary: 'Update CronTrigger'
      description: 'UpdateCronTrigger'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCronTrigger':
          summary: 'Update Scheduled Jobs'
          description: 'Updates an existing scheduled jobs; only elements specified
            in the request are updated.'
          entityName: 'CronTrigger'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCronTrigger':
          summary: 'Upsert Scheduled Jobs'
          description: 'Upsert an existing scheduled jobs only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CronTrigger'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CronTrigger'
      description: 'DeleteCronTrigger'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCronTrigger':
          summary: 'Delete Scheduled Jobs'
          description: 'Delete an existing scheduled jobs only elements specified
            in the request are deleted.'
          entityName: 'CronTrigger'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CspTrustedSite/{Id}:
    patch:
      summary: 'Update CspTrustedSite'
      description: 'UpdateCspTrustedSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCspTrustedSite':
          summary: 'Update Content Security Policy Trusted Site'
          description: 'Updates an existing content security policy trusted site;
            only elements specified in the request are updated.'
          entityName: 'CspTrustedSite'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCspTrustedSite':
          summary: 'Upsert Content Security Policy Trusted Site'
          description: 'Upsert an existing content security policy trusted site only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CspTrustedSite'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CspTrustedSite'
      description: 'DeleteCspTrustedSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCspTrustedSite':
          summary: 'Delete Content Security Policy Trusted Site'
          description: 'Delete an existing content security policy trusted site only
            elements specified in the request are deleted.'
          entityName: 'CspTrustedSite'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomBrand/{Id}:
    patch:
      summary: 'Update CustomBrand'
      description: 'UpdateCustomBrand'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomBrand':
          summary: 'Update Custom Brand'
          description: 'Updates an existing custom brand; only elements specified
            in the request are updated.'
          entityName: 'CustomBrand'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomBrand':
          summary: 'Upsert Custom Brand'
          description: 'Upsert an existing custom brand only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomBrand'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomBrand'
      description: 'DeleteCustomBrand'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomBrand':
          summary: 'Delete Custom Brand'
          description: 'Delete an existing custom brand only elements specified in
            the request are deleted.'
          entityName: 'CustomBrand'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomBrandAsset/{Id}:
    patch:
      summary: 'Update CustomBrandAsset'
      description: 'UpdateCustomBrandAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomBrandAsset':
          summary: 'Update Custom Brand Asset'
          description: 'Updates an existing custom brand asset; only elements specified
            in the request are updated.'
          entityName: 'CustomBrandAsset'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomBrandAsset':
          summary: 'Upsert Custom Brand Asset'
          description: 'Upsert an existing custom brand asset only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomBrandAsset'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomBrandAsset'
      description: 'DeleteCustomBrandAsset'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomBrandAsset':
          summary: 'Delete Custom Brand Asset'
          description: 'Delete an existing custom brand asset only elements specified
            in the request are deleted.'
          entityName: 'CustomBrandAsset'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomHelpMenuItem/{Id}:
    patch:
      summary: 'Update CustomHelpMenuItem'
      description: 'UpdateCustomHelpMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomHelpMenuItem':
          summary: 'Update Custom Help Menu Item'
          description: 'Updates an existing custom help menu item; only elements specified
            in the request are updated.'
          entityName: 'CustomHelpMenuItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomHelpMenuItem':
          summary: 'Upsert Custom Help Menu Item'
          description: 'Upsert an existing custom help menu item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHelpMenuItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomHelpMenuItem'
      description: 'DeleteCustomHelpMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomHelpMenuItem':
          summary: 'Delete Custom Help Menu Item'
          description: 'Delete an existing custom help menu item only elements specified
            in the request are deleted.'
          entityName: 'CustomHelpMenuItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomHelpMenuSection/{Id}:
    patch:
      summary: 'Update CustomHelpMenuSection'
      description: 'UpdateCustomHelpMenuSection'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomHelpMenuSection':
          summary: 'Update Custom Help Menu Section'
          description: 'Updates an existing custom help menu section; only elements
            specified in the request are updated.'
          entityName: 'CustomHelpMenuSection'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomHelpMenuSection':
          summary: 'Upsert Custom Help Menu Section'
          description: 'Upsert an existing custom help menu section only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHelpMenuSection'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomHelpMenuSection'
      description: 'DeleteCustomHelpMenuSection'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomHelpMenuSection':
          summary: 'Delete Custom Help Menu Section'
          description: 'Delete an existing custom help menu section only elements
            specified in the request are deleted.'
          entityName: 'CustomHelpMenuSection'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomHttpHeader/{Id}:
    patch:
      summary: 'Update CustomHttpHeader'
      description: 'UpdateCustomHttpHeader'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomHttpHeader':
          summary: 'Update Custom HTTP Header'
          description: 'Updates an existing custom http header; only elements specified
            in the request are updated.'
          entityName: 'CustomHttpHeader'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomHttpHeader':
          summary: 'Upsert Custom HTTP Header'
          description: 'Upsert an existing custom http header only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHttpHeader'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomHttpHeader'
      description: 'DeleteCustomHttpHeader'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomHttpHeader':
          summary: 'Delete Custom HTTP Header'
          description: 'Delete an existing custom http header only elements specified
            in the request are deleted.'
          entityName: 'CustomHttpHeader'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomNotificationType/{Id}:
    patch:
      summary: 'Update CustomNotificationType'
      description: 'UpdateCustomNotificationType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomNotificationType':
          summary: 'Update Custom Notification Type'
          description: 'Updates an existing custom notification type; only elements
            specified in the request are updated.'
          entityName: 'CustomNotificationType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomNotificationType':
          summary: 'Upsert Custom Notification Type'
          description: 'Upsert an existing custom notification type only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomNotificationType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomNotificationType'
      description: 'DeleteCustomNotificationType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomNotificationType':
          summary: 'Delete Custom Notification Type'
          description: 'Delete an existing custom notification type only elements
            specified in the request are deleted.'
          entityName: 'CustomNotificationType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomObjectUserLicenseMetrics/{Id}:
    patch:
      summary: 'Update CustomObjectUserLicenseMetrics'
      description: 'UpdateCustomObjectUserLicenseMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomObjectUserLicenseMetrics':
          summary: 'Update Custom Object Usage By User License Metric'
          description: 'Updates an existing custom object usage by user license metric;
            only elements specified in the request are updated.'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomObjectUserLicenseMetrics':
          summary: 'Upsert Custom Object Usage By User License Metric'
          description: 'Upsert an existing custom object usage by user license metric
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomObjectUserLicenseMetrics'
      description: 'DeleteCustomObjectUserLicenseMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomObjectUserLicenseMetrics':
          summary: 'Delete Custom Object Usage By User License Metric'
          description: 'Delete an existing custom object usage by user license metric
            only elements specified in the request are deleted.'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomPermission/{Id}:
    patch:
      summary: 'Update CustomPermission'
      description: 'UpdateCustomPermission'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomPermission':
          summary: 'Update Custom Permission'
          description: 'Updates an existing custom permission; only elements specified
            in the request are updated.'
          entityName: 'CustomPermission'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomPermission':
          summary: 'Upsert Custom Permission'
          description: 'Upsert an existing custom permission only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomPermission'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomPermission'
      description: 'DeleteCustomPermission'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomPermission':
          summary: 'Delete Custom Permission'
          description: 'Delete an existing custom permission only elements specified
            in the request are deleted.'
          entityName: 'CustomPermission'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomPermissionDependency/{Id}:
    patch:
      summary: 'Update CustomPermissionDependency'
      description: 'UpdateCustomPermissionDependency'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomPermissionDependency':
          summary: 'Update Custom Permission Dependency'
          description: 'Updates an existing custom permission dependency; only elements
            specified in the request are updated.'
          entityName: 'CustomPermissionDependency'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomPermissionDependency':
          summary: 'Upsert Custom Permission Dependency'
          description: 'Upsert an existing custom permission dependency only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomPermissionDependency'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomPermissionDependency'
      description: 'DeleteCustomPermissionDependency'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomPermissionDependency':
          summary: 'Delete Custom Permission Dependency'
          description: 'Delete an existing custom permission dependency only elements
            specified in the request are deleted.'
          entityName: 'CustomPermissionDependency'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Customer/{Id}:
    patch:
      summary: 'Update Customer'
      description: 'UpdateCustomer'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomer':
          summary: 'Update Customer'
          description: 'Updates an existing customer; only elements specified in the
            request are updated.'
          entityName: 'Customer'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomer':
          summary: 'Upsert Customer'
          description: 'Upsert an existing customer only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Customer'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Customer'
      description: 'DeleteCustomer'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomer':
          summary: 'Delete Customer'
          description: 'Delete an existing customer only elements specified in the
            request are deleted.'
          entityName: 'Customer'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/CustomerShare/{Id}:
    patch:
      summary: 'Update CustomerShare'
      description: 'UpdateCustomerShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateCustomerShare':
          summary: 'Update Customer Share'
          description: 'Updates an existing customer share; only elements specified
            in the request are updated.'
          entityName: 'CustomerShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomerShare':
          summary: 'Upsert Customer Share'
          description: 'Upsert an existing customer share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomerShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete CustomerShare'
      description: 'DeleteCustomerShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteCustomerShare':
          summary: 'Delete Customer Share'
          description: 'Delete an existing customer share only elements specified
            in the request are deleted.'
          entityName: 'CustomerShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Dashboard/{Id}:
    patch:
      summary: 'Update Dashboard'
      description: 'UpdateDashboard'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDashboard':
          summary: 'Update Dashboard'
          description: 'Updates an existing dashboard; only elements specified in
            the request are updated.'
          entityName: 'Dashboard'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDashboard':
          summary: 'Upsert Dashboard'
          description: 'Upsert an existing dashboard only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Dashboard'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Dashboard'
      description: 'DeleteDashboard'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDashboard':
          summary: 'Delete Dashboard'
          description: 'Delete an existing dashboard only elements specified in the
            request are deleted.'
          entityName: 'Dashboard'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DashboardComponent/{Id}:
    patch:
      summary: 'Update DashboardComponent'
      description: 'UpdateDashboardComponent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDashboardComponent':
          summary: 'Update Dashboard Component'
          description: 'Updates an existing dashboard component; only elements specified
            in the request are updated.'
          entityName: 'DashboardComponent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDashboardComponent':
          summary: 'Upsert Dashboard Component'
          description: 'Upsert an existing dashboard component only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DashboardComponent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DashboardComponent'
      description: 'DeleteDashboardComponent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDashboardComponent':
          summary: 'Delete Dashboard Component'
          description: 'Delete an existing dashboard component only elements specified
            in the request are deleted.'
          entityName: 'DashboardComponent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataAssessmentFieldMetric/{Id}:
    patch:
      summary: 'Update DataAssessmentFieldMetric'
      description: 'UpdateDataAssessmentFieldMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataAssessmentFieldMetric':
          summary: 'Update Data Assessment Field Metric'
          description: 'Updates an existing data assessment field metric; only elements
            specified in the request are updated.'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataAssessmentFieldMetric':
          summary: 'Upsert Data Assessment Field Metric'
          description: 'Upsert an existing data assessment field metric only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataAssessmentFieldMetric'
      description: 'DeleteDataAssessmentFieldMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataAssessmentFieldMetric':
          summary: 'Delete Data Assessment Field Metric'
          description: 'Delete an existing data assessment field metric only elements
            specified in the request are deleted.'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataAssessmentMetric/{Id}:
    patch:
      summary: 'Update DataAssessmentMetric'
      description: 'UpdateDataAssessmentMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataAssessmentMetric':
          summary: 'Update Data Assessment Metric'
          description: 'Updates an existing data assessment metric; only elements
            specified in the request are updated.'
          entityName: 'DataAssessmentMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataAssessmentMetric':
          summary: 'Upsert Data Assessment Metric'
          description: 'Upsert an existing data assessment metric only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataAssessmentMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataAssessmentMetric'
      description: 'DeleteDataAssessmentMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataAssessmentMetric':
          summary: 'Delete Data Assessment Metric'
          description: 'Delete an existing data assessment metric only elements specified
            in the request are deleted.'
          entityName: 'DataAssessmentMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataAssessmentValueMetric/{Id}:
    patch:
      summary: 'Update DataAssessmentValueMetric'
      description: 'UpdateDataAssessmentValueMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataAssessmentValueMetric':
          summary: 'Update Data Assessment Field Value Metric'
          description: 'Updates an existing data assessment field value metric; only
            elements specified in the request are updated.'
          entityName: 'DataAssessmentValueMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataAssessmentValueMetric':
          summary: 'Upsert Data Assessment Field Value Metric'
          description: 'Upsert an existing data assessment field value metric only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataAssessmentValueMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataAssessmentValueMetric'
      description: 'DeleteDataAssessmentValueMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataAssessmentValueMetric':
          summary: 'Delete Data Assessment Field Value Metric'
          description: 'Delete an existing data assessment field value metric only
            elements specified in the request are deleted.'
          entityName: 'DataAssessmentValueMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataObjectDataChgEvent/{Id}:
    patch:
      summary: 'Update DataObjectDataChgEvent'
      description: 'UpdateDataObjectDataChgEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataObjectDataChgEvent':
          summary: 'Update Data Object Data Change Event'
          description: 'Updates an existing data object data change event; only elements
            specified in the request are updated.'
          entityName: 'DataObjectDataChgEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataObjectDataChgEvent':
          summary: 'Upsert Data Object Data Change Event'
          description: 'Upsert an existing data object data change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataObjectDataChgEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataObjectDataChgEvent'
      description: 'DeleteDataObjectDataChgEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataObjectDataChgEvent':
          summary: 'Delete Data Object Data Change Event'
          description: 'Delete an existing data object data change event only elements
            specified in the request are deleted.'
          entityName: 'DataObjectDataChgEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataStatistics/{Id}:
    patch:
      summary: 'Update DataStatistics'
      description: 'UpdateDataStatistics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataStatistics':
          summary: 'Update Data Statistics'
          description: 'Updates an existing data statistics; only elements specified
            in the request are updated.'
          entityName: 'DataStatistics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataStatistics':
          summary: 'Upsert Data Statistics'
          description: 'Upsert an existing data statistics only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataStatistics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataStatistics'
      description: 'DeleteDataStatistics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataStatistics':
          summary: 'Delete Data Statistics'
          description: 'Delete an existing data statistics only elements specified
            in the request are deleted.'
          entityName: 'DataStatistics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataType/{Id}:
    patch:
      summary: 'Update DataType'
      description: 'UpdateDataType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataType':
          summary: 'Update Data Type'
          description: 'Updates an existing data type; only elements specified in
            the request are updated.'
          entityName: 'DataType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataType':
          summary: 'Upsert Data Type'
          description: 'Upsert an existing data type only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'DataType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataType'
      description: 'DeleteDataType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataType':
          summary: 'Delete Data Type'
          description: 'Delete an existing data type only elements specified in the
            request are deleted.'
          entityName: 'DataType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUseLegalBasis/{Id}:
    patch:
      summary: 'Update DataUseLegalBasis'
      description: 'UpdateDataUseLegalBasis'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataUseLegalBasis':
          summary: 'Update Data Use Legal Basis'
          description: 'Updates an existing data use legal basis; only elements specified
            in the request are updated.'
          entityName: 'DataUseLegalBasis'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUseLegalBasis':
          summary: 'Upsert Data Use Legal Basis'
          description: 'Upsert an existing data use legal basis only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUseLegalBasis'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataUseLegalBasis'
      description: 'DeleteDataUseLegalBasis'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataUseLegalBasis':
          summary: 'Delete Data Use Legal Basis'
          description: 'Delete an existing data use legal basis only elements specified
            in the request are deleted.'
          entityName: 'DataUseLegalBasis'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUseLegalBasisHistory/{Id}:
    patch:
      summary: 'Update DataUseLegalBasisHistory'
      description: 'UpdateDataUseLegalBasisHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataUseLegalBasisHistory':
          summary: 'Update Data Use Legal Basis  History'
          description: 'Updates an existing data use legal basis  history; only elements
            specified in the request are updated.'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUseLegalBasisHistory':
          summary: 'Upsert Data Use Legal Basis  History'
          description: 'Upsert an existing data use legal basis  history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataUseLegalBasisHistory'
      description: 'DeleteDataUseLegalBasisHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataUseLegalBasisHistory':
          summary: 'Delete Data Use Legal Basis  History'
          description: 'Delete an existing data use legal basis  history only elements
            specified in the request are deleted.'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUseLegalBasisShare/{Id}:
    patch:
      summary: 'Update DataUseLegalBasisShare'
      description: 'UpdateDataUseLegalBasisShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataUseLegalBasisShare':
          summary: 'Update Data Use Legal Basis Share'
          description: 'Updates an existing data use legal basis share; only elements
            specified in the request are updated.'
          entityName: 'DataUseLegalBasisShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUseLegalBasisShare':
          summary: 'Upsert Data Use Legal Basis Share'
          description: 'Upsert an existing data use legal basis share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUseLegalBasisShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataUseLegalBasisShare'
      description: 'DeleteDataUseLegalBasisShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataUseLegalBasisShare':
          summary: 'Delete Data Use Legal Basis Share'
          description: 'Delete an existing data use legal basis share only elements
            specified in the request are deleted.'
          entityName: 'DataUseLegalBasisShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUsePurpose/{Id}:
    patch:
      summary: 'Update DataUsePurpose'
      description: 'UpdateDataUsePurpose'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataUsePurpose':
          summary: 'Update Data Use Purpose'
          description: 'Updates an existing data use purpose; only elements specified
            in the request are updated.'
          entityName: 'DataUsePurpose'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUsePurpose':
          summary: 'Upsert Data Use Purpose'
          description: 'Upsert an existing data use purpose only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurpose'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataUsePurpose'
      description: 'DeleteDataUsePurpose'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataUsePurpose':
          summary: 'Delete Data Use Purpose'
          description: 'Delete an existing data use purpose only elements specified
            in the request are deleted.'
          entityName: 'DataUsePurpose'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUsePurposeHistory/{Id}:
    patch:
      summary: 'Update DataUsePurposeHistory'
      description: 'UpdateDataUsePurposeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataUsePurposeHistory':
          summary: 'Update Data Use Purpose  History'
          description: 'Updates an existing data use purpose  history; only elements
            specified in the request are updated.'
          entityName: 'DataUsePurposeHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUsePurposeHistory':
          summary: 'Upsert Data Use Purpose  History'
          description: 'Upsert an existing data use purpose  history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurposeHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataUsePurposeHistory'
      description: 'DeleteDataUsePurposeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataUsePurposeHistory':
          summary: 'Delete Data Use Purpose  History'
          description: 'Delete an existing data use purpose  history only elements
            specified in the request are deleted.'
          entityName: 'DataUsePurposeHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DataUsePurposeShare/{Id}:
    patch:
      summary: 'Update DataUsePurposeShare'
      description: 'UpdateDataUsePurposeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDataUsePurposeShare':
          summary: 'Update Data Use Purpose Share'
          description: 'Updates an existing data use purpose share; only elements
            specified in the request are updated.'
          entityName: 'DataUsePurposeShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUsePurposeShare':
          summary: 'Upsert Data Use Purpose Share'
          description: 'Upsert an existing data use purpose share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurposeShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DataUsePurposeShare'
      description: 'DeleteDataUsePurposeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDataUsePurposeShare':
          summary: 'Delete Data Use Purpose Share'
          description: 'Delete an existing data use purpose share only elements specified
            in the request are deleted.'
          entityName: 'DataUsePurposeShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DatacloudAddress/{Id}:
    patch:
      summary: 'Update DatacloudAddress'
      description: 'UpdateDatacloudAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDatacloudAddress':
          summary: 'Update Data.com Address'
          description: 'Updates an existing data.com address; only elements specified
            in the request are updated.'
          entityName: 'DatacloudAddress'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDatacloudAddress':
          summary: 'Upsert Data.com Address'
          description: 'Upsert an existing data.com address only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DatacloudAddress'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DatacloudAddress'
      description: 'DeleteDatacloudAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDatacloudAddress':
          summary: 'Delete Data.com Address'
          description: 'Delete an existing data.com address only elements specified
            in the request are deleted.'
          entityName: 'DatacloudAddress'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DeclinedEventRelation/{Id}:
    patch:
      summary: 'Update DeclinedEventRelation'
      description: 'UpdateDeclinedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDeclinedEventRelation':
          summary: 'Update Declined Event Relation'
          description: 'Updates an existing declined event relation; only elements
            specified in the request are updated.'
          entityName: 'DeclinedEventRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDeclinedEventRelation':
          summary: 'Upsert Declined Event Relation'
          description: 'Upsert an existing declined event relation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DeclinedEventRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DeclinedEventRelation'
      description: 'DeleteDeclinedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDeclinedEventRelation':
          summary: 'Delete Declined Event Relation'
          description: 'Delete an existing declined event relation only elements specified
            in the request are deleted.'
          entityName: 'DeclinedEventRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DeleteEvent/{Id}:
    patch:
      summary: 'Update DeleteEvent'
      description: 'UpdateDeleteEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDeleteEvent':
          summary: 'Update Recycle Bin Item'
          description: 'Updates an existing recycle bin item; only elements specified
            in the request are updated.'
          entityName: 'DeleteEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDeleteEvent':
          summary: 'Upsert Recycle Bin Item'
          description: 'Upsert an existing recycle bin item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DeleteEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DeleteEvent'
      description: 'DeleteDeleteEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDeleteEvent':
          summary: 'Delete Recycle Bin Item'
          description: 'Delete an existing recycle bin item only elements specified
            in the request are deleted.'
          entityName: 'DeleteEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Document/{Id}:
    patch:
      summary: 'Update Document'
      description: 'UpdateDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDocument':
          summary: 'Update Document'
          description: 'Updates an existing document; only elements specified in the
            request are updated.'
          entityName: 'Document'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDocument':
          summary: 'Upsert Document'
          description: 'Upsert an existing document only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Document'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Document'
      description: 'DeleteDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDocument':
          summary: 'Delete Document'
          description: 'Delete an existing document only elements specified in the
            request are deleted.'
          entityName: 'Document'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DocumentAttachmentMap/{Id}:
    patch:
      summary: 'Update DocumentAttachmentMap'
      description: 'UpdateDocumentAttachmentMap'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDocumentAttachmentMap':
          summary: 'Update Document Entity Map'
          description: 'Updates an existing document entity map; only elements specified
            in the request are updated.'
          entityName: 'DocumentAttachmentMap'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDocumentAttachmentMap':
          summary: 'Upsert Document Entity Map'
          description: 'Upsert an existing document entity map only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DocumentAttachmentMap'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DocumentAttachmentMap'
      description: 'DeleteDocumentAttachmentMap'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDocumentAttachmentMap':
          summary: 'Delete Document Entity Map'
          description: 'Delete an existing document entity map only elements specified
            in the request are deleted.'
          entityName: 'DocumentAttachmentMap'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Domain/{Id}:
    patch:
      summary: 'Update Domain'
      description: 'UpdateDomain'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDomain':
          summary: 'Update Domain'
          description: 'Updates an existing domain; only elements specified in the
            request are updated.'
          entityName: 'Domain'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDomain':
          summary: 'Upsert Domain'
          description: 'Upsert an existing domain only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Domain'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Domain'
      description: 'DeleteDomain'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDomain':
          summary: 'Delete Domain'
          description: 'Delete an existing domain only elements specified in the request
            are deleted.'
          entityName: 'Domain'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DomainSite/{Id}:
    patch:
      summary: 'Update DomainSite'
      description: 'UpdateDomainSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDomainSite':
          summary: 'Update Custom URL'
          description: 'Updates an existing custom url; only elements specified in
            the request are updated.'
          entityName: 'DomainSite'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDomainSite':
          summary: 'Upsert Custom URL'
          description: 'Upsert an existing custom url only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'DomainSite'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DomainSite'
      description: 'DeleteDomainSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDomainSite':
          summary: 'Delete Custom URL'
          description: 'Delete an existing custom url only elements specified in the
            request are deleted.'
          entityName: 'DomainSite'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DuplicateRecordItem/{Id}:
    patch:
      summary: 'Update DuplicateRecordItem'
      description: 'UpdateDuplicateRecordItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDuplicateRecordItem':
          summary: 'Update Duplicate Record Item'
          description: 'Updates an existing duplicate record item; only elements specified
            in the request are updated.'
          entityName: 'DuplicateRecordItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDuplicateRecordItem':
          summary: 'Upsert Duplicate Record Item'
          description: 'Upsert an existing duplicate record item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRecordItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DuplicateRecordItem'
      description: 'DeleteDuplicateRecordItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDuplicateRecordItem':
          summary: 'Delete Duplicate Record Item'
          description: 'Delete an existing duplicate record item only elements specified
            in the request are deleted.'
          entityName: 'DuplicateRecordItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DuplicateRecordSet/{Id}:
    patch:
      summary: 'Update DuplicateRecordSet'
      description: 'UpdateDuplicateRecordSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDuplicateRecordSet':
          summary: 'Update Duplicate Record Set'
          description: 'Updates an existing duplicate record set; only elements specified
            in the request are updated.'
          entityName: 'DuplicateRecordSet'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDuplicateRecordSet':
          summary: 'Upsert Duplicate Record Set'
          description: 'Upsert an existing duplicate record set only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRecordSet'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DuplicateRecordSet'
      description: 'DeleteDuplicateRecordSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDuplicateRecordSet':
          summary: 'Delete Duplicate Record Set'
          description: 'Delete an existing duplicate record set only elements specified
            in the request are deleted.'
          entityName: 'DuplicateRecordSet'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/DuplicateRule/{Id}:
    patch:
      summary: 'Update DuplicateRule'
      description: 'UpdateDuplicateRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateDuplicateRule':
          summary: 'Update Duplicate Rule'
          description: 'Updates an existing duplicate rule; only elements specified
            in the request are updated.'
          entityName: 'DuplicateRule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDuplicateRule':
          summary: 'Upsert Duplicate Rule'
          description: 'Upsert an existing duplicate rule only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete DuplicateRule'
      description: 'DeleteDuplicateRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteDuplicateRule':
          summary: 'Delete Duplicate Rule'
          description: 'Delete an existing duplicate rule only elements specified
            in the request are deleted.'
          entityName: 'DuplicateRule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailCapture/{Id}:
    patch:
      summary: 'Update EmailCapture'
      description: 'UpdateEmailCapture'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailCapture':
          summary: 'Update EmailCapture'
          description: 'Updates an existing emailcapture; only elements specified
            in the request are updated.'
          entityName: 'EmailCapture'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailCapture':
          summary: 'Upsert EmailCapture'
          description: 'Upsert an existing emailcapture only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailCapture'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailCapture'
      description: 'DeleteEmailCapture'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailCapture':
          summary: 'Delete EmailCapture'
          description: 'Delete an existing emailcapture only elements specified in
            the request are deleted.'
          entityName: 'EmailCapture'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailDomainFilter/{Id}:
    patch:
      summary: 'Update EmailDomainFilter'
      description: 'UpdateEmailDomainFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailDomainFilter':
          summary: 'Update Email Domain Filter'
          description: 'Updates an existing email domain filter; only elements specified
            in the request are updated.'
          entityName: 'EmailDomainFilter'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailDomainFilter':
          summary: 'Upsert Email Domain Filter'
          description: 'Upsert an existing email domain filter only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailDomainFilter'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailDomainFilter'
      description: 'DeleteEmailDomainFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailDomainFilter':
          summary: 'Delete Email Domain Filter'
          description: 'Delete an existing email domain filter only elements specified
            in the request are deleted.'
          entityName: 'EmailDomainFilter'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailDomainKey/{Id}:
    patch:
      summary: 'Update EmailDomainKey'
      description: 'UpdateEmailDomainKey'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailDomainKey':
          summary: 'Update Email Domain Key'
          description: 'Updates an existing email domain key; only elements specified
            in the request are updated.'
          entityName: 'EmailDomainKey'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailDomainKey':
          summary: 'Upsert Email Domain Key'
          description: 'Upsert an existing email domain key only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailDomainKey'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailDomainKey'
      description: 'DeleteEmailDomainKey'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailDomainKey':
          summary: 'Delete Email Domain Key'
          description: 'Delete an existing email domain key only elements specified
            in the request are deleted.'
          entityName: 'EmailDomainKey'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailMessage/{Id}:
    patch:
      summary: 'Update EmailMessage'
      description: 'UpdateEmailMessage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailMessage':
          summary: 'Update Email Message'
          description: 'Updates an existing email message; only elements specified
            in the request are updated.'
          entityName: 'EmailMessage'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailMessage':
          summary: 'Upsert Email Message'
          description: 'Upsert an existing email message only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessage'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailMessage'
      description: 'DeleteEmailMessage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailMessage':
          summary: 'Delete Email Message'
          description: 'Delete an existing email message only elements specified in
            the request are deleted.'
          entityName: 'EmailMessage'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailMessageChangeEvent/{Id}:
    patch:
      summary: 'Update EmailMessageChangeEvent'
      description: 'UpdateEmailMessageChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailMessageChangeEvent':
          summary: 'Update Email Message Change Event'
          description: 'Updates an existing email message change event; only elements
            specified in the request are updated.'
          entityName: 'EmailMessageChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailMessageChangeEvent':
          summary: 'Upsert Email Message Change Event'
          description: 'Upsert an existing email message change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessageChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailMessageChangeEvent'
      description: 'DeleteEmailMessageChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailMessageChangeEvent':
          summary: 'Delete Email Message Change Event'
          description: 'Delete an existing email message change event only elements
            specified in the request are deleted.'
          entityName: 'EmailMessageChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailMessageRelation/{Id}:
    patch:
      summary: 'Update EmailMessageRelation'
      description: 'UpdateEmailMessageRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailMessageRelation':
          summary: 'Update Email Message Relation'
          description: 'Updates an existing email message relation; only elements
            specified in the request are updated.'
          entityName: 'EmailMessageRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailMessageRelation':
          summary: 'Upsert Email Message Relation'
          description: 'Upsert an existing email message relation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessageRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailMessageRelation'
      description: 'DeleteEmailMessageRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailMessageRelation':
          summary: 'Delete Email Message Relation'
          description: 'Delete an existing email message relation only elements specified
            in the request are deleted.'
          entityName: 'EmailMessageRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailRelay/{Id}:
    patch:
      summary: 'Update EmailRelay'
      description: 'UpdateEmailRelay'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailRelay':
          summary: 'Update Email Relay'
          description: 'Updates an existing email relay; only elements specified in
            the request are updated.'
          entityName: 'EmailRelay'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailRelay':
          summary: 'Upsert Email Relay'
          description: 'Upsert an existing email relay only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailRelay'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailRelay'
      description: 'DeleteEmailRelay'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailRelay':
          summary: 'Delete Email Relay'
          description: 'Delete an existing email relay only elements specified in
            the request are deleted.'
          entityName: 'EmailRelay'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailServicesAddress/{Id}:
    patch:
      summary: 'Update EmailServicesAddress'
      description: 'UpdateEmailServicesAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailServicesAddress':
          summary: 'Update Email Services Address'
          description: 'Updates an existing email services address; only elements
            specified in the request are updated.'
          entityName: 'EmailServicesAddress'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailServicesAddress':
          summary: 'Upsert Email Services Address'
          description: 'Upsert an existing email services address only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailServicesAddress'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailServicesAddress'
      description: 'DeleteEmailServicesAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailServicesAddress':
          summary: 'Delete Email Services Address'
          description: 'Delete an existing email services address only elements specified
            in the request are deleted.'
          entityName: 'EmailServicesAddress'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailServicesFunction/{Id}:
    patch:
      summary: 'Update EmailServicesFunction'
      description: 'UpdateEmailServicesFunction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailServicesFunction':
          summary: 'Update Email Service'
          description: 'Updates an existing email service; only elements specified
            in the request are updated.'
          entityName: 'EmailServicesFunction'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailServicesFunction':
          summary: 'Upsert Email Service'
          description: 'Upsert an existing email service only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailServicesFunction'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailServicesFunction'
      description: 'DeleteEmailServicesFunction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailServicesFunction':
          summary: 'Delete Email Service'
          description: 'Delete an existing email service only elements specified in
            the request are deleted.'
          entityName: 'EmailServicesFunction'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailStatus/{Id}:
    patch:
      summary: 'Update EmailStatus'
      description: 'UpdateEmailStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailStatus':
          summary: 'Update Email Status'
          description: 'Updates an existing email status; only elements specified
            in the request are updated.'
          entityName: 'EmailStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailStatus':
          summary: 'Upsert Email Status'
          description: 'Upsert an existing email status only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailStatus'
      description: 'DeleteEmailStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailStatus':
          summary: 'Delete Email Status'
          description: 'Delete an existing email status only elements specified in
            the request are deleted.'
          entityName: 'EmailStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailTemplate/{Id}:
    patch:
      summary: 'Update EmailTemplate'
      description: 'UpdateEmailTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailTemplate':
          summary: 'Update Email Template'
          description: 'Updates an existing email template; only elements specified
            in the request are updated.'
          entityName: 'EmailTemplate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailTemplate':
          summary: 'Upsert Email Template'
          description: 'Upsert an existing email template only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailTemplate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailTemplate'
      description: 'DeleteEmailTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailTemplate':
          summary: 'Delete Email Template'
          description: 'Delete an existing email template only elements specified
            in the request are deleted.'
          entityName: 'EmailTemplate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmailTemplateChangeEvent/{Id}:
    patch:
      summary: 'Update EmailTemplateChangeEvent'
      description: 'UpdateEmailTemplateChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmailTemplateChangeEvent':
          summary: 'Update Email Template Change Event'
          description: 'Updates an existing email template change event; only elements
            specified in the request are updated.'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailTemplateChangeEvent':
          summary: 'Upsert Email Template Change Event'
          description: 'Upsert an existing email template change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmailTemplateChangeEvent'
      description: 'DeleteEmailTemplateChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmailTemplateChangeEvent':
          summary: 'Delete Email Template Change Event'
          description: 'Delete an existing email template change event only elements
            specified in the request are deleted.'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmbeddedServiceDetail/{Id}:
    patch:
      summary: 'Update EmbeddedServiceDetail'
      description: 'UpdateEmbeddedServiceDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmbeddedServiceDetail':
          summary: 'Update Embedded Service'
          description: 'Updates an existing embedded service; only elements specified
            in the request are updated.'
          entityName: 'EmbeddedServiceDetail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmbeddedServiceDetail':
          summary: 'Upsert Embedded Service'
          description: 'Upsert an existing embedded service only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmbeddedServiceDetail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmbeddedServiceDetail'
      description: 'DeleteEmbeddedServiceDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmbeddedServiceDetail':
          summary: 'Delete Embedded Service'
          description: 'Delete an existing embedded service only elements specified
            in the request are deleted.'
          entityName: 'EmbeddedServiceDetail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EmbeddedServiceLabel/{Id}:
    patch:
      summary: 'Update EmbeddedServiceLabel'
      description: 'UpdateEmbeddedServiceLabel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEmbeddedServiceLabel':
          summary: 'Update Embedded Service Label'
          description: 'Updates an existing embedded service label; only elements
            specified in the request are updated.'
          entityName: 'EmbeddedServiceLabel'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmbeddedServiceLabel':
          summary: 'Upsert Embedded Service Label'
          description: 'Upsert an existing embedded service label only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmbeddedServiceLabel'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EmbeddedServiceLabel'
      description: 'DeleteEmbeddedServiceLabel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEmbeddedServiceLabel':
          summary: 'Delete Embedded Service Label'
          description: 'Delete an existing embedded service label only elements specified
            in the request are deleted.'
          entityName: 'EmbeddedServiceLabel'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EngagementChannelType/{Id}:
    patch:
      summary: 'Update EngagementChannelType'
      description: 'UpdateEngagementChannelType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEngagementChannelType':
          summary: 'Update Engagement Channel Type'
          description: 'Updates an existing engagement channel type; only elements
            specified in the request are updated.'
          entityName: 'EngagementChannelType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEngagementChannelType':
          summary: 'Upsert Engagement Channel Type'
          description: 'Upsert an existing engagement channel type only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EngagementChannelType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EngagementChannelType'
      description: 'DeleteEngagementChannelType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEngagementChannelType':
          summary: 'Delete Engagement Channel Type'
          description: 'Delete an existing engagement channel type only elements specified
            in the request are deleted.'
          entityName: 'EngagementChannelType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EngagementChannelTypeHistory/{Id}:
    patch:
      summary: 'Update EngagementChannelTypeHistory'
      description: 'UpdateEngagementChannelTypeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEngagementChannelTypeHistory':
          summary: 'Update Engagement Channel Type  History'
          description: 'Updates an existing engagement channel type  history; only
            elements specified in the request are updated.'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEngagementChannelTypeHistory':
          summary: 'Upsert Engagement Channel Type  History'
          description: 'Upsert an existing engagement channel type  history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EngagementChannelTypeHistory'
      description: 'DeleteEngagementChannelTypeHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEngagementChannelTypeHistory':
          summary: 'Delete Engagement Channel Type  History'
          description: 'Delete an existing engagement channel type  history only elements
            specified in the request are deleted.'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EngagementChannelTypeShare/{Id}:
    patch:
      summary: 'Update EngagementChannelTypeShare'
      description: 'UpdateEngagementChannelTypeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEngagementChannelTypeShare':
          summary: 'Update Engagement Channel Type Share'
          description: 'Updates an existing engagement channel type share; only elements
            specified in the request are updated.'
          entityName: 'EngagementChannelTypeShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEngagementChannelTypeShare':
          summary: 'Upsert Engagement Channel Type Share'
          description: 'Upsert an existing engagement channel type share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EngagementChannelTypeShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EngagementChannelTypeShare'
      description: 'DeleteEngagementChannelTypeShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEngagementChannelTypeShare':
          summary: 'Delete Engagement Channel Type Share'
          description: 'Delete an existing engagement channel type share only elements
            specified in the request are deleted.'
          entityName: 'EngagementChannelTypeShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EntityDefinition/{Id}:
    patch:
      summary: 'Update EntityDefinition'
      description: 'UpdateEntityDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEntityDefinition':
          summary: 'Update Entity Definition'
          description: 'Updates an existing entity definition; only elements specified
            in the request are updated.'
          entityName: 'EntityDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEntityDefinition':
          summary: 'Upsert Entity Definition'
          description: 'Upsert an existing entity definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EntityDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EntityDefinition'
      description: 'DeleteEntityDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEntityDefinition':
          summary: 'Delete Entity Definition'
          description: 'Delete an existing entity definition only elements specified
            in the request are deleted.'
          entityName: 'EntityDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EntityParticle/{Id}:
    patch:
      summary: 'Update EntityParticle'
      description: 'UpdateEntityParticle'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEntityParticle':
          summary: 'Update Entity Particle'
          description: 'Updates an existing entity particle; only elements specified
            in the request are updated.'
          entityName: 'EntityParticle'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEntityParticle':
          summary: 'Upsert Entity Particle'
          description: 'Upsert an existing entity particle only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EntityParticle'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EntityParticle'
      description: 'DeleteEntityParticle'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEntityParticle':
          summary: 'Delete Entity Particle'
          description: 'Delete an existing entity particle only elements specified
            in the request are deleted.'
          entityName: 'EntityParticle'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Event/{Id}:
    patch:
      summary: 'Update Event'
      description: 'UpdateEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEvent':
          summary: 'Update Event'
          description: 'Updates an existing event; only elements specified in the
            request are updated.'
          entityName: 'Event'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEvent':
          summary: 'Upsert Event'
          description: 'Upsert an existing event only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Event'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Event'
      description: 'DeleteEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEvent':
          summary: 'Delete Event'
          description: 'Delete an existing event only elements specified in the request
            are deleted.'
          entityName: 'Event'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventBusSubscriber/{Id}:
    patch:
      summary: 'Update EventBusSubscriber'
      description: 'UpdateEventBusSubscriber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventBusSubscriber':
          summary: 'Update Platform Event Subscription'
          description: 'Updates an existing platform event subscription; only elements
            specified in the request are updated.'
          entityName: 'EventBusSubscriber'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventBusSubscriber':
          summary: 'Upsert Platform Event Subscription'
          description: 'Upsert an existing platform event subscription only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventBusSubscriber'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventBusSubscriber'
      description: 'DeleteEventBusSubscriber'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventBusSubscriber':
          summary: 'Delete Platform Event Subscription'
          description: 'Delete an existing platform event subscription only elements
            specified in the request are deleted.'
          entityName: 'EventBusSubscriber'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventChangeEvent/{Id}:
    patch:
      summary: 'Update EventChangeEvent'
      description: 'UpdateEventChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventChangeEvent':
          summary: 'Update Event Change Event'
          description: 'Updates an existing event change event; only elements specified
            in the request are updated.'
          entityName: 'EventChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventChangeEvent':
          summary: 'Upsert Event Change Event'
          description: 'Upsert an existing event change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventChangeEvent'
      description: 'DeleteEventChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventChangeEvent':
          summary: 'Delete Event Change Event'
          description: 'Delete an existing event change event only elements specified
            in the request are deleted.'
          entityName: 'EventChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventLogFile/{Id}:
    patch:
      summary: 'Update EventLogFile'
      description: 'UpdateEventLogFile'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventLogFile':
          summary: 'Update Event Log File'
          description: 'Updates an existing event log file; only elements specified
            in the request are updated.'
          entityName: 'EventLogFile'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventLogFile':
          summary: 'Upsert Event Log File'
          description: 'Upsert an existing event log file only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventLogFile'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventLogFile'
      description: 'DeleteEventLogFile'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventLogFile':
          summary: 'Delete Event Log File'
          description: 'Delete an existing event log file only elements specified
            in the request are deleted.'
          entityName: 'EventLogFile'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelation/{Id}:
    patch:
      summary: 'Update EventRelation'
      description: 'UpdateEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventRelation':
          summary: 'Update Event Relation'
          description: 'Updates an existing event relation; only elements specified
            in the request are updated.'
          entityName: 'EventRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelation':
          summary: 'Upsert Event Relation'
          description: 'Upsert an existing event relation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventRelation'
      description: 'DeleteEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventRelation':
          summary: 'Delete Event Relation'
          description: 'Delete an existing event relation only elements specified
            in the request are deleted.'
          entityName: 'EventRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelationChangeEvent/{Id}:
    patch:
      summary: 'Update EventRelationChangeEvent'
      description: 'UpdateEventRelationChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventRelationChangeEvent':
          summary: 'Update Event Relation Change Event'
          description: 'Updates an existing event relation change event; only elements
            specified in the request are updated.'
          entityName: 'EventRelationChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelationChangeEvent':
          summary: 'Upsert Event Relation Change Event'
          description: 'Upsert an existing event relation change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelationChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventRelationChangeEvent'
      description: 'DeleteEventRelationChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventRelationChangeEvent':
          summary: 'Delete Event Relation Change Event'
          description: 'Delete an existing event relation change event only elements
            specified in the request are deleted.'
          entityName: 'EventRelationChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelayConfig/{Id}:
    patch:
      summary: 'Update EventRelayConfig'
      description: 'UpdateEventRelayConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventRelayConfig':
          summary: 'Update Event Relay Config'
          description: 'Updates an existing event relay config; only elements specified
            in the request are updated.'
          entityName: 'EventRelayConfig'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelayConfig':
          summary: 'Upsert Event Relay Config'
          description: 'Upsert an existing event relay config only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayConfig'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventRelayConfig'
      description: 'DeleteEventRelayConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventRelayConfig':
          summary: 'Delete Event Relay Config'
          description: 'Delete an existing event relay config only elements specified
            in the request are deleted.'
          entityName: 'EventRelayConfig'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelayConfigChangeEvent/{Id}:
    patch:
      summary: 'Update EventRelayConfigChangeEvent'
      description: 'UpdateEventRelayConfigChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventRelayConfigChangeEvent':
          summary: 'Update Event Relay Config Change Event'
          description: 'Updates an existing event relay config change event; only
            elements specified in the request are updated.'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelayConfigChangeEvent':
          summary: 'Upsert Event Relay Config Change Event'
          description: 'Upsert an existing event relay config change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventRelayConfigChangeEvent'
      description: 'DeleteEventRelayConfigChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventRelayConfigChangeEvent':
          summary: 'Delete Event Relay Config Change Event'
          description: 'Delete an existing event relay config change event only elements
            specified in the request are deleted.'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/EventRelayFeedback/{Id}:
    patch:
      summary: 'Update EventRelayFeedback'
      description: 'UpdateEventRelayFeedback'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateEventRelayFeedback':
          summary: 'Update Event Relay Feedback'
          description: 'Updates an existing event relay feedback; only elements specified
            in the request are updated.'
          entityName: 'EventRelayFeedback'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelayFeedback':
          summary: 'Upsert Event Relay Feedback'
          description: 'Upsert an existing event relay feedback only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayFeedback'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete EventRelayFeedback'
      description: 'DeleteEventRelayFeedback'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteEventRelayFeedback':
          summary: 'Delete Event Relay Feedback'
          description: 'Delete an existing event relay feedback only elements specified
            in the request are deleted.'
          entityName: 'EventRelayFeedback'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExpressionFilter/{Id}:
    patch:
      summary: 'Update ExpressionFilter'
      description: 'UpdateExpressionFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExpressionFilter':
          summary: 'Update ExpressionFilter'
          description: 'Updates an existing expressionfilter; only elements specified
            in the request are updated.'
          entityName: 'ExpressionFilter'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpressionFilter':
          summary: 'Upsert ExpressionFilter'
          description: 'Upsert an existing expressionfilter only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionFilter'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExpressionFilter'
      description: 'DeleteExpressionFilter'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExpressionFilter':
          summary: 'Delete ExpressionFilter'
          description: 'Delete an existing expressionfilter only elements specified
            in the request are deleted.'
          entityName: 'ExpressionFilter'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExpressionFilterCriteria/{Id}:
    patch:
      summary: 'Update ExpressionFilterCriteria'
      description: 'UpdateExpressionFilterCriteria'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExpressionFilterCriteria':
          summary: 'Update ExpressionFilterCriteria'
          description: 'Updates an existing expressionfiltercriteria; only elements
            specified in the request are updated.'
          entityName: 'ExpressionFilterCriteria'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpressionFilterCriteria':
          summary: 'Upsert ExpressionFilterCriteria'
          description: 'Upsert an existing expressionfiltercriteria only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionFilterCriteria'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExpressionFilterCriteria'
      description: 'DeleteExpressionFilterCriteria'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExpressionFilterCriteria':
          summary: 'Delete ExpressionFilterCriteria'
          description: 'Delete an existing expressionfiltercriteria only elements
            specified in the request are deleted.'
          entityName: 'ExpressionFilterCriteria'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExpressionSetView/{Id}:
    patch:
      summary: 'Update ExpressionSetView'
      description: 'UpdateExpressionSetView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExpressionSetView':
          summary: 'Update Expression Set View'
          description: 'Updates an existing expression set view; only elements specified
            in the request are updated.'
          entityName: 'ExpressionSetView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpressionSetView':
          summary: 'Upsert Expression Set View'
          description: 'Upsert an existing expression set view only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionSetView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExpressionSetView'
      description: 'DeleteExpressionSetView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExpressionSetView':
          summary: 'Delete Expression Set View'
          description: 'Delete an existing expression set view only elements specified
            in the request are deleted.'
          entityName: 'ExpressionSetView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalDataSource/{Id}:
    patch:
      summary: 'Update ExternalDataSource'
      description: 'UpdateExternalDataSource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExternalDataSource':
          summary: 'Update External Data Source'
          description: 'Updates an existing external data source; only elements specified
            in the request are updated.'
          entityName: 'ExternalDataSource'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalDataSource':
          summary: 'Upsert External Data Source'
          description: 'Upsert an existing external data source only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalDataSource'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExternalDataSource'
      description: 'DeleteExternalDataSource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExternalDataSource':
          summary: 'Delete External Data Source'
          description: 'Delete an existing external data source only elements specified
            in the request are deleted.'
          entityName: 'ExternalDataSource'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalDataSrcDescriptor/{Id}:
    patch:
      summary: 'Update ExternalDataSrcDescriptor'
      description: 'UpdateExternalDataSrcDescriptor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExternalDataSrcDescriptor':
          summary: 'Update External Data Source Descriptor'
          description: 'Updates an existing external data source descriptor; only
            elements specified in the request are updated.'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalDataSrcDescriptor':
          summary: 'Upsert External Data Source Descriptor'
          description: 'Upsert an existing external data source descriptor only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExternalDataSrcDescriptor'
      description: 'DeleteExternalDataSrcDescriptor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExternalDataSrcDescriptor':
          summary: 'Delete External Data Source Descriptor'
          description: 'Delete an existing external data source descriptor only elements
            specified in the request are deleted.'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalDataUserAuth/{Id}:
    patch:
      summary: 'Update ExternalDataUserAuth'
      description: 'UpdateExternalDataUserAuth'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExternalDataUserAuth':
          summary: 'Update External Data User Authentication'
          description: 'Updates an existing external data user authentication; only
            elements specified in the request are updated.'
          entityName: 'ExternalDataUserAuth'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalDataUserAuth':
          summary: 'Upsert External Data User Authentication'
          description: 'Upsert an existing external data user authentication only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ExternalDataUserAuth'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExternalDataUserAuth'
      description: 'DeleteExternalDataUserAuth'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExternalDataUserAuth':
          summary: 'Delete External Data User Authentication'
          description: 'Delete an existing external data user authentication only
            elements specified in the request are deleted.'
          entityName: 'ExternalDataUserAuth'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalEvent/{Id}:
    patch:
      summary: 'Update ExternalEvent'
      description: 'UpdateExternalEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExternalEvent':
          summary: 'Update External Event'
          description: 'Updates an existing external event; only elements specified
            in the request are updated.'
          entityName: 'ExternalEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalEvent':
          summary: 'Upsert External Event'
          description: 'Upsert an existing external event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExternalEvent'
      description: 'DeleteExternalEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExternalEvent':
          summary: 'Delete External Event'
          description: 'Delete an existing external event only elements specified
            in the request are deleted.'
          entityName: 'ExternalEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalEventMapping/{Id}:
    patch:
      summary: 'Update ExternalEventMapping'
      description: 'UpdateExternalEventMapping'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExternalEventMapping':
          summary: 'Update External Event Mapping'
          description: 'Updates an existing external event mapping; only elements
            specified in the request are updated.'
          entityName: 'ExternalEventMapping'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalEventMapping':
          summary: 'Upsert External Event Mapping'
          description: 'Upsert an existing external event mapping only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEventMapping'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExternalEventMapping'
      description: 'DeleteExternalEventMapping'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExternalEventMapping':
          summary: 'Delete External Event Mapping'
          description: 'Delete an existing external event mapping only elements specified
            in the request are deleted.'
          entityName: 'ExternalEventMapping'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ExternalEventMappingShare/{Id}:
    patch:
      summary: 'Update ExternalEventMappingShare'
      description: 'UpdateExternalEventMappingShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateExternalEventMappingShare':
          summary: 'Update External Event Mapping Share'
          description: 'Updates an existing external event mapping share; only elements
            specified in the request are updated.'
          entityName: 'ExternalEventMappingShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalEventMappingShare':
          summary: 'Upsert External Event Mapping Share'
          description: 'Upsert an existing external event mapping share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEventMappingShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ExternalEventMappingShare'
      description: 'DeleteExternalEventMappingShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteExternalEventMappingShare':
          summary: 'Delete External Event Mapping Share'
          description: 'Delete an existing external event mapping share only elements
            specified in the request are deleted.'
          entityName: 'ExternalEventMappingShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FieldDefinition/{Id}:
    patch:
      summary: 'Update FieldDefinition'
      description: 'UpdateFieldDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFieldDefinition':
          summary: 'Update Field Definition'
          description: 'Updates an existing field definition; only elements specified
            in the request are updated.'
          entityName: 'FieldDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFieldDefinition':
          summary: 'Upsert Field Definition'
          description: 'Upsert an existing field definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FieldDefinition'
      description: 'DeleteFieldDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFieldDefinition':
          summary: 'Delete Field Definition'
          description: 'Delete an existing field definition only elements specified
            in the request are deleted.'
          entityName: 'FieldDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FieldPermissions/{Id}:
    patch:
      summary: 'Update FieldPermissions'
      description: 'UpdateFieldPermissions'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFieldPermissions':
          summary: 'Update Field Permissions'
          description: 'Updates an existing field permissions; only elements specified
            in the request are updated.'
          entityName: 'FieldPermissions'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFieldPermissions':
          summary: 'Upsert Field Permissions'
          description: 'Upsert an existing field permissions only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldPermissions'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FieldPermissions'
      description: 'DeleteFieldPermissions'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFieldPermissions':
          summary: 'Delete Field Permissions'
          description: 'Delete an existing field permissions only elements specified
            in the request are deleted.'
          entityName: 'FieldPermissions'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FieldSecurityClassification/{Id}:
    patch:
      summary: 'Update FieldSecurityClassification'
      description: 'UpdateFieldSecurityClassification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFieldSecurityClassification':
          summary: 'Update Field Security Classification'
          description: 'Updates an existing field security classification; only elements
            specified in the request are updated.'
          entityName: 'FieldSecurityClassification'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFieldSecurityClassification':
          summary: 'Upsert Field Security Classification'
          description: 'Upsert an existing field security classification only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldSecurityClassification'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FieldSecurityClassification'
      description: 'DeleteFieldSecurityClassification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFieldSecurityClassification':
          summary: 'Delete Field Security Classification'
          description: 'Delete an existing field security classification only elements
            specified in the request are deleted.'
          entityName: 'FieldSecurityClassification'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FileEvent/{Id}:
    patch:
      summary: 'Update FileEvent'
      description: 'UpdateFileEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFileEvent':
          summary: 'Update File Event'
          description: 'Updates an existing file event; only elements specified in
            the request are updated.'
          entityName: 'FileEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFileEvent':
          summary: 'Upsert File Event'
          description: 'Upsert an existing file event only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'FileEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FileEvent'
      description: 'DeleteFileEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFileEvent':
          summary: 'Delete File Event'
          description: 'Delete an existing file event only elements specified in the
            request are deleted.'
          entityName: 'FileEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FileEventStore/{Id}:
    patch:
      summary: 'Update FileEventStore'
      description: 'UpdateFileEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFileEventStore':
          summary: 'Update File Event Store'
          description: 'Updates an existing file event store; only elements specified
            in the request are updated.'
          entityName: 'FileEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFileEventStore':
          summary: 'Upsert File Event Store'
          description: 'Upsert an existing file event store only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FileEventStore'
      description: 'DeleteFileEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFileEventStore':
          summary: 'Delete File Event Store'
          description: 'Delete an existing file event store only elements specified
            in the request are deleted.'
          entityName: 'FileEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FileSearchActivity/{Id}:
    patch:
      summary: 'Update FileSearchActivity'
      description: 'UpdateFileSearchActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFileSearchActivity':
          summary: 'Update FileSearchActivity'
          description: 'Updates an existing filesearchactivity; only elements specified
            in the request are updated.'
          entityName: 'FileSearchActivity'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFileSearchActivity':
          summary: 'Upsert FileSearchActivity'
          description: 'Upsert an existing filesearchactivity only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileSearchActivity'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FileSearchActivity'
      description: 'DeleteFileSearchActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFileSearchActivity':
          summary: 'Delete FileSearchActivity'
          description: 'Delete an existing filesearchactivity only elements specified
            in the request are deleted.'
          entityName: 'FileSearchActivity'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FiscalYearSettings/{Id}:
    patch:
      summary: 'Update FiscalYearSettings'
      description: 'UpdateFiscalYearSettings'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFiscalYearSettings':
          summary: 'Update Fiscal Year Settings'
          description: 'Updates an existing fiscal year settings; only elements specified
            in the request are updated.'
          entityName: 'FiscalYearSettings'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFiscalYearSettings':
          summary: 'Upsert Fiscal Year Settings'
          description: 'Upsert an existing fiscal year settings only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FiscalYearSettings'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FiscalYearSettings'
      description: 'DeleteFiscalYearSettings'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFiscalYearSettings':
          summary: 'Delete Fiscal Year Settings'
          description: 'Delete an existing fiscal year settings only elements specified
            in the request are deleted.'
          entityName: 'FiscalYearSettings'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlexQueueItem/{Id}:
    patch:
      summary: 'Update FlexQueueItem'
      description: 'UpdateFlexQueueItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlexQueueItem':
          summary: 'Update Flex Queue Item'
          description: 'Updates an existing flex queue item; only elements specified
            in the request are updated.'
          entityName: 'FlexQueueItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlexQueueItem':
          summary: 'Upsert Flex Queue Item'
          description: 'Upsert an existing flex queue item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlexQueueItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlexQueueItem'
      description: 'DeleteFlexQueueItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlexQueueItem':
          summary: 'Delete Flex Queue Item'
          description: 'Delete an existing flex queue item only elements specified
            in the request are deleted.'
          entityName: 'FlexQueueItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowDefinitionView/{Id}:
    patch:
      summary: 'Update FlowDefinitionView'
      description: 'UpdateFlowDefinitionView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowDefinitionView':
          summary: 'Update Flow Definition'
          description: 'Updates an existing flow definition; only elements specified
            in the request are updated.'
          entityName: 'FlowDefinitionView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowDefinitionView':
          summary: 'Upsert Flow Definition'
          description: 'Upsert an existing flow definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowDefinitionView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowDefinitionView'
      description: 'DeleteFlowDefinitionView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowDefinitionView':
          summary: 'Delete Flow Definition'
          description: 'Delete an existing flow definition only elements specified
            in the request are deleted.'
          entityName: 'FlowDefinitionView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowExecutionErrorEvent/{Id}:
    patch:
      summary: 'Update FlowExecutionErrorEvent'
      description: 'UpdateFlowExecutionErrorEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowExecutionErrorEvent':
          summary: 'Update Flow Execution Error Event'
          description: 'Updates an existing flow execution error event; only elements
            specified in the request are updated.'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowExecutionErrorEvent':
          summary: 'Upsert Flow Execution Error Event'
          description: 'Upsert an existing flow execution error event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowExecutionErrorEvent'
      description: 'DeleteFlowExecutionErrorEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowExecutionErrorEvent':
          summary: 'Delete Flow Execution Error Event'
          description: 'Delete an existing flow execution error event only elements
            specified in the request are deleted.'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterview/{Id}:
    patch:
      summary: 'Update FlowInterview'
      description: 'UpdateFlowInterview'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowInterview':
          summary: 'Update Flow Interview'
          description: 'Updates an existing flow interview; only elements specified
            in the request are updated.'
          entityName: 'FlowInterview'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterview':
          summary: 'Upsert Flow Interview'
          description: 'Upsert an existing flow interview only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterview'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowInterview'
      description: 'DeleteFlowInterview'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowInterview':
          summary: 'Delete Flow Interview'
          description: 'Delete an existing flow interview only elements specified
            in the request are deleted.'
          entityName: 'FlowInterview'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewLog/{Id}:
    patch:
      summary: 'Update FlowInterviewLog'
      description: 'UpdateFlowInterviewLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowInterviewLog':
          summary: 'Update Flow Interview Log'
          description: 'Updates an existing flow interview log; only elements specified
            in the request are updated.'
          entityName: 'FlowInterviewLog'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewLog':
          summary: 'Upsert Flow Interview Log'
          description: 'Upsert an existing flow interview log only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewLog'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowInterviewLog'
      description: 'DeleteFlowInterviewLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowInterviewLog':
          summary: 'Delete Flow Interview Log'
          description: 'Delete an existing flow interview log only elements specified
            in the request are deleted.'
          entityName: 'FlowInterviewLog'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewLogEntry/{Id}:
    patch:
      summary: 'Update FlowInterviewLogEntry'
      description: 'UpdateFlowInterviewLogEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowInterviewLogEntry':
          summary: 'Update Flow Interview Log Entry'
          description: 'Updates an existing flow interview log entry; only elements
            specified in the request are updated.'
          entityName: 'FlowInterviewLogEntry'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewLogEntry':
          summary: 'Upsert Flow Interview Log Entry'
          description: 'Upsert an existing flow interview log entry only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewLogEntry'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowInterviewLogEntry'
      description: 'DeleteFlowInterviewLogEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowInterviewLogEntry':
          summary: 'Delete Flow Interview Log Entry'
          description: 'Delete an existing flow interview log entry only elements
            specified in the request are deleted.'
          entityName: 'FlowInterviewLogEntry'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewLogShare/{Id}:
    patch:
      summary: 'Update FlowInterviewLogShare'
      description: 'UpdateFlowInterviewLogShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowInterviewLogShare':
          summary: 'Update Flow Interview Log Share'
          description: 'Updates an existing flow interview log share; only elements
            specified in the request are updated.'
          entityName: 'FlowInterviewLogShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewLogShare':
          summary: 'Upsert Flow Interview Log Share'
          description: 'Upsert an existing flow interview log share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewLogShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowInterviewLogShare'
      description: 'DeleteFlowInterviewLogShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowInterviewLogShare':
          summary: 'Delete Flow Interview Log Share'
          description: 'Delete an existing flow interview log share only elements
            specified in the request are deleted.'
          entityName: 'FlowInterviewLogShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowInterviewShare/{Id}:
    patch:
      summary: 'Update FlowInterviewShare'
      description: 'UpdateFlowInterviewShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowInterviewShare':
          summary: 'Update Flow Interview Share'
          description: 'Updates an existing flow interview share; only elements specified
            in the request are updated.'
          entityName: 'FlowInterviewShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewShare':
          summary: 'Upsert Flow Interview Share'
          description: 'Upsert an existing flow interview share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowInterviewShare'
      description: 'DeleteFlowInterviewShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowInterviewShare':
          summary: 'Delete Flow Interview Share'
          description: 'Delete an existing flow interview share only elements specified
            in the request are deleted.'
          entityName: 'FlowInterviewShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationEvent/{Id}:
    patch:
      summary: 'Update FlowOrchestrationEvent'
      description: 'UpdateFlowOrchestrationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationEvent':
          summary: 'Update Orchestration Event'
          description: 'Updates an existing orchestration event; only elements specified
            in the request are updated.'
          entityName: 'FlowOrchestrationEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationEvent':
          summary: 'Upsert Orchestration Event'
          description: 'Upsert an existing orchestration event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationEvent'
      description: 'DeleteFlowOrchestrationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationEvent':
          summary: 'Delete Orchestration Event'
          description: 'Delete an existing orchestration event only elements specified
            in the request are deleted.'
          entityName: 'FlowOrchestrationEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationInstance/{Id}:
    patch:
      summary: 'Update FlowOrchestrationInstance'
      description: 'UpdateFlowOrchestrationInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationInstance':
          summary: 'Update Orchestration Run'
          description: 'Updates an existing orchestration run; only elements specified
            in the request are updated.'
          entityName: 'FlowOrchestrationInstance'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationInstance':
          summary: 'Upsert Orchestration Run'
          description: 'Upsert an existing orchestration run only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationInstance'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationInstance'
      description: 'DeleteFlowOrchestrationInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationInstance':
          summary: 'Delete Orchestration Run'
          description: 'Delete an existing orchestration run only elements specified
            in the request are deleted.'
          entityName: 'FlowOrchestrationInstance'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationInstanceShare/{Id}:
    patch:
      summary: 'Update FlowOrchestrationInstanceShare'
      description: 'UpdateFlowOrchestrationInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationInstanceShare':
          summary: 'Update Orchestration Run Share'
          description: 'Updates an existing orchestration run share; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationInstanceShare':
          summary: 'Upsert Orchestration Run Share'
          description: 'Upsert an existing orchestration run share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationInstanceShare'
      description: 'DeleteFlowOrchestrationInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationInstanceShare':
          summary: 'Delete Orchestration Run Share'
          description: 'Delete an existing orchestration run share only elements specified
            in the request are deleted.'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStageInstance/{Id}:
    patch:
      summary: 'Update FlowOrchestrationStageInstance'
      description: 'UpdateFlowOrchestrationStageInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationStageInstance':
          summary: 'Update Orchestration Stage Run'
          description: 'Updates an existing orchestration stage run; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStageInstance':
          summary: 'Upsert Orchestration Stage Run'
          description: 'Upsert an existing orchestration stage run only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationStageInstance'
      description: 'DeleteFlowOrchestrationStageInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationStageInstance':
          summary: 'Delete Orchestration Stage Run'
          description: 'Delete an existing orchestration stage run only elements specified
            in the request are deleted.'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStageInstanceShare/{Id}:
    patch:
      summary: 'Update FlowOrchestrationStageInstanceShare'
      description: 'UpdateFlowOrchestrationStageInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationStageInstanceShare':
          summary: 'Update Orchestration Stage Run Share'
          description: 'Updates an existing orchestration stage run share; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStageInstanceShare':
          summary: 'Upsert Orchestration Stage Run Share'
          description: 'Upsert an existing orchestration stage run share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationStageInstanceShare'
      description: 'DeleteFlowOrchestrationStageInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationStageInstanceShare':
          summary: 'Delete Orchestration Stage Run Share'
          description: 'Delete an existing orchestration stage run share only elements
            specified in the request are deleted.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStepInstance/{Id}:
    patch:
      summary: 'Update FlowOrchestrationStepInstance'
      description: 'UpdateFlowOrchestrationStepInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationStepInstance':
          summary: 'Update Orchestration Step Run'
          description: 'Updates an existing orchestration step run; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStepInstance':
          summary: 'Upsert Orchestration Step Run'
          description: 'Upsert an existing orchestration step run only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationStepInstance'
      description: 'DeleteFlowOrchestrationStepInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationStepInstance':
          summary: 'Delete Orchestration Step Run'
          description: 'Delete an existing orchestration step run only elements specified
            in the request are deleted.'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationStepInstanceShare/{Id}:
    patch:
      summary: 'Update FlowOrchestrationStepInstanceShare'
      description: 'UpdateFlowOrchestrationStepInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationStepInstanceShare':
          summary: 'Update Orchestration Step Run Share'
          description: 'Updates an existing orchestration step run share; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStepInstanceShare':
          summary: 'Upsert Orchestration Step Run Share'
          description: 'Upsert an existing orchestration step run share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationStepInstanceShare'
      description: 'DeleteFlowOrchestrationStepInstanceShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationStepInstanceShare':
          summary: 'Delete Orchestration Step Run Share'
          description: 'Delete an existing orchestration step run share only elements
            specified in the request are deleted.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationWorkItem/{Id}:
    patch:
      summary: 'Update FlowOrchestrationWorkItem'
      description: 'UpdateFlowOrchestrationWorkItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationWorkItem':
          summary: 'Update Orchestration Work Item'
          description: 'Updates an existing orchestration work item; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationWorkItem':
          summary: 'Upsert Orchestration Work Item'
          description: 'Upsert an existing orchestration work item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationWorkItem'
      description: 'DeleteFlowOrchestrationWorkItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationWorkItem':
          summary: 'Delete Orchestration Work Item'
          description: 'Delete an existing orchestration work item only elements specified
            in the request are deleted.'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowOrchestrationWorkItemShare/{Id}:
    patch:
      summary: 'Update FlowOrchestrationWorkItemShare'
      description: 'UpdateFlowOrchestrationWorkItemShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowOrchestrationWorkItemShare':
          summary: 'Update Orchestration Work Item Share'
          description: 'Updates an existing orchestration work item share; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationWorkItemShare':
          summary: 'Upsert Orchestration Work Item Share'
          description: 'Upsert an existing orchestration work item share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowOrchestrationWorkItemShare'
      description: 'DeleteFlowOrchestrationWorkItemShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowOrchestrationWorkItemShare':
          summary: 'Delete Orchestration Work Item Share'
          description: 'Delete an existing orchestration work item share only elements
            specified in the request are deleted.'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowRecordRelation/{Id}:
    patch:
      summary: 'Update FlowRecordRelation'
      description: 'UpdateFlowRecordRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowRecordRelation':
          summary: 'Update Flow Record Relation'
          description: 'Updates an existing flow record relation; only elements specified
            in the request are updated.'
          entityName: 'FlowRecordRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowRecordRelation':
          summary: 'Upsert Flow Record Relation'
          description: 'Upsert an existing flow record relation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowRecordRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowRecordRelation'
      description: 'DeleteFlowRecordRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowRecordRelation':
          summary: 'Delete Flow Record Relation'
          description: 'Delete an existing flow record relation only elements specified
            in the request are deleted.'
          entityName: 'FlowRecordRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowStageRelation/{Id}:
    patch:
      summary: 'Update FlowStageRelation'
      description: 'UpdateFlowStageRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowStageRelation':
          summary: 'Update Flow Interview Stage Relation'
          description: 'Updates an existing flow interview stage relation; only elements
            specified in the request are updated.'
          entityName: 'FlowStageRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowStageRelation':
          summary: 'Upsert Flow Interview Stage Relation'
          description: 'Upsert an existing flow interview stage relation only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowStageRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowStageRelation'
      description: 'DeleteFlowStageRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowStageRelation':
          summary: 'Delete Flow Interview Stage Relation'
          description: 'Delete an existing flow interview stage relation only elements
            specified in the request are deleted.'
          entityName: 'FlowStageRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowTestResult/{Id}:
    patch:
      summary: 'Update FlowTestResult'
      description: 'UpdateFlowTestResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowTestResult':
          summary: 'Update Flow Test Result'
          description: 'Updates an existing flow test result; only elements specified
            in the request are updated.'
          entityName: 'FlowTestResult'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowTestResult':
          summary: 'Upsert Flow Test Result'
          description: 'Upsert an existing flow test result only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestResult'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowTestResult'
      description: 'DeleteFlowTestResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowTestResult':
          summary: 'Delete Flow Test Result'
          description: 'Delete an existing flow test result only elements specified
            in the request are deleted.'
          entityName: 'FlowTestResult'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowTestResultShare/{Id}:
    patch:
      summary: 'Update FlowTestResultShare'
      description: 'UpdateFlowTestResultShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowTestResultShare':
          summary: 'Update Flow Test Result Share'
          description: 'Updates an existing flow test result share; only elements
            specified in the request are updated.'
          entityName: 'FlowTestResultShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowTestResultShare':
          summary: 'Upsert Flow Test Result Share'
          description: 'Upsert an existing flow test result share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestResultShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowTestResultShare'
      description: 'DeleteFlowTestResultShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowTestResultShare':
          summary: 'Delete Flow Test Result Share'
          description: 'Delete an existing flow test result share only elements specified
            in the request are deleted.'
          entityName: 'FlowTestResultShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowTestView/{Id}:
    patch:
      summary: 'Update FlowTestView'
      description: 'UpdateFlowTestView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowTestView':
          summary: 'Update Flow Test View'
          description: 'Updates an existing flow test view; only elements specified
            in the request are updated.'
          entityName: 'FlowTestView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowTestView':
          summary: 'Upsert Flow Test View'
          description: 'Upsert an existing flow test view only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowTestView'
      description: 'DeleteFlowTestView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowTestView':
          summary: 'Delete Flow Test View'
          description: 'Delete an existing flow test view only elements specified
            in the request are deleted.'
          entityName: 'FlowTestView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowVariableView/{Id}:
    patch:
      summary: 'Update FlowVariableView'
      description: 'UpdateFlowVariableView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowVariableView':
          summary: 'Update Flow Variable'
          description: 'Updates an existing flow variable; only elements specified
            in the request are updated.'
          entityName: 'FlowVariableView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowVariableView':
          summary: 'Upsert Flow Variable'
          description: 'Upsert an existing flow variable only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowVariableView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowVariableView'
      description: 'DeleteFlowVariableView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowVariableView':
          summary: 'Delete Flow Variable'
          description: 'Delete an existing flow variable only elements specified in
            the request are deleted.'
          entityName: 'FlowVariableView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FlowVersionView/{Id}:
    patch:
      summary: 'Update FlowVersionView'
      description: 'UpdateFlowVersionView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFlowVersionView':
          summary: 'Update Flow Version'
          description: 'Updates an existing flow version; only elements specified
            in the request are updated.'
          entityName: 'FlowVersionView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowVersionView':
          summary: 'Upsert Flow Version'
          description: 'Upsert an existing flow version only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowVersionView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FlowVersionView'
      description: 'DeleteFlowVersionView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFlowVersionView':
          summary: 'Delete Flow Version'
          description: 'Delete an existing flow version only elements specified in
            the request are deleted.'
          entityName: 'FlowVersionView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Folder/{Id}:
    patch:
      summary: 'Update Folder'
      description: 'UpdateFolder'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFolder':
          summary: 'Update Folder'
          description: 'Updates an existing folder; only elements specified in the
            request are updated.'
          entityName: 'Folder'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFolder':
          summary: 'Upsert Folder'
          description: 'Upsert an existing folder only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Folder'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Folder'
      description: 'DeleteFolder'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFolder':
          summary: 'Delete Folder'
          description: 'Delete an existing folder only elements specified in the request
            are deleted.'
          entityName: 'Folder'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FolderedContentDocument/{Id}:
    patch:
      summary: 'Update FolderedContentDocument'
      description: 'UpdateFolderedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFolderedContentDocument':
          summary: 'Update Foldered Content Document'
          description: 'Updates an existing foldered content document; only elements
            specified in the request are updated.'
          entityName: 'FolderedContentDocument'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFolderedContentDocument':
          summary: 'Upsert Foldered Content Document'
          description: 'Upsert an existing foldered content document only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FolderedContentDocument'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FolderedContentDocument'
      description: 'DeleteFolderedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFolderedContentDocument':
          summary: 'Delete Foldered Content Document'
          description: 'Delete an existing foldered content document only elements
            specified in the request are deleted.'
          entityName: 'FolderedContentDocument'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FormulaFunction/{Id}:
    patch:
      summary: 'Update FormulaFunction'
      description: 'UpdateFormulaFunction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFormulaFunction':
          summary: 'Update Formula Function'
          description: 'Updates an existing formula function; only elements specified
            in the request are updated.'
          entityName: 'FormulaFunction'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFormulaFunction':
          summary: 'Upsert Formula Function'
          description: 'Upsert an existing formula function only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FormulaFunction'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FormulaFunction'
      description: 'DeleteFormulaFunction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFormulaFunction':
          summary: 'Delete Formula Function'
          description: 'Delete an existing formula function only elements specified
            in the request are deleted.'
          entityName: 'FormulaFunction'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FormulaFunctionAllowedType/{Id}:
    patch:
      summary: 'Update FormulaFunctionAllowedType'
      description: 'UpdateFormulaFunctionAllowedType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFormulaFunctionAllowedType':
          summary: 'Update Formula Context Function'
          description: 'Updates an existing formula context function; only elements
            specified in the request are updated.'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFormulaFunctionAllowedType':
          summary: 'Upsert Formula Context Function'
          description: 'Upsert an existing formula context function only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FormulaFunctionAllowedType'
      description: 'DeleteFormulaFunctionAllowedType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFormulaFunctionAllowedType':
          summary: 'Delete Formula Context Function'
          description: 'Delete an existing formula context function only elements
            specified in the request are deleted.'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/FormulaFunctionCategory/{Id}:
    patch:
      summary: 'Update FormulaFunctionCategory'
      description: 'UpdateFormulaFunctionCategory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateFormulaFunctionCategory':
          summary: 'Update Formula Function Category'
          description: 'Updates an existing formula function category; only elements
            specified in the request are updated.'
          entityName: 'FormulaFunctionCategory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFormulaFunctionCategory':
          summary: 'Upsert Formula Function Category'
          description: 'Upsert an existing formula function category only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FormulaFunctionCategory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete FormulaFunctionCategory'
      description: 'DeleteFormulaFunctionCategory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteFormulaFunctionCategory':
          summary: 'Delete Formula Function Category'
          description: 'Delete an existing formula function category only elements
            specified in the request are deleted.'
          entityName: 'FormulaFunctionCategory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/GrantedByLicense/{Id}:
    patch:
      summary: 'Update GrantedByLicense'
      description: 'UpdateGrantedByLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateGrantedByLicense':
          summary: 'Update Setting Granted By License'
          description: 'Updates an existing setting granted by license; only elements
            specified in the request are updated.'
          entityName: 'GrantedByLicense'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertGrantedByLicense':
          summary: 'Upsert Setting Granted By License'
          description: 'Upsert an existing setting granted by license only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'GrantedByLicense'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete GrantedByLicense'
      description: 'DeleteGrantedByLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteGrantedByLicense':
          summary: 'Delete Setting Granted By License'
          description: 'Delete an existing setting granted by license only elements
            specified in the request are deleted.'
          entityName: 'GrantedByLicense'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Group/{Id}:
    patch:
      summary: 'Update Group'
      description: 'UpdateGroup'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateGroup':
          summary: 'Update Group'
          description: 'Updates an existing group; only elements specified in the
            request are updated.'
          entityName: 'Group'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertGroup':
          summary: 'Upsert Group'
          description: 'Upsert an existing group only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Group'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Group'
      description: 'DeleteGroup'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteGroup':
          summary: 'Delete Group'
          description: 'Delete an existing group only elements specified in the request
            are deleted.'
          entityName: 'Group'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/GroupMember/{Id}:
    patch:
      summary: 'Update GroupMember'
      description: 'UpdateGroupMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateGroupMember':
          summary: 'Update Group Member'
          description: 'Updates an existing group member; only elements specified
            in the request are updated.'
          entityName: 'GroupMember'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertGroupMember':
          summary: 'Upsert Group Member'
          description: 'Upsert an existing group member only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'GroupMember'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete GroupMember'
      description: 'DeleteGroupMember'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteGroupMember':
          summary: 'Delete Group Member'
          description: 'Delete an existing group member only elements specified in
            the request are deleted.'
          entityName: 'GroupMember'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/HarishO__ChangeEvent/{Id}:
    patch:
      summary: 'Update HarishO__ChangeEvent'
      description: 'UpdateHarishO__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateHarishO__ChangeEvent':
          summary: 'Update Change Event: HarishL'
          description: 'Updates an existing change event: harishl; only elements specified
            in the request are updated.'
          entityName: 'HarishO__ChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertHarishO__ChangeEvent':
          summary: 'Upsert Change Event: HarishL'
          description: 'Upsert an existing change event: harishl only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'HarishO__ChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete HarishO__ChangeEvent'
      description: 'DeleteHarishO__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteHarishO__ChangeEvent':
          summary: 'Delete Change Event: HarishL'
          description: 'Delete an existing change event: harishl only elements specified
            in the request are deleted.'
          entityName: 'HarishO__ChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/HarishO__c/{Id}:
    patch:
      summary: 'Update HarishO__c'
      description: 'UpdateHarishO__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateHarishO__c':
          summary: 'Update HarishL'
          description: 'Updates an existing harishl; only elements specified in the
            request are updated.'
          entityName: 'HarishO__c'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertHarishO__c':
          summary: 'Upsert HarishL'
          description: 'Upsert an existing harishl only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'HarishO__c'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete HarishO__c'
      description: 'DeleteHarishO__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteHarishO__c':
          summary: 'Delete HarishL'
          description: 'Delete an existing harishl only elements specified in the
            request are deleted.'
          entityName: 'HarishO__c'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Holiday/{Id}:
    patch:
      summary: 'Update Holiday'
      description: 'UpdateHoliday'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateHoliday':
          summary: 'Update Holiday'
          description: 'Updates an existing holiday; only elements specified in the
            request are updated.'
          entityName: 'Holiday'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertHoliday':
          summary: 'Upsert Holiday'
          description: 'Upsert an existing holiday only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Holiday'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Holiday'
      description: 'DeleteHoliday'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteHoliday':
          summary: 'Delete Holiday'
          description: 'Delete an existing holiday only elements specified in the
            request are deleted.'
          entityName: 'Holiday'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IPAddressRange/{Id}:
    patch:
      summary: 'Update IPAddressRange'
      description: 'UpdateIPAddressRange'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIPAddressRange':
          summary: 'Update IP Address Range'
          description: 'Updates an existing ip address range; only elements specified
            in the request are updated.'
          entityName: 'IPAddressRange'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIPAddressRange':
          summary: 'Upsert IP Address Range'
          description: 'Upsert an existing ip address range only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'IPAddressRange'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IPAddressRange'
      description: 'DeleteIPAddressRange'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIPAddressRange':
          summary: 'Delete IP Address Range'
          description: 'Delete an existing ip address range only elements specified
            in the request are deleted.'
          entityName: 'IPAddressRange'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IconDefinition/{Id}:
    patch:
      summary: 'Update IconDefinition'
      description: 'UpdateIconDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIconDefinition':
          summary: 'Update Icon Definition'
          description: 'Updates an existing icon definition; only elements specified
            in the request are updated.'
          entityName: 'IconDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIconDefinition':
          summary: 'Upsert Icon Definition'
          description: 'Upsert an existing icon definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'IconDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IconDefinition'
      description: 'DeleteIconDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIconDefinition':
          summary: 'Delete Icon Definition'
          description: 'Delete an existing icon definition only elements specified
            in the request are deleted.'
          entityName: 'IconDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IdentityProviderEventStore/{Id}:
    patch:
      summary: 'Update IdentityProviderEventStore'
      description: 'UpdateIdentityProviderEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIdentityProviderEventStore':
          summary: 'Update Identity Provider Event Store'
          description: 'Updates an existing identity provider event store; only elements
            specified in the request are updated.'
          entityName: 'IdentityProviderEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIdentityProviderEventStore':
          summary: 'Upsert Identity Provider Event Store'
          description: 'Upsert an existing identity provider event store only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IdentityProviderEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IdentityProviderEventStore'
      description: 'DeleteIdentityProviderEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIdentityProviderEventStore':
          summary: 'Delete Identity Provider Event Store'
          description: 'Delete an existing identity provider event store only elements
            specified in the request are deleted.'
          entityName: 'IdentityProviderEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IdentityVerificationEvent/{Id}:
    patch:
      summary: 'Update IdentityVerificationEvent'
      description: 'UpdateIdentityVerificationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIdentityVerificationEvent':
          summary: 'Update Identity Verification Event'
          description: 'Updates an existing identity verification event; only elements
            specified in the request are updated.'
          entityName: 'IdentityVerificationEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIdentityVerificationEvent':
          summary: 'Upsert Identity Verification Event'
          description: 'Upsert an existing identity verification event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IdentityVerificationEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IdentityVerificationEvent'
      description: 'DeleteIdentityVerificationEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIdentityVerificationEvent':
          summary: 'Delete Identity Verification Event'
          description: 'Delete an existing identity verification event only elements
            specified in the request are deleted.'
          entityName: 'IdentityVerificationEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IdpEventLog/{Id}:
    patch:
      summary: 'Update IdpEventLog'
      description: 'UpdateIdpEventLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIdpEventLog':
          summary: 'Update Identity Provider Event Log'
          description: 'Updates an existing identity provider event log; only elements
            specified in the request are updated.'
          entityName: 'IdpEventLog'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIdpEventLog':
          summary: 'Upsert Identity Provider Event Log'
          description: 'Upsert an existing identity provider event log only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IdpEventLog'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IdpEventLog'
      description: 'DeleteIdpEventLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIdpEventLog':
          summary: 'Delete Identity Provider Event Log'
          description: 'Delete an existing identity provider event log only elements
            specified in the request are deleted.'
          entityName: 'IdpEventLog'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IframeWhiteListUrl/{Id}:
    patch:
      summary: 'Update IframeWhiteListUrl'
      description: 'UpdateIframeWhiteListUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIframeWhiteListUrl':
          summary: 'Update Trusted Domain for Inline Frames'
          description: 'Updates an existing trusted domain for inline frames; only
            elements specified in the request are updated.'
          entityName: 'IframeWhiteListUrl'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIframeWhiteListUrl':
          summary: 'Upsert Trusted Domain for Inline Frames'
          description: 'Upsert an existing trusted domain for inline frames only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IframeWhiteListUrl'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IframeWhiteListUrl'
      description: 'DeleteIframeWhiteListUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIframeWhiteListUrl':
          summary: 'Delete Trusted Domain for Inline Frames'
          description: 'Delete an existing trusted domain for inline frames only elements
            specified in the request are deleted.'
          entityName: 'IframeWhiteListUrl'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Image/{Id}:
    patch:
      summary: 'Update Image'
      description: 'UpdateImage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateImage':
          summary: 'Update Image'
          description: 'Updates an existing image; only elements specified in the
            request are updated.'
          entityName: 'Image'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertImage':
          summary: 'Upsert Image'
          description: 'Upsert an existing image only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Image'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Image'
      description: 'DeleteImage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteImage':
          summary: 'Delete Image'
          description: 'Delete an existing image only elements specified in the request
            are deleted.'
          entityName: 'Image'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ImageHistory/{Id}:
    patch:
      summary: 'Update ImageHistory'
      description: 'UpdateImageHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateImageHistory':
          summary: 'Update Image History'
          description: 'Updates an existing image history; only elements specified
            in the request are updated.'
          entityName: 'ImageHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertImageHistory':
          summary: 'Upsert Image History'
          description: 'Upsert an existing image history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ImageHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ImageHistory'
      description: 'DeleteImageHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteImageHistory':
          summary: 'Delete Image History'
          description: 'Delete an existing image history only elements specified in
            the request are deleted.'
          entityName: 'ImageHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ImageShare/{Id}:
    patch:
      summary: 'Update ImageShare'
      description: 'UpdateImageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateImageShare':
          summary: 'Update Image Share'
          description: 'Updates an existing image share; only elements specified in
            the request are updated.'
          entityName: 'ImageShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertImageShare':
          summary: 'Upsert Image Share'
          description: 'Upsert an existing image share only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ImageShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ImageShare'
      description: 'DeleteImageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteImageShare':
          summary: 'Delete Image Share'
          description: 'Delete an existing image share only elements specified in
            the request are deleted.'
          entityName: 'ImageShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Individual/{Id}:
    patch:
      summary: 'Update Individual'
      description: 'UpdateIndividual'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIndividual':
          summary: 'Update Individual'
          description: 'Updates an existing individual; only elements specified in
            the request are updated.'
          entityName: 'Individual'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividual':
          summary: 'Upsert Individual'
          description: 'Upsert an existing individual only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Individual'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Individual'
      description: 'DeleteIndividual'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIndividual':
          summary: 'Delete Individual'
          description: 'Delete an existing individual only elements specified in the
            request are deleted.'
          entityName: 'Individual'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IndividualChangeEvent/{Id}:
    patch:
      summary: 'Update IndividualChangeEvent'
      description: 'UpdateIndividualChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIndividualChangeEvent':
          summary: 'Update Individual Change Event'
          description: 'Updates an existing individual change event; only elements
            specified in the request are updated.'
          entityName: 'IndividualChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualChangeEvent':
          summary: 'Upsert Individual Change Event'
          description: 'Upsert an existing individual change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IndividualChangeEvent'
      description: 'DeleteIndividualChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIndividualChangeEvent':
          summary: 'Delete Individual Change Event'
          description: 'Delete an existing individual change event only elements specified
            in the request are deleted.'
          entityName: 'IndividualChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IndividualHistory/{Id}:
    patch:
      summary: 'Update IndividualHistory'
      description: 'UpdateIndividualHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIndividualHistory':
          summary: 'Update Individual History'
          description: 'Updates an existing individual history; only elements specified
            in the request are updated.'
          entityName: 'IndividualHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualHistory':
          summary: 'Upsert Individual History'
          description: 'Upsert an existing individual history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IndividualHistory'
      description: 'DeleteIndividualHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIndividualHistory':
          summary: 'Delete Individual History'
          description: 'Delete an existing individual history only elements specified
            in the request are deleted.'
          entityName: 'IndividualHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/IndividualShare/{Id}:
    patch:
      summary: 'Update IndividualShare'
      description: 'UpdateIndividualShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateIndividualShare':
          summary: 'Update Individual Share'
          description: 'Updates an existing individual share; only elements specified
            in the request are updated.'
          entityName: 'IndividualShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualShare':
          summary: 'Upsert Individual Share'
          description: 'Upsert an existing individual share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete IndividualShare'
      description: 'DeleteIndividualShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteIndividualShare':
          summary: 'Delete Individual Share'
          description: 'Delete an existing individual share only elements specified
            in the request are deleted.'
          entityName: 'IndividualShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/InstalledMobileApp/{Id}:
    patch:
      summary: 'Update InstalledMobileApp'
      description: 'UpdateInstalledMobileApp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateInstalledMobileApp':
          summary: 'Update Installed Mobile App'
          description: 'Updates an existing installed mobile app; only elements specified
            in the request are updated.'
          entityName: 'InstalledMobileApp'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertInstalledMobileApp':
          summary: 'Upsert Installed Mobile App'
          description: 'Upsert an existing installed mobile app only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'InstalledMobileApp'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete InstalledMobileApp'
      description: 'DeleteInstalledMobileApp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteInstalledMobileApp':
          summary: 'Delete Installed Mobile App'
          description: 'Delete an existing installed mobile app only elements specified
            in the request are deleted.'
          entityName: 'InstalledMobileApp'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Lead/{Id}:
    patch:
      summary: 'Update Lead'
      description: 'UpdateLead'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLead':
          summary: 'Update Lead'
          description: 'Updates an existing lead; only elements specified in the request
            are updated.'
          entityName: 'Lead'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLead':
          summary: 'Upsert Lead'
          description: 'Upsert an existing lead only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Lead'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Lead'
      description: 'DeleteLead'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLead':
          summary: 'Delete Lead'
          description: 'Delete an existing lead only elements specified in the request
            are deleted.'
          entityName: 'Lead'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadChangeEvent/{Id}:
    patch:
      summary: 'Update LeadChangeEvent'
      description: 'UpdateLeadChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLeadChangeEvent':
          summary: 'Update Lead Change Event'
          description: 'Updates an existing lead change event; only elements specified
            in the request are updated.'
          entityName: 'LeadChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadChangeEvent':
          summary: 'Upsert Lead Change Event'
          description: 'Upsert an existing lead change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LeadChangeEvent'
      description: 'DeleteLeadChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLeadChangeEvent':
          summary: 'Delete Lead Change Event'
          description: 'Delete an existing lead change event only elements specified
            in the request are deleted.'
          entityName: 'LeadChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadHistory/{Id}:
    patch:
      summary: 'Update LeadHistory'
      description: 'UpdateLeadHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLeadHistory':
          summary: 'Update Lead History'
          description: 'Updates an existing lead history; only elements specified
            in the request are updated.'
          entityName: 'LeadHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadHistory':
          summary: 'Upsert Lead History'
          description: 'Upsert an existing lead history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LeadHistory'
      description: 'DeleteLeadHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLeadHistory':
          summary: 'Delete Lead History'
          description: 'Delete an existing lead history only elements specified in
            the request are deleted.'
          entityName: 'LeadHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadShare/{Id}:
    patch:
      summary: 'Update LeadShare'
      description: 'UpdateLeadShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLeadShare':
          summary: 'Update Lead Share'
          description: 'Updates an existing lead share; only elements specified in
            the request are updated.'
          entityName: 'LeadShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadShare':
          summary: 'Upsert Lead Share'
          description: 'Upsert an existing lead share only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'LeadShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LeadShare'
      description: 'DeleteLeadShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLeadShare':
          summary: 'Delete Lead Share'
          description: 'Delete an existing lead share only elements specified in the
            request are deleted.'
          entityName: 'LeadShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LeadStatus/{Id}:
    patch:
      summary: 'Update LeadStatus'
      description: 'UpdateLeadStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLeadStatus':
          summary: 'Update Lead Status Value'
          description: 'Updates an existing lead status value; only elements specified
            in the request are updated.'
          entityName: 'LeadStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadStatus':
          summary: 'Upsert Lead Status Value'
          description: 'Upsert an existing lead status value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LeadStatus'
      description: 'DeleteLeadStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLeadStatus':
          summary: 'Delete Lead Status Value'
          description: 'Delete an existing lead status value only elements specified
            in the request are deleted.'
          entityName: 'LeadStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningExitByPageMetrics/{Id}:
    patch:
      summary: 'Update LightningExitByPageMetrics'
      description: 'UpdateLightningExitByPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningExitByPageMetrics':
          summary: 'Update Lightning Exit By Page Metrics'
          description: 'Updates an existing lightning exit by page metrics; only elements
            specified in the request are updated.'
          entityName: 'LightningExitByPageMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningExitByPageMetrics':
          summary: 'Upsert Lightning Exit By Page Metrics'
          description: 'Upsert an existing lightning exit by page metrics only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningExitByPageMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningExitByPageMetrics'
      description: 'DeleteLightningExitByPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningExitByPageMetrics':
          summary: 'Delete Lightning Exit By Page Metrics'
          description: 'Delete an existing lightning exit by page metrics only elements
            specified in the request are deleted.'
          entityName: 'LightningExitByPageMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningExperienceTheme/{Id}:
    patch:
      summary: 'Update LightningExperienceTheme'
      description: 'UpdateLightningExperienceTheme'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningExperienceTheme':
          summary: 'Update Lightning Experience Theme'
          description: 'Updates an existing lightning experience theme; only elements
            specified in the request are updated.'
          entityName: 'LightningExperienceTheme'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningExperienceTheme':
          summary: 'Upsert Lightning Experience Theme'
          description: 'Upsert an existing lightning experience theme only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningExperienceTheme'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningExperienceTheme'
      description: 'DeleteLightningExperienceTheme'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningExperienceTheme':
          summary: 'Delete Lightning Experience Theme'
          description: 'Delete an existing lightning experience theme only elements
            specified in the request are deleted.'
          entityName: 'LightningExperienceTheme'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningOnboardingConfig/{Id}:
    patch:
      summary: 'Update LightningOnboardingConfig'
      description: 'UpdateLightningOnboardingConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningOnboardingConfig':
          summary: 'Update LightningOnboardingConfig'
          description: 'Updates an existing lightningonboardingconfig; only elements
            specified in the request are updated.'
          entityName: 'LightningOnboardingConfig'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningOnboardingConfig':
          summary: 'Upsert LightningOnboardingConfig'
          description: 'Upsert an existing lightningonboardingconfig only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningOnboardingConfig'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningOnboardingConfig'
      description: 'DeleteLightningOnboardingConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningOnboardingConfig':
          summary: 'Delete LightningOnboardingConfig'
          description: 'Delete an existing lightningonboardingconfig only elements
            specified in the request are deleted.'
          entityName: 'LightningOnboardingConfig'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningToggleMetrics/{Id}:
    patch:
      summary: 'Update LightningToggleMetrics'
      description: 'UpdateLightningToggleMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningToggleMetrics':
          summary: 'Update Lightning Toggle Metrics'
          description: 'Updates an existing lightning toggle metrics; only elements
            specified in the request are updated.'
          entityName: 'LightningToggleMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningToggleMetrics':
          summary: 'Upsert Lightning Toggle Metrics'
          description: 'Upsert an existing lightning toggle metrics only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningToggleMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningToggleMetrics'
      description: 'DeleteLightningToggleMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningToggleMetrics':
          summary: 'Delete Lightning Toggle Metrics'
          description: 'Delete an existing lightning toggle metrics only elements
            specified in the request are deleted.'
          entityName: 'LightningToggleMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUriEvent/{Id}:
    patch:
      summary: 'Update LightningUriEvent'
      description: 'UpdateLightningUriEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningUriEvent':
          summary: 'Update Lightning URI Event'
          description: 'Updates an existing lightning uri event; only elements specified
            in the request are updated.'
          entityName: 'LightningUriEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUriEvent':
          summary: 'Upsert Lightning URI Event'
          description: 'Upsert an existing lightning uri event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningUriEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningUriEvent'
      description: 'DeleteLightningUriEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningUriEvent':
          summary: 'Delete Lightning URI Event'
          description: 'Delete an existing lightning uri event only elements specified
            in the request are deleted.'
          entityName: 'LightningUriEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUriEventStream/{Id}:
    patch:
      summary: 'Update LightningUriEventStream'
      description: 'UpdateLightningUriEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningUriEventStream':
          summary: 'Update Lightning URI Event Stream'
          description: 'Updates an existing lightning uri event stream; only elements
            specified in the request are updated.'
          entityName: 'LightningUriEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUriEventStream':
          summary: 'Upsert Lightning URI Event Stream'
          description: 'Upsert an existing lightning uri event stream only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningUriEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningUriEventStream'
      description: 'DeleteLightningUriEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningUriEventStream':
          summary: 'Delete Lightning URI Event Stream'
          description: 'Delete an existing lightning uri event stream only elements
            specified in the request are deleted.'
          entityName: 'LightningUriEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByAppTypeMetrics/{Id}:
    patch:
      summary: 'Update LightningUsageByAppTypeMetrics'
      description: 'UpdateLightningUsageByAppTypeMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningUsageByAppTypeMetrics':
          summary: 'Update Lightning Usage By App Type Metrics'
          description: 'Updates an existing lightning usage by app type metrics; only
            elements specified in the request are updated.'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByAppTypeMetrics':
          summary: 'Upsert Lightning Usage By App Type Metrics'
          description: 'Upsert an existing lightning usage by app type metrics only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningUsageByAppTypeMetrics'
      description: 'DeleteLightningUsageByAppTypeMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningUsageByAppTypeMetrics':
          summary: 'Delete Lightning Usage By App Type Metrics'
          description: 'Delete an existing lightning usage by app type metrics only
            elements specified in the request are deleted.'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByBrowserMetrics/{Id}:
    patch:
      summary: 'Update LightningUsageByBrowserMetrics'
      description: 'UpdateLightningUsageByBrowserMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningUsageByBrowserMetrics':
          summary: 'Update Lightning Usage By Browser Metrics'
          description: 'Updates an existing lightning usage by browser metrics; only
            elements specified in the request are updated.'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByBrowserMetrics':
          summary: 'Upsert Lightning Usage By Browser Metrics'
          description: 'Upsert an existing lightning usage by browser metrics only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningUsageByBrowserMetrics'
      description: 'DeleteLightningUsageByBrowserMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningUsageByBrowserMetrics':
          summary: 'Delete Lightning Usage By Browser Metrics'
          description: 'Delete an existing lightning usage by browser metrics only
            elements specified in the request are deleted.'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByFlexiPageMetrics/{Id}:
    patch:
      summary: 'Update LightningUsageByFlexiPageMetrics'
      description: 'UpdateLightningUsageByFlexiPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningUsageByFlexiPageMetrics':
          summary: 'Update Lightning Usage By FlexiPage Metrics'
          description: 'Updates an existing lightning usage by flexipage metrics;
            only elements specified in the request are updated.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByFlexiPageMetrics':
          summary: 'Upsert Lightning Usage By FlexiPage Metrics'
          description: 'Upsert an existing lightning usage by flexipage metrics only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningUsageByFlexiPageMetrics'
      description: 'DeleteLightningUsageByFlexiPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningUsageByFlexiPageMetrics':
          summary: 'Delete Lightning Usage By FlexiPage Metrics'
          description: 'Delete an existing lightning usage by flexipage metrics only
            elements specified in the request are deleted.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LightningUsageByPageMetrics/{Id}:
    patch:
      summary: 'Update LightningUsageByPageMetrics'
      description: 'UpdateLightningUsageByPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLightningUsageByPageMetrics':
          summary: 'Update Lightning Usage By Page Metrics'
          description: 'Updates an existing lightning usage by page metrics; only
            elements specified in the request are updated.'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByPageMetrics':
          summary: 'Upsert Lightning Usage By Page Metrics'
          description: 'Upsert an existing lightning usage by page metrics only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LightningUsageByPageMetrics'
      description: 'DeleteLightningUsageByPageMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLightningUsageByPageMetrics':
          summary: 'Delete Lightning Usage By Page Metrics'
          description: 'Delete an existing lightning usage by page metrics only elements
            specified in the request are deleted.'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmail/{Id}:
    patch:
      summary: 'Update ListEmail'
      description: 'UpdateListEmail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListEmail':
          summary: 'Update List Email'
          description: 'Updates an existing list email; only elements specified in
            the request are updated.'
          entityName: 'ListEmail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmail':
          summary: 'Upsert List Email'
          description: 'Upsert an existing list email only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListEmail'
      description: 'DeleteListEmail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListEmail':
          summary: 'Delete List Email'
          description: 'Delete an existing list email only elements specified in the
            request are deleted.'
          entityName: 'ListEmail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailChangeEvent/{Id}:
    patch:
      summary: 'Update ListEmailChangeEvent'
      description: 'UpdateListEmailChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListEmailChangeEvent':
          summary: 'Update List Email Change Event'
          description: 'Updates an existing list email change event; only elements
            specified in the request are updated.'
          entityName: 'ListEmailChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailChangeEvent':
          summary: 'Upsert List Email Change Event'
          description: 'Upsert an existing list email change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListEmailChangeEvent'
      description: 'DeleteListEmailChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListEmailChangeEvent':
          summary: 'Delete List Email Change Event'
          description: 'Delete an existing list email change event only elements specified
            in the request are deleted.'
          entityName: 'ListEmailChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailIndividualRecipient/{Id}:
    patch:
      summary: 'Update ListEmailIndividualRecipient'
      description: 'UpdateListEmailIndividualRecipient'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListEmailIndividualRecipient':
          summary: 'Update List Email Individual Recipient'
          description: 'Updates an existing list email individual recipient; only
            elements specified in the request are updated.'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailIndividualRecipient':
          summary: 'Upsert List Email Individual Recipient'
          description: 'Upsert an existing list email individual recipient only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListEmailIndividualRecipient'
      description: 'DeleteListEmailIndividualRecipient'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListEmailIndividualRecipient':
          summary: 'Delete List Email Individual Recipient'
          description: 'Delete an existing list email individual recipient only elements
            specified in the request are deleted.'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailRecipientSource/{Id}:
    patch:
      summary: 'Update ListEmailRecipientSource'
      description: 'UpdateListEmailRecipientSource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListEmailRecipientSource':
          summary: 'Update List Email Recipient Source'
          description: 'Updates an existing list email recipient source; only elements
            specified in the request are updated.'
          entityName: 'ListEmailRecipientSource'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailRecipientSource':
          summary: 'Upsert List Email Recipient Source'
          description: 'Upsert an existing list email recipient source only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailRecipientSource'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListEmailRecipientSource'
      description: 'DeleteListEmailRecipientSource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListEmailRecipientSource':
          summary: 'Delete List Email Recipient Source'
          description: 'Delete an existing list email recipient source only elements
            specified in the request are deleted.'
          entityName: 'ListEmailRecipientSource'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListEmailShare/{Id}:
    patch:
      summary: 'Update ListEmailShare'
      description: 'UpdateListEmailShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListEmailShare':
          summary: 'Update List Email Share'
          description: 'Updates an existing list email share; only elements specified
            in the request are updated.'
          entityName: 'ListEmailShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailShare':
          summary: 'Upsert List Email Share'
          description: 'Upsert an existing list email share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListEmailShare'
      description: 'DeleteListEmailShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListEmailShare':
          summary: 'Delete List Email Share'
          description: 'Delete an existing list email share only elements specified
            in the request are deleted.'
          entityName: 'ListEmailShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListView/{Id}:
    patch:
      summary: 'Update ListView'
      description: 'UpdateListView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListView':
          summary: 'Update List View'
          description: 'Updates an existing list view; only elements specified in
            the request are updated.'
          entityName: 'ListView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListView':
          summary: 'Upsert List View'
          description: 'Upsert an existing list view only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'ListView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListView'
      description: 'DeleteListView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListView':
          summary: 'Delete List View'
          description: 'Delete an existing list view only elements specified in the
            request are deleted.'
          entityName: 'ListView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewChart/{Id}:
    patch:
      summary: 'Update ListViewChart'
      description: 'UpdateListViewChart'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListViewChart':
          summary: 'Update List View Chart'
          description: 'Updates an existing list view chart; only elements specified
            in the request are updated.'
          entityName: 'ListViewChart'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewChart':
          summary: 'Upsert List View Chart'
          description: 'Upsert an existing list view chart only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewChart'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListViewChart'
      description: 'DeleteListViewChart'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListViewChart':
          summary: 'Delete List View Chart'
          description: 'Delete an existing list view chart only elements specified
            in the request are deleted.'
          entityName: 'ListViewChart'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewChartInstance/{Id}:
    patch:
      summary: 'Update ListViewChartInstance'
      description: 'UpdateListViewChartInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListViewChartInstance':
          summary: 'Update List View Chart Instance'
          description: 'Updates an existing list view chart instance; only elements
            specified in the request are updated.'
          entityName: 'ListViewChartInstance'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewChartInstance':
          summary: 'Upsert List View Chart Instance'
          description: 'Upsert an existing list view chart instance only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewChartInstance'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListViewChartInstance'
      description: 'DeleteListViewChartInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListViewChartInstance':
          summary: 'Delete List View Chart Instance'
          description: 'Delete an existing list view chart instance only elements
            specified in the request are deleted.'
          entityName: 'ListViewChartInstance'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewEvent/{Id}:
    patch:
      summary: 'Update ListViewEvent'
      description: 'UpdateListViewEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListViewEvent':
          summary: 'Update List View Event'
          description: 'Updates an existing list view event; only elements specified
            in the request are updated.'
          entityName: 'ListViewEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewEvent':
          summary: 'Upsert List View Event'
          description: 'Upsert an existing list view event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListViewEvent'
      description: 'DeleteListViewEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListViewEvent':
          summary: 'Delete List View Event'
          description: 'Delete an existing list view event only elements specified
            in the request are deleted.'
          entityName: 'ListViewEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ListViewEventStream/{Id}:
    patch:
      summary: 'Update ListViewEventStream'
      description: 'UpdateListViewEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateListViewEventStream':
          summary: 'Update List View Event Stream'
          description: 'Updates an existing list view event stream; only elements
            specified in the request are updated.'
          entityName: 'ListViewEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewEventStream':
          summary: 'Upsert List View Event Stream'
          description: 'Upsert an existing list view event stream only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ListViewEventStream'
      description: 'DeleteListViewEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteListViewEventStream':
          summary: 'Delete List View Event Stream'
          description: 'Delete an existing list view event stream only elements specified
            in the request are deleted.'
          entityName: 'ListViewEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginAsEvent/{Id}:
    patch:
      summary: 'Update LoginAsEvent'
      description: 'UpdateLoginAsEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginAsEvent':
          summary: 'Update LoginAs Event'
          description: 'Updates an existing loginas event; only elements specified
            in the request are updated.'
          entityName: 'LoginAsEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginAsEvent':
          summary: 'Upsert LoginAs Event'
          description: 'Upsert an existing loginas event only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginAsEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginAsEvent'
      description: 'DeleteLoginAsEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginAsEvent':
          summary: 'Delete LoginAs Event'
          description: 'Delete an existing loginas event only elements specified in
            the request are deleted.'
          entityName: 'LoginAsEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginAsEventStream/{Id}:
    patch:
      summary: 'Update LoginAsEventStream'
      description: 'UpdateLoginAsEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginAsEventStream':
          summary: 'Update LoginAs Event Stream'
          description: 'Updates an existing loginas event stream; only elements specified
            in the request are updated.'
          entityName: 'LoginAsEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginAsEventStream':
          summary: 'Upsert LoginAs Event Stream'
          description: 'Upsert an existing loginas event stream only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginAsEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginAsEventStream'
      description: 'DeleteLoginAsEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginAsEventStream':
          summary: 'Delete LoginAs Event Stream'
          description: 'Delete an existing loginas event stream only elements specified
            in the request are deleted.'
          entityName: 'LoginAsEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginEvent/{Id}:
    patch:
      summary: 'Update LoginEvent'
      description: 'UpdateLoginEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginEvent':
          summary: 'Update Login Event'
          description: 'Updates an existing login event; only elements specified in
            the request are updated.'
          entityName: 'LoginEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginEvent':
          summary: 'Upsert Login Event'
          description: 'Upsert an existing login event only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginEvent'
      description: 'DeleteLoginEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginEvent':
          summary: 'Delete Login Event'
          description: 'Delete an existing login event only elements specified in
            the request are deleted.'
          entityName: 'LoginEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginEventStream/{Id}:
    patch:
      summary: 'Update LoginEventStream'
      description: 'UpdateLoginEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginEventStream':
          summary: 'Update Login Event Stream'
          description: 'Updates an existing login event stream; only elements specified
            in the request are updated.'
          entityName: 'LoginEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginEventStream':
          summary: 'Upsert Login Event Stream'
          description: 'Upsert an existing login event stream only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginEventStream'
      description: 'DeleteLoginEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginEventStream':
          summary: 'Delete Login Event Stream'
          description: 'Delete an existing login event stream only elements specified
            in the request are deleted.'
          entityName: 'LoginEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginGeo/{Id}:
    patch:
      summary: 'Update LoginGeo'
      description: 'UpdateLoginGeo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginGeo':
          summary: 'Update Login Geo Data'
          description: 'Updates an existing login geo data; only elements specified
            in the request are updated.'
          entityName: 'LoginGeo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginGeo':
          summary: 'Upsert Login Geo Data'
          description: 'Upsert an existing login geo data only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginGeo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginGeo'
      description: 'DeleteLoginGeo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginGeo':
          summary: 'Delete Login Geo Data'
          description: 'Delete an existing login geo data only elements specified
            in the request are deleted.'
          entityName: 'LoginGeo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginHistory/{Id}:
    patch:
      summary: 'Update LoginHistory'
      description: 'UpdateLoginHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginHistory':
          summary: 'Update Login History'
          description: 'Updates an existing login history; only elements specified
            in the request are updated.'
          entityName: 'LoginHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginHistory':
          summary: 'Upsert Login History'
          description: 'Upsert an existing login history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginHistory'
      description: 'DeleteLoginHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginHistory':
          summary: 'Delete Login History'
          description: 'Delete an existing login history only elements specified in
            the request are deleted.'
          entityName: 'LoginHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LoginIp/{Id}:
    patch:
      summary: 'Update LoginIp'
      description: 'UpdateLoginIp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLoginIp':
          summary: 'Update Login IP'
          description: 'Updates an existing login ip; only elements specified in the
            request are updated.'
          entityName: 'LoginIp'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginIp':
          summary: 'Upsert Login IP'
          description: 'Upsert an existing login ip only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'LoginIp'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LoginIp'
      description: 'DeleteLoginIp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLoginIp':
          summary: 'Delete Login IP'
          description: 'Delete an existing login ip only elements specified in the
            request are deleted.'
          entityName: 'LoginIp'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LogoutEvent/{Id}:
    patch:
      summary: 'Update LogoutEvent'
      description: 'UpdateLogoutEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLogoutEvent':
          summary: 'Update Logout Event'
          description: 'Updates an existing logout event; only elements specified
            in the request are updated.'
          entityName: 'LogoutEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLogoutEvent':
          summary: 'Upsert Logout Event'
          description: 'Upsert an existing logout event only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'LogoutEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LogoutEvent'
      description: 'DeleteLogoutEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLogoutEvent':
          summary: 'Delete Logout Event'
          description: 'Delete an existing logout event only elements specified in
            the request are deleted.'
          entityName: 'LogoutEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LogoutEventStream/{Id}:
    patch:
      summary: 'Update LogoutEventStream'
      description: 'UpdateLogoutEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLogoutEventStream':
          summary: 'Update Logout Event Stream'
          description: 'Updates an existing logout event stream; only elements specified
            in the request are updated.'
          entityName: 'LogoutEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLogoutEventStream':
          summary: 'Upsert Logout Event Stream'
          description: 'Upsert an existing logout event stream only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LogoutEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LogoutEventStream'
      description: 'DeleteLogoutEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLogoutEventStream':
          summary: 'Delete Logout Event Stream'
          description: 'Delete an existing logout event stream only elements specified
            in the request are deleted.'
          entityName: 'LogoutEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/LookedUpFromActivity/{Id}:
    patch:
      summary: 'Update LookedUpFromActivity'
      description: 'UpdateLookedUpFromActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateLookedUpFromActivity':
          summary: 'Update Lookups from Activity'
          description: 'Updates an existing lookups from activity; only elements specified
            in the request are updated.'
          entityName: 'LookedUpFromActivity'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLookedUpFromActivity':
          summary: 'Upsert Lookups from Activity'
          description: 'Upsert an existing lookups from activity only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LookedUpFromActivity'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete LookedUpFromActivity'
      description: 'DeleteLookedUpFromActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteLookedUpFromActivity':
          summary: 'Delete Lookups from Activity'
          description: 'Delete an existing lookups from activity only elements specified
            in the request are deleted.'
          entityName: 'LookedUpFromActivity'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Macro/{Id}:
    patch:
      summary: 'Update Macro'
      description: 'UpdateMacro'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacro':
          summary: 'Update Macro'
          description: 'Updates an existing macro; only elements specified in the
            request are updated.'
          entityName: 'Macro'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacro':
          summary: 'Upsert Macro'
          description: 'Upsert an existing macro only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Macro'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Macro'
      description: 'DeleteMacro'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacro':
          summary: 'Delete Macro'
          description: 'Delete an existing macro only elements specified in the request
            are deleted.'
          entityName: 'Macro'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroChangeEvent/{Id}:
    patch:
      summary: 'Update MacroChangeEvent'
      description: 'UpdateMacroChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroChangeEvent':
          summary: 'Update Macro Change Event'
          description: 'Updates an existing macro change event; only elements specified
            in the request are updated.'
          entityName: 'MacroChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroChangeEvent':
          summary: 'Upsert Macro Change Event'
          description: 'Upsert an existing macro change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroChangeEvent'
      description: 'DeleteMacroChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroChangeEvent':
          summary: 'Delete Macro Change Event'
          description: 'Delete an existing macro change event only elements specified
            in the request are deleted.'
          entityName: 'MacroChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroHistory/{Id}:
    patch:
      summary: 'Update MacroHistory'
      description: 'UpdateMacroHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroHistory':
          summary: 'Update Macro History'
          description: 'Updates an existing macro history; only elements specified
            in the request are updated.'
          entityName: 'MacroHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroHistory':
          summary: 'Upsert Macro History'
          description: 'Upsert an existing macro history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroHistory'
      description: 'DeleteMacroHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroHistory':
          summary: 'Delete Macro History'
          description: 'Delete an existing macro history only elements specified in
            the request are deleted.'
          entityName: 'MacroHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroInstruction/{Id}:
    patch:
      summary: 'Update MacroInstruction'
      description: 'UpdateMacroInstruction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroInstruction':
          summary: 'Update Macro Instruction'
          description: 'Updates an existing macro instruction; only elements specified
            in the request are updated.'
          entityName: 'MacroInstruction'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroInstruction':
          summary: 'Upsert Macro Instruction'
          description: 'Upsert an existing macro instruction only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroInstruction'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroInstruction'
      description: 'DeleteMacroInstruction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroInstruction':
          summary: 'Delete Macro Instruction'
          description: 'Delete an existing macro instruction only elements specified
            in the request are deleted.'
          entityName: 'MacroInstruction'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroInstructionChangeEvent/{Id}:
    patch:
      summary: 'Update MacroInstructionChangeEvent'
      description: 'UpdateMacroInstructionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroInstructionChangeEvent':
          summary: 'Update Macro Instruction Change Event'
          description: 'Updates an existing macro instruction change event; only elements
            specified in the request are updated.'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroInstructionChangeEvent':
          summary: 'Upsert Macro Instruction Change Event'
          description: 'Upsert an existing macro instruction change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroInstructionChangeEvent'
      description: 'DeleteMacroInstructionChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroInstructionChangeEvent':
          summary: 'Delete Macro Instruction Change Event'
          description: 'Delete an existing macro instruction change event only elements
            specified in the request are deleted.'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroShare/{Id}:
    patch:
      summary: 'Update MacroShare'
      description: 'UpdateMacroShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroShare':
          summary: 'Update Macro Share'
          description: 'Updates an existing macro share; only elements specified in
            the request are updated.'
          entityName: 'MacroShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroShare':
          summary: 'Upsert Macro Share'
          description: 'Upsert an existing macro share only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroShare'
      description: 'DeleteMacroShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroShare':
          summary: 'Delete Macro Share'
          description: 'Delete an existing macro share only elements specified in
            the request are deleted.'
          entityName: 'MacroShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroUsage/{Id}:
    patch:
      summary: 'Update MacroUsage'
      description: 'UpdateMacroUsage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroUsage':
          summary: 'Update Macro Usage'
          description: 'Updates an existing macro usage; only elements specified in
            the request are updated.'
          entityName: 'MacroUsage'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroUsage':
          summary: 'Upsert Macro Usage'
          description: 'Upsert an existing macro usage only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroUsage'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroUsage'
      description: 'DeleteMacroUsage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroUsage':
          summary: 'Delete Macro Usage'
          description: 'Delete an existing macro usage only elements specified in
            the request are deleted.'
          entityName: 'MacroUsage'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MacroUsageShare/{Id}:
    patch:
      summary: 'Update MacroUsageShare'
      description: 'UpdateMacroUsageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMacroUsageShare':
          summary: 'Update Macro Usage Share'
          description: 'Updates an existing macro usage share; only elements specified
            in the request are updated.'
          entityName: 'MacroUsageShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroUsageShare':
          summary: 'Upsert Macro Usage Share'
          description: 'Upsert an existing macro usage share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroUsageShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MacroUsageShare'
      description: 'DeleteMacroUsageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMacroUsageShare':
          summary: 'Delete Macro Usage Share'
          description: 'Delete an existing macro usage share only elements specified
            in the request are deleted.'
          entityName: 'MacroUsageShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MailmergeTemplate/{Id}:
    patch:
      summary: 'Update MailmergeTemplate'
      description: 'UpdateMailmergeTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMailmergeTemplate':
          summary: 'Update Mail Merge Template'
          description: 'Updates an existing mail merge template; only elements specified
            in the request are updated.'
          entityName: 'MailmergeTemplate'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMailmergeTemplate':
          summary: 'Upsert Mail Merge Template'
          description: 'Upsert an existing mail merge template only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MailmergeTemplate'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MailmergeTemplate'
      description: 'DeleteMailmergeTemplate'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMailmergeTemplate':
          summary: 'Delete Mail Merge Template'
          description: 'Delete an existing mail merge template only elements specified
            in the request are deleted.'
          entityName: 'MailmergeTemplate'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContent/{Id}:
    patch:
      summary: 'Update ManagedContent'
      description: 'UpdateManagedContent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateManagedContent':
          summary: 'Update Managed Content'
          description: 'Updates an existing managed content; only elements specified
            in the request are updated.'
          entityName: 'ManagedContent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContent':
          summary: 'Upsert Managed Content'
          description: 'Upsert an existing managed content only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ManagedContent'
      description: 'DeleteManagedContent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteManagedContent':
          summary: 'Delete Managed Content'
          description: 'Delete an existing managed content only elements specified
            in the request are deleted.'
          entityName: 'ManagedContent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentChannel/{Id}:
    patch:
      summary: 'Update ManagedContentChannel'
      description: 'UpdateManagedContentChannel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateManagedContentChannel':
          summary: 'Update Managed Content Channel'
          description: 'Updates an existing managed content channel; only elements
            specified in the request are updated.'
          entityName: 'ManagedContentChannel'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentChannel':
          summary: 'Upsert Managed Content Channel'
          description: 'Upsert an existing managed content channel only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentChannel'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ManagedContentChannel'
      description: 'DeleteManagedContentChannel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteManagedContentChannel':
          summary: 'Delete Managed Content Channel'
          description: 'Delete an existing managed content channel only elements specified
            in the request are deleted.'
          entityName: 'ManagedContentChannel'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentSpace/{Id}:
    patch:
      summary: 'Update ManagedContentSpace'
      description: 'UpdateManagedContentSpace'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateManagedContentSpace':
          summary: 'Update Managed Content Space'
          description: 'Updates an existing managed content space; only elements specified
            in the request are updated.'
          entityName: 'ManagedContentSpace'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentSpace':
          summary: 'Upsert Managed Content Space'
          description: 'Upsert an existing managed content space only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentSpace'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ManagedContentSpace'
      description: 'DeleteManagedContentSpace'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteManagedContentSpace':
          summary: 'Delete Managed Content Space'
          description: 'Delete an existing managed content space only elements specified
            in the request are deleted.'
          entityName: 'ManagedContentSpace'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentVariant/{Id}:
    patch:
      summary: 'Update ManagedContentVariant'
      description: 'UpdateManagedContentVariant'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateManagedContentVariant':
          summary: 'Update Managed Content Variant'
          description: 'Updates an existing managed content variant; only elements
            specified in the request are updated.'
          entityName: 'ManagedContentVariant'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentVariant':
          summary: 'Upsert Managed Content Variant'
          description: 'Upsert an existing managed content variant only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentVariant'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ManagedContentVariant'
      description: 'DeleteManagedContentVariant'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteManagedContentVariant':
          summary: 'Delete Managed Content Variant'
          description: 'Delete an existing managed content variant only elements specified
            in the request are deleted.'
          entityName: 'ManagedContentVariant'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ManagedContentVariantChangeEvent/{Id}:
    patch:
      summary: 'Update ManagedContentVariantChangeEvent'
      description: 'UpdateManagedContentVariantChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateManagedContentVariantChangeEvent':
          summary: 'Update Managed Content Variant Change Event'
          description: 'Updates an existing managed content variant change event;
            only elements specified in the request are updated.'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentVariantChangeEvent':
          summary: 'Upsert Managed Content Variant Change Event'
          description: 'Upsert an existing managed content variant change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ManagedContentVariantChangeEvent'
      description: 'DeleteManagedContentVariantChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteManagedContentVariantChangeEvent':
          summary: 'Delete Managed Content Variant Change Event'
          description: 'Delete an existing managed content variant change event only
            elements specified in the request are deleted.'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MatchingInformation/{Id}:
    patch:
      summary: 'Update MatchingInformation'
      description: 'UpdateMatchingInformation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMatchingInformation':
          summary: 'Update Matching Information'
          description: 'Updates an existing matching information; only elements specified
            in the request are updated.'
          entityName: 'MatchingInformation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMatchingInformation':
          summary: 'Upsert Matching Information'
          description: 'Upsert an existing matching information only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingInformation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MatchingInformation'
      description: 'DeleteMatchingInformation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMatchingInformation':
          summary: 'Delete Matching Information'
          description: 'Delete an existing matching information only elements specified
            in the request are deleted.'
          entityName: 'MatchingInformation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MatchingRule/{Id}:
    patch:
      summary: 'Update MatchingRule'
      description: 'UpdateMatchingRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMatchingRule':
          summary: 'Update Matching Rule'
          description: 'Updates an existing matching rule; only elements specified
            in the request are updated.'
          entityName: 'MatchingRule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMatchingRule':
          summary: 'Upsert Matching Rule'
          description: 'Upsert an existing matching rule only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingRule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MatchingRule'
      description: 'DeleteMatchingRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMatchingRule':
          summary: 'Delete Matching Rule'
          description: 'Delete an existing matching rule only elements specified in
            the request are deleted.'
          entityName: 'MatchingRule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MatchingRuleItem/{Id}:
    patch:
      summary: 'Update MatchingRuleItem'
      description: 'UpdateMatchingRuleItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMatchingRuleItem':
          summary: 'Update Matching Rule Item'
          description: 'Updates an existing matching rule item; only elements specified
            in the request are updated.'
          entityName: 'MatchingRuleItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMatchingRuleItem':
          summary: 'Upsert Matching Rule Item'
          description: 'Upsert an existing matching rule item only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingRuleItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MatchingRuleItem'
      description: 'DeleteMatchingRuleItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMatchingRuleItem':
          summary: 'Delete Matching Rule Item'
          description: 'Delete an existing matching rule item only elements specified
            in the request are deleted.'
          entityName: 'MatchingRuleItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MobileApplicationDetail/{Id}:
    patch:
      summary: 'Update MobileApplicationDetail'
      description: 'UpdateMobileApplicationDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMobileApplicationDetail':
          summary: 'Update Mobile Application Detail'
          description: 'Updates an existing mobile application detail; only elements
            specified in the request are updated.'
          entityName: 'MobileApplicationDetail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMobileApplicationDetail':
          summary: 'Upsert Mobile Application Detail'
          description: 'Upsert an existing mobile application detail only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MobileApplicationDetail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MobileApplicationDetail'
      description: 'DeleteMobileApplicationDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMobileApplicationDetail':
          summary: 'Delete Mobile Application Detail'
          description: 'Delete an existing mobile application detail only elements
            specified in the request are deleted.'
          entityName: 'MobileApplicationDetail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/MyDomainDiscoverableLogin/{Id}:
    patch:
      summary: 'Update MyDomainDiscoverableLogin'
      description: 'UpdateMyDomainDiscoverableLogin'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateMyDomainDiscoverableLogin':
          summary: 'Update My Domain Discoverable Login'
          description: 'Updates an existing my domain discoverable login; only elements
            specified in the request are updated.'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMyDomainDiscoverableLogin':
          summary: 'Upsert My Domain Discoverable Login'
          description: 'Upsert an existing my domain discoverable login only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete MyDomainDiscoverableLogin'
      description: 'DeleteMyDomainDiscoverableLogin'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteMyDomainDiscoverableLogin':
          summary: 'Delete My Domain Discoverable Login'
          description: 'Delete an existing my domain discoverable login only elements
            specified in the request are deleted.'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Name/{Id}:
    patch:
      summary: 'Update Name'
      description: 'UpdateName'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateName':
          summary: 'Update Name'
          description: 'Updates an existing name; only elements specified in the request
            are updated.'
          entityName: 'Name'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertName':
          summary: 'Upsert Name'
          description: 'Upsert an existing name only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Name'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Name'
      description: 'DeleteName'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteName':
          summary: 'Delete Name'
          description: 'Delete an existing name only elements specified in the request
            are deleted.'
          entityName: 'Name'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/NamedCredential/{Id}:
    patch:
      summary: 'Update NamedCredential'
      description: 'UpdateNamedCredential'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateNamedCredential':
          summary: 'Update Named Credential'
          description: 'Updates an existing named credential; only elements specified
            in the request are updated.'
          entityName: 'NamedCredential'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNamedCredential':
          summary: 'Upsert Named Credential'
          description: 'Upsert an existing named credential only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'NamedCredential'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete NamedCredential'
      description: 'DeleteNamedCredential'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteNamedCredential':
          summary: 'Delete Named Credential'
          description: 'Delete an existing named credential only elements specified
            in the request are deleted.'
          entityName: 'NamedCredential'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Note/{Id}:
    patch:
      summary: 'Update Note'
      description: 'UpdateNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateNote':
          summary: 'Update Note'
          description: 'Updates an existing note; only elements specified in the request
            are updated.'
          entityName: 'Note'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNote':
          summary: 'Upsert Note'
          description: 'Upsert an existing note only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Note'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Note'
      description: 'DeleteNote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteNote':
          summary: 'Delete Note'
          description: 'Delete an existing note only elements specified in the request
            are deleted.'
          entityName: 'Note'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/NoteAndAttachment/{Id}:
    patch:
      summary: 'Update NoteAndAttachment'
      description: 'UpdateNoteAndAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateNoteAndAttachment':
          summary: 'Update Note and Attachment'
          description: 'Updates an existing note and attachment; only elements specified
            in the request are updated.'
          entityName: 'NoteAndAttachment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNoteAndAttachment':
          summary: 'Upsert Note and Attachment'
          description: 'Upsert an existing note and attachment only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'NoteAndAttachment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete NoteAndAttachment'
      description: 'DeleteNoteAndAttachment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteNoteAndAttachment':
          summary: 'Delete Note and Attachment'
          description: 'Delete an existing note and attachment only elements specified
            in the request are deleted.'
          entityName: 'NoteAndAttachment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OauthCustomScope/{Id}:
    patch:
      summary: 'Update OauthCustomScope'
      description: 'UpdateOauthCustomScope'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOauthCustomScope':
          summary: 'Update OAuth Custom Scope'
          description: 'Updates an existing oauth custom scope; only elements specified
            in the request are updated.'
          entityName: 'OauthCustomScope'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOauthCustomScope':
          summary: 'Upsert OAuth Custom Scope'
          description: 'Upsert an existing oauth custom scope only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthCustomScope'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OauthCustomScope'
      description: 'DeleteOauthCustomScope'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOauthCustomScope':
          summary: 'Delete OAuth Custom Scope'
          description: 'Delete an existing oauth custom scope only elements specified
            in the request are deleted.'
          entityName: 'OauthCustomScope'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OauthCustomScopeApp/{Id}:
    patch:
      summary: 'Update OauthCustomScopeApp'
      description: 'UpdateOauthCustomScopeApp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOauthCustomScopeApp':
          summary: 'Update OAuth Custom Scope App '
          description: 'Updates an existing oauth custom scope app ; only elements
            specified in the request are updated.'
          entityName: 'OauthCustomScopeApp'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOauthCustomScopeApp':
          summary: 'Upsert OAuth Custom Scope App '
          description: 'Upsert an existing oauth custom scope app  only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthCustomScopeApp'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OauthCustomScopeApp'
      description: 'DeleteOauthCustomScopeApp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOauthCustomScopeApp':
          summary: 'Delete OAuth Custom Scope App '
          description: 'Delete an existing oauth custom scope app  only elements specified
            in the request are deleted.'
          entityName: 'OauthCustomScopeApp'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OauthToken/{Id}:
    patch:
      summary: 'Update OauthToken'
      description: 'UpdateOauthToken'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOauthToken':
          summary: 'Update Oauth Token'
          description: 'Updates an existing oauth token; only elements specified in
            the request are updated.'
          entityName: 'OauthToken'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOauthToken':
          summary: 'Upsert Oauth Token'
          description: 'Upsert an existing oauth token only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthToken'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OauthToken'
      description: 'DeleteOauthToken'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOauthToken':
          summary: 'Delete Oauth Token'
          description: 'Delete an existing oauth token only elements specified in
            the request are deleted.'
          entityName: 'OauthToken'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ObjectPermissions/{Id}:
    patch:
      summary: 'Update ObjectPermissions'
      description: 'UpdateObjectPermissions'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateObjectPermissions':
          summary: 'Update Object Permissions'
          description: 'Updates an existing object permissions; only elements specified
            in the request are updated.'
          entityName: 'ObjectPermissions'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectPermissions':
          summary: 'Upsert Object Permissions'
          description: 'Upsert an existing object permissions only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectPermissions'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ObjectPermissions'
      description: 'DeleteObjectPermissions'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteObjectPermissions':
          summary: 'Delete Object Permissions'
          description: 'Delete an existing object permissions only elements specified
            in the request are deleted.'
          entityName: 'ObjectPermissions'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OnboardingMetrics/{Id}:
    patch:
      summary: 'Update OnboardingMetrics'
      description: 'UpdateOnboardingMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOnboardingMetrics':
          summary: 'Update Onboarding Metrics'
          description: 'Updates an existing onboarding metrics; only elements specified
            in the request are updated.'
          entityName: 'OnboardingMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOnboardingMetrics':
          summary: 'Upsert Onboarding Metrics'
          description: 'Upsert an existing onboarding metrics only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OnboardingMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OnboardingMetrics'
      description: 'DeleteOnboardingMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOnboardingMetrics':
          summary: 'Delete Onboarding Metrics'
          description: 'Delete an existing onboarding metrics only elements specified
            in the request are deleted.'
          entityName: 'OnboardingMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpenActivity/{Id}:
    patch:
      summary: 'Update OpenActivity'
      description: 'UpdateOpenActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpenActivity':
          summary: 'Update Open Activity'
          description: 'Updates an existing open activity; only elements specified
            in the request are updated.'
          entityName: 'OpenActivity'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpenActivity':
          summary: 'Upsert Open Activity'
          description: 'Upsert an existing open activity only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'OpenActivity'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpenActivity'
      description: 'DeleteOpenActivity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpenActivity':
          summary: 'Delete Open Activity'
          description: 'Delete an existing open activity only elements specified in
            the request are deleted.'
          entityName: 'OpenActivity'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Opportunity/{Id}:
    patch:
      summary: 'Update Opportunity'
      description: 'UpdateOpportunity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunity':
          summary: 'Update Opportunity'
          description: 'Updates an existing opportunity; only elements specified in
            the request are updated.'
          entityName: 'Opportunity'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunity':
          summary: 'Upsert Opportunity'
          description: 'Upsert an existing opportunity only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Opportunity'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Opportunity'
      description: 'DeleteOpportunity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunity':
          summary: 'Delete Opportunity'
          description: 'Delete an existing opportunity only elements specified in
            the request are deleted.'
          entityName: 'Opportunity'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityChangeEvent/{Id}:
    patch:
      summary: 'Update OpportunityChangeEvent'
      description: 'UpdateOpportunityChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityChangeEvent':
          summary: 'Update Opportunity Change Event'
          description: 'Updates an existing opportunity change event; only elements
            specified in the request are updated.'
          entityName: 'OpportunityChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityChangeEvent':
          summary: 'Upsert Opportunity Change Event'
          description: 'Upsert an existing opportunity change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityChangeEvent'
      description: 'DeleteOpportunityChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityChangeEvent':
          summary: 'Delete Opportunity Change Event'
          description: 'Delete an existing opportunity change event only elements
            specified in the request are deleted.'
          entityName: 'OpportunityChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityCompetitor/{Id}:
    patch:
      summary: 'Update OpportunityCompetitor'
      description: 'UpdateOpportunityCompetitor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityCompetitor':
          summary: 'Update Opportunity: Competitor'
          description: 'Updates an existing opportunity: competitor; only elements
            specified in the request are updated.'
          entityName: 'OpportunityCompetitor'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityCompetitor':
          summary: 'Upsert Opportunity: Competitor'
          description: 'Upsert an existing opportunity: competitor only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityCompetitor'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityCompetitor'
      description: 'DeleteOpportunityCompetitor'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityCompetitor':
          summary: 'Delete Opportunity: Competitor'
          description: 'Delete an existing opportunity: competitor only elements specified
            in the request are deleted.'
          entityName: 'OpportunityCompetitor'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityContactRole/{Id}:
    patch:
      summary: 'Update OpportunityContactRole'
      description: 'UpdateOpportunityContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityContactRole':
          summary: 'Update Opportunity Contact Role'
          description: 'Updates an existing opportunity contact role; only elements
            specified in the request are updated.'
          entityName: 'OpportunityContactRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityContactRole':
          summary: 'Upsert Opportunity Contact Role'
          description: 'Upsert an existing opportunity contact role only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityContactRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityContactRole'
      description: 'DeleteOpportunityContactRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityContactRole':
          summary: 'Delete Opportunity Contact Role'
          description: 'Delete an existing opportunity contact role only elements
            specified in the request are deleted.'
          entityName: 'OpportunityContactRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityContactRoleChangeEvent/{Id}:
    patch:
      summary: 'Update OpportunityContactRoleChangeEvent'
      description: 'UpdateOpportunityContactRoleChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityContactRoleChangeEvent':
          summary: 'Update Opportunity Contact Role Change Event'
          description: 'Updates an existing opportunity contact role change event;
            only elements specified in the request are updated.'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityContactRoleChangeEvent':
          summary: 'Upsert Opportunity Contact Role Change Event'
          description: 'Upsert an existing opportunity contact role change event only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityContactRoleChangeEvent'
      description: 'DeleteOpportunityContactRoleChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityContactRoleChangeEvent':
          summary: 'Delete Opportunity Contact Role Change Event'
          description: 'Delete an existing opportunity contact role change event only
            elements specified in the request are deleted.'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityFieldHistory/{Id}:
    patch:
      summary: 'Update OpportunityFieldHistory'
      description: 'UpdateOpportunityFieldHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityFieldHistory':
          summary: 'Update Opportunity Field History'
          description: 'Updates an existing opportunity field history; only elements
            specified in the request are updated.'
          entityName: 'OpportunityFieldHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityFieldHistory':
          summary: 'Upsert Opportunity Field History'
          description: 'Upsert an existing opportunity field history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityFieldHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityFieldHistory'
      description: 'DeleteOpportunityFieldHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityFieldHistory':
          summary: 'Delete Opportunity Field History'
          description: 'Delete an existing opportunity field history only elements
            specified in the request are deleted.'
          entityName: 'OpportunityFieldHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityHistory/{Id}:
    patch:
      summary: 'Update OpportunityHistory'
      description: 'UpdateOpportunityHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityHistory':
          summary: 'Update Opportunity History'
          description: 'Updates an existing opportunity history; only elements specified
            in the request are updated.'
          entityName: 'OpportunityHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityHistory':
          summary: 'Upsert Opportunity History'
          description: 'Upsert an existing opportunity history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityHistory'
      description: 'DeleteOpportunityHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityHistory':
          summary: 'Delete Opportunity History'
          description: 'Delete an existing opportunity history only elements specified
            in the request are deleted.'
          entityName: 'OpportunityHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityLineItem/{Id}:
    patch:
      summary: 'Update OpportunityLineItem'
      description: 'UpdateOpportunityLineItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityLineItem':
          summary: 'Update Opportunity Product'
          description: 'Updates an existing opportunity product; only elements specified
            in the request are updated.'
          entityName: 'OpportunityLineItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityLineItem':
          summary: 'Upsert Opportunity Product'
          description: 'Upsert an existing opportunity product only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityLineItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityLineItem'
      description: 'DeleteOpportunityLineItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityLineItem':
          summary: 'Delete Opportunity Product'
          description: 'Delete an existing opportunity product only elements specified
            in the request are deleted.'
          entityName: 'OpportunityLineItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityPartner/{Id}:
    patch:
      summary: 'Update OpportunityPartner'
      description: 'UpdateOpportunityPartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityPartner':
          summary: 'Update Opportunity Partner'
          description: 'Updates an existing opportunity partner; only elements specified
            in the request are updated.'
          entityName: 'OpportunityPartner'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityPartner':
          summary: 'Upsert Opportunity Partner'
          description: 'Upsert an existing opportunity partner only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityPartner'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityPartner'
      description: 'DeleteOpportunityPartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityPartner':
          summary: 'Delete Opportunity Partner'
          description: 'Delete an existing opportunity partner only elements specified
            in the request are deleted.'
          entityName: 'OpportunityPartner'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityShare/{Id}:
    patch:
      summary: 'Update OpportunityShare'
      description: 'UpdateOpportunityShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityShare':
          summary: 'Update Opportunity Share'
          description: 'Updates an existing opportunity share; only elements specified
            in the request are updated.'
          entityName: 'OpportunityShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityShare':
          summary: 'Upsert Opportunity Share'
          description: 'Upsert an existing opportunity share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityShare'
      description: 'DeleteOpportunityShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityShare':
          summary: 'Delete Opportunity Share'
          description: 'Delete an existing opportunity share only elements specified
            in the request are deleted.'
          entityName: 'OpportunityShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OpportunityStage/{Id}:
    patch:
      summary: 'Update OpportunityStage'
      description: 'UpdateOpportunityStage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOpportunityStage':
          summary: 'Update Opportunity Stage'
          description: 'Updates an existing opportunity stage; only elements specified
            in the request are updated.'
          entityName: 'OpportunityStage'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityStage':
          summary: 'Upsert Opportunity Stage'
          description: 'Upsert an existing opportunity stage only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityStage'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OpportunityStage'
      description: 'DeleteOpportunityStage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOpportunityStage':
          summary: 'Delete Opportunity Stage'
          description: 'Delete an existing opportunity stage only elements specified
            in the request are deleted.'
          entityName: 'OpportunityStage'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgDeleteRequest/{Id}:
    patch:
      summary: 'Update OrgDeleteRequest'
      description: 'UpdateOrgDeleteRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgDeleteRequest':
          summary: 'Update Org Delete Request'
          description: 'Updates an existing org delete request; only elements specified
            in the request are updated.'
          entityName: 'OrgDeleteRequest'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgDeleteRequest':
          summary: 'Upsert Org Delete Request'
          description: 'Upsert an existing org delete request only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgDeleteRequest'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgDeleteRequest'
      description: 'DeleteOrgDeleteRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgDeleteRequest':
          summary: 'Delete Org Delete Request'
          description: 'Delete an existing org delete request only elements specified
            in the request are deleted.'
          entityName: 'OrgDeleteRequest'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgDeleteRequestShare/{Id}:
    patch:
      summary: 'Update OrgDeleteRequestShare'
      description: 'UpdateOrgDeleteRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgDeleteRequestShare':
          summary: 'Update Org Delete Request Share'
          description: 'Updates an existing org delete request share; only elements
            specified in the request are updated.'
          entityName: 'OrgDeleteRequestShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgDeleteRequestShare':
          summary: 'Upsert Org Delete Request Share'
          description: 'Upsert an existing org delete request share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgDeleteRequestShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgDeleteRequestShare'
      description: 'DeleteOrgDeleteRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgDeleteRequestShare':
          summary: 'Delete Org Delete Request Share'
          description: 'Delete an existing org delete request share only elements
            specified in the request are deleted.'
          entityName: 'OrgDeleteRequestShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgEmailAddressSecurity/{Id}:
    patch:
      summary: 'Update OrgEmailAddressSecurity'
      description: 'UpdateOrgEmailAddressSecurity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgEmailAddressSecurity':
          summary: 'Update Organization Email Address Security'
          description: 'Updates an existing organization email address security; only
            elements specified in the request are updated.'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgEmailAddressSecurity':
          summary: 'Upsert Organization Email Address Security'
          description: 'Upsert an existing organization email address security only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgEmailAddressSecurity'
      description: 'DeleteOrgEmailAddressSecurity'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgEmailAddressSecurity':
          summary: 'Delete Organization Email Address Security'
          description: 'Delete an existing organization email address security only
            elements specified in the request are deleted.'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgLifecycleNotification/{Id}:
    patch:
      summary: 'Update OrgLifecycleNotification'
      description: 'UpdateOrgLifecycleNotification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgLifecycleNotification':
          summary: 'Update Org Lifecycle Notification'
          description: 'Updates an existing org lifecycle notification; only elements
            specified in the request are updated.'
          entityName: 'OrgLifecycleNotification'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgLifecycleNotification':
          summary: 'Upsert Org Lifecycle Notification'
          description: 'Upsert an existing org lifecycle notification only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgLifecycleNotification'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgLifecycleNotification'
      description: 'DeleteOrgLifecycleNotification'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgLifecycleNotification':
          summary: 'Delete Org Lifecycle Notification'
          description: 'Delete an existing org lifecycle notification only elements
            specified in the request are deleted.'
          entityName: 'OrgLifecycleNotification'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgMetric/{Id}:
    patch:
      summary: 'Update OrgMetric'
      description: 'UpdateOrgMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgMetric':
          summary: 'Update Org Metric'
          description: 'Updates an existing org metric; only elements specified in
            the request are updated.'
          entityName: 'OrgMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgMetric':
          summary: 'Upsert Org Metric'
          description: 'Upsert an existing org metric only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgMetric'
      description: 'DeleteOrgMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgMetric':
          summary: 'Delete Org Metric'
          description: 'Delete an existing org metric only elements specified in the
            request are deleted.'
          entityName: 'OrgMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgMetricScanResult/{Id}:
    patch:
      summary: 'Update OrgMetricScanResult'
      description: 'UpdateOrgMetricScanResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgMetricScanResult':
          summary: 'Update Org Metric Scan Result'
          description: 'Updates an existing org metric scan result; only elements
            specified in the request are updated.'
          entityName: 'OrgMetricScanResult'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgMetricScanResult':
          summary: 'Upsert Org Metric Scan Result'
          description: 'Upsert an existing org metric scan result only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetricScanResult'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgMetricScanResult'
      description: 'DeleteOrgMetricScanResult'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgMetricScanResult':
          summary: 'Delete Org Metric Scan Result'
          description: 'Delete an existing org metric scan result only elements specified
            in the request are deleted.'
          entityName: 'OrgMetricScanResult'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgMetricScanSummary/{Id}:
    patch:
      summary: 'Update OrgMetricScanSummary'
      description: 'UpdateOrgMetricScanSummary'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgMetricScanSummary':
          summary: 'Update Org Metric Scan Summary'
          description: 'Updates an existing org metric scan summary; only elements
            specified in the request are updated.'
          entityName: 'OrgMetricScanSummary'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgMetricScanSummary':
          summary: 'Upsert Org Metric Scan Summary'
          description: 'Upsert an existing org metric scan summary only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetricScanSummary'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgMetricScanSummary'
      description: 'DeleteOrgMetricScanSummary'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgMetricScanSummary':
          summary: 'Delete Org Metric Scan Summary'
          description: 'Delete an existing org metric scan summary only elements specified
            in the request are deleted.'
          entityName: 'OrgMetricScanSummary'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OrgWideEmailAddress/{Id}:
    patch:
      summary: 'Update OrgWideEmailAddress'
      description: 'UpdateOrgWideEmailAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrgWideEmailAddress':
          summary: 'Update Organization-wide From Email Address'
          description: 'Updates an existing organization-wide from email address;
            only elements specified in the request are updated.'
          entityName: 'OrgWideEmailAddress'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgWideEmailAddress':
          summary: 'Upsert Organization-wide From Email Address'
          description: 'Upsert an existing organization-wide from email address only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OrgWideEmailAddress'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OrgWideEmailAddress'
      description: 'DeleteOrgWideEmailAddress'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrgWideEmailAddress':
          summary: 'Delete Organization-wide From Email Address'
          description: 'Delete an existing organization-wide from email address only
            elements specified in the request are deleted.'
          entityName: 'OrgWideEmailAddress'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Organization/{Id}:
    patch:
      summary: 'Update Organization'
      description: 'UpdateOrganization'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOrganization':
          summary: 'Update Organization'
          description: 'Updates an existing organization; only elements specified
            in the request are updated.'
          entityName: 'Organization'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrganization':
          summary: 'Upsert Organization'
          description: 'Upsert an existing organization only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Organization'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Organization'
      description: 'DeleteOrganization'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOrganization':
          summary: 'Delete Organization'
          description: 'Delete an existing organization only elements specified in
            the request are deleted.'
          entityName: 'Organization'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OutgoingEmail/{Id}:
    patch:
      summary: 'Update OutgoingEmail'
      description: 'UpdateOutgoingEmail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOutgoingEmail':
          summary: 'Update Outgoing Email'
          description: 'Updates an existing outgoing email; only elements specified
            in the request are updated.'
          entityName: 'OutgoingEmail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOutgoingEmail':
          summary: 'Upsert Outgoing Email'
          description: 'Upsert an existing outgoing email only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OutgoingEmail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OutgoingEmail'
      description: 'DeleteOutgoingEmail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOutgoingEmail':
          summary: 'Delete Outgoing Email'
          description: 'Delete an existing outgoing email only elements specified
            in the request are deleted.'
          entityName: 'OutgoingEmail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OutgoingEmailRelation/{Id}:
    patch:
      summary: 'Update OutgoingEmailRelation'
      description: 'UpdateOutgoingEmailRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOutgoingEmailRelation':
          summary: 'Update Outgoing Email Relation'
          description: 'Updates an existing outgoing email relation; only elements
            specified in the request are updated.'
          entityName: 'OutgoingEmailRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOutgoingEmailRelation':
          summary: 'Upsert Outgoing Email Relation'
          description: 'Upsert an existing outgoing email relation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OutgoingEmailRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OutgoingEmailRelation'
      description: 'DeleteOutgoingEmailRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOutgoingEmailRelation':
          summary: 'Delete Outgoing Email Relation'
          description: 'Delete an existing outgoing email relation only elements specified
            in the request are deleted.'
          entityName: 'OutgoingEmailRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OwnedContentDocument/{Id}:
    patch:
      summary: 'Update OwnedContentDocument'
      description: 'UpdateOwnedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOwnedContentDocument':
          summary: 'Update User Owned File'
          description: 'Updates an existing user owned file; only elements specified
            in the request are updated.'
          entityName: 'OwnedContentDocument'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOwnedContentDocument':
          summary: 'Upsert User Owned File'
          description: 'Upsert an existing user owned file only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OwnedContentDocument'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OwnedContentDocument'
      description: 'DeleteOwnedContentDocument'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOwnedContentDocument':
          summary: 'Delete User Owned File'
          description: 'Delete an existing user owned file only elements specified
            in the request are deleted.'
          entityName: 'OwnedContentDocument'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/OwnerChangeOptionInfo/{Id}:
    patch:
      summary: 'Update OwnerChangeOptionInfo'
      description: 'UpdateOwnerChangeOptionInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateOwnerChangeOptionInfo':
          summary: 'Update Change Owner Option Info'
          description: 'Updates an existing change owner option info; only elements
            specified in the request are updated.'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOwnerChangeOptionInfo':
          summary: 'Upsert Change Owner Option Info'
          description: 'Upsert an existing change owner option info only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete OwnerChangeOptionInfo'
      description: 'DeleteOwnerChangeOptionInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteOwnerChangeOptionInfo':
          summary: 'Delete Change Owner Option Info'
          description: 'Delete an existing change owner option info only elements
            specified in the request are deleted.'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PackageLicense/{Id}:
    patch:
      summary: 'Update PackageLicense'
      description: 'UpdatePackageLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePackageLicense':
          summary: 'Update Package License'
          description: 'Updates an existing package license; only elements specified
            in the request are updated.'
          entityName: 'PackageLicense'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPackageLicense':
          summary: 'Upsert Package License'
          description: 'Upsert an existing package license only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PackageLicense'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PackageLicense'
      description: 'DeletePackageLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePackageLicense':
          summary: 'Delete Package License'
          description: 'Delete an existing package license only elements specified
            in the request are deleted.'
          entityName: 'PackageLicense'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Partner/{Id}:
    patch:
      summary: 'Update Partner'
      description: 'UpdatePartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePartner':
          summary: 'Update Partner'
          description: 'Updates an existing partner; only elements specified in the
            request are updated.'
          entityName: 'Partner'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartner':
          summary: 'Upsert Partner'
          description: 'Upsert an existing partner only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Partner'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Partner'
      description: 'DeletePartner'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePartner':
          summary: 'Delete Partner'
          description: 'Delete an existing partner only elements specified in the
            request are deleted.'
          entityName: 'Partner'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartnerRole/{Id}:
    patch:
      summary: 'Update PartnerRole'
      description: 'UpdatePartnerRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePartnerRole':
          summary: 'Update Partner Role Value'
          description: 'Updates an existing partner role value; only elements specified
            in the request are updated.'
          entityName: 'PartnerRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartnerRole':
          summary: 'Upsert Partner Role Value'
          description: 'Upsert an existing partner role value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartnerRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PartnerRole'
      description: 'DeletePartnerRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePartnerRole':
          summary: 'Delete Partner Role Value'
          description: 'Delete an existing partner role value only elements specified
            in the request are deleted.'
          entityName: 'PartnerRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsent/{Id}:
    patch:
      summary: 'Update PartyConsent'
      description: 'UpdatePartyConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePartyConsent':
          summary: 'Update Party Consent'
          description: 'Updates an existing party consent; only elements specified
            in the request are updated.'
          entityName: 'PartyConsent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsent':
          summary: 'Upsert Party Consent'
          description: 'Upsert an existing party consent only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PartyConsent'
      description: 'DeletePartyConsent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePartyConsent':
          summary: 'Delete Party Consent'
          description: 'Delete an existing party consent only elements specified in
            the request are deleted.'
          entityName: 'PartyConsent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsentChangeEvent/{Id}:
    patch:
      summary: 'Update PartyConsentChangeEvent'
      description: 'UpdatePartyConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePartyConsentChangeEvent':
          summary: 'Update Party Consent Change Event'
          description: 'Updates an existing party consent change event; only elements
            specified in the request are updated.'
          entityName: 'PartyConsentChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentChangeEvent':
          summary: 'Upsert Party Consent Change Event'
          description: 'Upsert an existing party consent change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PartyConsentChangeEvent'
      description: 'DeletePartyConsentChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePartyConsentChangeEvent':
          summary: 'Delete Party Consent Change Event'
          description: 'Delete an existing party consent change event only elements
            specified in the request are deleted.'
          entityName: 'PartyConsentChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsentHistory/{Id}:
    patch:
      summary: 'Update PartyConsentHistory'
      description: 'UpdatePartyConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePartyConsentHistory':
          summary: 'Update Party Consent  History'
          description: 'Updates an existing party consent  history; only elements
            specified in the request are updated.'
          entityName: 'PartyConsentHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentHistory':
          summary: 'Upsert Party Consent  History'
          description: 'Upsert an existing party consent  history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PartyConsentHistory'
      description: 'DeletePartyConsentHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePartyConsentHistory':
          summary: 'Delete Party Consent  History'
          description: 'Delete an existing party consent  history only elements specified
            in the request are deleted.'
          entityName: 'PartyConsentHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PartyConsentShare/{Id}:
    patch:
      summary: 'Update PartyConsentShare'
      description: 'UpdatePartyConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePartyConsentShare':
          summary: 'Update Party Consent Share'
          description: 'Updates an existing party consent share; only elements specified
            in the request are updated.'
          entityName: 'PartyConsentShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentShare':
          summary: 'Upsert Party Consent Share'
          description: 'Upsert an existing party consent share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PartyConsentShare'
      description: 'DeletePartyConsentShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePartyConsentShare':
          summary: 'Delete Party Consent Share'
          description: 'Delete an existing party consent share only elements specified
            in the request are deleted.'
          entityName: 'PartyConsentShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Period/{Id}:
    patch:
      summary: 'Update Period'
      description: 'UpdatePeriod'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePeriod':
          summary: 'Update Period'
          description: 'Updates an existing period; only elements specified in the
            request are updated.'
          entityName: 'Period'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPeriod':
          summary: 'Upsert Period'
          description: 'Upsert an existing period only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Period'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Period'
      description: 'DeletePeriod'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePeriod':
          summary: 'Delete Period'
          description: 'Delete an existing period only elements specified in the request
            are deleted.'
          entityName: 'Period'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSet/{Id}:
    patch:
      summary: 'Update PermissionSet'
      description: 'UpdatePermissionSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSet':
          summary: 'Update Permission Set'
          description: 'Updates an existing permission set; only elements specified
            in the request are updated.'
          entityName: 'PermissionSet'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSet':
          summary: 'Upsert Permission Set'
          description: 'Upsert an existing permission set only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSet'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSet'
      description: 'DeletePermissionSet'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSet':
          summary: 'Delete Permission Set'
          description: 'Delete an existing permission set only elements specified
            in the request are deleted.'
          entityName: 'PermissionSet'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetAssignment/{Id}:
    patch:
      summary: 'Update PermissionSetAssignment'
      description: 'UpdatePermissionSetAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSetAssignment':
          summary: 'Update Permission Set Assignment'
          description: 'Updates an existing permission set assignment; only elements
            specified in the request are updated.'
          entityName: 'PermissionSetAssignment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetAssignment':
          summary: 'Upsert Permission Set Assignment'
          description: 'Upsert an existing permission set assignment only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetAssignment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSetAssignment'
      description: 'DeletePermissionSetAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSetAssignment':
          summary: 'Delete Permission Set Assignment'
          description: 'Delete an existing permission set assignment only elements
            specified in the request are deleted.'
          entityName: 'PermissionSetAssignment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetEvent/{Id}:
    patch:
      summary: 'Update PermissionSetEvent'
      description: 'UpdatePermissionSetEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSetEvent':
          summary: 'Update Permission Set Event'
          description: 'Updates an existing permission set event; only elements specified
            in the request are updated.'
          entityName: 'PermissionSetEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetEvent':
          summary: 'Upsert Permission Set Event'
          description: 'Upsert an existing permission set event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSetEvent'
      description: 'DeletePermissionSetEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSetEvent':
          summary: 'Delete Permission Set Event'
          description: 'Delete an existing permission set event only elements specified
            in the request are deleted.'
          entityName: 'PermissionSetEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetEventStore/{Id}:
    patch:
      summary: 'Update PermissionSetEventStore'
      description: 'UpdatePermissionSetEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSetEventStore':
          summary: 'Update Permission Set Event Store '
          description: 'Updates an existing permission set event store ; only elements
            specified in the request are updated.'
          entityName: 'PermissionSetEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetEventStore':
          summary: 'Upsert Permission Set Event Store '
          description: 'Upsert an existing permission set event store  only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSetEventStore'
      description: 'DeletePermissionSetEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSetEventStore':
          summary: 'Delete Permission Set Event Store '
          description: 'Delete an existing permission set event store  only elements
            specified in the request are deleted.'
          entityName: 'PermissionSetEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetLicense/{Id}:
    patch:
      summary: 'Update PermissionSetLicense'
      description: 'UpdatePermissionSetLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSetLicense':
          summary: 'Update Permission Set License'
          description: 'Updates an existing permission set license; only elements
            specified in the request are updated.'
          entityName: 'PermissionSetLicense'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetLicense':
          summary: 'Upsert Permission Set License'
          description: 'Upsert an existing permission set license only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetLicense'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSetLicense'
      description: 'DeletePermissionSetLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSetLicense':
          summary: 'Delete Permission Set License'
          description: 'Delete an existing permission set license only elements specified
            in the request are deleted.'
          entityName: 'PermissionSetLicense'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetLicenseAssign/{Id}:
    patch:
      summary: 'Update PermissionSetLicenseAssign'
      description: 'UpdatePermissionSetLicenseAssign'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSetLicenseAssign':
          summary: 'Update Permission Set License Assignment'
          description: 'Updates an existing permission set license assignment; only
            elements specified in the request are updated.'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetLicenseAssign':
          summary: 'Upsert Permission Set License Assignment'
          description: 'Upsert an existing permission set license assignment only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSetLicenseAssign'
      description: 'DeletePermissionSetLicenseAssign'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSetLicenseAssign':
          summary: 'Delete Permission Set License Assignment'
          description: 'Delete an existing permission set license assignment only
            elements specified in the request are deleted.'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PermissionSetTabSetting/{Id}:
    patch:
      summary: 'Update PermissionSetTabSetting'
      description: 'UpdatePermissionSetTabSetting'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePermissionSetTabSetting':
          summary: 'Update Permission Set Tab Setting'
          description: 'Updates an existing permission set tab setting; only elements
            specified in the request are updated.'
          entityName: 'PermissionSetTabSetting'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetTabSetting':
          summary: 'Upsert Permission Set Tab Setting'
          description: 'Upsert an existing permission set tab setting only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetTabSetting'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PermissionSetTabSetting'
      description: 'DeletePermissionSetTabSetting'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePermissionSetTabSetting':
          summary: 'Delete Permission Set Tab Setting'
          description: 'Delete an existing permission set tab setting only elements
            specified in the request are deleted.'
          entityName: 'PermissionSetTabSetting'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PicklistValueInfo/{Id}:
    patch:
      summary: 'Update PicklistValueInfo'
      description: 'UpdatePicklistValueInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePicklistValueInfo':
          summary: 'Update Picklist Value Info'
          description: 'Updates an existing picklist value info; only elements specified
            in the request are updated.'
          entityName: 'PicklistValueInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPicklistValueInfo':
          summary: 'Upsert Picklist Value Info'
          description: 'Upsert an existing picklist value info only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PicklistValueInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PicklistValueInfo'
      description: 'DeletePicklistValueInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePicklistValueInfo':
          summary: 'Delete Picklist Value Info'
          description: 'Delete an existing picklist value info only elements specified
            in the request are deleted.'
          entityName: 'PicklistValueInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformAction/{Id}:
    patch:
      summary: 'Update PlatformAction'
      description: 'UpdatePlatformAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePlatformAction':
          summary: 'Update Platform Action'
          description: 'Updates an existing platform action; only elements specified
            in the request are updated.'
          entityName: 'PlatformAction'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformAction':
          summary: 'Upsert Platform Action'
          description: 'Upsert an existing platform action only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformAction'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PlatformAction'
      description: 'DeletePlatformAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePlatformAction':
          summary: 'Delete Platform Action'
          description: 'Delete an existing platform action only elements specified
            in the request are deleted.'
          entityName: 'PlatformAction'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformCachePartition/{Id}:
    patch:
      summary: 'Update PlatformCachePartition'
      description: 'UpdatePlatformCachePartition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePlatformCachePartition':
          summary: 'Update Platform Cache Partition'
          description: 'Updates an existing platform cache partition; only elements
            specified in the request are updated.'
          entityName: 'PlatformCachePartition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformCachePartition':
          summary: 'Upsert Platform Cache Partition'
          description: 'Upsert an existing platform cache partition only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformCachePartition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PlatformCachePartition'
      description: 'DeletePlatformCachePartition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePlatformCachePartition':
          summary: 'Delete Platform Cache Partition'
          description: 'Delete an existing platform cache partition only elements
            specified in the request are deleted.'
          entityName: 'PlatformCachePartition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformCachePartitionType/{Id}:
    patch:
      summary: 'Update PlatformCachePartitionType'
      description: 'UpdatePlatformCachePartitionType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePlatformCachePartitionType':
          summary: 'Update Platform Cache Partition Type'
          description: 'Updates an existing platform cache partition type; only elements
            specified in the request are updated.'
          entityName: 'PlatformCachePartitionType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformCachePartitionType':
          summary: 'Upsert Platform Cache Partition Type'
          description: 'Upsert an existing platform cache partition type only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformCachePartitionType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PlatformCachePartitionType'
      description: 'DeletePlatformCachePartitionType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePlatformCachePartitionType':
          summary: 'Delete Platform Cache Partition Type'
          description: 'Delete an existing platform cache partition type only elements
            specified in the request are deleted.'
          entityName: 'PlatformCachePartitionType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformEventUsageMetric/{Id}:
    patch:
      summary: 'Update PlatformEventUsageMetric'
      description: 'UpdatePlatformEventUsageMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePlatformEventUsageMetric':
          summary: 'Update Platform Event Usage Metric'
          description: 'Updates an existing platform event usage metric; only elements
            specified in the request are updated.'
          entityName: 'PlatformEventUsageMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformEventUsageMetric':
          summary: 'Upsert Platform Event Usage Metric'
          description: 'Upsert an existing platform event usage metric only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformEventUsageMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PlatformEventUsageMetric'
      description: 'DeletePlatformEventUsageMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePlatformEventUsageMetric':
          summary: 'Delete Platform Event Usage Metric'
          description: 'Delete an existing platform event usage metric only elements
            specified in the request are deleted.'
          entityName: 'PlatformEventUsageMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PlatformStatusAlertEvent/{Id}:
    patch:
      summary: 'Update PlatformStatusAlertEvent'
      description: 'UpdatePlatformStatusAlertEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePlatformStatusAlertEvent':
          summary: 'Update Platform Status Alert Event'
          description: 'Updates an existing platform status alert event; only elements
            specified in the request are updated.'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformStatusAlertEvent':
          summary: 'Upsert Platform Status Alert Event'
          description: 'Upsert an existing platform status alert event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PlatformStatusAlertEvent'
      description: 'DeletePlatformStatusAlertEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePlatformStatusAlertEvent':
          summary: 'Delete Platform Status Alert Event'
          description: 'Delete an existing platform status alert event only elements
            specified in the request are deleted.'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Pricebook2/{Id}:
    patch:
      summary: 'Update Pricebook2'
      description: 'UpdatePricebook2'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePricebook2':
          summary: 'Update Price Book'
          description: 'Updates an existing price book; only elements specified in
            the request are updated.'
          entityName: 'Pricebook2'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebook2':
          summary: 'Upsert Price Book'
          description: 'Upsert an existing price book only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Pricebook2'
      description: 'DeletePricebook2'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePricebook2':
          summary: 'Delete Price Book'
          description: 'Delete an existing price book only elements specified in the
            request are deleted.'
          entityName: 'Pricebook2'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Pricebook2ChangeEvent/{Id}:
    patch:
      summary: 'Update Pricebook2ChangeEvent'
      description: 'UpdatePricebook2ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePricebook2ChangeEvent':
          summary: 'Update Price Book Change Event'
          description: 'Updates an existing price book change event; only elements
            specified in the request are updated.'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebook2ChangeEvent':
          summary: 'Upsert Price Book Change Event'
          description: 'Upsert an existing price book change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Pricebook2ChangeEvent'
      description: 'DeletePricebook2ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePricebook2ChangeEvent':
          summary: 'Delete Price Book Change Event'
          description: 'Delete an existing price book change event only elements specified
            in the request are deleted.'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Pricebook2History/{Id}:
    patch:
      summary: 'Update Pricebook2History'
      description: 'UpdatePricebook2History'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePricebook2History':
          summary: 'Update Price Book History'
          description: 'Updates an existing price book history; only elements specified
            in the request are updated.'
          entityName: 'Pricebook2History'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebook2History':
          summary: 'Upsert Price Book History'
          description: 'Upsert an existing price book history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2History'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Pricebook2History'
      description: 'DeletePricebook2History'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePricebook2History':
          summary: 'Delete Price Book History'
          description: 'Delete an existing price book history only elements specified
            in the request are deleted.'
          entityName: 'Pricebook2History'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PricebookEntry/{Id}:
    patch:
      summary: 'Update PricebookEntry'
      description: 'UpdatePricebookEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePricebookEntry':
          summary: 'Update Price Book Entry'
          description: 'Updates an existing price book entry; only elements specified
            in the request are updated.'
          entityName: 'PricebookEntry'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebookEntry':
          summary: 'Upsert Price Book Entry'
          description: 'Upsert an existing price book entry only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PricebookEntry'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PricebookEntry'
      description: 'DeletePricebookEntry'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePricebookEntry':
          summary: 'Delete Price Book Entry'
          description: 'Delete an existing price book entry only elements specified
            in the request are deleted.'
          entityName: 'PricebookEntry'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PricebookEntryChangeEvent/{Id}:
    patch:
      summary: 'Update PricebookEntryChangeEvent'
      description: 'UpdatePricebookEntryChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePricebookEntryChangeEvent':
          summary: 'Update Price Book Entry Change Event'
          description: 'Updates an existing price book entry change event; only elements
            specified in the request are updated.'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebookEntryChangeEvent':
          summary: 'Upsert Price Book Entry Change Event'
          description: 'Upsert an existing price book entry change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PricebookEntryChangeEvent'
      description: 'DeletePricebookEntryChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePricebookEntryChangeEvent':
          summary: 'Delete Price Book Entry Change Event'
          description: 'Delete an existing price book entry change event only elements
            specified in the request are deleted.'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PricebookEntryHistory/{Id}:
    patch:
      summary: 'Update PricebookEntryHistory'
      description: 'UpdatePricebookEntryHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePricebookEntryHistory':
          summary: 'Update Price Book Entry History'
          description: 'Updates an existing price book entry history; only elements
            specified in the request are updated.'
          entityName: 'PricebookEntryHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebookEntryHistory':
          summary: 'Upsert Price Book Entry History'
          description: 'Upsert an existing price book entry history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PricebookEntryHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PricebookEntryHistory'
      description: 'DeletePricebookEntryHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePricebookEntryHistory':
          summary: 'Delete Price Book Entry History'
          description: 'Delete an existing price book entry history only elements
            specified in the request are deleted.'
          entityName: 'PricebookEntryHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessDefinition/{Id}:
    patch:
      summary: 'Update ProcessDefinition'
      description: 'UpdateProcessDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessDefinition':
          summary: 'Update Process Definition'
          description: 'Updates an existing process definition; only elements specified
            in the request are updated.'
          entityName: 'ProcessDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessDefinition':
          summary: 'Upsert Process Definition'
          description: 'Upsert an existing process definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessDefinition'
      description: 'DeleteProcessDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessDefinition':
          summary: 'Delete Process Definition'
          description: 'Delete an existing process definition only elements specified
            in the request are deleted.'
          entityName: 'ProcessDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessFlowMigration/{Id}:
    patch:
      summary: 'Update ProcessFlowMigration'
      description: 'UpdateProcessFlowMigration'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessFlowMigration':
          summary: 'Update Process Flow Migration'
          description: 'Updates an existing process flow migration; only elements
            specified in the request are updated.'
          entityName: 'ProcessFlowMigration'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessFlowMigration':
          summary: 'Upsert Process Flow Migration'
          description: 'Upsert an existing process flow migration only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessFlowMigration'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessFlowMigration'
      description: 'DeleteProcessFlowMigration'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessFlowMigration':
          summary: 'Delete Process Flow Migration'
          description: 'Delete an existing process flow migration only elements specified
            in the request are deleted.'
          entityName: 'ProcessFlowMigration'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstance/{Id}:
    patch:
      summary: 'Update ProcessInstance'
      description: 'UpdateProcessInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessInstance':
          summary: 'Update Process Instance'
          description: 'Updates an existing process instance; only elements specified
            in the request are updated.'
          entityName: 'ProcessInstance'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstance':
          summary: 'Upsert Process Instance'
          description: 'Upsert an existing process instance only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstance'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessInstance'
      description: 'DeleteProcessInstance'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessInstance':
          summary: 'Delete Process Instance'
          description: 'Delete an existing process instance only elements specified
            in the request are deleted.'
          entityName: 'ProcessInstance'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceHistory/{Id}:
    patch:
      summary: 'Update ProcessInstanceHistory'
      description: 'UpdateProcessInstanceHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessInstanceHistory':
          summary: 'Update Process Instance History'
          description: 'Updates an existing process instance history; only elements
            specified in the request are updated.'
          entityName: 'ProcessInstanceHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceHistory':
          summary: 'Upsert Process Instance History'
          description: 'Upsert an existing process instance history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessInstanceHistory'
      description: 'DeleteProcessInstanceHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessInstanceHistory':
          summary: 'Delete Process Instance History'
          description: 'Delete an existing process instance history only elements
            specified in the request are deleted.'
          entityName: 'ProcessInstanceHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceNode/{Id}:
    patch:
      summary: 'Update ProcessInstanceNode'
      description: 'UpdateProcessInstanceNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessInstanceNode':
          summary: 'Update Process Instance Node'
          description: 'Updates an existing process instance node; only elements specified
            in the request are updated.'
          entityName: 'ProcessInstanceNode'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceNode':
          summary: 'Upsert Process Instance Node'
          description: 'Upsert an existing process instance node only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceNode'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessInstanceNode'
      description: 'DeleteProcessInstanceNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessInstanceNode':
          summary: 'Delete Process Instance Node'
          description: 'Delete an existing process instance node only elements specified
            in the request are deleted.'
          entityName: 'ProcessInstanceNode'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceStep/{Id}:
    patch:
      summary: 'Update ProcessInstanceStep'
      description: 'UpdateProcessInstanceStep'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessInstanceStep':
          summary: 'Update Process Instance Step'
          description: 'Updates an existing process instance step; only elements specified
            in the request are updated.'
          entityName: 'ProcessInstanceStep'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceStep':
          summary: 'Upsert Process Instance Step'
          description: 'Upsert an existing process instance step only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceStep'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessInstanceStep'
      description: 'DeleteProcessInstanceStep'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessInstanceStep':
          summary: 'Delete Process Instance Step'
          description: 'Delete an existing process instance step only elements specified
            in the request are deleted.'
          entityName: 'ProcessInstanceStep'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessInstanceWorkitem/{Id}:
    patch:
      summary: 'Update ProcessInstanceWorkitem'
      description: 'UpdateProcessInstanceWorkitem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessInstanceWorkitem':
          summary: 'Update Approval Request'
          description: 'Updates an existing approval request; only elements specified
            in the request are updated.'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceWorkitem':
          summary: 'Upsert Approval Request'
          description: 'Upsert an existing approval request only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessInstanceWorkitem'
      description: 'DeleteProcessInstanceWorkitem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessInstanceWorkitem':
          summary: 'Delete Approval Request'
          description: 'Delete an existing approval request only elements specified
            in the request are deleted.'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProcessNode/{Id}:
    patch:
      summary: 'Update ProcessNode'
      description: 'UpdateProcessNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProcessNode':
          summary: 'Update Process Node'
          description: 'Updates an existing process node; only elements specified
            in the request are updated.'
          entityName: 'ProcessNode'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessNode':
          summary: 'Upsert Process Node'
          description: 'Upsert an existing process node only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessNode'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProcessNode'
      description: 'DeleteProcessNode'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProcessNode':
          summary: 'Delete Process Node'
          description: 'Delete an existing process node only elements specified in
            the request are deleted.'
          entityName: 'ProcessNode'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Product2/{Id}:
    patch:
      summary: 'Update Product2'
      description: 'UpdateProduct2'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProduct2':
          summary: 'Update Product'
          description: 'Updates an existing product; only elements specified in the
            request are updated.'
          entityName: 'Product2'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProduct2':
          summary: 'Upsert Product'
          description: 'Upsert an existing product only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Product2'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Product2'
      description: 'DeleteProduct2'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProduct2':
          summary: 'Delete Product'
          description: 'Delete an existing product only elements specified in the
            request are deleted.'
          entityName: 'Product2'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Product2ChangeEvent/{Id}:
    patch:
      summary: 'Update Product2ChangeEvent'
      description: 'UpdateProduct2ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProduct2ChangeEvent':
          summary: 'Update Product Change Event'
          description: 'Updates an existing product change event; only elements specified
            in the request are updated.'
          entityName: 'Product2ChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProduct2ChangeEvent':
          summary: 'Upsert Product Change Event'
          description: 'Upsert an existing product change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2ChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Product2ChangeEvent'
      description: 'DeleteProduct2ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProduct2ChangeEvent':
          summary: 'Delete Product Change Event'
          description: 'Delete an existing product change event only elements specified
            in the request are deleted.'
          entityName: 'Product2ChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Product2History/{Id}:
    patch:
      summary: 'Update Product2History'
      description: 'UpdateProduct2History'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProduct2History':
          summary: 'Update Product History'
          description: 'Updates an existing product history; only elements specified
            in the request are updated.'
          entityName: 'Product2History'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProduct2History':
          summary: 'Upsert Product History'
          description: 'Upsert an existing product history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2History'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Product2History'
      description: 'DeleteProduct2History'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProduct2History':
          summary: 'Delete Product History'
          description: 'Delete an existing product history only elements specified
            in the request are deleted.'
          entityName: 'Product2History'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ProductConsumptionSchedule/{Id}:
    patch:
      summary: 'Update ProductConsumptionSchedule'
      description: 'UpdateProductConsumptionSchedule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProductConsumptionSchedule':
          summary: 'Update Product Consumption Schedule'
          description: 'Updates an existing product consumption schedule; only elements
            specified in the request are updated.'
          entityName: 'ProductConsumptionSchedule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProductConsumptionSchedule':
          summary: 'Upsert Product Consumption Schedule'
          description: 'Upsert an existing product consumption schedule only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProductConsumptionSchedule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ProductConsumptionSchedule'
      description: 'DeleteProductConsumptionSchedule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProductConsumptionSchedule':
          summary: 'Delete Product Consumption Schedule'
          description: 'Delete an existing product consumption schedule only elements
            specified in the request are deleted.'
          entityName: 'ProductConsumptionSchedule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Profile/{Id}:
    patch:
      summary: 'Update Profile'
      description: 'UpdateProfile'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateProfile':
          summary: 'Update Profile'
          description: 'Updates an existing profile; only elements specified in the
            request are updated.'
          entityName: 'Profile'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProfile':
          summary: 'Upsert Profile'
          description: 'Upsert an existing profile only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Profile'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Profile'
      description: 'DeleteProfile'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteProfile':
          summary: 'Delete Profile'
          description: 'Delete an existing profile only elements specified in the
            request are deleted.'
          entityName: 'Profile'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Prompt/{Id}:
    patch:
      summary: 'Update Prompt'
      description: 'UpdatePrompt'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePrompt':
          summary: 'Update Prompt'
          description: 'Updates an existing prompt; only elements specified in the
            request are updated.'
          entityName: 'Prompt'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPrompt':
          summary: 'Upsert Prompt'
          description: 'Upsert an existing prompt only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Prompt'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Prompt'
      description: 'DeletePrompt'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePrompt':
          summary: 'Delete Prompt'
          description: 'Delete an existing prompt only elements specified in the request
            are deleted.'
          entityName: 'Prompt'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptAction/{Id}:
    patch:
      summary: 'Update PromptAction'
      description: 'UpdatePromptAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePromptAction':
          summary: 'Update Prompt Action'
          description: 'Updates an existing prompt action; only elements specified
            in the request are updated.'
          entityName: 'PromptAction'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptAction':
          summary: 'Upsert Prompt Action'
          description: 'Upsert an existing prompt action only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptAction'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PromptAction'
      description: 'DeletePromptAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePromptAction':
          summary: 'Delete Prompt Action'
          description: 'Delete an existing prompt action only elements specified in
            the request are deleted.'
          entityName: 'PromptAction'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptActionShare/{Id}:
    patch:
      summary: 'Update PromptActionShare'
      description: 'UpdatePromptActionShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePromptActionShare':
          summary: 'Update Prompt Action Share'
          description: 'Updates an existing prompt action share; only elements specified
            in the request are updated.'
          entityName: 'PromptActionShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptActionShare':
          summary: 'Upsert Prompt Action Share'
          description: 'Upsert an existing prompt action share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptActionShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PromptActionShare'
      description: 'DeletePromptActionShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePromptActionShare':
          summary: 'Delete Prompt Action Share'
          description: 'Delete an existing prompt action share only elements specified
            in the request are deleted.'
          entityName: 'PromptActionShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptError/{Id}:
    patch:
      summary: 'Update PromptError'
      description: 'UpdatePromptError'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePromptError':
          summary: 'Update Prompt Error'
          description: 'Updates an existing prompt error; only elements specified
            in the request are updated.'
          entityName: 'PromptError'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptError':
          summary: 'Upsert Prompt Error'
          description: 'Upsert an existing prompt error only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptError'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PromptError'
      description: 'DeletePromptError'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePromptError':
          summary: 'Delete Prompt Error'
          description: 'Delete an existing prompt error only elements specified in
            the request are deleted.'
          entityName: 'PromptError'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptErrorShare/{Id}:
    patch:
      summary: 'Update PromptErrorShare'
      description: 'UpdatePromptErrorShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePromptErrorShare':
          summary: 'Update Prompt Error Share'
          description: 'Updates an existing prompt error share; only elements specified
            in the request are updated.'
          entityName: 'PromptErrorShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptErrorShare':
          summary: 'Upsert Prompt Error Share'
          description: 'Upsert an existing prompt error share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptErrorShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PromptErrorShare'
      description: 'DeletePromptErrorShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePromptErrorShare':
          summary: 'Delete Prompt Error Share'
          description: 'Delete an existing prompt error share only elements specified
            in the request are deleted.'
          entityName: 'PromptErrorShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PromptVersion/{Id}:
    patch:
      summary: 'Update PromptVersion'
      description: 'UpdatePromptVersion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePromptVersion':
          summary: 'Update Prompt Version'
          description: 'Updates an existing prompt version; only elements specified
            in the request are updated.'
          entityName: 'PromptVersion'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptVersion':
          summary: 'Upsert Prompt Version'
          description: 'Upsert an existing prompt version only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptVersion'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PromptVersion'
      description: 'DeletePromptVersion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePromptVersion':
          summary: 'Delete Prompt Version'
          description: 'Delete an existing prompt version only elements specified
            in the request are deleted.'
          entityName: 'PromptVersion'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Publisher/{Id}:
    patch:
      summary: 'Update Publisher'
      description: 'UpdatePublisher'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePublisher':
          summary: 'Update Publisher'
          description: 'Updates an existing publisher; only elements specified in
            the request are updated.'
          entityName: 'Publisher'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPublisher':
          summary: 'Upsert Publisher'
          description: 'Upsert an existing publisher only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Publisher'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Publisher'
      description: 'DeletePublisher'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePublisher':
          summary: 'Delete Publisher'
          description: 'Delete an existing publisher only elements specified in the
            request are deleted.'
          entityName: 'Publisher'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/PushTopic/{Id}:
    patch:
      summary: 'Update PushTopic'
      description: 'UpdatePushTopic'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdatePushTopic':
          summary: 'Update Push Topic'
          description: 'Updates an existing push topic; only elements specified in
            the request are updated.'
          entityName: 'PushTopic'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPushTopic':
          summary: 'Upsert Push Topic'
          description: 'Upsert an existing push topic only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'PushTopic'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete PushTopic'
      description: 'DeletePushTopic'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeletePushTopic':
          summary: 'Delete Push Topic'
          description: 'Delete an existing push topic only elements specified in the
            request are deleted.'
          entityName: 'PushTopic'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Question/{Id}:
    patch:
      summary: 'Update Question'
      description: 'UpdateQuestion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuestion':
          summary: 'Update Question'
          description: 'Updates an existing question; only elements specified in the
            request are updated.'
          entityName: 'Question'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestion':
          summary: 'Upsert Question'
          description: 'Upsert an existing question only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Question'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Question'
      description: 'DeleteQuestion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuestion':
          summary: 'Delete Question'
          description: 'Delete an existing question only elements specified in the
            request are deleted.'
          entityName: 'Question'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuestionDataCategorySelection/{Id}:
    patch:
      summary: 'Update QuestionDataCategorySelection'
      description: 'UpdateQuestionDataCategorySelection'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuestionDataCategorySelection':
          summary: 'Update Question Data Category Selection'
          description: 'Updates an existing question data category selection; only
            elements specified in the request are updated.'
          entityName: 'QuestionDataCategorySelection'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionDataCategorySelection':
          summary: 'Upsert Question Data Category Selection'
          description: 'Upsert an existing question data category selection only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionDataCategorySelection'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuestionDataCategorySelection'
      description: 'DeleteQuestionDataCategorySelection'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuestionDataCategorySelection':
          summary: 'Delete Question Data Category Selection'
          description: 'Delete an existing question data category selection only elements
            specified in the request are deleted.'
          entityName: 'QuestionDataCategorySelection'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuestionReportAbuse/{Id}:
    patch:
      summary: 'Update QuestionReportAbuse'
      description: 'UpdateQuestionReportAbuse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuestionReportAbuse':
          summary: 'Update Question Report Abuse'
          description: 'Updates an existing question report abuse; only elements specified
            in the request are updated.'
          entityName: 'QuestionReportAbuse'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionReportAbuse':
          summary: 'Upsert Question Report Abuse'
          description: 'Upsert an existing question report abuse only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionReportAbuse'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuestionReportAbuse'
      description: 'DeleteQuestionReportAbuse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuestionReportAbuse':
          summary: 'Delete Question Report Abuse'
          description: 'Delete an existing question report abuse only elements specified
            in the request are deleted.'
          entityName: 'QuestionReportAbuse'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuestionSubscription/{Id}:
    patch:
      summary: 'Update QuestionSubscription'
      description: 'UpdateQuestionSubscription'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuestionSubscription':
          summary: 'Update Question Subscription'
          description: 'Updates an existing question subscription; only elements specified
            in the request are updated.'
          entityName: 'QuestionSubscription'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionSubscription':
          summary: 'Upsert Question Subscription'
          description: 'Upsert an existing question subscription only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionSubscription'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuestionSubscription'
      description: 'DeleteQuestionSubscription'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuestionSubscription':
          summary: 'Delete Question Subscription'
          description: 'Delete an existing question subscription only elements specified
            in the request are deleted.'
          entityName: 'QuestionSubscription'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QueueSobject/{Id}:
    patch:
      summary: 'Update QueueSobject'
      description: 'UpdateQueueSobject'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQueueSobject':
          summary: 'Update Queue sObject'
          description: 'Updates an existing queue sobject; only elements specified
            in the request are updated.'
          entityName: 'QueueSobject'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQueueSobject':
          summary: 'Upsert Queue sObject'
          description: 'Upsert an existing queue sobject only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'QueueSobject'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QueueSobject'
      description: 'DeleteQueueSobject'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQueueSobject':
          summary: 'Delete Queue sObject'
          description: 'Delete an existing queue sobject only elements specified in
            the request are deleted.'
          entityName: 'QueueSobject'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickText/{Id}:
    patch:
      summary: 'Update QuickText'
      description: 'UpdateQuickText'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuickText':
          summary: 'Update Quick Text'
          description: 'Updates an existing quick text; only elements specified in
            the request are updated.'
          entityName: 'QuickText'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickText':
          summary: 'Upsert Quick Text'
          description: 'Upsert an existing quick text only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'QuickText'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuickText'
      description: 'DeleteQuickText'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuickText':
          summary: 'Delete Quick Text'
          description: 'Delete an existing quick text only elements specified in the
            request are deleted.'
          entityName: 'QuickText'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextChangeEvent/{Id}:
    patch:
      summary: 'Update QuickTextChangeEvent'
      description: 'UpdateQuickTextChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuickTextChangeEvent':
          summary: 'Update Quick Text Change Event'
          description: 'Updates an existing quick text change event; only elements
            specified in the request are updated.'
          entityName: 'QuickTextChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextChangeEvent':
          summary: 'Upsert Quick Text Change Event'
          description: 'Upsert an existing quick text change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuickTextChangeEvent'
      description: 'DeleteQuickTextChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuickTextChangeEvent':
          summary: 'Delete Quick Text Change Event'
          description: 'Delete an existing quick text change event only elements specified
            in the request are deleted.'
          entityName: 'QuickTextChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextHistory/{Id}:
    patch:
      summary: 'Update QuickTextHistory'
      description: 'UpdateQuickTextHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuickTextHistory':
          summary: 'Update Quick Text History'
          description: 'Updates an existing quick text history; only elements specified
            in the request are updated.'
          entityName: 'QuickTextHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextHistory':
          summary: 'Upsert Quick Text History'
          description: 'Upsert an existing quick text history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuickTextHistory'
      description: 'DeleteQuickTextHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuickTextHistory':
          summary: 'Delete Quick Text History'
          description: 'Delete an existing quick text history only elements specified
            in the request are deleted.'
          entityName: 'QuickTextHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextShare/{Id}:
    patch:
      summary: 'Update QuickTextShare'
      description: 'UpdateQuickTextShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuickTextShare':
          summary: 'Update Quick Text Share'
          description: 'Updates an existing quick text share; only elements specified
            in the request are updated.'
          entityName: 'QuickTextShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextShare':
          summary: 'Upsert Quick Text Share'
          description: 'Upsert an existing quick text share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuickTextShare'
      description: 'DeleteQuickTextShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuickTextShare':
          summary: 'Delete Quick Text Share'
          description: 'Delete an existing quick text share only elements specified
            in the request are deleted.'
          entityName: 'QuickTextShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextUsage/{Id}:
    patch:
      summary: 'Update QuickTextUsage'
      description: 'UpdateQuickTextUsage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuickTextUsage':
          summary: 'Update Quick Text Usage'
          description: 'Updates an existing quick text usage; only elements specified
            in the request are updated.'
          entityName: 'QuickTextUsage'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextUsage':
          summary: 'Upsert Quick Text Usage'
          description: 'Upsert an existing quick text usage only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextUsage'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuickTextUsage'
      description: 'DeleteQuickTextUsage'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuickTextUsage':
          summary: 'Delete Quick Text Usage'
          description: 'Delete an existing quick text usage only elements specified
            in the request are deleted.'
          entityName: 'QuickTextUsage'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/QuickTextUsageShare/{Id}:
    patch:
      summary: 'Update QuickTextUsageShare'
      description: 'UpdateQuickTextUsageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateQuickTextUsageShare':
          summary: 'Update Quick Text Usage Share'
          description: 'Updates an existing quick text usage share; only elements
            specified in the request are updated.'
          entityName: 'QuickTextUsageShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextUsageShare':
          summary: 'Upsert Quick Text Usage Share'
          description: 'Upsert an existing quick text usage share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextUsageShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete QuickTextUsageShare'
      description: 'DeleteQuickTextUsageShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteQuickTextUsageShare':
          summary: 'Delete Quick Text Usage Share'
          description: 'Delete an existing quick text usage share only elements specified
            in the request are deleted.'
          entityName: 'QuickTextUsageShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Ranjit_Custom_Object__ChangeEvent/{Id}:
    patch:
      summary: 'Update Ranjit_Custom_Object__ChangeEvent'
      description: 'UpdateRanjit_Custom_Object__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRanjit_Custom_Object__ChangeEvent':
          summary: 'Update Change Event: Ranjit Custom Object'
          description: 'Updates an existing change event: ranjit custom object; only
            elements specified in the request are updated.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRanjit_Custom_Object__ChangeEvent':
          summary: 'Upsert Change Event: Ranjit Custom Object'
          description: 'Upsert an existing change event: ranjit custom object only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Ranjit_Custom_Object__ChangeEvent'
      description: 'DeleteRanjit_Custom_Object__ChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRanjit_Custom_Object__ChangeEvent':
          summary: 'Delete Change Event: Ranjit Custom Object'
          description: 'Delete an existing change event: ranjit custom object only
            elements specified in the request are deleted.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Ranjit_Custom_Object__c/{Id}:
    patch:
      summary: 'Update Ranjit_Custom_Object__c'
      description: 'UpdateRanjit_Custom_Object__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRanjit_Custom_Object__c':
          summary: 'Update Ranjit Custom Object'
          description: 'Updates an existing ranjit custom object; only elements specified
            in the request are updated.'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRanjit_Custom_Object__c':
          summary: 'Upsert Ranjit Custom Object'
          description: 'Upsert an existing ranjit custom object only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Ranjit_Custom_Object__c'
      description: 'DeleteRanjit_Custom_Object__c'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRanjit_Custom_Object__c':
          summary: 'Delete Ranjit Custom Object'
          description: 'Delete an existing ranjit custom object only elements specified
            in the request are deleted.'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecentlyViewed/{Id}:
    patch:
      summary: 'Update RecentlyViewed'
      description: 'UpdateRecentlyViewed'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecentlyViewed':
          summary: 'Update Recently Viewed'
          description: 'Updates an existing recently viewed; only elements specified
            in the request are updated.'
          entityName: 'RecentlyViewed'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecentlyViewed':
          summary: 'Upsert Recently Viewed'
          description: 'Upsert an existing recently viewed only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecentlyViewed'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RecentlyViewed'
      description: 'DeleteRecentlyViewed'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecentlyViewed':
          summary: 'Delete Recently Viewed'
          description: 'Delete an existing recently viewed only elements specified
            in the request are deleted.'
          entityName: 'RecentlyViewed'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Recommendation/{Id}:
    patch:
      summary: 'Update Recommendation'
      description: 'UpdateRecommendation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecommendation':
          summary: 'Update Recommendation'
          description: 'Updates an existing recommendation; only elements specified
            in the request are updated.'
          entityName: 'Recommendation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecommendation':
          summary: 'Upsert Recommendation'
          description: 'Upsert an existing recommendation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Recommendation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Recommendation'
      description: 'DeleteRecommendation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecommendation':
          summary: 'Delete Recommendation'
          description: 'Delete an existing recommendation only elements specified
            in the request are deleted.'
          entityName: 'Recommendation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecommendationChangeEvent/{Id}:
    patch:
      summary: 'Update RecommendationChangeEvent'
      description: 'UpdateRecommendationChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecommendationChangeEvent':
          summary: 'Update Recommendation Change Event'
          description: 'Updates an existing recommendation change event; only elements
            specified in the request are updated.'
          entityName: 'RecommendationChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecommendationChangeEvent':
          summary: 'Upsert Recommendation Change Event'
          description: 'Upsert an existing recommendation change event only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecommendationChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RecommendationChangeEvent'
      description: 'DeleteRecommendationChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecommendationChangeEvent':
          summary: 'Delete Recommendation Change Event'
          description: 'Delete an existing recommendation change event only elements
            specified in the request are deleted.'
          entityName: 'RecommendationChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecommendationResponse/{Id}:
    patch:
      summary: 'Update RecommendationResponse'
      description: 'UpdateRecommendationResponse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecommendationResponse':
          summary: 'Update Recommendation Response'
          description: 'Updates an existing recommendation response; only elements
            specified in the request are updated.'
          entityName: 'RecommendationResponse'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecommendationResponse':
          summary: 'Upsert Recommendation Response'
          description: 'Upsert an existing recommendation response only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecommendationResponse'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RecommendationResponse'
      description: 'DeleteRecommendationResponse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecommendationResponse':
          summary: 'Delete Recommendation Response'
          description: 'Delete an existing recommendation response only elements specified
            in the request are deleted.'
          entityName: 'RecommendationResponse'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecordAction/{Id}:
    patch:
      summary: 'Update RecordAction'
      description: 'UpdateRecordAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecordAction':
          summary: 'Update RecordAction'
          description: 'Updates an existing recordaction; only elements specified
            in the request are updated.'
          entityName: 'RecordAction'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecordAction':
          summary: 'Upsert RecordAction'
          description: 'Upsert an existing recordaction only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordAction'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RecordAction'
      description: 'DeleteRecordAction'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecordAction':
          summary: 'Delete RecordAction'
          description: 'Delete an existing recordaction only elements specified in
            the request are deleted.'
          entityName: 'RecordAction'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecordActionHistory/{Id}:
    patch:
      summary: 'Update RecordActionHistory'
      description: 'UpdateRecordActionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecordActionHistory':
          summary: 'Update RecordActionHistory'
          description: 'Updates an existing recordactionhistory; only elements specified
            in the request are updated.'
          entityName: 'RecordActionHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecordActionHistory':
          summary: 'Upsert RecordActionHistory'
          description: 'Upsert an existing recordactionhistory only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordActionHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RecordActionHistory'
      description: 'DeleteRecordActionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecordActionHistory':
          summary: 'Delete RecordActionHistory'
          description: 'Delete an existing recordactionhistory only elements specified
            in the request are deleted.'
          entityName: 'RecordActionHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RecordType/{Id}:
    patch:
      summary: 'Update RecordType'
      description: 'UpdateRecordType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRecordType':
          summary: 'Update Record Type'
          description: 'Updates an existing record type; only elements specified in
            the request are updated.'
          entityName: 'RecordType'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecordType':
          summary: 'Upsert Record Type'
          description: 'Upsert an existing record type only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordType'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RecordType'
      description: 'DeleteRecordType'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRecordType':
          summary: 'Delete Record Type'
          description: 'Delete an existing record type only elements specified in
            the request are deleted.'
          entityName: 'RecordType'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RedirectWhitelistUrl/{Id}:
    patch:
      summary: 'Update RedirectWhitelistUrl'
      description: 'UpdateRedirectWhitelistUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRedirectWhitelistUrl':
          summary: 'Update Allow URL for Redirects'
          description: 'Updates an existing allow url for redirects; only elements
            specified in the request are updated.'
          entityName: 'RedirectWhitelistUrl'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRedirectWhitelistUrl':
          summary: 'Upsert Allow URL for Redirects'
          description: 'Upsert an existing allow url for redirects only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RedirectWhitelistUrl'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RedirectWhitelistUrl'
      description: 'DeleteRedirectWhitelistUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRedirectWhitelistUrl':
          summary: 'Delete Allow URL for Redirects'
          description: 'Delete an existing allow url for redirects only elements specified
            in the request are deleted.'
          entityName: 'RedirectWhitelistUrl'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelatedListColumnDefinition/{Id}:
    patch:
      summary: 'Update RelatedListColumnDefinition'
      description: 'UpdateRelatedListColumnDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRelatedListColumnDefinition':
          summary: 'Update Related List Column Definition'
          description: 'Updates an existing related list column definition; only elements
            specified in the request are updated.'
          entityName: 'RelatedListColumnDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelatedListColumnDefinition':
          summary: 'Upsert Related List Column Definition'
          description: 'Upsert an existing related list column definition only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelatedListColumnDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RelatedListColumnDefinition'
      description: 'DeleteRelatedListColumnDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRelatedListColumnDefinition':
          summary: 'Delete Related List Column Definition'
          description: 'Delete an existing related list column definition only elements
            specified in the request are deleted.'
          entityName: 'RelatedListColumnDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelatedListDefinition/{Id}:
    patch:
      summary: 'Update RelatedListDefinition'
      description: 'UpdateRelatedListDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRelatedListDefinition':
          summary: 'Update Related List Definition'
          description: 'Updates an existing related list definition; only elements
            specified in the request are updated.'
          entityName: 'RelatedListDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelatedListDefinition':
          summary: 'Upsert Related List Definition'
          description: 'Upsert an existing related list definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelatedListDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RelatedListDefinition'
      description: 'DeleteRelatedListDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRelatedListDefinition':
          summary: 'Delete Related List Definition'
          description: 'Delete an existing related list definition only elements specified
            in the request are deleted.'
          entityName: 'RelatedListDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelationshipDomain/{Id}:
    patch:
      summary: 'Update RelationshipDomain'
      description: 'UpdateRelationshipDomain'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRelationshipDomain':
          summary: 'Update Relationship Domain'
          description: 'Updates an existing relationship domain; only elements specified
            in the request are updated.'
          entityName: 'RelationshipDomain'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelationshipDomain':
          summary: 'Upsert Relationship Domain'
          description: 'Upsert an existing relationship domain only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelationshipDomain'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RelationshipDomain'
      description: 'DeleteRelationshipDomain'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRelationshipDomain':
          summary: 'Delete Relationship Domain'
          description: 'Delete an existing relationship domain only elements specified
            in the request are deleted.'
          entityName: 'RelationshipDomain'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/RelationshipInfo/{Id}:
    patch:
      summary: 'Update RelationshipInfo'
      description: 'UpdateRelationshipInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateRelationshipInfo':
          summary: 'Update Relationship'
          description: 'Updates an existing relationship; only elements specified
            in the request are updated.'
          entityName: 'RelationshipInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelationshipInfo':
          summary: 'Upsert Relationship'
          description: 'Upsert an existing relationship only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'RelationshipInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete RelationshipInfo'
      description: 'DeleteRelationshipInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteRelationshipInfo':
          summary: 'Delete Relationship'
          description: 'Delete an existing relationship only elements specified in
            the request are deleted.'
          entityName: 'RelationshipInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Reply/{Id}:
    patch:
      summary: 'Update Reply'
      description: 'UpdateReply'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReply':
          summary: 'Update Reply'
          description: 'Updates an existing reply; only elements specified in the
            request are updated.'
          entityName: 'Reply'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReply':
          summary: 'Upsert Reply'
          description: 'Upsert an existing reply only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Reply'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Reply'
      description: 'DeleteReply'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReply':
          summary: 'Delete Reply'
          description: 'Delete an existing reply only elements specified in the request
            are deleted.'
          entityName: 'Reply'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReplyReportAbuse/{Id}:
    patch:
      summary: 'Update ReplyReportAbuse'
      description: 'UpdateReplyReportAbuse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReplyReportAbuse':
          summary: 'Update Reply Report Abuse'
          description: 'Updates an existing reply report abuse; only elements specified
            in the request are updated.'
          entityName: 'ReplyReportAbuse'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReplyReportAbuse':
          summary: 'Upsert Reply Report Abuse'
          description: 'Upsert an existing reply report abuse only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReplyReportAbuse'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ReplyReportAbuse'
      description: 'DeleteReplyReportAbuse'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReplyReportAbuse':
          summary: 'Delete Reply Report Abuse'
          description: 'Delete an existing reply report abuse only elements specified
            in the request are deleted.'
          entityName: 'ReplyReportAbuse'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Report/{Id}:
    patch:
      summary: 'Update Report'
      description: 'UpdateReport'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReport':
          summary: 'Update Report'
          description: 'Updates an existing report; only elements specified in the
            request are updated.'
          entityName: 'Report'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReport':
          summary: 'Upsert Report'
          description: 'Upsert an existing report only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Report'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Report'
      description: 'DeleteReport'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReport':
          summary: 'Delete Report'
          description: 'Delete an existing report only elements specified in the request
            are deleted.'
          entityName: 'Report'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportAnomalyEvent/{Id}:
    patch:
      summary: 'Update ReportAnomalyEvent'
      description: 'UpdateReportAnomalyEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReportAnomalyEvent':
          summary: 'Update Report Anomaly Event'
          description: 'Updates an existing report anomaly event; only elements specified
            in the request are updated.'
          entityName: 'ReportAnomalyEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportAnomalyEvent':
          summary: 'Upsert Report Anomaly Event'
          description: 'Upsert an existing report anomaly event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportAnomalyEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ReportAnomalyEvent'
      description: 'DeleteReportAnomalyEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReportAnomalyEvent':
          summary: 'Delete Report Anomaly Event'
          description: 'Delete an existing report anomaly event only elements specified
            in the request are deleted.'
          entityName: 'ReportAnomalyEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportAnomalyEventStore/{Id}:
    patch:
      summary: 'Update ReportAnomalyEventStore'
      description: 'UpdateReportAnomalyEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReportAnomalyEventStore':
          summary: 'Update Report Anomaly Event Store'
          description: 'Updates an existing report anomaly event store; only elements
            specified in the request are updated.'
          entityName: 'ReportAnomalyEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportAnomalyEventStore':
          summary: 'Upsert Report Anomaly Event Store'
          description: 'Upsert an existing report anomaly event store only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportAnomalyEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ReportAnomalyEventStore'
      description: 'DeleteReportAnomalyEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReportAnomalyEventStore':
          summary: 'Delete Report Anomaly Event Store'
          description: 'Delete an existing report anomaly event store only elements
            specified in the request are deleted.'
          entityName: 'ReportAnomalyEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportEvent/{Id}:
    patch:
      summary: 'Update ReportEvent'
      description: 'UpdateReportEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReportEvent':
          summary: 'Update Report Event'
          description: 'Updates an existing report event; only elements specified
            in the request are updated.'
          entityName: 'ReportEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportEvent':
          summary: 'Upsert Report Event'
          description: 'Upsert an existing report event only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ReportEvent'
      description: 'DeleteReportEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReportEvent':
          summary: 'Delete Report Event'
          description: 'Delete an existing report event only elements specified in
            the request are deleted.'
          entityName: 'ReportEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ReportEventStream/{Id}:
    patch:
      summary: 'Update ReportEventStream'
      description: 'UpdateReportEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateReportEventStream':
          summary: 'Update Report Event Stream'
          description: 'Updates an existing report event stream; only elements specified
            in the request are updated.'
          entityName: 'ReportEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportEventStream':
          summary: 'Upsert Report Event Stream'
          description: 'Upsert an existing report event stream only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ReportEventStream'
      description: 'DeleteReportEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteReportEventStream':
          summary: 'Delete Report Event Stream'
          description: 'Delete an existing report event stream only elements specified
            in the request are deleted.'
          entityName: 'ReportEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SamlSsoConfig/{Id}:
    patch:
      summary: 'Update SamlSsoConfig'
      description: 'UpdateSamlSsoConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSamlSsoConfig':
          summary: 'Update SAML Single Sign-On Setting'
          description: 'Updates an existing saml single sign-on setting; only elements
            specified in the request are updated.'
          entityName: 'SamlSsoConfig'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSamlSsoConfig':
          summary: 'Upsert SAML Single Sign-On Setting'
          description: 'Upsert an existing saml single sign-on setting only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SamlSsoConfig'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SamlSsoConfig'
      description: 'DeleteSamlSsoConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSamlSsoConfig':
          summary: 'Delete SAML Single Sign-On Setting'
          description: 'Delete an existing saml single sign-on setting only elements
            specified in the request are deleted.'
          entityName: 'SamlSsoConfig'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Scontrol/{Id}:
    patch:
      summary: 'Update Scontrol'
      description: 'UpdateScontrol'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateScontrol':
          summary: 'Update Custom S-Control'
          description: 'Updates an existing custom s-control; only elements specified
            in the request are updated.'
          entityName: 'Scontrol'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScontrol':
          summary: 'Upsert Custom S-Control'
          description: 'Upsert an existing custom s-control only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Scontrol'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Scontrol'
      description: 'DeleteScontrol'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteScontrol':
          summary: 'Delete Custom S-Control'
          description: 'Delete an existing custom s-control only elements specified
            in the request are deleted.'
          entityName: 'Scontrol'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Scorecard/{Id}:
    patch:
      summary: 'Update Scorecard'
      description: 'UpdateScorecard'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateScorecard':
          summary: 'Update Scorecard'
          description: 'Updates an existing scorecard; only elements specified in
            the request are updated.'
          entityName: 'Scorecard'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecard':
          summary: 'Upsert Scorecard'
          description: 'Upsert an existing scorecard only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Scorecard'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Scorecard'
      description: 'DeleteScorecard'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteScorecard':
          summary: 'Delete Scorecard'
          description: 'Delete an existing scorecard only elements specified in the
            request are deleted.'
          entityName: 'Scorecard'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ScorecardAssociation/{Id}:
    patch:
      summary: 'Update ScorecardAssociation'
      description: 'UpdateScorecardAssociation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateScorecardAssociation':
          summary: 'Update Scorecard Association'
          description: 'Updates an existing scorecard association; only elements specified
            in the request are updated.'
          entityName: 'ScorecardAssociation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardAssociation':
          summary: 'Upsert Scorecard Association'
          description: 'Upsert an existing scorecard association only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardAssociation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ScorecardAssociation'
      description: 'DeleteScorecardAssociation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteScorecardAssociation':
          summary: 'Delete Scorecard Association'
          description: 'Delete an existing scorecard association only elements specified
            in the request are deleted.'
          entityName: 'ScorecardAssociation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ScorecardMetric/{Id}:
    patch:
      summary: 'Update ScorecardMetric'
      description: 'UpdateScorecardMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateScorecardMetric':
          summary: 'Update Scorecard Metric'
          description: 'Updates an existing scorecard metric; only elements specified
            in the request are updated.'
          entityName: 'ScorecardMetric'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardMetric':
          summary: 'Upsert Scorecard Metric'
          description: 'Upsert an existing scorecard metric only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardMetric'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ScorecardMetric'
      description: 'DeleteScorecardMetric'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteScorecardMetric':
          summary: 'Delete Scorecard Metric'
          description: 'Delete an existing scorecard metric only elements specified
            in the request are deleted.'
          entityName: 'ScorecardMetric'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ScorecardShare/{Id}:
    patch:
      summary: 'Update ScorecardShare'
      description: 'UpdateScorecardShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateScorecardShare':
          summary: 'Update Scorecard Share'
          description: 'Updates an existing scorecard share; only elements specified
            in the request are updated.'
          entityName: 'ScorecardShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardShare':
          summary: 'Upsert Scorecard Share'
          description: 'Upsert an existing scorecard share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ScorecardShare'
      description: 'DeleteScorecardShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteScorecardShare':
          summary: 'Delete Scorecard Share'
          description: 'Delete an existing scorecard share only elements specified
            in the request are deleted.'
          entityName: 'ScorecardShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SearchLayout/{Id}:
    patch:
      summary: 'Update SearchLayout'
      description: 'UpdateSearchLayout'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSearchLayout':
          summary: 'Update Search Layout'
          description: 'Updates an existing search layout; only elements specified
            in the request are updated.'
          entityName: 'SearchLayout'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSearchLayout':
          summary: 'Upsert Search Layout'
          description: 'Upsert an existing search layout only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'SearchLayout'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SearchLayout'
      description: 'DeleteSearchLayout'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSearchLayout':
          summary: 'Delete Search Layout'
          description: 'Delete an existing search layout only elements specified in
            the request are deleted.'
          entityName: 'SearchLayout'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SearchPromotionRule/{Id}:
    patch:
      summary: 'Update SearchPromotionRule'
      description: 'UpdateSearchPromotionRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSearchPromotionRule':
          summary: 'Update Promoted Search Term'
          description: 'Updates an existing promoted search term; only elements specified
            in the request are updated.'
          entityName: 'SearchPromotionRule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSearchPromotionRule':
          summary: 'Upsert Promoted Search Term'
          description: 'Upsert an existing promoted search term only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SearchPromotionRule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SearchPromotionRule'
      description: 'DeleteSearchPromotionRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSearchPromotionRule':
          summary: 'Delete Promoted Search Term'
          description: 'Delete an existing promoted search term only elements specified
            in the request are deleted.'
          entityName: 'SearchPromotionRule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SecurityCustomBaseline/{Id}:
    patch:
      summary: 'Update SecurityCustomBaseline'
      description: 'UpdateSecurityCustomBaseline'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSecurityCustomBaseline':
          summary: 'Update Security Custom Baseline'
          description: 'Updates an existing security custom baseline; only elements
            specified in the request are updated.'
          entityName: 'SecurityCustomBaseline'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSecurityCustomBaseline':
          summary: 'Upsert Security Custom Baseline'
          description: 'Upsert an existing security custom baseline only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SecurityCustomBaseline'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SecurityCustomBaseline'
      description: 'DeleteSecurityCustomBaseline'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSecurityCustomBaseline':
          summary: 'Delete Security Custom Baseline'
          description: 'Delete an existing security custom baseline only elements
            specified in the request are deleted.'
          entityName: 'SecurityCustomBaseline'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Seller/{Id}:
    patch:
      summary: 'Update Seller'
      description: 'UpdateSeller'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSeller':
          summary: 'Update Seller'
          description: 'Updates an existing seller; only elements specified in the
            request are updated.'
          entityName: 'Seller'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSeller':
          summary: 'Upsert Seller'
          description: 'Upsert an existing seller only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Seller'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Seller'
      description: 'DeleteSeller'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSeller':
          summary: 'Delete Seller'
          description: 'Delete an existing seller only elements specified in the request
            are deleted.'
          entityName: 'Seller'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SellerHistory/{Id}:
    patch:
      summary: 'Update SellerHistory'
      description: 'UpdateSellerHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSellerHistory':
          summary: 'Update Seller History'
          description: 'Updates an existing seller history; only elements specified
            in the request are updated.'
          entityName: 'SellerHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSellerHistory':
          summary: 'Upsert Seller History'
          description: 'Upsert an existing seller history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SellerHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SellerHistory'
      description: 'DeleteSellerHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSellerHistory':
          summary: 'Delete Seller History'
          description: 'Delete an existing seller history only elements specified
            in the request are deleted.'
          entityName: 'SellerHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SellerShare/{Id}:
    patch:
      summary: 'Update SellerShare'
      description: 'UpdateSellerShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSellerShare':
          summary: 'Update Seller Share'
          description: 'Updates an existing seller share; only elements specified
            in the request are updated.'
          entityName: 'SellerShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSellerShare':
          summary: 'Upsert Seller Share'
          description: 'Upsert an existing seller share only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'SellerShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SellerShare'
      description: 'DeleteSellerShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSellerShare':
          summary: 'Delete Seller Share'
          description: 'Delete an existing seller share only elements specified in
            the request are deleted.'
          entityName: 'SellerShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SessionHijackingEvent/{Id}:
    patch:
      summary: 'Update SessionHijackingEvent'
      description: 'UpdateSessionHijackingEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSessionHijackingEvent':
          summary: 'Update Session Hijacking Event'
          description: 'Updates an existing session hijacking event; only elements
            specified in the request are updated.'
          entityName: 'SessionHijackingEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSessionHijackingEvent':
          summary: 'Upsert Session Hijacking Event'
          description: 'Upsert an existing session hijacking event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SessionHijackingEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SessionHijackingEvent'
      description: 'DeleteSessionHijackingEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSessionHijackingEvent':
          summary: 'Delete Session Hijacking Event'
          description: 'Delete an existing session hijacking event only elements specified
            in the request are deleted.'
          entityName: 'SessionHijackingEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SessionHijackingEventStore/{Id}:
    patch:
      summary: 'Update SessionHijackingEventStore'
      description: 'UpdateSessionHijackingEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSessionHijackingEventStore':
          summary: 'Update Session Hijacking Event Store'
          description: 'Updates an existing session hijacking event store; only elements
            specified in the request are updated.'
          entityName: 'SessionHijackingEventStore'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSessionHijackingEventStore':
          summary: 'Upsert Session Hijacking Event Store'
          description: 'Upsert an existing session hijacking event store only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SessionHijackingEventStore'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SessionHijackingEventStore'
      description: 'DeleteSessionHijackingEventStore'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSessionHijackingEventStore':
          summary: 'Delete Session Hijacking Event Store'
          description: 'Delete an existing session hijacking event store only elements
            specified in the request are deleted.'
          entityName: 'SessionHijackingEventStore'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SessionPermSetActivation/{Id}:
    patch:
      summary: 'Update SessionPermSetActivation'
      description: 'UpdateSessionPermSetActivation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSessionPermSetActivation':
          summary: 'Update Session Permission Set Activation'
          description: 'Updates an existing session permission set activation; only
            elements specified in the request are updated.'
          entityName: 'SessionPermSetActivation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSessionPermSetActivation':
          summary: 'Upsert Session Permission Set Activation'
          description: 'Upsert an existing session permission set activation only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'SessionPermSetActivation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SessionPermSetActivation'
      description: 'DeleteSessionPermSetActivation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSessionPermSetActivation':
          summary: 'Delete Session Permission Set Activation'
          description: 'Delete an existing session permission set activation only
            elements specified in the request are deleted.'
          entityName: 'SessionPermSetActivation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SetupAssistantStep/{Id}:
    patch:
      summary: 'Update SetupAssistantStep'
      description: 'UpdateSetupAssistantStep'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSetupAssistantStep':
          summary: 'Update Setup Assistant Step'
          description: 'Updates an existing setup assistant step; only elements specified
            in the request are updated.'
          entityName: 'SetupAssistantStep'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSetupAssistantStep':
          summary: 'Upsert Setup Assistant Step'
          description: 'Upsert an existing setup assistant step only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupAssistantStep'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SetupAssistantStep'
      description: 'DeleteSetupAssistantStep'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSetupAssistantStep':
          summary: 'Delete Setup Assistant Step'
          description: 'Delete an existing setup assistant step only elements specified
            in the request are deleted.'
          entityName: 'SetupAssistantStep'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SetupAuditTrail/{Id}:
    patch:
      summary: 'Update SetupAuditTrail'
      description: 'UpdateSetupAuditTrail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSetupAuditTrail':
          summary: 'Update Setup Audit Trail Entry'
          description: 'Updates an existing setup audit trail entry; only elements
            specified in the request are updated.'
          entityName: 'SetupAuditTrail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSetupAuditTrail':
          summary: 'Upsert Setup Audit Trail Entry'
          description: 'Upsert an existing setup audit trail entry only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupAuditTrail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SetupAuditTrail'
      description: 'DeleteSetupAuditTrail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSetupAuditTrail':
          summary: 'Delete Setup Audit Trail Entry'
          description: 'Delete an existing setup audit trail entry only elements specified
            in the request are deleted.'
          entityName: 'SetupAuditTrail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SetupEntityAccess/{Id}:
    patch:
      summary: 'Update SetupEntityAccess'
      description: 'UpdateSetupEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSetupEntityAccess':
          summary: 'Update Setup Entity Access'
          description: 'Updates an existing setup entity access; only elements specified
            in the request are updated.'
          entityName: 'SetupEntityAccess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSetupEntityAccess':
          summary: 'Upsert Setup Entity Access'
          description: 'Upsert an existing setup entity access only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupEntityAccess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SetupEntityAccess'
      description: 'DeleteSetupEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSetupEntityAccess':
          summary: 'Delete Setup Entity Access'
          description: 'Delete an existing setup entity access only elements specified
            in the request are deleted.'
          entityName: 'SetupEntityAccess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Site/{Id}:
    patch:
      summary: 'Update Site'
      description: 'UpdateSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSite':
          summary: 'Update Site'
          description: 'Updates an existing site; only elements specified in the request
            are updated.'
          entityName: 'Site'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSite':
          summary: 'Upsert Site'
          description: 'Upsert an existing site only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Site'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Site'
      description: 'DeleteSite'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSite':
          summary: 'Delete Site'
          description: 'Delete an existing site only elements specified in the request
            are deleted.'
          entityName: 'Site'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteDetail/{Id}:
    patch:
      summary: 'Update SiteDetail'
      description: 'UpdateSiteDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSiteDetail':
          summary: 'Update Site Detail'
          description: 'Updates an existing site detail; only elements specified in
            the request are updated.'
          entityName: 'SiteDetail'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteDetail':
          summary: 'Upsert Site Detail'
          description: 'Upsert an existing site detail only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteDetail'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SiteDetail'
      description: 'DeleteSiteDetail'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSiteDetail':
          summary: 'Delete Site Detail'
          description: 'Delete an existing site detail only elements specified in
            the request are deleted.'
          entityName: 'SiteDetail'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteHistory/{Id}:
    patch:
      summary: 'Update SiteHistory'
      description: 'UpdateSiteHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSiteHistory':
          summary: 'Update Site History'
          description: 'Updates an existing site history; only elements specified
            in the request are updated.'
          entityName: 'SiteHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteHistory':
          summary: 'Upsert Site History'
          description: 'Upsert an existing site history only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SiteHistory'
      description: 'DeleteSiteHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSiteHistory':
          summary: 'Delete Site History'
          description: 'Delete an existing site history only elements specified in
            the request are deleted.'
          entityName: 'SiteHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteIframeWhiteListUrl/{Id}:
    patch:
      summary: 'Update SiteIframeWhiteListUrl'
      description: 'UpdateSiteIframeWhiteListUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSiteIframeWhiteListUrl':
          summary: 'Update Trusted Domains for Inline Frames'
          description: 'Updates an existing trusted domains for inline frames; only
            elements specified in the request are updated.'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteIframeWhiteListUrl':
          summary: 'Upsert Trusted Domains for Inline Frames'
          description: 'Upsert an existing trusted domains for inline frames only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SiteIframeWhiteListUrl'
      description: 'DeleteSiteIframeWhiteListUrl'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSiteIframeWhiteListUrl':
          summary: 'Delete Trusted Domains for Inline Frames'
          description: 'Delete an existing trusted domains for inline frames only
            elements specified in the request are deleted.'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SiteRedirectMapping/{Id}:
    patch:
      summary: 'Update SiteRedirectMapping'
      description: 'UpdateSiteRedirectMapping'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSiteRedirectMapping':
          summary: 'Update Site Redirect Mapping'
          description: 'Updates an existing site redirect mapping; only elements specified
            in the request are updated.'
          entityName: 'SiteRedirectMapping'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteRedirectMapping':
          summary: 'Upsert Site Redirect Mapping'
          description: 'Upsert an existing site redirect mapping only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteRedirectMapping'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SiteRedirectMapping'
      description: 'DeleteSiteRedirectMapping'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSiteRedirectMapping':
          summary: 'Delete Site Redirect Mapping'
          description: 'Delete an existing site redirect mapping only elements specified
            in the request are deleted.'
          entityName: 'SiteRedirectMapping'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Solution/{Id}:
    patch:
      summary: 'Update Solution'
      description: 'UpdateSolution'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSolution':
          summary: 'Update Solution'
          description: 'Updates an existing solution; only elements specified in the
            request are updated.'
          entityName: 'Solution'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSolution':
          summary: 'Upsert Solution'
          description: 'Upsert an existing solution only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'Solution'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Solution'
      description: 'DeleteSolution'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSolution':
          summary: 'Delete Solution'
          description: 'Delete an existing solution only elements specified in the
            request are deleted.'
          entityName: 'Solution'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SolutionHistory/{Id}:
    patch:
      summary: 'Update SolutionHistory'
      description: 'UpdateSolutionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSolutionHistory':
          summary: 'Update Solution History'
          description: 'Updates an existing solution history; only elements specified
            in the request are updated.'
          entityName: 'SolutionHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSolutionHistory':
          summary: 'Upsert Solution History'
          description: 'Upsert an existing solution history only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SolutionHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SolutionHistory'
      description: 'DeleteSolutionHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSolutionHistory':
          summary: 'Delete Solution History'
          description: 'Delete an existing solution history only elements specified
            in the request are deleted.'
          entityName: 'SolutionHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/SolutionStatus/{Id}:
    patch:
      summary: 'Update SolutionStatus'
      description: 'UpdateSolutionStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateSolutionStatus':
          summary: 'Update Solution Status Value'
          description: 'Updates an existing solution status value; only elements specified
            in the request are updated.'
          entityName: 'SolutionStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSolutionStatus':
          summary: 'Upsert Solution Status Value'
          description: 'Upsert an existing solution status value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SolutionStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete SolutionStatus'
      description: 'DeleteSolutionStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteSolutionStatus':
          summary: 'Delete Solution Status Value'
          description: 'Delete an existing solution status value only elements specified
            in the request are deleted.'
          entityName: 'SolutionStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Stamp/{Id}:
    patch:
      summary: 'Update Stamp'
      description: 'UpdateStamp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateStamp':
          summary: 'Update Stamp'
          description: 'Updates an existing stamp; only elements specified in the
            request are updated.'
          entityName: 'Stamp'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStamp':
          summary: 'Upsert Stamp'
          description: 'Upsert an existing stamp only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Stamp'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Stamp'
      description: 'DeleteStamp'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteStamp':
          summary: 'Delete Stamp'
          description: 'Delete an existing stamp only elements specified in the request
            are deleted.'
          entityName: 'Stamp'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StampAssignment/{Id}:
    patch:
      summary: 'Update StampAssignment'
      description: 'UpdateStampAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateStampAssignment':
          summary: 'Update Stamp Assignment'
          description: 'Updates an existing stamp assignment; only elements specified
            in the request are updated.'
          entityName: 'StampAssignment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStampAssignment':
          summary: 'Upsert Stamp Assignment'
          description: 'Upsert an existing stamp assignment only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'StampAssignment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete StampAssignment'
      description: 'DeleteStampAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteStampAssignment':
          summary: 'Delete Stamp Assignment'
          description: 'Delete an existing stamp assignment only elements specified
            in the request are deleted.'
          entityName: 'StampAssignment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StaticResource/{Id}:
    patch:
      summary: 'Update StaticResource'
      description: 'UpdateStaticResource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateStaticResource':
          summary: 'Update Static Resource'
          description: 'Updates an existing static resource; only elements specified
            in the request are updated.'
          entityName: 'StaticResource'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStaticResource':
          summary: 'Upsert Static Resource'
          description: 'Upsert an existing static resource only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'StaticResource'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete StaticResource'
      description: 'DeleteStaticResource'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteStaticResource':
          summary: 'Delete Static Resource'
          description: 'Delete an existing static resource only elements specified
            in the request are deleted.'
          entityName: 'StaticResource'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StreamingChannel/{Id}:
    patch:
      summary: 'Update StreamingChannel'
      description: 'UpdateStreamingChannel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateStreamingChannel':
          summary: 'Update Streaming Channel'
          description: 'Updates an existing streaming channel; only elements specified
            in the request are updated.'
          entityName: 'StreamingChannel'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStreamingChannel':
          summary: 'Upsert Streaming Channel'
          description: 'Upsert an existing streaming channel only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'StreamingChannel'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete StreamingChannel'
      description: 'DeleteStreamingChannel'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteStreamingChannel':
          summary: 'Delete Streaming Channel'
          description: 'Delete an existing streaming channel only elements specified
            in the request are deleted.'
          entityName: 'StreamingChannel'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/StreamingChannelShare/{Id}:
    patch:
      summary: 'Update StreamingChannelShare'
      description: 'UpdateStreamingChannelShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateStreamingChannelShare':
          summary: 'Update Streaming Channel Share'
          description: 'Updates an existing streaming channel share; only elements
            specified in the request are updated.'
          entityName: 'StreamingChannelShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStreamingChannelShare':
          summary: 'Upsert Streaming Channel Share'
          description: 'Upsert an existing streaming channel share only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'StreamingChannelShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete StreamingChannelShare'
      description: 'DeleteStreamingChannelShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteStreamingChannelShare':
          summary: 'Delete Streaming Channel Share'
          description: 'Delete an existing streaming channel share only elements specified
            in the request are deleted.'
          entityName: 'StreamingChannelShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TabDefinition/{Id}:
    patch:
      summary: 'Update TabDefinition'
      description: 'UpdateTabDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTabDefinition':
          summary: 'Update Tab Definition'
          description: 'Updates an existing tab definition; only elements specified
            in the request are updated.'
          entityName: 'TabDefinition'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTabDefinition':
          summary: 'Upsert Tab Definition'
          description: 'Upsert an existing tab definition only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TabDefinition'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TabDefinition'
      description: 'DeleteTabDefinition'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTabDefinition':
          summary: 'Delete Tab Definition'
          description: 'Delete an existing tab definition only elements specified
            in the request are deleted.'
          entityName: 'TabDefinition'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Task/{Id}:
    patch:
      summary: 'Update Task'
      description: 'UpdateTask'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTask':
          summary: 'Update Task'
          description: 'Updates an existing task; only elements specified in the request
            are updated.'
          entityName: 'Task'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTask':
          summary: 'Upsert Task'
          description: 'Upsert an existing task only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Task'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Task'
      description: 'DeleteTask'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTask':
          summary: 'Delete Task'
          description: 'Delete an existing task only elements specified in the request
            are deleted.'
          entityName: 'Task'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TaskChangeEvent/{Id}:
    patch:
      summary: 'Update TaskChangeEvent'
      description: 'UpdateTaskChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTaskChangeEvent':
          summary: 'Update Task Change Event'
          description: 'Updates an existing task change event; only elements specified
            in the request are updated.'
          entityName: 'TaskChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskChangeEvent':
          summary: 'Upsert Task Change Event'
          description: 'Upsert an existing task change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TaskChangeEvent'
      description: 'DeleteTaskChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTaskChangeEvent':
          summary: 'Delete Task Change Event'
          description: 'Delete an existing task change event only elements specified
            in the request are deleted.'
          entityName: 'TaskChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TaskPriority/{Id}:
    patch:
      summary: 'Update TaskPriority'
      description: 'UpdateTaskPriority'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTaskPriority':
          summary: 'Update Task Priority Value'
          description: 'Updates an existing task priority value; only elements specified
            in the request are updated.'
          entityName: 'TaskPriority'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskPriority':
          summary: 'Upsert Task Priority Value'
          description: 'Upsert an existing task priority value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskPriority'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TaskPriority'
      description: 'DeleteTaskPriority'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTaskPriority':
          summary: 'Delete Task Priority Value'
          description: 'Delete an existing task priority value only elements specified
            in the request are deleted.'
          entityName: 'TaskPriority'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TaskStatus/{Id}:
    patch:
      summary: 'Update TaskStatus'
      description: 'UpdateTaskStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTaskStatus':
          summary: 'Update Task Status Value'
          description: 'Updates an existing task status value; only elements specified
            in the request are updated.'
          entityName: 'TaskStatus'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskStatus':
          summary: 'Upsert Task Status Value'
          description: 'Upsert an existing task status value only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskStatus'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TaskStatus'
      description: 'DeleteTaskStatus'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTaskStatus':
          summary: 'Delete Task Status Value'
          description: 'Delete an existing task status value only elements specified
            in the request are deleted.'
          entityName: 'TaskStatus'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TenantSecret/{Id}:
    patch:
      summary: 'Update TenantSecret'
      description: 'UpdateTenantSecret'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTenantSecret':
          summary: 'Update Tenant Secret'
          description: 'Updates an existing tenant secret; only elements specified
            in the request are updated.'
          entityName: 'TenantSecret'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTenantSecret':
          summary: 'Upsert Tenant Secret'
          description: 'Upsert an existing tenant secret only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'TenantSecret'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TenantSecret'
      description: 'DeleteTenantSecret'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTenantSecret':
          summary: 'Delete Tenant Secret'
          description: 'Delete an existing tenant secret only elements specified in
            the request are deleted.'
          entityName: 'TenantSecret'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TenantUsageEntitlement/{Id}:
    patch:
      summary: 'Update TenantUsageEntitlement'
      description: 'UpdateTenantUsageEntitlement'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTenantUsageEntitlement':
          summary: 'Update Tenant Usage Entitlement'
          description: 'Updates an existing tenant usage entitlement; only elements
            specified in the request are updated.'
          entityName: 'TenantUsageEntitlement'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTenantUsageEntitlement':
          summary: 'Upsert Tenant Usage Entitlement'
          description: 'Upsert an existing tenant usage entitlement only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TenantUsageEntitlement'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TenantUsageEntitlement'
      description: 'DeleteTenantUsageEntitlement'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTenantUsageEntitlement':
          summary: 'Delete Tenant Usage Entitlement'
          description: 'Delete an existing tenant usage entitlement only elements
            specified in the request are deleted.'
          entityName: 'TenantUsageEntitlement'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'

  /services/data/v58.0/sobjects/ThirdPartyAccountLink/{Id}:
    patch:
      summary: 'Update ThirdPartyAccountLink'
      description: 'UpdateThirdPartyAccountLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateThirdPartyAccountLink':
          summary: 'Update Third Party Account Link'
          description: 'Updates an existing third party account link; only elements
            specified in the request are updated.'
          entityName: 'ThirdPartyAccountLink'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertThirdPartyAccountLink':
          summary: 'Upsert Third Party Account Link'
          description: 'Upsert an existing third party account link only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ThirdPartyAccountLink'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ThirdPartyAccountLink'
      description: 'DeleteThirdPartyAccountLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteThirdPartyAccountLink':
          summary: 'Delete Third Party Account Link'
          description: 'Delete an existing third party account link only elements
            specified in the request are deleted.'
          entityName: 'ThirdPartyAccountLink'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/ThreatDetectionFeedback/{Id}:
    patch:
      summary: 'Update ThreatDetectionFeedback'
      description: 'UpdateThreatDetectionFeedback'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateThreatDetectionFeedback':
          summary: 'Update Threat Detection Feedback'
          description: 'Updates an existing threat detection feedback; only elements
            specified in the request are updated.'
          entityName: 'ThreatDetectionFeedback'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertThreatDetectionFeedback':
          summary: 'Upsert Threat Detection Feedback'
          description: 'Upsert an existing threat detection feedback only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ThreatDetectionFeedback'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete ThreatDetectionFeedback'
      description: 'DeleteThreatDetectionFeedback'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteThreatDetectionFeedback':
          summary: 'Delete Threat Detection Feedback'
          description: 'Delete an existing threat detection feedback only elements
            specified in the request are deleted.'
          entityName: 'ThreatDetectionFeedback'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TodayGoal/{Id}:
    patch:
      summary: 'Update TodayGoal'
      description: 'UpdateTodayGoal'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTodayGoal':
          summary: 'Update Goal'
          description: 'Updates an existing goal; only elements specified in the request
            are updated.'
          entityName: 'TodayGoal'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTodayGoal':
          summary: 'Upsert Goal'
          description: 'Upsert an existing goal only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'TodayGoal'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TodayGoal'
      description: 'DeleteTodayGoal'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTodayGoal':
          summary: 'Delete Goal'
          description: 'Delete an existing goal only elements specified in the request
            are deleted.'
          entityName: 'TodayGoal'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TodayGoalShare/{Id}:
    patch:
      summary: 'Update TodayGoalShare'
      description: 'UpdateTodayGoalShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTodayGoalShare':
          summary: 'Update Goal Share'
          description: 'Updates an existing goal share; only elements specified in
            the request are updated.'
          entityName: 'TodayGoalShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTodayGoalShare':
          summary: 'Upsert Goal Share'
          description: 'Upsert an existing goal share only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'TodayGoalShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TodayGoalShare'
      description: 'DeleteTodayGoalShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTodayGoalShare':
          summary: 'Delete Goal Share'
          description: 'Delete an existing goal share only elements specified in the
            request are deleted.'
          entityName: 'TodayGoalShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Topic/{Id}:
    patch:
      summary: 'Update Topic'
      description: 'UpdateTopic'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTopic':
          summary: 'Update Topic'
          description: 'Updates an existing topic; only elements specified in the
            request are updated.'
          entityName: 'Topic'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTopic':
          summary: 'Upsert Topic'
          description: 'Upsert an existing topic only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Topic'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Topic'
      description: 'DeleteTopic'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTopic':
          summary: 'Delete Topic'
          description: 'Delete an existing topic only elements specified in the request
            are deleted.'
          entityName: 'Topic'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TopicAssignment/{Id}:
    patch:
      summary: 'Update TopicAssignment'
      description: 'UpdateTopicAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTopicAssignment':
          summary: 'Update Topic Assignment'
          description: 'Updates an existing topic assignment; only elements specified
            in the request are updated.'
          entityName: 'TopicAssignment'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTopicAssignment':
          summary: 'Upsert Topic Assignment'
          description: 'Upsert an existing topic assignment only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TopicAssignment'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TopicAssignment'
      description: 'DeleteTopicAssignment'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTopicAssignment':
          summary: 'Delete Topic Assignment'
          description: 'Delete an existing topic assignment only elements specified
            in the request are deleted.'
          entityName: 'TopicAssignment'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/TransactionSecurityPolicy/{Id}:
    patch:
      summary: 'Update TransactionSecurityPolicy'
      description: 'UpdateTransactionSecurityPolicy'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTransactionSecurityPolicy':
          summary: 'Update Transaction Security Policy'
          description: 'Updates an existing transaction security policy; only elements
            specified in the request are updated.'
          entityName: 'TransactionSecurityPolicy'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTransactionSecurityPolicy':
          summary: 'Upsert Transaction Security Policy'
          description: 'Upsert an existing transaction security policy only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TransactionSecurityPolicy'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete TransactionSecurityPolicy'
      description: 'DeleteTransactionSecurityPolicy'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTransactionSecurityPolicy':
          summary: 'Delete Transaction Security Policy'
          description: 'Delete an existing transaction security policy only elements
            specified in the request are deleted.'
          entityName: 'TransactionSecurityPolicy'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Translation/{Id}:
    patch:
      summary: 'Update Translation'
      description: 'UpdateTranslation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateTranslation':
          summary: 'Update Language Translation'
          description: 'Updates an existing language translation; only elements specified
            in the request are updated.'
          entityName: 'Translation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTranslation':
          summary: 'Upsert Language Translation'
          description: 'Upsert an existing language translation only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Translation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Translation'
      description: 'DeleteTranslation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteTranslation':
          summary: 'Delete Language Translation'
          description: 'Delete an existing language translation only elements specified
            in the request are deleted.'
          entityName: 'Translation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UiFormulaCriterion/{Id}:
    patch:
      summary: 'Update UiFormulaCriterion'
      description: 'UpdateUiFormulaCriterion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUiFormulaCriterion':
          summary: 'Update Ui Formula Criterion'
          description: 'Updates an existing ui formula criterion; only elements specified
            in the request are updated.'
          entityName: 'UiFormulaCriterion'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUiFormulaCriterion':
          summary: 'Upsert Ui Formula Criterion'
          description: 'Upsert an existing ui formula criterion only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UiFormulaCriterion'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UiFormulaCriterion'
      description: 'DeleteUiFormulaCriterion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUiFormulaCriterion':
          summary: 'Delete Ui Formula Criterion'
          description: 'Delete an existing ui formula criterion only elements specified
            in the request are deleted.'
          entityName: 'UiFormulaCriterion'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UiFormulaRule/{Id}:
    patch:
      summary: 'Update UiFormulaRule'
      description: 'UpdateUiFormulaRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUiFormulaRule':
          summary: 'Update Ui Formula Rule'
          description: 'Updates an existing ui formula rule; only elements specified
            in the request are updated.'
          entityName: 'UiFormulaRule'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUiFormulaRule':
          summary: 'Upsert Ui Formula Rule'
          description: 'Upsert an existing ui formula rule only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UiFormulaRule'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UiFormulaRule'
      description: 'DeleteUiFormulaRule'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUiFormulaRule':
          summary: 'Delete Ui Formula Rule'
          description: 'Delete an existing ui formula rule only elements specified
            in the request are deleted.'
          entityName: 'UiFormulaRule'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UndecidedEventRelation/{Id}:
    patch:
      summary: 'Update UndecidedEventRelation'
      description: 'UpdateUndecidedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUndecidedEventRelation':
          summary: 'Update Undecided Event Relation'
          description: 'Updates an existing undecided event relation; only elements
            specified in the request are updated.'
          entityName: 'UndecidedEventRelation'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUndecidedEventRelation':
          summary: 'Upsert Undecided Event Relation'
          description: 'Upsert an existing undecided event relation only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UndecidedEventRelation'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UndecidedEventRelation'
      description: 'DeleteUndecidedEventRelation'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUndecidedEventRelation':
          summary: 'Delete Undecided Event Relation'
          description: 'Delete an existing undecided event relation only elements
            specified in the request are deleted.'
          entityName: 'UndecidedEventRelation'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UriEvent/{Id}:
    patch:
      summary: 'Update UriEvent'
      description: 'UpdateUriEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUriEvent':
          summary: 'Update URI Event'
          description: 'Updates an existing uri event; only elements specified in
            the request are updated.'
          entityName: 'UriEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUriEvent':
          summary: 'Upsert URI Event'
          description: 'Upsert an existing uri event only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'UriEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UriEvent'
      description: 'DeleteUriEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUriEvent':
          summary: 'Delete URI Event'
          description: 'Delete an existing uri event only elements specified in the
            request are deleted.'
          entityName: 'UriEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UriEventStream/{Id}:
    patch:
      summary: 'Update UriEventStream'
      description: 'UpdateUriEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUriEventStream':
          summary: 'Update URI Event Stream '
          description: 'Updates an existing uri event stream ; only elements specified
            in the request are updated.'
          entityName: 'UriEventStream'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUriEventStream':
          summary: 'Upsert URI Event Stream '
          description: 'Upsert an existing uri event stream  only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UriEventStream'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UriEventStream'
      description: 'DeleteUriEventStream'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUriEventStream':
          summary: 'Delete URI Event Stream '
          description: 'Delete an existing uri event stream  only elements specified
            in the request are deleted.'
          entityName: 'UriEventStream'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/User/{Id}:
    patch:
      summary: 'Update User'
      description: 'UpdateUser'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUser':
          summary: 'Update User'
          description: 'Updates an existing user; only elements specified in the request
            are updated.'
          entityName: 'User'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUser':
          summary: 'Upsert User'
          description: 'Upsert an existing user only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'User'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete User'
      description: 'DeleteUser'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUser':
          summary: 'Delete User'
          description: 'Delete an existing user only elements specified in the request
            are deleted.'
          entityName: 'User'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppInfo/{Id}:
    patch:
      summary: 'Update UserAppInfo'
      description: 'UpdateUserAppInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserAppInfo':
          summary: 'Update Last Used App'
          description: 'Updates an existing last used app; only elements specified
            in the request are updated.'
          entityName: 'UserAppInfo'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppInfo':
          summary: 'Upsert Last Used App'
          description: 'Upsert an existing last used app only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppInfo'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserAppInfo'
      description: 'DeleteUserAppInfo'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserAppInfo':
          summary: 'Delete Last Used App'
          description: 'Delete an existing last used app only elements specified in
            the request are deleted.'
          entityName: 'UserAppInfo'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppMenuCustomization/{Id}:
    patch:
      summary: 'Update UserAppMenuCustomization'
      description: 'UpdateUserAppMenuCustomization'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserAppMenuCustomization':
          summary: 'Update UserAppMenuCustomization'
          description: 'Updates an existing userappmenucustomization; only elements
            specified in the request are updated.'
          entityName: 'UserAppMenuCustomization'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppMenuCustomization':
          summary: 'Upsert UserAppMenuCustomization'
          description: 'Upsert an existing userappmenucustomization only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppMenuCustomization'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserAppMenuCustomization'
      description: 'DeleteUserAppMenuCustomization'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserAppMenuCustomization':
          summary: 'Delete UserAppMenuCustomization'
          description: 'Delete an existing userappmenucustomization only elements
            specified in the request are deleted.'
          entityName: 'UserAppMenuCustomization'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppMenuCustomizationShare/{Id}:
    patch:
      summary: 'Update UserAppMenuCustomizationShare'
      description: 'UpdateUserAppMenuCustomizationShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserAppMenuCustomizationShare':
          summary: 'Update UserAppMenuCustomization Share'
          description: 'Updates an existing userappmenucustomization share; only elements
            specified in the request are updated.'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppMenuCustomizationShare':
          summary: 'Upsert UserAppMenuCustomization Share'
          description: 'Upsert an existing userappmenucustomization share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserAppMenuCustomizationShare'
      description: 'DeleteUserAppMenuCustomizationShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserAppMenuCustomizationShare':
          summary: 'Delete UserAppMenuCustomization Share'
          description: 'Delete an existing userappmenucustomization share only elements
            specified in the request are deleted.'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserAppMenuItem/{Id}:
    patch:
      summary: 'Update UserAppMenuItem'
      description: 'UpdateUserAppMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserAppMenuItem':
          summary: 'Update Application'
          description: 'Updates an existing application; only elements specified in
            the request are updated.'
          entityName: 'UserAppMenuItem'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppMenuItem':
          summary: 'Upsert Application'
          description: 'Upsert an existing application only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppMenuItem'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserAppMenuItem'
      description: 'DeleteUserAppMenuItem'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserAppMenuItem':
          summary: 'Delete Application'
          description: 'Delete an existing application only elements specified in
            the request are deleted.'
          entityName: 'UserAppMenuItem'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserChangeEvent/{Id}:
    patch:
      summary: 'Update UserChangeEvent'
      description: 'UpdateUserChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserChangeEvent':
          summary: 'Update User Change Event'
          description: 'Updates an existing user change event; only elements specified
            in the request are updated.'
          entityName: 'UserChangeEvent'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserChangeEvent':
          summary: 'Upsert User Change Event'
          description: 'Upsert an existing user change event only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserChangeEvent'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserChangeEvent'
      description: 'DeleteUserChangeEvent'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserChangeEvent':
          summary: 'Delete User Change Event'
          description: 'Delete an existing user change event only elements specified
            in the request are deleted.'
          entityName: 'UserChangeEvent'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserEmailPreferredPerson/{Id}:
    patch:
      summary: 'Update UserEmailPreferredPerson'
      description: 'UpdateUserEmailPreferredPerson'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserEmailPreferredPerson':
          summary: 'Update User Email Preferred Person'
          description: 'Updates an existing user email preferred person; only elements
            specified in the request are updated.'
          entityName: 'UserEmailPreferredPerson'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserEmailPreferredPerson':
          summary: 'Upsert User Email Preferred Person'
          description: 'Upsert an existing user email preferred person only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserEmailPreferredPerson'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserEmailPreferredPerson'
      description: 'DeleteUserEmailPreferredPerson'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserEmailPreferredPerson':
          summary: 'Delete User Email Preferred Person'
          description: 'Delete an existing user email preferred person only elements
            specified in the request are deleted.'
          entityName: 'UserEmailPreferredPerson'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserEmailPreferredPersonShare/{Id}:
    patch:
      summary: 'Update UserEmailPreferredPersonShare'
      description: 'UpdateUserEmailPreferredPersonShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserEmailPreferredPersonShare':
          summary: 'Update User Email Preferred Person Share'
          description: 'Updates an existing user email preferred person share; only
            elements specified in the request are updated.'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserEmailPreferredPersonShare':
          summary: 'Upsert User Email Preferred Person Share'
          description: 'Upsert an existing user email preferred person share only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserEmailPreferredPersonShare'
      description: 'DeleteUserEmailPreferredPersonShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserEmailPreferredPersonShare':
          summary: 'Delete User Email Preferred Person Share'
          description: 'Delete an existing user email preferred person share only
            elements specified in the request are deleted.'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserEntityAccess/{Id}:
    patch:
      summary: 'Update UserEntityAccess'
      description: 'UpdateUserEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserEntityAccess':
          summary: 'Update User Entity Access'
          description: 'Updates an existing user entity access; only elements specified
            in the request are updated.'
          entityName: 'UserEntityAccess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserEntityAccess':
          summary: 'Upsert User Entity Access'
          description: 'Upsert an existing user entity access only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserEntityAccess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserEntityAccess'
      description: 'DeleteUserEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserEntityAccess':
          summary: 'Delete User Entity Access'
          description: 'Delete an existing user entity access only elements specified
            in the request are deleted.'
          entityName: 'UserEntityAccess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserFieldAccess/{Id}:
    patch:
      summary: 'Update UserFieldAccess'
      description: 'UpdateUserFieldAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserFieldAccess':
          summary: 'Update User Field Access'
          description: 'Updates an existing user field access; only elements specified
            in the request are updated.'
          entityName: 'UserFieldAccess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserFieldAccess':
          summary: 'Upsert User Field Access'
          description: 'Upsert an existing user field access only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserFieldAccess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserFieldAccess'
      description: 'DeleteUserFieldAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserFieldAccess':
          summary: 'Delete User Field Access'
          description: 'Delete an existing user field access only elements specified
            in the request are deleted.'
          entityName: 'UserFieldAccess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserLicense/{Id}:
    patch:
      summary: 'Update UserLicense'
      description: 'UpdateUserLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserLicense':
          summary: 'Update User License'
          description: 'Updates an existing user license; only elements specified
            in the request are updated.'
          entityName: 'UserLicense'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserLicense':
          summary: 'Upsert User License'
          description: 'Upsert an existing user license only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'UserLicense'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserLicense'
      description: 'DeleteUserLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserLicense':
          summary: 'Delete User License'
          description: 'Delete an existing user license only elements specified in
            the request are deleted.'
          entityName: 'UserLicense'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserListView/{Id}:
    patch:
      summary: 'Update UserListView'
      description: 'UpdateUserListView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserListView':
          summary: 'Update User List View'
          description: 'Updates an existing user list view; only elements specified
            in the request are updated.'
          entityName: 'UserListView'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserListView':
          summary: 'Upsert User List View'
          description: 'Upsert an existing user list view only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserListView'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserListView'
      description: 'DeleteUserListView'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserListView':
          summary: 'Delete User List View'
          description: 'Delete an existing user list view only elements specified
            in the request are deleted.'
          entityName: 'UserListView'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserListViewCriterion/{Id}:
    patch:
      summary: 'Update UserListViewCriterion'
      description: 'UpdateUserListViewCriterion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserListViewCriterion':
          summary: 'Update User List View Criteria'
          description: 'Updates an existing user list view criteria; only elements
            specified in the request are updated.'
          entityName: 'UserListViewCriterion'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserListViewCriterion':
          summary: 'Upsert User List View Criteria'
          description: 'Upsert an existing user list view criteria only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserListViewCriterion'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserListViewCriterion'
      description: 'DeleteUserListViewCriterion'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserListViewCriterion':
          summary: 'Delete User List View Criteria'
          description: 'Delete an existing user list view criteria only elements specified
            in the request are deleted.'
          entityName: 'UserListViewCriterion'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserLogin/{Id}:
    patch:
      summary: 'Update UserLogin'
      description: 'UpdateUserLogin'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserLogin':
          summary: 'Update User Login'
          description: 'Updates an existing user login; only elements specified in
            the request are updated.'
          entityName: 'UserLogin'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserLogin':
          summary: 'Upsert User Login'
          description: 'Upsert an existing user login only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'UserLogin'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserLogin'
      description: 'DeleteUserLogin'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserLogin':
          summary: 'Delete User Login'
          description: 'Delete an existing user login only elements specified in the
            request are deleted.'
          entityName: 'UserLogin'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserPackageLicense/{Id}:
    patch:
      summary: 'Update UserPackageLicense'
      description: 'UpdateUserPackageLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserPackageLicense':
          summary: 'Update User Package License'
          description: 'Updates an existing user package license; only elements specified
            in the request are updated.'
          entityName: 'UserPackageLicense'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserPackageLicense':
          summary: 'Upsert User Package License'
          description: 'Upsert an existing user package license only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPackageLicense'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserPackageLicense'
      description: 'DeleteUserPackageLicense'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserPackageLicense':
          summary: 'Delete User Package License'
          description: 'Delete an existing user package license only elements specified
            in the request are deleted.'
          entityName: 'UserPackageLicense'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserPermissionAccess/{Id}:
    patch:
      summary: 'Update UserPermissionAccess'
      description: 'UpdateUserPermissionAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserPermissionAccess':
          summary: 'Update User Permission Access'
          description: 'Updates an existing user permission access; only elements
            specified in the request are updated.'
          entityName: 'UserPermissionAccess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserPermissionAccess':
          summary: 'Upsert User Permission Access'
          description: 'Upsert an existing user permission access only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPermissionAccess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserPermissionAccess'
      description: 'DeleteUserPermissionAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserPermissionAccess':
          summary: 'Delete User Permission Access'
          description: 'Delete an existing user permission access only elements specified
            in the request are deleted.'
          entityName: 'UserPermissionAccess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserPreference/{Id}:
    patch:
      summary: 'Update UserPreference'
      description: 'UpdateUserPreference'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserPreference':
          summary: 'Update User Preference'
          description: 'Updates an existing user preference; only elements specified
            in the request are updated.'
          entityName: 'UserPreference'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserPreference':
          summary: 'Upsert User Preference'
          description: 'Upsert an existing user preference only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPreference'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserPreference'
      description: 'DeleteUserPreference'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserPreference':
          summary: 'Delete User Preference'
          description: 'Delete an existing user preference only elements specified
            in the request are deleted.'
          entityName: 'UserPreference'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvAccount/{Id}:
    patch:
      summary: 'Update UserProvAccount'
      description: 'UpdateUserProvAccount'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvAccount':
          summary: 'Update User Provisioning Account'
          description: 'Updates an existing user provisioning account; only elements
            specified in the request are updated.'
          entityName: 'UserProvAccount'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvAccount':
          summary: 'Upsert User Provisioning Account'
          description: 'Upsert an existing user provisioning account only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvAccount'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvAccount'
      description: 'DeleteUserProvAccount'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvAccount':
          summary: 'Delete User Provisioning Account'
          description: 'Delete an existing user provisioning account only elements
            specified in the request are deleted.'
          entityName: 'UserProvAccount'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvAccountStaging/{Id}:
    patch:
      summary: 'Update UserProvAccountStaging'
      description: 'UpdateUserProvAccountStaging'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvAccountStaging':
          summary: 'Update User Provisioning Account Staging'
          description: 'Updates an existing user provisioning account staging; only
            elements specified in the request are updated.'
          entityName: 'UserProvAccountStaging'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvAccountStaging':
          summary: 'Upsert User Provisioning Account Staging'
          description: 'Upsert an existing user provisioning account staging only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvAccountStaging'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvAccountStaging'
      description: 'DeleteUserProvAccountStaging'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvAccountStaging':
          summary: 'Delete User Provisioning Account Staging'
          description: 'Delete an existing user provisioning account staging only
            elements specified in the request are deleted.'
          entityName: 'UserProvAccountStaging'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvMockTarget/{Id}:
    patch:
      summary: 'Update UserProvMockTarget'
      description: 'UpdateUserProvMockTarget'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvMockTarget':
          summary: 'Update User Provisioning Mock Target'
          description: 'Updates an existing user provisioning mock target; only elements
            specified in the request are updated.'
          entityName: 'UserProvMockTarget'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvMockTarget':
          summary: 'Upsert User Provisioning Mock Target'
          description: 'Upsert an existing user provisioning mock target only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvMockTarget'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvMockTarget'
      description: 'DeleteUserProvMockTarget'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvMockTarget':
          summary: 'Delete User Provisioning Mock Target'
          description: 'Delete an existing user provisioning mock target only elements
            specified in the request are deleted.'
          entityName: 'UserProvMockTarget'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningConfig/{Id}:
    patch:
      summary: 'Update UserProvisioningConfig'
      description: 'UpdateUserProvisioningConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvisioningConfig':
          summary: 'Update User Provisioning Config'
          description: 'Updates an existing user provisioning config; only elements
            specified in the request are updated.'
          entityName: 'UserProvisioningConfig'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningConfig':
          summary: 'Upsert User Provisioning Config'
          description: 'Upsert an existing user provisioning config only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvisioningConfig'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvisioningConfig'
      description: 'DeleteUserProvisioningConfig'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvisioningConfig':
          summary: 'Delete User Provisioning Config'
          description: 'Delete an existing user provisioning config only elements
            specified in the request are deleted.'
          entityName: 'UserProvisioningConfig'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningLog/{Id}:
    patch:
      summary: 'Update UserProvisioningLog'
      description: 'UpdateUserProvisioningLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvisioningLog':
          summary: 'Update User Provisioning Log'
          description: 'Updates an existing user provisioning log; only elements specified
            in the request are updated.'
          entityName: 'UserProvisioningLog'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningLog':
          summary: 'Upsert User Provisioning Log'
          description: 'Upsert an existing user provisioning log only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvisioningLog'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvisioningLog'
      description: 'DeleteUserProvisioningLog'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvisioningLog':
          summary: 'Delete User Provisioning Log'
          description: 'Delete an existing user provisioning log only elements specified
            in the request are deleted.'
          entityName: 'UserProvisioningLog'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningRequest/{Id}:
    patch:
      summary: 'Update UserProvisioningRequest'
      description: 'UpdateUserProvisioningRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvisioningRequest':
          summary: 'Update User Provisioning Request'
          description: 'Updates an existing user provisioning request; only elements
            specified in the request are updated.'
          entityName: 'UserProvisioningRequest'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningRequest':
          summary: 'Upsert User Provisioning Request'
          description: 'Upsert an existing user provisioning request only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvisioningRequest'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvisioningRequest'
      description: 'DeleteUserProvisioningRequest'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvisioningRequest':
          summary: 'Delete User Provisioning Request'
          description: 'Delete an existing user provisioning request only elements
            specified in the request are deleted.'
          entityName: 'UserProvisioningRequest'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserProvisioningRequestShare/{Id}:
    patch:
      summary: 'Update UserProvisioningRequestShare'
      description: 'UpdateUserProvisioningRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserProvisioningRequestShare':
          summary: 'Update User Provisioning Request Share'
          description: 'Updates an existing user provisioning request share; only
            elements specified in the request are updated.'
          entityName: 'UserProvisioningRequestShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningRequestShare':
          summary: 'Upsert User Provisioning Request Share'
          description: 'Upsert an existing user provisioning request share only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvisioningRequestShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserProvisioningRequestShare'
      description: 'DeleteUserProvisioningRequestShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserProvisioningRequestShare':
          summary: 'Delete User Provisioning Request Share'
          description: 'Delete an existing user provisioning request share only elements
            specified in the request are deleted.'
          entityName: 'UserProvisioningRequestShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserRecordAccess/{Id}:
    patch:
      summary: 'Update UserRecordAccess'
      description: 'UpdateUserRecordAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserRecordAccess':
          summary: 'Update User Record Access'
          description: 'Updates an existing user record access; only elements specified
            in the request are updated.'
          entityName: 'UserRecordAccess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserRecordAccess':
          summary: 'Upsert User Record Access'
          description: 'Upsert an existing user record access only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserRecordAccess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserRecordAccess'
      description: 'DeleteUserRecordAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserRecordAccess':
          summary: 'Delete User Record Access'
          description: 'Delete an existing user record access only elements specified
            in the request are deleted.'
          entityName: 'UserRecordAccess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserRole/{Id}:
    patch:
      summary: 'Update UserRole'
      description: 'UpdateUserRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserRole':
          summary: 'Update Role'
          description: 'Updates an existing role; only elements specified in the request
            are updated.'
          entityName: 'UserRole'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserRole':
          summary: 'Upsert Role'
          description: 'Upsert an existing role only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'UserRole'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserRole'
      description: 'DeleteUserRole'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserRole':
          summary: 'Delete Role'
          description: 'Delete an existing role only elements specified in the request
            are deleted.'
          entityName: 'UserRole'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserSetupEntityAccess/{Id}:
    patch:
      summary: 'Update UserSetupEntityAccess'
      description: 'UpdateUserSetupEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserSetupEntityAccess':
          summary: 'Update User Setup Entity Access'
          description: 'Updates an existing user setup entity access; only elements
            specified in the request are updated.'
          entityName: 'UserSetupEntityAccess'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserSetupEntityAccess':
          summary: 'Upsert User Setup Entity Access'
          description: 'Upsert an existing user setup entity access only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserSetupEntityAccess'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserSetupEntityAccess'
      description: 'DeleteUserSetupEntityAccess'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserSetupEntityAccess':
          summary: 'Delete User Setup Entity Access'
          description: 'Delete an existing user setup entity access only elements
            specified in the request are deleted.'
          entityName: 'UserSetupEntityAccess'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/UserShare/{Id}:
    patch:
      summary: 'Update UserShare'
      description: 'UpdateUserShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateUserShare':
          summary: 'Update User Share'
          description: 'Updates an existing user share; only elements specified in
            the request are updated.'
          entityName: 'UserShare'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserShare':
          summary: 'Upsert User Share'
          description: 'Upsert an existing user share only elements specified in the
            request are updated. Missing elements are set to NULL.'
          entityName: 'UserShare'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete UserShare'
      description: 'DeleteUserShare'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteUserShare':
          summary: 'Delete User Share'
          description: 'Delete an existing user share only elements specified in the
            request are deleted.'
          entityName: 'UserShare'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/VerificationHistory/{Id}:
    patch:
      summary: 'Update VerificationHistory'
      description: 'UpdateVerificationHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateVerificationHistory':
          summary: 'Update Identity Verification History'
          description: 'Updates an existing identity verification history; only elements
            specified in the request are updated.'
          entityName: 'VerificationHistory'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertVerificationHistory':
          summary: 'Upsert Identity Verification History'
          description: 'Upsert an existing identity verification history only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'VerificationHistory'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete VerificationHistory'
      description: 'DeleteVerificationHistory'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteVerificationHistory':
          summary: 'Delete Identity Verification History'
          description: 'Delete an existing identity verification history only elements
            specified in the request are deleted.'
          entityName: 'VerificationHistory'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/VisualforceAccessMetrics/{Id}:
    patch:
      summary: 'Update VisualforceAccessMetrics'
      description: 'UpdateVisualforceAccessMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateVisualforceAccessMetrics':
          summary: 'Update Visualforce Access Metric'
          description: 'Updates an existing visualforce access metric; only elements
            specified in the request are updated.'
          entityName: 'VisualforceAccessMetrics'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertVisualforceAccessMetrics':
          summary: 'Upsert Visualforce Access Metric'
          description: 'Upsert an existing visualforce access metric only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'VisualforceAccessMetrics'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete VisualforceAccessMetrics'
      description: 'DeleteVisualforceAccessMetrics'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteVisualforceAccessMetrics':
          summary: 'Delete Visualforce Access Metric'
          description: 'Delete an existing visualforce access metric only elements
            specified in the request are deleted.'
          entityName: 'VisualforceAccessMetrics'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/Vote/{Id}:
    patch:
      summary: 'Update Vote'
      description: 'UpdateVote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateVote':
          summary: 'Update Vote'
          description: 'Updates an existing vote; only elements specified in the request
            are updated.'
          entityName: 'Vote'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertVote':
          summary: 'Upsert Vote'
          description: 'Upsert an existing vote only elements specified in the request
            are updated. Missing elements are set to NULL.'
          entityName: 'Vote'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete Vote'
      description: 'DeleteVote'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteVote':
          summary: 'Delete Vote'
          description: 'Delete an existing vote only elements specified in the request
            are deleted.'
          entityName: 'Vote'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/WebLink/{Id}:
    patch:
      summary: 'Update WebLink'
      description: 'UpdateWebLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'UpdateWebLink':
          summary: 'Update Custom Button or Link'
          description: 'Updates an existing custom button or link; only elements specified
            in the request are updated.'
          entityName: 'WebLink'
          operation: 'update'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertWebLink':
          summary: 'Upsert Custom Button or Link'
          description: 'Upsert an existing custom button or link only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'WebLink'
          operation: 'upsert'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
    delete:
      summary: 'Delete WebLink'
      description: 'DeleteWebLink'
      externalDocs:
        url: 'https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm'
        x-adeptia-help:
          text: 'Help'
      x-adeptia-action:
        'DeleteWebLink':
          summary: 'Delete Custom Button or Link'
          description: 'Delete an existing custom button or link only elements specified
            in the request are deleted.'
          entityName: 'WebLink'
          operation: 'delete'
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        '200':
          description: 'Denotes a successful response.'
  #/services/data/v58.0/sobjects/Contact:
    #post:
      #summary: 'Create Contact'
      #operationId: 'CreateContact'
      #x-adeptia-action:
        #'CreateContact':
          #summary: 'Create Contact'
          #description: 'Create a new Contact.'
          #entityName: 'Contact'
          #operation: create
          #schema:
           # dynamic-schema:
             # operationId: GetObjectSchema
      #responses:
        #'200':
          #description: 'Denotes a successful response.'
  /services/data/v58.0/composite/batch:
    post:
      summary: 'Batch Operations'
      description: 'Create Batch Operations'
      x-adeptia-action:
        'CreateAcceptedEventRelationInBatch':
          summary: 'Create Accepted Event Relation'
          description: 'Create a new accepted event relation in Batch'
          entityName: 'AcceptedEventRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAcceptedEventRelationInBatch':
          summary: 'Update Accepted Event Relation'
          description: 'Updates an existing accepted event relation in batch; only
            elements specified in the request are updated.'
          entityName: 'AcceptedEventRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAcceptedEventRelationInBatch':
          summary: 'Upsert Accepted Event Relation'
          description: 'Upsert an existing accepted event relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AcceptedEventRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAcceptedEventRelationInBatch':
          summary: 'Delete Accepted Event Relation'
          description: 'Delete an existing accepted event relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AcceptedEventRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountInBatch':
          summary: 'Create Account'
          description: 'Create a new account in Batch'
          entityName: 'Account'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountInBatch':
          summary: 'Update Account'
          description: 'Updates an existing account in batch; only elements specified
            in the request are updated.'
          entityName: 'Account'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountInBatch':
          summary: 'Upsert Account'
          description: 'Upsert an existing account in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Account'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountInBatch':
          summary: 'Delete Account'
          description: 'Delete an existing account in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Account'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountChangeEventInBatch':
          summary: 'Create Account Change Event'
          description: 'Create a new account change event in Batch'
          entityName: 'AccountChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountChangeEventInBatch':
          summary: 'Update Account Change Event'
          description: 'Updates an existing account change event in batch; only elements
            specified in the request are updated.'
          entityName: 'AccountChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountChangeEventInBatch':
          summary: 'Upsert Account Change Event'
          description: 'Upsert an existing account change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountChangeEventInBatch':
          summary: 'Delete Account Change Event'
          description: 'Delete an existing account change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountContactRoleInBatch':
          summary: 'Create Account Contact Role'
          description: 'Create a new account contact role in Batch'
          entityName: 'AccountContactRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountContactRoleInBatch':
          summary: 'Update Account Contact Role'
          description: 'Updates an existing account contact role in batch; only elements
            specified in the request are updated.'
          entityName: 'AccountContactRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountContactRoleInBatch':
          summary: 'Upsert Account Contact Role'
          description: 'Upsert an existing account contact role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountContactRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountContactRoleInBatch':
          summary: 'Delete Account Contact Role'
          description: 'Delete an existing account contact role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountContactRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountContactRoleChangeEventInBatch':
          summary: 'Create Account Contact Role Change Event'
          description: 'Create a new account contact role change event in Batch'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountContactRoleChangeEventInBatch':
          summary: 'Update Account Contact Role Change Event'
          description: 'Updates an existing account contact role change event in batch;
            only elements specified in the request are updated.'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountContactRoleChangeEventInBatch':
          summary: 'Upsert Account Contact Role Change Event'
          description: 'Upsert an existing account contact role change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountContactRoleChangeEventInBatch':
          summary: 'Delete Account Contact Role Change Event'
          description: 'Delete an existing account contact role change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AccountContactRoleChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountHistoryInBatch':
          summary: 'Create Account History'
          description: 'Create a new account history in Batch'
          entityName: 'AccountHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountHistoryInBatch':
          summary: 'Update Account History'
          description: 'Updates an existing account history in batch; only elements
            specified in the request are updated.'
          entityName: 'AccountHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountHistoryInBatch':
          summary: 'Upsert Account History'
          description: 'Upsert an existing account history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountHistoryInBatch':
          summary: 'Delete Account History'
          description: 'Delete an existing account history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountPartnerInBatch':
          summary: 'Create Account Partner'
          description: 'Create a new account partner in Batch'
          entityName: 'AccountPartner'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountPartnerInBatch':
          summary: 'Update Account Partner'
          description: 'Updates an existing account partner in batch; only elements
            specified in the request are updated.'
          entityName: 'AccountPartner'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountPartnerInBatch':
          summary: 'Upsert Account Partner'
          description: 'Upsert an existing account partner in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountPartner'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountPartnerInBatch':
          summary: 'Delete Account Partner'
          description: 'Delete an existing account partner in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountPartner'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAccountShareInBatch':
          summary: 'Create Account Share'
          description: 'Create a new account share in Batch'
          entityName: 'AccountShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAccountShareInBatch':
          summary: 'Update Account Share'
          description: 'Updates an existing account share in batch; only elements
            specified in the request are updated.'
          entityName: 'AccountShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAccountShareInBatch':
          summary: 'Upsert Account Share'
          description: 'Upsert an existing account share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAccountShareInBatch':
          summary: 'Delete Account Share'
          description: 'Delete an existing account share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AccountShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActionLinkGroupTemplateInBatch':
          summary: 'Create Action Link Group Template'
          description: 'Create a new action link group template in batch'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActionLinkGroupTemplateInBatch':
          summary: 'Update Action Link Group Template'
          description: 'Updates an existing action link group template in batch; only
            elements specified in the request are updated.'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActionLinkGroupTemplateInBatch':
          summary: 'Upsert Action Link Group Template'
          description: 'Upsert an existing action link group template in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActionLinkGroupTemplateInBatch':
          summary: 'Delete Action Link Group Template'
          description: 'Delete an existing action link group template in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ActionLinkGroupTemplate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActionLinkTemplateInBatch':
          summary: 'Create Action Link Template'
          description: 'Create a new action link template in Batch'
          entityName: 'ActionLinkTemplate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActionLinkTemplateInBatch':
          summary: 'Update Action Link Template'
          description: 'Updates an existing action link template in batch; only elements
            specified in the request are updated.'
          entityName: 'ActionLinkTemplate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActionLinkTemplateInBatch':
          summary: 'Upsert Action Link Template'
          description: 'Upsert an existing action link template in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActionLinkTemplate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActionLinkTemplateInBatch':
          summary: 'Delete Action Link Template'
          description: 'Delete an existing action link template in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActionLinkTemplate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActiveFeatureLicenseMetricInBatch':
          summary: 'Create Active Feature License Metric'
          description: 'Create a new active feature license metric in Batch'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActiveFeatureLicenseMetricInBatch':
          summary: 'Update Active Feature License Metric'
          description: 'Updates an existing active feature license metric in batch;
            only elements specified in the request are updated.'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActiveFeatureLicenseMetricInBatch':
          summary: 'Upsert Active Feature License Metric'
          description: 'Upsert an existing active feature license metric in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActiveFeatureLicenseMetricInBatch':
          summary: 'Delete Active Feature License Metric'
          description: 'Delete an existing active feature license metric in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ActiveFeatureLicenseMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActivePermSetLicenseMetricInBatch':
          summary: 'Create Active Permission Set License Metric'
          description: 'Create a new active permission set license metric in Batch'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActivePermSetLicenseMetricInBatch':
          summary: 'Update Active Permission Set License Metric'
          description: 'Updates an existing active permission set license metric in
            batch; only elements specified in the request are updated.'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActivePermSetLicenseMetricInBatch':
          summary: 'Upsert Active Permission Set License Metric'
          description: 'Upsert an existing active permission set license metric in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActivePermSetLicenseMetricInBatch':
          summary: 'Delete Active Permission Set License Metric'
          description: 'Delete an existing active permission set license metric in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ActivePermSetLicenseMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActiveProfileMetricInBatch':
          summary: 'Create Active Profile Metric'
          description: 'Create a new active profile metric in Batch'
          entityName: 'ActiveProfileMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActiveProfileMetricInBatch':
          summary: 'Update Active Profile Metric'
          description: 'Updates an existing active profile metric in batch; only elements
            specified in the request are updated.'
          entityName: 'ActiveProfileMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActiveProfileMetricInBatch':
          summary: 'Upsert Active Profile Metric'
          description: 'Upsert an existing active profile metric in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActiveProfileMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActiveProfileMetricInBatch':
          summary: 'Delete Active Profile Metric'
          description: 'Delete an existing active profile metric in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActiveProfileMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActivityFieldHistoryInBatch':
          summary: 'Create Activity Field History'
          description: 'Create a new activity field history in Batch'
          entityName: 'ActivityFieldHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActivityFieldHistoryInBatch':
          summary: 'Update Activity Field History'
          description: 'Updates an existing activity field history in batch; only
            elements specified in the request are updated.'
          entityName: 'ActivityFieldHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActivityFieldHistoryInBatch':
          summary: 'Upsert Activity Field History'
          description: 'Upsert an existing activity field history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActivityFieldHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActivityFieldHistoryInBatch':
          summary: 'Delete Activity Field History'
          description: 'Delete an existing activity field history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActivityFieldHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateActivityHistoryInBatch':
          summary: 'Create Activity History'
          description: 'Create a new activity history in Batch'
          entityName: 'ActivityHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateActivityHistoryInBatch':
          summary: 'Update Activity History'
          description: 'Updates an existing activity history in batch; only elements
            specified in the request are updated.'
          entityName: 'ActivityHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertActivityHistoryInBatch':
          summary: 'Upsert Activity History'
          description: 'Upsert an existing activity history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActivityHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteActivityHistoryInBatch':
          summary: 'Delete Activity History'
          description: 'Delete an existing activity history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ActivityHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAdditionalNumberInBatch':
          summary: 'Create Additional Directory Number'
          description: 'Create a new additional directory number in Batch'
          entityName: 'AdditionalNumber'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAdditionalNumberInBatch':
          summary: 'Update Additional Directory Number'
          description: 'Updates an existing additional directory number in batch;
            only elements specified in the request are updated.'
          entityName: 'AdditionalNumber'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAdditionalNumberInBatch':
          summary: 'Upsert Additional Directory Number'
          description: 'Upsert an existing additional directory number in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AdditionalNumber'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAdditionalNumberInBatch':
          summary: 'Delete Additional Directory Number'
          description: 'Delete an existing additional directory number in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AdditionalNumber'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAggregateResultInBatch':
          summary: 'Create Aggregate Result'
          description: 'Create a new aggregate result in Batch'
          entityName: 'AggregateResult'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAggregateResultInBatch':
          summary: 'Update Aggregate Result'
          description: 'Updates an existing aggregate result in batch only elements
            specified in the request are updated.'
          entityName: 'AggregateResult'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAggregateResultInBatch':
          summary: 'Upsert Aggregate Result'
          description: 'Upsert an existing aggregate result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AggregateResult'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAggregateResultInBatch':
          summary: 'Delete Aggregate Result'
          description: 'Delete an existing aggregate result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AggregateResult'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAnshu__ChangeEventInBatch':
          summary: 'Create Change Event: Anshu Label'
          description: 'Create a new change event: anshu label in Batch'
          entityName: 'Anshu__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAnshu__ChangeEventInBatch':
          summary: 'Update Change Event: Anshu Label'
          description: 'Updates an existing change event: anshu label in batch; only
            elements specified in the request are updated.'
          entityName: 'Anshu__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAnshu__ChangeEventInBatch':
          summary: 'Upsert Change Event: Anshu Label'
          description: 'Upsert an existing change event: anshu label in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'Anshu__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAnshu__ChangeEventInBatch':
          summary: 'Delete Change Event: Anshu Label'
          description: 'Delete an existing change event: anshu label in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'Anshu__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAnshu__cInBatch':
          summary: 'Create Anshu Label'
          description: 'Create a new anshu label in Batch'
          entityName: 'Anshu__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAnshu__cInBatch':
          summary: 'Update Anshu Label'
          description: 'Updates an existing anshu label in batch; only elements specified
            in the request are updated.'
          entityName: 'Anshu__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAnshu__cInBatch':
          summary: 'Upsert Anshu Label'
          description: 'Upsert an existing anshu label in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Anshu__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAnshu__cInBatch':
          summary: 'Delete Anshu Label'
          description: 'Delete an existing anshu label in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Anshu__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexClassInBatch':
          summary: 'Create Apex Class'
          description: 'Create a new apex class in Batch'
          entityName: 'ApexClass'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexClassInBatch':
          summary: 'Update Apex Class'
          description: 'Updates an existing apex class in batch; only elements specified
            in the request are updated.'
          entityName: 'ApexClass'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexClassInBatch':
          summary: 'Upsert Apex Class'
          description: 'Upsert an existing apex class in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexClass'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexClassInBatch':
          summary: 'Delete Apex Class'
          description: 'Delete an existing apex class in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexClass'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexComponentInBatch':
          summary: 'Create Visualforce Component'
          description: 'Create a new visualforce component in Batch'
          entityName: 'ApexComponent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexComponentInBatch':
          summary: 'Update Visualforce Component'
          description: 'Updates an existing visualforce component in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexComponent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexComponentInBatch':
          summary: 'Upsert Visualforce Component'
          description: 'Upsert an existing visualforce component in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexComponent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexComponentInBatch':
          summary: 'Delete Visualforce Component'
          description: 'Delete an existing visualforce component in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexComponent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexEmailNotificationInBatch':
          summary: 'Create Apex Email Notification'
          description: 'Create a new apex email notification in Batch'
          entityName: 'ApexEmailNotification'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexEmailNotificationInBatch':
          summary: 'Update Apex Email Notification'
          description: 'Updates an existing apex email notification in batch; only
            elements specified in the request are updated.'
          entityName: 'ApexEmailNotification'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexEmailNotificationInBatch':
          summary: 'Upsert Apex Email Notification'
          description: 'Upsert an existing apex email notification in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexEmailNotification'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexEmailNotificationInBatch':
          summary: 'Delete Apex Email Notification'
          description: 'Delete an existing apex email notification in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexEmailNotification'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexLogInBatch':
          summary: 'Create Apex Debug Log'
          description: 'Create a new apex debug log in Batch'
          entityName: 'ApexLog'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexLogInBatch':
          summary: 'Update Apex Debug Log'
          description: 'Updates an existing apex debug log in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexLog'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexLogInBatch':
          summary: 'Upsert Apex Debug Log'
          description: 'Upsert an existing apex debug log in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexLog'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexLogInBatch':
          summary: 'Delete Apex Debug Log'
          description: 'Delete an existing apex debug log in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexLog'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexPageInBatch':
          summary: 'Create Visualforce Page'
          description: 'Create a new visualforce page in Batch'
          entityName: 'ApexPage'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexPageInBatch':
          summary: 'Update Visualforce Page'
          description: 'Updates an existing visualforce page in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexPage'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexPageInBatch':
          summary: 'Upsert Visualforce Page'
          description: 'Upsert an existing visualforce page in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexPage'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexPageInBatch':
          summary: 'Delete Visualforce Page'
          description: 'Delete an existing visualforce page in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexPage'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexPageInfoInBatch':
          summary: 'Create Apex Page Info'
          description: 'Create a new apex page info in Batch'
          entityName: 'ApexPageInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexPageInfoInBatch':
          summary: 'Update Apex Page Info'
          description: 'Updates an existing apex page info in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexPageInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexPageInfoInBatch':
          summary: 'Upsert Apex Page Info'
          description: 'Upsert an existing apex page info in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexPageInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexPageInfoInBatch':
          summary: 'Delete Apex Page Info'
          description: 'Delete an existing apex page info in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexPageInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTestQueueItemInBatch':
          summary: 'Create Apex Test Queue Item'
          description: 'Create a new apex test queue item in Batch'
          entityName: 'ApexTestQueueItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTestQueueItemInBatch':
          summary: 'Update Apex Test Queue Item'
          description: 'Updates an existing apex test queue item in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexTestQueueItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestQueueItemInBatch':
          summary: 'Upsert Apex Test Queue Item'
          description: 'Upsert an existing apex test queue item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestQueueItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTestQueueItemInBatch':
          summary: 'Delete Apex Test Queue Item'
          description: 'Delete an existing apex test queue item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestQueueItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTestResultInBatch':
          summary: 'Create Apex Test Result'
          description: 'Create a new apex test result in Batch'
          entityName: 'ApexTestResult'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTestResultInBatch':
          summary: 'Update Apex Test Result'
          description: 'Updates an existing apex test result in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexTestResult'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestResultInBatch':
          summary: 'Upsert Apex Test Result'
          description: 'Upsert an existing apex test result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestResult'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTestResultInBatch':
          summary: 'Delete Apex Test Result'
          description: 'Delete an existing apex test result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestResult'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTestResultLimitsInBatch':
          summary: 'Create Apex Test Result Limit'
          description: 'Create a new apex test result limit in Batch'
          entityName: 'ApexTestResultLimits'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTestResultLimitsInBatch':
          summary: 'Update Apex Test Result Limit'
          description: 'Updates an existing apex test result limit in batch; only
            elements specified in the request are updated.'
          entityName: 'ApexTestResultLimits'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestResultLimitsInBatch':
          summary: 'Upsert Apex Test Result Limit'
          description: 'Upsert an existing apex test result limit in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestResultLimits'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTestResultLimitsInBatch':
          summary: 'Delete Apex Test Result Limit'
          description: 'Delete an existing apex test result limit in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestResultLimits'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTestRunResultInBatch':
          summary: 'Create Apex Test Run Result'
          description: 'Create a new apex test run result in Batch'
          entityName: 'ApexTestRunResult'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTestRunResultInBatch':
          summary: 'Update Apex Test Run Result'
          description: 'Updates an existing apex test run result in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexTestRunResult'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestRunResultInBatch':
          summary: 'Upsert Apex Test Run Result'
          description: 'Upsert an existing apex test run result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestRunResult'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTestRunResultInBatch':
          summary: 'Delete Apex Test Run Result'
          description: 'Delete an existing apex test run result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestRunResult'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTestSuiteInBatch':
          summary: 'Create Apex Test Suite'
          description: 'Create a new apex test suite in batch'
          entityName: 'ApexTestSuite'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTestSuiteInBatch':
          summary: 'Update Apex Test Suite'
          description: 'Updates an existing apex test suite in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexTestSuite'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTestSuiteInBatch':
          summary: 'Upsert Apex Test Suite'
          description: 'Upsert an existing apex test suite in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestSuite'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTestSuiteInBatch':
          summary: 'Delete Apex Test Suite'
          description: 'Delete an existing apex test suite in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTestSuite'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTriggerInBatch':
          summary: 'Create Apex Trigger'
          description: 'Create a new apex trigger in Batch'
          entityName: 'ApexTrigger'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTriggerInBatch':
          summary: 'Update Apex Trigger'
          description: 'Updates an existing apex trigger in batch; only elements specified
            in the request are updated.'
          entityName: 'ApexTrigger'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTriggerInBatch':
          summary: 'Upsert Apex Trigger'
          description: 'Upsert an existing apex trigger in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTrigger'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTriggerInBatch':
          summary: 'Delete Apex Trigger'
          description: 'Delete an existing apex trigger in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTrigger'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApexTypeImplementorInBatch':
          summary: 'Create Apex Type Implementor'
          description: 'Create a new apex type implementor in Batch'
          entityName: 'ApexTypeImplementor'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApexTypeImplementorInBatch':
          summary: 'Update Apex Type Implementor'
          description: 'Updates an existing apex type implementor in batch; only elements
            specified in the request are updated.'
          entityName: 'ApexTypeImplementor'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApexTypeImplementorInBatch':
          summary: 'Upsert Apex Type Implementor'
          description: 'Upsert an existing apex type implementor in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTypeImplementor'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApexTypeImplementorInBatch':
          summary: 'Delete Apex Type Implementor'
          description: 'Delete an existing apex type implementor in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApexTypeImplementor'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApiAnomalyEventInBatch':
          summary: 'Create API Anomaly Event'
          description: 'Create a new api anomaly event in Batch'
          entityName: 'ApiAnomalyEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApiAnomalyEventInBatch':
          summary: 'Update API Anomaly Event'
          description: 'Updates an existing api anomaly event in batch; only elements
            specified in the request are updated.'
          entityName: 'ApiAnomalyEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiAnomalyEventInBatch':
          summary: 'Upsert API Anomaly Event'
          description: 'Upsert an existing api anomaly event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiAnomalyEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApiAnomalyEventInBatch':
          summary: 'Delete API Anomaly Event'
          description: 'Delete an existing api anomaly event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiAnomalyEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApiAnomalyEventStoreInBatch':
          summary: 'Create API Anomaly Event Store'
          description: 'Create a new api anomaly event store in Batch'
          entityName: 'ApiAnomalyEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApiAnomalyEventStoreInBatch':
          summary: 'Update API Anomaly Event Store'
          description: 'Updates an existing api anomaly event store in batch; only
            elements specified in the request are updated.'
          entityName: 'ApiAnomalyEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiAnomalyEventStoreInBatch':
          summary: 'Upsert API Anomaly Event Store'
          description: 'Upsert an existing api anomaly event store in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiAnomalyEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApiAnomalyEventStoreInBatch':
          summary: 'Delete API Anomaly Event Store'
          description: 'Delete an existing api anomaly event store in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiAnomalyEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApiEventInBatch':
          summary: 'Create API Event'
          description: 'Create a new api event in Batch'
          entityName: 'ApiEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApiEventInBatch':
          summary: 'Update API Event'
          description: 'Updates an existing api event in batch; only elements specified
            in the request are updated.'
          entityName: 'ApiEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiEventInBatch':
          summary: 'Upsert API Event'
          description: 'Upsert an existing api event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApiEventInBatch':
          summary: 'Delete API Event'
          description: 'Delete an existing api event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApiEventStreamInBatch':
          summary: 'Create API Event Stream'
          description: 'Create a new api event stream in Batch'
          entityName: 'ApiEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApiEventStreamInBatch':
          summary: 'Update API Event Stream'
          description: 'Updates an existing api event stream in batch; only elements
            specified in the request are updated.'
          entityName: 'ApiEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApiEventStreamInBatch':
          summary: 'Upsert API Event Stream'
          description: 'Upsert an existing api event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApiEventStreamInBatch':
          summary: 'Delete API Event Stream'
          description: 'Delete an existing api event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ApiEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAppAnalyticsQueryRequestInBatch':
          summary: 'Create App Analytics Query Request'
          description: 'Create a new app analytics query request in Batch'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAppAnalyticsQueryRequestInBatch':
          summary: 'Update App Analytics Query Request'
          description: 'Updates an existing app analytics query request in batch;
            only elements specified in the request are updated.'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppAnalyticsQueryRequestInBatch':
          summary: 'Upsert App Analytics Query Request'
          description: 'Upsert an existing app analytics query request in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAppAnalyticsQueryRequestInBatch':
          summary: 'Delete App Analytics Query Request'
          description: 'Delete an existing app analytics query request in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AppAnalyticsQueryRequest'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAppDefinitionInBatch':
          summary: 'Create App Definition'
          description: 'Create a new app definition in Batch'
          entityName: 'AppDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAppDefinitionInBatch':
          summary: 'Update App Definition'
          description: 'Updates an existing app definition in batch; only elements
            specified in the request are updated.'
          entityName: 'AppDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppDefinitionInBatch':
          summary: 'Upsert App Definition'
          description: 'Upsert an existing app definition in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAppDefinitionInBatch':
          summary: 'Delete App Definition'
          description: 'Delete an existing app definition in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAppMenuItemInBatch':
          summary: 'Create AppMenuItem'
          description: 'Create a new appmenuitem in Batch'
          entityName: 'AppMenuItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAppMenuItemInBatch':
          summary: 'Update AppMenuItem'
          description: 'Updates an existing appmenuitem in batch; only elements specified
            in the request are updated.'
          entityName: 'AppMenuItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppMenuItemInBatch':
          summary: 'Upsert AppMenuItem'
          description: 'Upsert an existing appmenuitem in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppMenuItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAppMenuItemInBatch':
          summary: 'Delete AppMenuItem'
          description: 'Delete an existing appmenuitem in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppMenuItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAppTabMemberInBatch':
          summary: 'Create App Tab Member'
          description: 'Create a new app tab member in Batch'
          entityName: 'AppTabMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAppTabMemberInBatch':
          summary: 'Update App Tab Member'
          description: 'Updates an existing app tab member in batch; only elements
            specified in the request are updated.'
          entityName: 'AppTabMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAppTabMemberInBatch':
          summary: 'Upsert App Tab Member'
          description: 'Upsert an existing app tab member in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppTabMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAppTabMemberInBatch':
          summary: 'Delete App Tab Member'
          description: 'Delete an existing app tab member in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AppTabMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateApprovalInBatch':
          summary: 'Create Approval'
          description: 'Create a new approval in Batch'
          entityName: 'Approval'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateApprovalInBatch':
          summary: 'Update Approval'
          description: 'Updates an existing approval in batch; only elements specified
            in the request are updated.'
          entityName: 'Approval'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertApprovalInBatch':
          summary: 'Upsert Approval'
          description: 'Upsert an existing approval in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Approval'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteApprovalInBatch':
          summary: 'Delete Approval'
          description: 'Delete an existing approval in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Approval'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssetInBatch':
          summary: 'Create Asset'
          description: 'Create a new asset in Batch'
          entityName: 'Asset'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssetInBatch':
          summary: 'Update Asset'
          description: 'Updates an existing asset in batch; only elements specified
            in the request are updated.'
          entityName: 'Asset'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetInBatch':
          summary: 'Upsert Asset'
          description: 'Upsert an existing asset in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Asset'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssetInBatch':
          summary: 'Delete Asset'
          description: 'Delete an existing asset in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Asset'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssetChangeEventInBatch':
          summary: 'Create Asset Change Event'
          description: 'Create a new asset change event in Batch'
          entityName: 'AssetChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssetChangeEventInBatch':
          summary: 'Update Asset Change Event'
          description: 'Updates an existing asset change event in batch; only elements
            specified in the request are updated.'
          entityName: 'AssetChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetChangeEventInBatch':
          summary: 'Upsert Asset Change Event'
          description: 'Upsert an existing asset change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssetChangeEventInBatch':
          summary: 'Delete Asset Change Event'
          description: 'Delete an existing asset change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssetHistoryInBatch':
          summary: 'Create Asset History'
          description: 'Create a new asset history in Batch'
          entityName: 'AssetHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssetHistoryInBatch':
          summary: 'Update Asset History'
          description: 'Updates an existing asset history in batch; only elements
            specified in the request are updated.'
          entityName: 'AssetHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetHistoryInBatch':
          summary: 'Upsert Asset History'
          description: 'Upsert an existing asset history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssetHistoryInBatch':
          summary: 'Delete Asset History'
          description: 'Delete an existing asset history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssetRelationshipInBatch':
          summary: 'Create Asset Relationship'
          description: 'Create a new asset relationship in Batch'
          entityName: 'AssetRelationship'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssetRelationshipInBatch':
          summary: 'Update Asset Relationship'
          description: 'Updates an existing asset relationship in batch; only elements
            specified in the request are updated.'
          entityName: 'AssetRelationship'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetRelationshipInBatch':
          summary: 'Upsert Asset Relationship'
          description: 'Upsert an existing asset relationship in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetRelationship'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssetRelationshipInBatch':
          summary: 'Delete Asset Relationship'
          description: 'Delete an existing asset relationship in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetRelationship'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssetRelationshipHistoryInBatch':
          summary: 'Create Asset Relationship History'
          description: 'Create a new asset relationship history in Batch'
          entityName: 'AssetRelationshipHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssetRelationshipHistoryInBatch':
          summary: 'Update Asset Relationship History'
          description: 'Updates an existing asset relationship history in batch; only
            elements specified in the request are updated.'
          entityName: 'AssetRelationshipHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetRelationshipHistoryInBatch':
          summary: 'Upsert Asset Relationship History'
          description: 'Upsert an existing asset relationship history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AssetRelationshipHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssetRelationshipHistoryInBatch':
          summary: 'Delete Asset Relationship History'
          description: 'Delete an existing asset relationship history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AssetRelationshipHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssetTokenEventInBatch':
          summary: 'Create Asset Token Event'
          description: 'Create a new asset token event in Batch'
          entityName: 'AssetTokenEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssetTokenEventInBatch':
          summary: 'Update Asset Token Event'
          description: 'Updates an existing asset token event in batch; only elements
            specified in the request are updated.'
          entityName: 'AssetTokenEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssetTokenEventInBatch':
          summary: 'Upsert Asset Token Event'
          description: 'Upsert an existing asset token event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetTokenEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssetTokenEventInBatch':
          summary: 'Delete Asset Token Event'
          description: 'Delete an existing asset token event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssetTokenEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAssignmentRuleInBatch':
          summary: 'Create Assignment Rule'
          description: 'Create a new assignment rule in Batch'
          entityName: 'AssignmentRule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAssignmentRuleInBatch':
          summary: 'Update Assignment Rule'
          description: 'Updates an existing assignment rule in batch; only elements
            specified in the request are updated.'
          entityName: 'AssignmentRule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAssignmentRuleInBatch':
          summary: 'Upsert Assignment Rule'
          description: 'Upsert an existing assignment rule in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssignmentRule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAssignmentRuleInBatch':
          summary: 'Delete Assignment Rule'
          description: 'Delete an existing assignment rule in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AssignmentRule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAsyncApexJobInBatch':
          summary: 'Create Apex Job'
          description: 'Create a new apex job in Batch'
          entityName: 'AsyncApexJob'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAsyncApexJobInBatch':
          summary: 'Update Apex Job'
          description: 'Updates an existing apex job in batch; only elements specified
            in the request are updated.'
          entityName: 'AsyncApexJob'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsyncApexJobInBatch':
          summary: 'Upsert Apex Job'
          description: 'Upsert an existing apex job in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncApexJob'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAsyncApexJobInBatch':
          summary: 'Delete Apex Job'
          description: 'Delete an existing apex job in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncApexJob'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAsyncOperationEventInBatch':
          summary: 'Create Async Operation Event'
          description: 'Create a new async operation event in Batch'
          entityName: 'AsyncOperationEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAsyncOperationEventInBatch':
          summary: 'Update Async Operation Event'
          description: 'Updates an existing async operation event in batch; only elements
            specified in the request are updated.'
          entityName: 'AsyncOperationEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsyncOperationEventInBatch':
          summary: 'Upsert Async Operation Event'
          description: 'Upsert an existing async operation event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncOperationEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAsyncOperationEventInBatch':
          summary: 'Delete Async Operation Event'
          description: 'Delete an existing async operation event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncOperationEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAsyncOperationStatusInBatch':
          summary: 'Create Async Operation Status'
          description: 'Create a new async operation status in Batch'
          entityName: 'AsyncOperationStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAsyncOperationStatusInBatch':
          summary: 'Update Async Operation Status'
          description: 'Updates an existing async operation status in batch; only
            elements specified in the request are updated.'
          entityName: 'AsyncOperationStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAsyncOperationStatusInBatch':
          summary: 'Upsert Async Operation Status'
          description: 'Upsert an existing async operation status in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncOperationStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAsyncOperationStatusInBatch':
          summary: 'Delete Async Operation Status'
          description: 'Delete an existing async operation status in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AsyncOperationStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAttachedContentDocumentInBatch':
          summary: 'Create Attached Content Document'
          description: 'Create a new attached content document in Batch'
          entityName: 'AttachedContentDocument'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAttachedContentDocumentInBatch':
          summary: 'Update Attached Content Document'
          description: 'Updates an existing attached content document in batch; only
            elements specified in the request are updated.'
          entityName: 'AttachedContentDocument'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAttachedContentDocumentInBatch':
          summary: 'Upsert Attached Content Document'
          description: 'Upsert an existing attached content document in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AttachedContentDocument'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAttachedContentDocumentInBatch':
          summary: 'Delete Attached Content Document'
          description: 'Delete an existing attached content document in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AttachedContentDocument'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAttachedContentNoteInBatch':
          summary: 'Create Note'
          description: 'Create a new note in Batch'
          entityName: 'AttachedContentNote'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAttachedContentNoteInBatch':
          summary: 'Update Note'
          description: 'Updates an existing note in batch; only elements specified
            in the request are updated.'
          entityName: 'AttachedContentNote'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAttachedContentNoteInBatch':
          summary: 'Upsert Note'
          description: 'Upsert an existing note in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'AttachedContentNote'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAttachedContentNoteInBatch':
          summary: 'Delete Note'
          description: 'Delete an existing note in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'AttachedContentNote'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAttachmentInBatch':
          summary: 'Create Attachment'
          description: 'Create a new attachment in Batch'
          entityName: 'Attachment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAttachmentInBatch':
          summary: 'Update Attachment'
          description: 'Updates an existing attachment in batch; only elements specified
            in the request are updated.'
          entityName: 'Attachment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAttachmentInBatch':
          summary: 'Upsert Attachment'
          description: 'Upsert an existing attachment in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Attachment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAttachmentInBatch':
          summary: 'Delete Attachment'
          description: 'Delete an existing attachment in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Attachment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuraDefinitionInBatch':
          summary: 'Create Lightning Component Definition'
          description: 'Create a new lightning component definition in Batch'
          entityName: 'AuraDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuraDefinitionInBatch':
          summary: 'Update Lightning Component Definition'
          description: 'Updates an existing lightning component definition in batch;
            only elements specified in the request are updated.'
          entityName: 'AuraDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionInBatch':
          summary: 'Upsert Lightning Component Definition'
          description: 'Upsert an existing lightning component definition in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuraDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuraDefinitionInBatch':
          summary: 'Delete Lightning Component Definition'
          description: 'Delete an existing lightning component definition in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuraDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuraDefinitionBundleInBatch':
          summary: 'Create Aura Component Bundle'
          description: 'Create a new aura component bundle in batch'
          entityName: 'AuraDefinitionBundle'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuraDefinitionBundleInBatch':
          summary: 'Update Aura Component Bundle'
          description: 'Updates an existing aura component bundle in batch; only elements
            specified in the request are updated.'
          entityName: 'AuraDefinitionBundle'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionBundleInBatch':
          summary: 'Upsert Aura Component Bundle'
          description: 'Upsert an existing aura component bundle in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionBundle'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuraDefinitionBundleInBatch':
          summary: 'Delete Aura Component Bundle'
          description: 'Delete an existing aura component bundle in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionBundle'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuraDefinitionBundleInfoInBatch':
          summary: 'Create AuraDefinitionBundle Info'
          description: 'Create a new auradefinitionbundle info in Batch'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuraDefinitionBundleInfoInBatch':
          summary: 'Update AuraDefinitionBundle Info'
          description: 'Updates an existing auradefinitionbundle info in batch; only
            elements specified in the request are updated.'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionBundleInfoInBatch':
          summary: 'Upsert AuraDefinitionBundle Info'
          description: 'Upsert an existing auradefinitionbundle info in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuraDefinitionBundleInfoInBatch':
          summary: 'Delete AuraDefinitionBundle Info'
          description: 'Delete an existing auradefinitionbundle info in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuraDefinitionBundleInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuraDefinitionInfoInBatch':
          summary: 'Create AuraDefinition Info'
          description: 'Create a new auradefinition info in Batch'
          entityName: 'AuraDefinitionInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuraDefinitionInfoInBatch':
          summary: 'Update AuraDefinition Info'
          description: 'Updates an existing auradefinition info in batch; only elements
            specified in the request are updated.'
          entityName: 'AuraDefinitionInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuraDefinitionInfoInBatch':
          summary: 'Upsert AuraDefinition Info'
          description: 'Upsert an existing auradefinition info in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuraDefinitionInfoInBatch':
          summary: 'Delete AuraDefinition Info'
          description: 'Delete an existing auradefinition info in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuraDefinitionInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthConfigInBatch':
          summary: 'Create Authentication Configuration'
          description: 'Create a new authentication configuration in Batch'
          entityName: 'AuthConfig'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthConfigInBatch':
          summary: 'Update Authentication Configuration'
          description: 'Updates an existing authentication configuration in batch;
            only elements specified in the request are updated.'
          entityName: 'AuthConfig'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthConfigInBatch':
          summary: 'Upsert Authentication Configuration'
          description: 'Upsert an existing authentication configuration in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthConfig'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthConfigInBatch':
          summary: 'Delete Authentication Configuration'
          description: 'Delete an existing authentication configuration in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthConfig'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthConfigProvidersInBatch':
          summary: 'Create Authentication Configuration Auth. Provider'
          description: 'Create a new authentication configuration auth. provider in
            Batch'
          entityName: 'AuthConfigProviders'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthConfigProvidersInBatch':
          summary: 'Update Authentication Configuration Auth. Provider'
          description: 'Updates an existing authentication configuration auth. provider
            in batch; only elements specified in the request are updated.'
          entityName: 'AuthConfigProviders'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthConfigProvidersInBatch':
          summary: 'Upsert Authentication Configuration Auth. Provider'
          description: 'Upsert an existing authentication configuration auth. provider
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'AuthConfigProviders'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthConfigProvidersInBatch':
          summary: 'Delete Authentication Configuration Auth. Provider'
          description: 'Delete an existing authentication configuration auth. provider
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'AuthConfigProviders'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthProviderInBatch':
          summary: 'Create Auth. Provider'
          description: 'Create a new auth. provider in Batch'
          entityName: 'AuthProvider'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthProviderInBatch':
          summary: 'Update Auth. Provider'
          description: 'Updates an existing auth. provider in batch; only elements
            specified in the request are updated.'
          entityName: 'AuthProvider'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthProviderInBatch':
          summary: 'Upsert Auth. Provider'
          description: 'Upsert an existing auth. provider in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthProvider'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthProviderInBatch':
          summary: 'Delete Auth. Provider'
          description: 'Delete an existing auth. provider in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthProvider'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthSessionInBatch':
          summary: 'Create Auth Session'
          description: 'Create a new auth session in Batch'
          entityName: 'AuthSession'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthSessionInBatch':
          summary: 'Update Auth Session'
          description: 'Updates an existing auth session in batch; only elements specified
            in the request are updated.'
          entityName: 'AuthSession'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthSessionInBatch':
          summary: 'Upsert Auth Session'
          description: 'Upsert an existing auth session in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthSession'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthSessionInBatch':
          summary: 'Delete Auth Session'
          description: 'Delete an existing auth session in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthSession'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormInBatch':
          summary: 'Create Authorization Form'
          description: 'Create a new authorization form in Batch'
          entityName: 'AuthorizationForm'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormInBatch':
          summary: 'Update Authorization Form'
          description: 'Updates an existing authorization form in batch; only elements
            specified in the request are updated.'
          entityName: 'AuthorizationForm'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormInBatch':
          summary: 'Upsert Authorization Form'
          description: 'Upsert an existing authorization form in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationForm'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormInBatch':
          summary: 'Delete Authorization Form'
          description: 'Delete an existing authorization form in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationForm'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormConsentInBatch':
          summary: 'Create Authorization Form Consent'
          description: 'Create a new authorization form consent in batch'
          entityName: 'AuthorizationFormConsent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormConsentInBatch':
          summary: 'Update Authorization Form Consent'
          description: 'Updates an existing authorization form consent in batch; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentInBatch':
          summary: 'Upsert Authorization Form Consent'
          description: 'Upsert an existing authorization form consent in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormConsent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormConsentInBatch':
          summary: 'Delete Authorization Form Consent'
          description: 'Delete an existing authorization form consent in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormConsent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormConsentChangeEventInBatch':
          summary: 'Create Authorization Form Consent Change Event'
          description: 'Create a new authorization form consent change event in Batch'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormConsentChangeEventInBatch':
          summary: 'Update Authorization Form Consent Change Event'
          description: 'Updates an existing authorization form consent change event
            in batch; only elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentChangeEventInBatch':
          summary: 'Upsert Authorization Form Consent Change Event'
          description: 'Upsert an existing authorization form consent change event
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormConsentChangeEventInBatch':
          summary: 'Delete Authorization Form Consent Change Event'
          description: 'Delete an existing authorization form consent change event
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'AuthorizationFormConsentChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormConsentHistoryInBatch':
          summary: 'Create Authorization Form Consent History'
          description: 'Create a new authorization form consent history in Batch'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormConsentHistoryInBatch':
          summary: 'Update Authorization Form Consent History'
          description: 'Updates an existing authorization form consent history in
            batch; only elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentHistoryInBatch':
          summary: 'Upsert Authorization Form Consent History'
          description: 'Upsert an existing authorization form consent history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormConsentHistoryInBatch':
          summary: 'Delete Authorization Form Consent History'
          description: 'Delete an existing authorization form consent history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormConsentHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormConsentShareInBatch':
          summary: 'Create Authorization Form Consent Share'
          description: 'Create a new authorization form consent share in Batch'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormConsentShareInBatch':
          summary: 'Update Authorization Form Consent Share'
          description: 'Updates an existing authorization form consent share in batch;
            only elements specified in the request are updated.'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormConsentShareInBatch':
          summary: 'Upsert Authorization Form Consent Share'
          description: 'Upsert an existing authorization form consent share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormConsentShareInBatch':
          summary: 'Delete Authorization Form Consent Share'
          description: 'Delete an existing authorization form consent share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormConsentShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormDataUseInBatch':
          summary: 'Create Authorization Form Data Use'
          description: 'Create a new authorization form data use in Batch'
          entityName: 'AuthorizationFormDataUse'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormDataUseInBatch':
          summary: 'Update Authorization Form Data Use'
          description: 'Updates an existing authorization form data use in batch;
            only elements specified in the request are updated.'
          entityName: 'AuthorizationFormDataUse'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormDataUseInBatch':
          summary: 'Upsert Authorization Form Data Use'
          description: 'Upsert an existing authorization form data use in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormDataUse'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormDataUseInBatch':
          summary: 'Delete Authorization Form Data Use'
          description: 'Delete an existing authorization form data use in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormDataUse'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormDataUseHistoryInBatch':
          summary: 'Create Authorization Form Data Use History'
          description: 'Create a new authorization form data use history in Batch'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormDataUseHistoryInBatch':
          summary: 'Update Authorization Form Data Use History'
          description: 'Updates an existing authorization form data use history in
            batch; only elements specified in the request are updated.'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormDataUseHistoryInBatch':
          summary: 'Upsert Authorization Form Data Use History'
          description: 'Upsert an existing authorization form data use history in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormDataUseHistoryInBatch':
          summary: 'Delete Authorization Form Data Use History'
          description: 'Delete an existing authorization form data use history in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'AuthorizationFormDataUseHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormDataUseShareInBatch':
          summary: 'Create Authorization Form Data Use Share'
          description: 'Create a new authorization form data use share in Batch'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormDataUseShareInBatch':
          summary: 'Update Authorization Form Data Use Share'
          description: 'Updates an existing authorization form data use share in batch;
            only elements specified in the request are updated.'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormDataUseShareInBatch':
          summary: 'Upsert Authorization Form Data Use Share'
          description: 'Upsert an existing authorization form data use share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormDataUseShareInBatch':
          summary: 'Delete Authorization Form Data Use Share'
          description: 'Delete an existing authorization form data use share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormDataUseShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormHistoryInBatch':
          summary: 'Create Authorization Form History'
          description: 'Create a new authorization form history in Batch'
          entityName: 'AuthorizationFormHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormHistoryInBatch':
          summary: 'Update Authorization Form History'
          description: 'Updates an existing authorization form history in batch; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormHistoryInBatch':
          summary: 'Upsert Authorization Form History'
          description: 'Upsert an existing authorization form history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormHistoryInBatch':
          summary: 'Delete Authorization Form History'
          description: 'Delete an existing authorization form history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormShareInBatch':
          summary: 'Create Authorization Form Share'
          description: 'Create a new authorization form share in Batch'
          entityName: 'AuthorizationFormShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormShareInBatch':
          summary: 'Update Authorization Form Share'
          description: 'Updates an existing authorization form share in batch; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormShareInBatch':
          summary: 'Upsert Authorization Form Share'
          description: 'Upsert an existing authorization form share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormShareInBatch':
          summary: 'Delete Authorization Form Share'
          description: 'Delete an existing authorization form share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'AuthorizationFormShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormTextInBatch':
          summary: 'Create Authorization Form Text'
          description: 'Create a new authorization form text in Batch'
          entityName: 'AuthorizationFormText'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormTextInBatch':
          summary: 'Update Authorization Form Text'
          description: 'Updates an existing authorization form text in batch; only
            elements specified in the request are updated.'
          entityName: 'AuthorizationFormText'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormTextInBatch':
          summary: 'Upsert Authorization Form Text'
          description: 'Upsert an existing authorization form text in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormText'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormTextInBatch':
          summary: 'Delete Authorization Form Text'
          description: 'Delete an existing authorization form text in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'AuthorizationFormText'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateAuthorizationFormTextHistoryInBatch':
          summary: 'Create Authorization Form Text History '
          description: 'Create a new authorization form text history in Batch'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateAuthorizationFormTextHistoryInBatch':
          summary: 'Update Authorization Form Text History'
          description: 'Updates an existing authorization form text history in batch;
            only elements specified in the request are updated.'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertAuthorizationFormTextHistoryInBatch':
          summary: 'Upsert Authorization Form Text History'
          description: 'Upsert an existing authorization form text history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteAuthorizationFormTextHistoryInBatch':
          summary: 'Delete Authorization Form Text History'
          description: 'Delete an existing authorization form text history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'AuthorizationFormTextHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBackgroundOperationInBatch':
          summary: 'Create Background Operation'
          description: 'Create a new background operation in Batch'
          entityName: 'BackgroundOperation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBackgroundOperationInBatch':
          summary: 'Update Background Operation'
          description: 'Updates an existing background operation in batch; only elements
            specified in the request are updated.'
          entityName: 'BackgroundOperation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBackgroundOperationInBatch':
          summary: 'Upsert Background Operation'
          description: 'Upsert an existing background operation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BackgroundOperation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBackgroundOperationInBatch':
          summary: 'Delete Background Operation'
          description: 'Delete an existing background operation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BackgroundOperation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBatchApexErrorEventInBatch':
          summary: 'Create Batch Apex Error Platform Event'
          description: 'Create a new batch apex error platform event in Batch'
          entityName: 'BatchApexErrorEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBatchApexErrorEventInBatch':
          summary: 'Update Batch Apex Error Platform Event'
          description: 'Updates an existing batch apex error platform event in batch;
            only elements specified in the request are updated.'
          entityName: 'BatchApexErrorEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBatchApexErrorEventInBatch':
          summary: 'Upsert Batch Apex Error Platform Event'
          description: 'Upsert an existing batch apex error platform event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'BatchApexErrorEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBatchApexErrorEventInBatch':
          summary: 'Delete Batch Apex Error Platform Event'
          description: 'Delete an existing batch apex error platform event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'BatchApexErrorEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBrandTemplateInBatch':
          summary: 'Create Letterhead'
          description: 'Create a new letterhead in Batch'
          entityName: 'BrandTemplate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBrandTemplateInBatch':
          summary: 'Update Letterhead'
          description: 'Updates an existing letterhead in batch; only elements specified
            in the request are updated.'
          entityName: 'BrandTemplate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBrandTemplateInBatch':
          summary: 'Upsert Letterhead'
          description: 'Upsert an existing letterhead in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandTemplate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBrandTemplateInBatch':
          summary: 'Delete Letterhead'
          description: 'Delete an existing letterhead in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandTemplate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBrandingSetInBatch':
          summary: 'Create Branding Set'
          description: 'Create a new branding set in Batch'
          entityName: 'BrandingSet'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBrandingSetInBatch':
          summary: 'Update Branding Set'
          description: 'Updates an existing branding set in batch; only elements specified
            in the request are updated.'
          entityName: 'BrandingSet'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBrandingSetInBatch':
          summary: 'Upsert Branding Set'
          description: 'Upsert an existing branding set in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandingSet'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBrandingSetInBatch':
          summary: 'Delete Branding Set'
          description: 'Delete an existing branding set in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandingSet'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBrandingSetPropertyInBatch':
          summary: 'Create Branding Set Property'
          description: 'Create a new branding set property in Batch'
          entityName: 'BrandingSetProperty'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBrandingSetPropertyInBatch':
          summary: 'Update Branding Set Property'
          description: 'Updates an existing branding set property in batch; only elements
            specified in the request are updated.'
          entityName: 'BrandingSetProperty'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBrandingSetPropertyInBatch':
          summary: 'Upsert Branding Set Property'
          description: 'Upsert an existing branding set property in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandingSetProperty'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBrandingSetPropertyInBatch':
          summary: 'Delete Branding Set Property'
          description: 'Delete an existing branding set property in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BrandingSetProperty'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBriefcaseAssignmentInBatch':
          summary: 'Create Briefcase Assignment'
          description: 'Create a new briefcase assignment in Batch'
          entityName: 'BriefcaseAssignment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBriefcaseAssignmentInBatch':
          summary: 'Update Briefcase Assignment'
          description: 'Updates an existing briefcase assignment in batch; only elements
            specified in the request are updated.'
          entityName: 'BriefcaseAssignment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseAssignmentInBatch':
          summary: 'Upsert Briefcase Assignment'
          description: 'Upsert an existing briefcase assignment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseAssignment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBriefcaseAssignmentInBatch':
          summary: 'Delete Briefcase Assignment'
          description: 'Delete an existing briefcase assignment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseAssignment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBriefcaseAssignmentChangeEventInBatch':
          summary: 'Create Briefcase Assignment Change Event'
          description: 'Create a new briefcase assignment change event in Batch'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBriefcaseAssignmentChangeEventInBatch':
          summary: 'Update Briefcase Assignment Change Event'
          description: 'Updates an existing briefcase assignment change event in batch;
            only elements specified in the request are updated.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseAssignmentChangeEventInBatch':
          summary: 'Upsert Briefcase Assignment Change Event'
          description: 'Upsert an existing briefcase assignment change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBriefcaseAssignmentChangeEventInBatch':
          summary: 'Delete Briefcase Assignment Change Event'
          description: 'Delete an existing briefcase assignment change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'BriefcaseAssignmentChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBriefcaseDefinitionInBatch':
          summary: 'Create Briefcase Definition'
          description: 'Create a new briefcase definition in Batch'
          entityName: 'BriefcaseDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBriefcaseDefinitionInBatch':
          summary: 'Update Briefcase Definition'
          description: 'Updates an existing briefcase definition in batch; only elements
            specified in the request are updated.'
          entityName: 'BriefcaseDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseDefinitionInBatch':
          summary: 'Upsert Briefcase Definition'
          description: 'Upsert an existing briefcase definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBriefcaseDefinitionInBatch':
          summary: 'Delete Briefcase Definition'
          description: 'Delete an existing briefcase definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBriefcaseDefinitionChangeEventInBatch':
          summary: 'Create Briefcase Definition Change Event'
          description: 'Create a new briefcase definition change event in Batch'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBriefcaseDefinitionChangeEventInBatch':
          summary: 'Update Briefcase Definition Change Event'
          description: 'Updates an existing briefcase definition change event in batch;
            only elements specified in the request are updated.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseDefinitionChangeEventInBatch':
          summary: 'Upsert Briefcase Definition Change Event'
          description: 'Upsert an existing briefcase definition change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBriefcaseDefinitionChangeEventInBatch':
          summary: 'Delete Briefcase Definition Change Event'
          description: 'Delete an existing briefcase definition change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'BriefcaseDefinitionChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBriefcaseRuleInBatch':
          summary: 'Create Briefcase Rule'
          description: 'Create a new briefcase rule in Batch'
          entityName: 'BriefcaseRule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBriefcaseRuleInBatch':
          summary: 'Update Briefcase Rule'
          description: 'Updates an existing briefcase rule in batch; only elements
            specified in the request are updated.'
          entityName: 'BriefcaseRule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseRuleInBatch':
          summary: 'Upsert Briefcase Rule'
          description: 'Upsert an existing briefcase rule in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseRule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBriefcaseRuleInBatch':
          summary: 'Delete Briefcase Rule'
          description: 'Delete an existing briefcase rule in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseRule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBriefcaseRuleFilterInBatch':
          summary: 'Create Briefcase Rule Filter'
          description: 'Create a new briefcase rule filter in Batch'
          entityName: 'BriefcaseRuleFilter'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBriefcaseRuleFilterInBatch':
          summary: 'Update Briefcase Rule Filter'
          description: 'Updates an existing briefcase rule filter in batch; only elements
            specified in the request are updated.'
          entityName: 'BriefcaseRuleFilter'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBriefcaseRuleFilterInBatch':
          summary: 'Upsert Briefcase Rule Filter'
          description: 'Upsert an existing briefcase rule filter in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseRuleFilter'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBriefcaseRuleFilterInBatch':
          summary: 'Delete Briefcase Rule Filter'
          description: 'Delete an existing briefcase rule filter in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BriefcaseRuleFilter'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBulkApiResultEventInBatch':
          summary: 'Create Bulk API Result Event'
          description: 'Create a new bulk api result event in Batch'
          entityName: 'BulkApiResultEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBulkApiResultEventInBatch':
          summary: 'Update Bulk API Result Event'
          description: 'Updates an existing bulk api result event in batch; only elements
            specified in the request are updated.'
          entityName: 'BulkApiResultEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBulkApiResultEventInBatch':
          summary: 'Upsert Bulk API Result Event'
          description: 'Upsert an existing bulk api result event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BulkApiResultEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBulkApiResultEventInBatch':
          summary: 'Delete Bulk API Result Event'
          description: 'Delete an existing bulk api result event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BulkApiResultEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBulkApiResultEventStoreInBatch':
          summary: 'Create Bulk API Result Event Store'
          description: 'Create a new bulk api result event store in Batch'
          entityName: 'BulkApiResultEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBulkApiResultEventStoreInBatch':
          summary: 'Update Bulk API Result Event Store'
          description: 'Updates an existing bulk api result event store in batch;
            only elements specified in the request are updated.'
          entityName: 'BulkApiResultEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBulkApiResultEventStoreInBatch':
          summary: 'Upsert Bulk API Result Event Store'
          description: 'Upsert an existing bulk api result event store in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'BulkApiResultEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBulkApiResultEventStoreInBatch':
          summary: 'Delete Bulk API Result Event Store'
          description: 'Delete an existing bulk api result event store in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'BulkApiResultEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBusinessBrandInBatch':
          summary: 'Create Business Brand'
          description: 'Create a new business brand in Batch'
          entityName: 'BusinessBrand'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBusinessBrandInBatch':
          summary: 'Update Business Brand'
          description: 'Updates an existing business brand in batch; only elements
            specified in the request are updated.'
          entityName: 'BusinessBrand'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessBrandInBatch':
          summary: 'Upsert Business Brand'
          description: 'Upsert an existing business brand in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessBrand'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBusinessBrandInBatch':
          summary: 'Delete Business Brand'
          description: 'Delete an existing business brand in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessBrand'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBusinessBrandShareInBatch':
          summary: 'Create Business Brand Share'
          description: 'Create a new business brand share in Batch'
          entityName: 'BusinessBrandShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBusinessBrandShareInBatch':
          summary: 'Update Business Brand Share'
          description: 'Updates an existing business brand share in batch; only elements
            specified in the request are updated.'
          entityName: 'BusinessBrandShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessBrandShareInBatch':
          summary: 'Upsert Business Brand Share'
          description: 'Upsert an existing business brand share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessBrandShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBusinessBrandShareInBatch':
          summary: 'Delete Business Brand Share'
          description: 'Delete an existing business brand share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessBrandShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBusinessHoursInBatch':
          summary: 'Create Business Hours'
          description: 'Create a new business hours in Batch'
          entityName: 'BusinessHours'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBusinessHoursInBatch':
          summary: 'Update Business Hours'
          description: 'Updates an existing business hours in batch; only elements
            specified in the request are updated.'
          entityName: 'BusinessHours'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessHoursInBatch':
          summary: 'Upsert Business Hours'
          description: 'Upsert an existing business hours in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessHours'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBusinessHoursInBatch':
          summary: 'Delete Business Hours'
          description: 'Delete an existing business hours in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessHours'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateBusinessProcessInBatch':
          summary: 'Create Business Process'
          description: 'Create a new business process in Batch'
          entityName: 'BusinessProcess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateBusinessProcessInBatch':
          summary: 'Update Business Process'
          description: 'Updates an existing business process in batch; only elements
            specified in the request are updated.'
          entityName: 'BusinessProcess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertBusinessProcessInBatch':
          summary: 'Upsert Business Process'
          description: 'Upsert an existing business process in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessProcess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteBusinessProcessInBatch':
          summary: 'Delete Business Process'
          description: 'Delete an existing business process in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'BusinessProcess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCE_SSD_Client_c__ChangeEventInBatch':
          summary: 'Create Change Event: CE_SSD_Client__c'
          description: 'Create a new change event: ce_ssd_client__c in Batch'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCE_SSD_Client_c__ChangeEventInBatch':
          summary: 'Update Change Event: CE_SSD_Client__c'
          description: 'Updates an existing change event: ce_ssd_client__c in batch;
            only elements specified in the request are updated.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCE_SSD_Client_c__ChangeEventInBatch':
          summary: 'Upsert Change Event: CE_SSD_Client__c'
          description: 'Upsert an existing change event: ce_ssd_client__c in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCE_SSD_Client_c__ChangeEventInBatch':
          summary: 'Delete Change Event: CE_SSD_Client__c'
          description: 'Delete an existing change event: ce_ssd_client__c in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CE_SSD_Client_c__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCE_SSD_Client_c__cInBatch':
          summary: 'Create CE_SSD_Client__c'
          description: 'Create a new ce_ssd_client__c in Batch'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCE_SSD_Client_c__cInBatch':
          summary: 'Update CE_SSD_Client__c'
          description: 'Updates an existing ce_ssd_client__c in batch; only elements
            specified in the request are updated.'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCE_SSD_Client_c__cInBatch':
          summary: 'Upsert CE_SSD_Client__c'
          description: 'Upsert an existing ce_ssd_client__c in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCE_SSD_Client_c__cInBatch':
          summary: 'Delete CE_SSD_Client__c'
          description: 'Delete an existing ce_ssd_client__c in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CE_SSD_Client_c__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCalendarInBatch':
          summary: 'Create Calendar'
          description: 'Create a new calendar in Batch'
          entityName: 'Calendar'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCalendarInBatch':
          summary: 'Update Calendar'
          description: 'Updates an existing calendar in batch; only elements specified
            in the request are updated.'
          entityName: 'Calendar'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCalendarInBatch':
          summary: 'Upsert Calendar'
          description: 'Upsert an existing calendar in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Calendar'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCalendarInBatch':
          summary: 'Delete Calendar'
          description: 'Delete an existing calendar in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Calendar'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCalendarViewInBatch':
          summary: 'Create Calendar'
          description: 'Create a new calendar in Batch'
          entityName: 'CalendarView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCalendarViewInBatch':
          summary: 'Update Calendar'
          description: 'Updates an existing calendar in batch; only elements specified
            in the request are updated.'
          entityName: 'CalendarView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCalendarViewInBatch':
          summary: 'Upsert Calendar'
          description: 'Upsert an existing calendar in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CalendarView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCalendarViewInBatch':
          summary: 'Delete Calendar'
          description: 'Delete an existing calendar in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CalendarView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCalendarViewShareInBatch':
          summary: 'Create Calendar Share'
          description: 'Create a new calendar share in Batch'
          entityName: 'CalendarViewShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCalendarViewShareInBatch':
          summary: 'Update Calendar Share'
          description: 'Updates an existing calendar share in batch; only elements
            specified in the request are updated.'
          entityName: 'CalendarViewShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCalendarViewShareInBatch':
          summary: 'Upsert Calendar Share'
          description: 'Upsert an existing calendar share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CalendarViewShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCalendarViewShareInBatch':
          summary: 'Delete Calendar Share'
          description: 'Delete an existing calendar share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CalendarViewShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCallCenterInBatch':
          summary: 'Create Call Center'
          description: 'Create a new call center in Batch'
          entityName: 'CallCenter'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCallCenterInBatch':
          summary: 'Update Call Center'
          description: 'Updates an existing call center in batch; only elements specified
            in the request are updated.'
          entityName: 'CallCenter'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCallCenterInBatch':
          summary: 'Upsert Call Center'
          description: 'Upsert an existing call center in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CallCenter'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCallCenterInBatch':
          summary: 'Delete Call Center'
          description: 'Delete an existing call center in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CallCenter'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCallCoachingMediaProviderInBatch':
          summary: 'Create CallCoachingMediaProvider'
          description: 'Create a new callcoachingmediaprovider in Batch'
          entityName: 'CallCoachingMediaProvider'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCallCoachingMediaProviderInBatch':
          summary: 'Update CallCoachingMediaProvider'
          description: 'Updates an existing callcoachingmediaprovider in batch; only
            elements specified in the request are updated.'
          entityName: 'CallCoachingMediaProvider'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCallCoachingMediaProviderInBatch':
          summary: 'Upsert CallCoachingMediaProvider'
          description: 'Upsert an existing callcoachingmediaprovider in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CallCoachingMediaProvider'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCallCoachingMediaProviderInBatch':
          summary: 'Delete CallCoachingMediaProvider'
          description: 'Delete an existing callcoachingmediaprovider in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CallCoachingMediaProvider'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignInBatch':
          summary: 'Create Campaign'
          description: 'Create a new campaign in Batch'
          entityName: 'Campaign'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignInBatch':
          summary: 'Update Campaign'
          description: 'Updates an existing campaign in batch; only elements specified
            in the request are updated.'
          entityName: 'Campaign'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignInBatch':
          summary: 'Upsert Campaign'
          description: 'Upsert an existing campaign in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Campaign'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignInBatch':
          summary: 'Delete Campaign'
          description: 'Delete an existing campaign in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Campaign'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignChangeEventInBatch':
          summary: 'Create Campaign Change Event'
          description: 'Create a new campaign change event in Batch'
          entityName: 'CampaignChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignChangeEventInBatch':
          summary: 'Update Campaign Change Event'
          description: 'Updates an existing campaign change event in batch; only elements
            specified in the request are updated.'
          entityName: 'CampaignChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignChangeEventInBatch':
          summary: 'Upsert Campaign Change Event'
          description: 'Upsert an existing campaign change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignChangeEventInBatch':
          summary: 'Delete Campaign Change Event'
          description: 'Delete an existing campaign change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignHistoryInBatch':
          summary: 'Create Campaign Field History'
          description: 'Create a new campaign field history in Batch'
          entityName: 'CampaignHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignHistoryInBatch':
          summary: 'Update Campaign Field History'
          description: 'Updates an existing campaign field history in batch; only
            elements specified in the request are updated.'
          entityName: 'CampaignHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignHistoryInBatch':
          summary: 'Upsert Campaign Field History'
          description: 'Upsert an existing campaign field history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignHistoryInBatch':
          summary: 'Delete Campaign Field History'
          description: 'Delete an existing campaign field history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignMemberInBatch':
          summary: 'Create Campaign Member'
          description: 'Create a new campaign member in Batch'
          entityName: 'CampaignMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignMemberInBatch':
          summary: 'Update Campaign Member'
          description: 'Updates an existing campaign member in batch; only elements
            specified in the request are updated.'
          entityName: 'CampaignMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberInBatch':
          summary: 'Upsert Campaign Member'
          description: 'Upsert an existing campaign member in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignMemberInBatch':
          summary: 'Delete Campaign Member'
          description: 'Delete an existing campaign member in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignMemberChangeEventInBatch':
          summary: 'Create Campaign Member Change Event'
          description: 'Create a new campaign member change event in Batch'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignMemberChangeEventInBatch':
          summary: 'Update Campaign Member Change Event'
          description: 'Updates an existing campaign member change event in batch;
            only elements specified in the request are updated.'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberChangeEventInBatch':
          summary: 'Upsert Campaign Member Change Event'
          description: 'Upsert an existing campaign member change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignMemberChangeEventInBatch':
          summary: 'Delete Campaign Member Change Event'
          description: 'Delete an existing campaign member change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CampaignMemberChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignMemberStatusInBatch':
          summary: 'Create Campaign Member Status'
          description: 'Create a new campaign member status in Batch'
          entityName: 'CampaignMemberStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignMemberStatusInBatch':
          summary: 'Update Campaign Member Status'
          description: 'Updates an existing campaign member status in batch; only
            elements specified in the request are updated.'
          entityName: 'CampaignMemberStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberStatusInBatch':
          summary: 'Upsert Campaign Member Status'
          description: 'Upsert an existing campaign member status in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMemberStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignMemberStatusInBatch':
          summary: 'Delete Campaign Member Status'
          description: 'Delete an existing campaign member status in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignMemberStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignMemberStatusChangeEventInBatch':
          summary: 'Create Campaign Member Status Change Event'
          description: 'Create a new campaign member status change event in Batch'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignMemberStatusChangeEventInBatch':
          summary: 'Update Campaign Member Status Change Event'
          description: 'Updates an existing campaign member status change event in
            batch; only elements specified in the request are updated.'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignMemberStatusChangeEventInBatch':
          summary: 'Upsert Campaign Member Status Change Event'
          description: 'Upsert an existing campaign member status change event in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignMemberStatusChangeEventInBatch':
          summary: 'Delete Campaign Member Status Change Event'
          description: 'Delete an existing campaign member status change event in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CampaignMemberStatusChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCampaignShareInBatch':
          summary: 'Create Campaign Share'
          description: 'Create a new campaign share in Batch'
          entityName: 'CampaignShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCampaignShareInBatch':
          summary: 'Update Campaign Share'
          description: 'Updates an existing campaign share in batch; only elements
            specified in the request are updated.'
          entityName: 'CampaignShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCampaignShareInBatch':
          summary: 'Upsert Campaign Share'
          description: 'Upsert an existing campaign share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCampaignShareInBatch':
          summary: 'Delete Campaign Share'
          description: 'Delete an existing campaign share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CampaignShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseInBatch':
          summary: 'Create Case'
          description: 'Create a new case in Batch'
          entityName: 'Case'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseInBatch':
          summary: 'Update Case'
          description: 'Updates an existing case in batch; only elements specified
            in the request are updated.'
          entityName: 'Case'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseInBatch':
          summary: 'Upsert Case'
          description: 'Upsert an existing case in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Case'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseInBatch':
          summary: 'Delete Case'
          description: 'Delete an existing case in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Case'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseChangeEventInBatch':
          summary: 'Create Case Change Event'
          description: 'Create a new case change event in Batch'
          entityName: 'CaseChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseChangeEventInBatch':
          summary: 'Update Case Change Event'
          description: 'Updates an existing case change event in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseChangeEventInBatch':
          summary: 'Upsert Case Change Event'
          description: 'Upsert an existing case change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseChangeEventInBatch':
          summary: 'Delete Case Change Event'
          description: 'Delete an existing case change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseCommentInBatch':
          summary: 'Create Case Comment'
          description: 'Create a new case comment in Batch'
          entityName: 'CaseComment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseCommentInBatch':
          summary: 'Update Case Comment'
          description: 'Updates an existing case comment in batch; only elements specified
            in the request are updated.'
          entityName: 'CaseComment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseCommentInBatch':
          summary: 'Upsert Case Comment'
          description: 'Upsert an existing case comment in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseComment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseCommentInBatch':
          summary: 'Delete Case Comment'
          description: 'Delete an existing case comment in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseComment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseContactRoleInBatch':
          summary: 'Create Case Contact Role'
          description: 'Create a new case contact role in Batch'
          entityName: 'CaseContactRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseContactRoleInBatch':
          summary: 'Update Case Contact Role'
          description: 'Updates an existing case contact role in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseContactRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseContactRoleInBatch':
          summary: 'Upsert Case Contact Role'
          description: 'Upsert an existing case contact role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseContactRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseContactRoleInBatch':
          summary: 'Delete Case Contact Role'
          description: 'Delete an existing case contact role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseContactRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseHistoryInBatch':
          summary: 'Create Case History'
          description: 'Create a new case history in Batch'
          entityName: 'CaseHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseHistoryInBatch':
          summary: 'Update Case History'
          description: 'Updates an existing case history in batch; only elements specified
            in the request are updated.'
          entityName: 'CaseHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseHistoryInBatch':
          summary: 'Upsert Case History'
          description: 'Upsert an existing case history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseHistoryInBatch':
          summary: 'Delete Case History'
          description: 'Delete an existing case history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseShareInBatch':
          summary: 'Create Case Share'
          description: 'Create a new case share in Batch'
          entityName: 'CaseShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseShareInBatch':
          summary: 'Update Case Share'
          description: 'Updates an existing case share in batch; only elements specified
            in the request are updated.'
          entityName: 'CaseShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseShareInBatch':
          summary: 'Upsert Case Share'
          description: 'Upsert an existing case share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseShareInBatch':
          summary: 'Delete Case Share'
          description: 'Delete an existing case share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseSolutionInBatch':
          summary: 'Create Case Solution'
          description: 'Create a new case solution in Batch'
          entityName: 'CaseSolution'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseSolutionInBatch':
          summary: 'Update Case Solution'
          description: 'Updates an existing case solution in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseSolution'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseSolutionInBatch':
          summary: 'Upsert Case Solution'
          description: 'Upsert an existing case solution in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseSolution'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseSolutionInBatch':
          summary: 'Delete Case Solution'
          description: 'Delete an existing case solution in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseSolution'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseStatusInBatch':
          summary: 'Create Case Status Value'
          description: 'Create a new case status value in Batch'
          entityName: 'CaseStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseStatusInBatch':
          summary: 'Update Case Status Value'
          description: 'Updates an existing case status value in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseStatusInBatch':
          summary: 'Upsert Case Status Value'
          description: 'Upsert an existing case status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseStatusInBatch':
          summary: 'Delete Case Status Value'
          description: 'Delete an existing case status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseTeamMemberInBatch':
          summary: 'Create Case Team Member'
          description: 'Create a new case team member in Batch'
          entityName: 'CaseTeamMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseTeamMemberInBatch':
          summary: 'Update Case Team Member'
          description: 'Updates an existing case team member in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseTeamMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamMemberInBatch':
          summary: 'Upsert Case Team Member'
          description: 'Upsert an existing case team member in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseTeamMemberInBatch':
          summary: 'Delete Case Team Member'
          description: 'Delete an existing case team member in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseTeamRoleInBatch':
          summary: 'Create Case Team Member Role'
          description: 'Create a new case team member role in Batch'
          entityName: 'CaseTeamRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseTeamRoleInBatch':
          summary: 'Update Case Team Member Role'
          description: 'Updates an existing case team member role in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseTeamRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamRoleInBatch':
          summary: 'Upsert Case Team Member Role'
          description: 'Upsert an existing case team member role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseTeamRoleInBatch':
          summary: 'Delete Case Team Member Role'
          description: 'Delete an existing case team member role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseTeamTemplateInBatch':
          summary: 'Create Predefined Case Team'
          description: 'Create a new predefined case team in Batch'
          entityName: 'CaseTeamTemplate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseTeamTemplateInBatch':
          summary: 'Update Predefined Case Team'
          description: 'Updates an existing predefined case team in batch; only elements
            specified in the request are updated.'
          entityName: 'CaseTeamTemplate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamTemplateInBatch':
          summary: 'Upsert Predefined Case Team'
          description: 'Upsert an existing predefined case team in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamTemplate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseTeamTemplateInBatch':
          summary: 'Delete Predefined Case Team'
          description: 'Delete an existing predefined case team in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CaseTeamTemplate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseTeamTemplateMemberInBatch':
          summary: 'Create Predefined Case Team Member'
          description: 'Create a new predefined case team member in Batch'
          entityName: 'CaseTeamTemplateMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseTeamTemplateMemberInBatch':
          summary: 'Update Predefined Case Team Member'
          description: 'Updates an existing predefined case team member in batch;
            only elements specified in the request are updated.'
          entityName: 'CaseTeamTemplateMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamTemplateMemberInBatch':
          summary: 'Upsert Predefined Case Team Member'
          description: 'Upsert an existing predefined case team member in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CaseTeamTemplateMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseTeamTemplateMemberInBatch':
          summary: 'Delete Predefined Case Team Member'
          description: 'Delete an existing predefined case team member in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CaseTeamTemplateMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCaseTeamTemplateRecordInBatch':
          summary: 'Create Predefined Case Team Record'
          description: 'Create a new predefined case team record in Batch'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCaseTeamTemplateRecordInBatch':
          summary: 'Update Predefined Case Team Record'
          description: 'Updates an existing predefined case team record in batch;
            only elements specified in the request are updated.'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCaseTeamTemplateRecordInBatch':
          summary: 'Upsert Predefined Case Team Record'
          description: 'Upsert an existing predefined case team record in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCaseTeamTemplateRecordInBatch':
          summary: 'Delete Predefined Case Team Record'
          description: 'Delete an existing predefined case team record in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CaseTeamTemplateRecord'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCategoryDataInBatch':
          summary: 'Create Category Data'
          description: 'Create a new category data in Batch'
          entityName: 'CategoryData'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCategoryDataInBatch':
          summary: 'Update Category Data'
          description: 'Updates an existing category data in batch; only elements
            specified in the request are updated.'
          entityName: 'CategoryData'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCategoryDataInBatch':
          summary: 'Upsert Category Data'
          description: 'Upsert an existing category data in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CategoryData'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCategoryDataInBatch':
          summary: 'Delete Category Data'
          description: 'Delete an existing category data in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CategoryData'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCategoryNodeInBatch':
          summary: 'Create Category Node'
          description: 'Create a new category node in Batch'
          entityName: 'CategoryNode'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCategoryNodeInBatch':
          summary: 'Update Category Node'
          description: 'Updates an existing category node in batch; only elements
            specified in the request are updated.'
          entityName: 'CategoryNode'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCategoryNodeInBatch':
          summary: 'Upsert Category Node'
          description: 'Upsert an existing category node in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CategoryNode'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCategoryNodeInBatch':
          summary: 'Delete Category Node'
          description: 'Delete an existing category node in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CategoryNode'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateChatterAnswersActivityInBatch':
          summary: 'Create Chatter Answers Activity'
          description: 'Create a new chatter answers activity in Batch'
          entityName: 'ChatterAnswersActivity'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateChatterAnswersActivityInBatch':
          summary: 'Update Chatter Answers Activity'
          description: 'Updates an existing chatter answers activity in batch; only
            elements specified in the request are updated.'
          entityName: 'ChatterAnswersActivity'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertChatterAnswersActivityInBatch':
          summary: 'Upsert Chatter Answers Activity'
          description: 'Upsert an existing chatter answers activity in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ChatterAnswersActivity'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteChatterAnswersActivityInBatch':
          summary: 'Delete Chatter Answers Activity'
          description: 'Delete an existing chatter answers activity in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ChatterAnswersActivity'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateChatterAnswersReputationLevelInBatch':
          summary: 'Create Chatter Answers Reputation Level'
          description: 'Create a new chatter answers reputation level in Batch'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateChatterAnswersReputationLevelInBatch':
          summary: 'Update Chatter Answers Reputation Level'
          description: 'Updates an existing chatter answers reputation level in batch;
            only elements specified in the request are updated.'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertChatterAnswersReputationLevelInBatch':
          summary: 'Upsert Chatter Answers Reputation Level'
          description: 'Upsert an existing chatter answers reputation level in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteChatterAnswersReputationLevelInBatch':
          summary: 'Delete Chatter Answers Reputation Level'
          description: 'Delete an existing chatter answers reputation level in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ChatterAnswersReputationLevel'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateClientBrowserInBatch':
          summary: 'Create Client Browser'
          description: 'Create a new client browser in Batch'
          entityName: 'ClientBrowser'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateClientBrowserInBatch':
          summary: 'Update Client Browser'
          description: 'Updates an existing client browser in batch; only elements
            specified in the request are updated.'
          entityName: 'ClientBrowser'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertClientBrowserInBatch':
          summary: 'Upsert Client Browser'
          description: 'Upsert an existing client browser in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ClientBrowser'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteClientBrowserInBatch':
          summary: 'Delete Client Browser'
          description: 'Delete an existing client browser in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ClientBrowser'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateColorDefinitionInBatch':
          summary: 'Create Color Definition'
          description: 'Create a new color definition in Batch'
          entityName: 'ColorDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateColorDefinitionInBatch':
          summary: 'Update Color Definition'
          description: 'Updates an existing color definition in batch; only elements
            specified in the request are updated.'
          entityName: 'ColorDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertColorDefinitionInBatch':
          summary: 'Upsert Color Definition'
          description: 'Upsert an existing color definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ColorDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteColorDefinitionInBatch':
          summary: 'Delete Color Definition'
          description: 'Delete an existing color definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ColorDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCombinedAttachmentInBatch':
          summary: 'Create Note, Attachment, Google Doc And File'
          description: 'Create a new note, attachment, google doc and file in Batch'
          entityName: 'CombinedAttachment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCombinedAttachmentInBatch':
          summary: 'Update Note, Attachment, Google Doc And File'
          description: 'Updates an existing note, attachment, google doc and file
            in batch; only elements specified in the request are updated.'
          entityName: 'CombinedAttachment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCombinedAttachmentInBatch':
          summary: 'Upsert Note, Attachment, Google Doc And File'
          description: 'Upsert an existing note, attachment, google doc and file in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CombinedAttachment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCombinedAttachmentInBatch':
          summary: 'Delete Note, Attachment, Google Doc And File'
          description: 'Delete an existing note, attachment, google doc and file in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CombinedAttachment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommSubscriptionInBatch':
          summary: 'Create Communication Subscription'
          description: 'Create a new communication subscription in Batch'
          entityName: 'CommSubscription'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommSubscriptionInBatch':
          summary: 'Update Communication Subscription '
          description: 'Updates an existing communication subscription in batch; only
            elements specified in the request are updated.'
          entityName: 'CommSubscription'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionInBatch':
          summary: 'Upsert Communication Subscription'
          description: 'Upsert an existing communication subscription in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CommSubscription'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommSubscriptionInBatch':
          summary: 'Delete Communication Subscription'
          description: 'Delete an existing communication subscription in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CommSubscription'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommSubscriptionChannelTypeInBatch':
          summary: 'Create Communication Subscription Channel Type'
          description: 'Create a new communication subscription channel type in Batch'
          entityName: 'CommSubscriptionChannelType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommSubscriptionChannelTypeInBatch':
          summary: 'Update Communication Subscription Channel Type'
          description: 'Updates an existing communication subscription channel type
            in batch; only elements specified in the request are updated.'
          entityName: 'CommSubscriptionChannelType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionChannelTypeInBatch':
          summary: 'Upsert Communication Subscription Channel Type'
          description: 'Upsert an existing communication subscription channel type
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionChannelType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommSubscriptionChannelTypeInBatch':
          summary: 'Delete Communication Subscription Channel Type'
          description: 'Delete an existing communication subscription channel type
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionChannelType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommSubscriptionChannelTypeHistoryInBatch':
          summary: 'Create Communication Subscription Channel Type  History'
          description: 'Create a new communication subscription channel type  history
            in Batch'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommSubscriptionChannelTypeHistoryInBatch':
          summary: 'Update Communication Subscription Channel Type  History'
          description: 'Updates an existing communication subscription channel type  history
            in batch; only elements specified in the request are updated.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionChannelTypeHistoryInBatch':
          summary: 'Upsert Communication Subscription Channel Type  History'
          description: 'Upsert an existing communication subscription channel type  history
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommSubscriptionChannelTypeHistoryInBatch':
          summary: 'Delete Communication Subscription Channel Type  History'
          description: 'Delete an existing communication subscription channel type  history
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionChannelTypeHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommSubscriptionChannelTypeShareInBatch':
          summary: 'Create Communication Subscription Channel Type Share'
          description: 'Create a new communication subscription channel type share
            in Batch'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommSubscriptionChannelTypeShareInBatch':
          summary: 'Update Communication Subscription Channel Type Share'
          description: 'Updates an existing communication subscription channel type
            share in batch; only elements specified in the request are updated.'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionChannelTypeShareInBatch':
          summary: 'Upsert Communication Subscription Channel Type Share'
          description: 'Upsert an existing communication subscription channel type
            share in batch only elements specified in the request are updated. Missing
            elements are set to NULL.'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommSubscriptionChannelTypeShareInBatch':
          summary: 'Delete Communication Subscription Channel Type Share'
          description: 'Delete an existing communication subscription channel type
            share in batch only elements specified in the request are updated. Missing
            elements are set to NULL.'
          entityName: 'CommSubscriptionChannelTypeShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommSubscriptionHistoryInBatch':
          summary: 'Create Communication Subscription  History'
          description: 'Create a new communication subscription  history in Batch'
          entityName: 'CommSubscriptionHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommSubscriptionHistoryInBatch':
          summary: 'Update Communication Subscription  History'
          description: 'Updates an existing communication subscription  history in
            batch only elements specified in the request are updated.'
          entityName: 'CommSubscriptionHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionHistoryInBatch':
          summary: 'Upsert Communication Subscription  History'
          description: 'Upsert an existing communication subscription  history in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommSubscriptionHistoryInBatch':
          summary: 'Delete Communication Subscription  History'
          description: 'Delete an existing communication subscription  history in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CommSubscriptionHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommSubscriptionShareInBatch':
          summary: 'Create Communication Subscription Share'
          description: 'Create a new communication subscription share in Batch'
          entityName: 'CommSubscriptionShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommSubscriptionShareInBatch':
          summary: 'Update Communication Subscription Share'
          description: 'Updates an existing communication subscription share in batch;
            only elements specified in the request are updated.'
          entityName: 'CommSubscriptionShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommSubscriptionShareInBatch':
          summary: 'Upsert Communication Subscription Share'
          description: 'Upsert an existing communication subscription share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CommSubscriptionShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommSubscriptionShareInBatch':
          summary: 'Delete Communication Subscription Share'
          description: 'Delete an existing communication subscription share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CommSubscriptionShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCommunityInBatch':
          summary: 'Create Zone'
          description: 'Create a new zone in Batch'
          entityName: 'Community'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCommunityInBatch':
          summary: 'Update Zone'
          description: 'Updates an existing zone in batch; only elements specified
            in the request are updated.'
          entityName: 'Community'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCommunityInBatch':
          summary: 'Upsert Zone'
          description: 'Upsert an existing zone in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Community'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCommunityInBatch':
          summary: 'Delete Zone'
          description: 'Delete an existing zone in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Community'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConcurLongRunApexErrEventInBatch':
          summary: 'Create Concurrent Long Running Apex Error Event'
          description: 'Create a new concurrent long running apex error event in Batch'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConcurLongRunApexErrEventInBatch':
          summary: 'Update Concurrent Long Running Apex Error Event'
          description: 'Updates an existing concurrent long running apex error event
            in batch; only elements specified in the request are updated.'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConcurLongRunApexErrEventInBatch':
          summary: 'Upsert Concurrent Long Running Apex Error Event'
          description: 'Upsert an existing concurrent long running apex error event
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConcurLongRunApexErrEventInBatch':
          summary: 'Delete Concurrent Long Running Apex Error Event'
          description: 'Delete an existing concurrent long running apex error event
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ConcurLongRunApexErrEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConferenceNumberInBatch':
          summary: 'Create Conference Number'
          description: 'Create a new conference number in batch'
          entityName: 'ConferenceNumber'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConferenceNumberInBatch':
          summary: 'Update Conference Number'
          description: 'Updates an existing conference number in batch; only elements
            specified in the request are updated.'
          entityName: 'ConferenceNumber'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConferenceNumberInBatch':
          summary: 'Upsert Conference Number'
          description: 'Upsert an existing conference number in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConferenceNumber'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConferenceNumberInBatch':
          summary: 'Delete Conference Number'
          description: 'Delete an existing conference number in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConferenceNumber'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConnectedApplicationInBatch':
          summary: 'Create Connected App'
          description: 'Create a new connected app in Batch'
          entityName: 'ConnectedApplication'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConnectedApplicationInBatch':
          summary: 'Update Connected App'
          description: 'Updates an existing connected app in batch; only elements
            specified in the request are updated.'
          entityName: 'ConnectedApplication'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConnectedApplicationInBatch':
          summary: 'Upsert Connected App'
          description: 'Upsert an existing connected app in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConnectedApplication'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConnectedApplicationInBatch':
          summary: 'Delete Connected App'
          description: 'Delete an existing connected app in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConnectedApplication'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConsumptionRateInBatch':
          summary: 'Create Consumption Rate'
          description: 'Create a new consumption rate in Batch'
          entityName: 'ConsumptionRate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConsumptionRateInBatch':
          summary: 'Update Consumption Rate'
          description: 'Updates an existing consumption rate in batch; only elements
            specified in the request are updated.'
          entityName: 'ConsumptionRate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionRateInBatch':
          summary: 'Upsert Consumption Rate'
          description: 'Upsert an existing consumption rate in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionRate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConsumptionRateInBatch':
          summary: 'Delete Consumption Rate'
          description: 'Delete an existing consumption rate in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionRate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConsumptionRateHistoryInBatch':
          summary: 'Create Consumption Rate History ID'
          description: 'Create a new consumption rate history id in Batch'
          entityName: 'ConsumptionRateHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConsumptionRateHistoryInBatch':
          summary: 'Update Consumption Rate History ID'
          description: 'Updates an existing consumption rate history id in batch;
            only elements specified in the request are updated.'
          entityName: 'ConsumptionRateHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionRateHistoryInBatch':
          summary: 'Upsert Consumption Rate History ID'
          description: 'Upsert an existing consumption rate history id in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ConsumptionRateHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConsumptionRateHistoryInBatch':
          summary: 'Delete Consumption Rate History ID'
          description: 'Delete an existing consumption rate history id in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ConsumptionRateHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConsumptionScheduleInBatch':
          summary: 'Create Consumption Schedule'
          description: 'Create a new consumption schedule in batch'
          entityName: 'ConsumptionSchedule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConsumptionScheduleInBatch':
          summary: 'Update Consumption Schedule'
          description: 'Updates an existing consumption schedule in batch; only elements
            specified in the request are updated.'
          entityName: 'ConsumptionSchedule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionScheduleInBatch':
          summary: 'Upsert Consumption Schedule'
          description: 'Upsert an existing consumption schedule in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionSchedule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConsumptionScheduleInBatch':
          summary: 'Delete Consumption Schedule'
          description: 'Delete an existing consumption schedule in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ConsumptionSchedule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConsumptionScheduleHistoryInBatch':
          summary: 'Create Consumption Schedule History ID'
          description: 'Create a new consumption schedule history id in Batch'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConsumptionScheduleHistoryInBatch':
          summary: 'Update Consumption Schedule History ID'
          description: 'Updates an existing consumption schedule history id in batch;
            only elements specified in the request are updated.'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionScheduleHistoryInBatch':
          summary: 'Upsert Consumption Schedule History ID'
          description: 'Upsert an existing consumption schedule history id in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConsumptionScheduleHistoryInBatch':
          summary: 'Delete Consumption Schedule History ID'
          description: 'Delete an existing consumption schedule history id in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ConsumptionScheduleHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateConsumptionScheduleShareInBatch':
          summary: 'Create Consumption Schedule Share'
          description: 'Create a new consumption schedule share in Batch'
          entityName: 'ConsumptionScheduleShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateConsumptionScheduleShareInBatch':
          summary: 'Update Consumption Schedule Share'
          description: 'Updates an existing consumption schedule share in batch; only
            elements specified in the request are updated.'
          entityName: 'ConsumptionScheduleShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertConsumptionScheduleShareInBatch':
          summary: 'Upsert Consumption Schedule Share'
          description: 'Upsert an existing consumption schedule share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ConsumptionScheduleShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteConsumptionScheduleShareInBatch':
          summary: 'Delete Consumption Schedule Share'
          description: 'Delete an existing consumption schedule share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ConsumptionScheduleShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactInBatch':
          summary: 'Create Contact'
          description: 'Create a new contact in Batch'
          entityName: 'Contact'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactInBatch':
          summary: 'Update Contact'
          description: 'Updates an existing contact in batch; only elements specified
            in the request are updated.'
          entityName: 'Contact'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactInBatch':
          summary: 'Upsert Contact'
          description: 'Upsert an existing contact in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Contact'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactInBatch':
          summary: 'Delete Contact'
          description: 'Delete an existing contact in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Contact'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactChangeEventInBatch':
          summary: 'Create Contact Change Event'
          description: 'Create a new contact change event in Batch'
          entityName: 'ContactChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactChangeEventInBatch':
          summary: 'Update Contact Change Event'
          description: 'Updates an existing contact change event in batch; only elements
            specified in the request are updated.'
          entityName: 'ContactChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactChangeEventInBatch':
          summary: 'Upsert Contact Change Event'
          description: 'Upsert an existing contact change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactChangeEventInBatch':
          summary: 'Delete Contact Change Event'
          description: 'Delete an existing contact change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactHistoryInBatch':
          summary: 'Create Contact History'
          description: 'Create a new contact history in Batch'
          entityName: 'ContactHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactHistoryInBatch':
          summary: 'Update Contact History'
          description: 'Updates an existing contact history in batch; only elements
            specified in the request are updated.'
          entityName: 'ContactHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactHistoryInBatch':
          summary: 'Upsert Contact History'
          description: 'Upsert an existing contact history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactHistoryInBatch':
          summary: 'Delete Contact History'
          description: 'Delete an existing contact history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactPointTypeConsentInBatch':
          summary: 'Create Contact Point Type Consent'
          description: 'Create a new contact point type consent in Batch'
          entityName: 'ContactPointTypeConsent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactPointTypeConsentInBatch':
          summary: 'Update Contact Point Type Consent'
          description: 'Updates an existing contact point type consent in batch; only
            elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentInBatch':
          summary: 'Upsert Contact Point Type Consent'
          description: 'Upsert an existing contact point type consent in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContactPointTypeConsent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactPointTypeConsentInBatch':
          summary: 'Delete Contact Point Type Consent'
          description: 'Delete an existing contact point type consent in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContactPointTypeConsent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactPointTypeConsentChangeEventInBatch':
          summary: 'Create Contact Point Type Consent Change Event'
          description: 'Create a new contact point type consent change event in Batch'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactPointTypeConsentChangeEventInBatch':
          summary: 'Update Contact Point Type Consent Change Event'
          description: 'Updates an existing contact point type consent change event
            in batch; only elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentChangeEventInBatch':
          summary: 'Upsert Contact Point Type Consent Change Event'
          description: 'Upsert an existing contact point type consent change event
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactPointTypeConsentChangeEventInBatch':
          summary: 'Delete Contact Point Type Consent Change Event'
          description: 'Delete an existing contact point type consent change event
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ContactPointTypeConsentChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactPointTypeConsentHistoryInBatch':
          summary: 'Create Contact Point Type Consent  History'
          description: 'Create a new contact point type consent  history in Batch'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactPointTypeConsentHistoryInBatch':
          summary: 'Update Contact Point Type Consent  History'
          description: 'Updates an existing contact point type consent  history in
            batch; only elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentHistoryInBatch':
          summary: 'Upsert Contact Point Type Consent  History'
          description: 'Upsert an existing contact point type consent  history in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactPointTypeConsentHistoryInBatch':
          summary: 'Delete Contact Point Type Consent  History'
          description: 'Delete an existing contact point type consent  history in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ContactPointTypeConsentHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactPointTypeConsentShareInBatch':
          summary: 'Create Contact Point Type Consent Share'
          description: 'Create a new contact point type consent share in Batch'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactPointTypeConsentShareInBatch':
          summary: 'Update Contact Point Type Consent Share'
          description: 'Updates an existing contact point type consent share in batch;
            only elements specified in the request are updated.'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactPointTypeConsentShareInBatch':
          summary: 'Upsert Contact Point Type Consent Share'
          description: 'Upsert an existing contact point type consent share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactPointTypeConsentShareInBatch':
          summary: 'Delete Contact Point Type Consent Share'
          description: 'Delete an existing contact point type consent share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContactPointTypeConsentShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactRequestInBatch':
          summary: 'Create Contact Request'
          description: 'Create a new contact request in Batch'
          entityName: 'ContactRequest'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactRequestInBatch':
          summary: 'Update Contact Request'
          description: 'Updates an existing contact request in batch; only elements
            specified in the request are updated.'
          entityName: 'ContactRequest'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactRequestInBatch':
          summary: 'Upsert Contact Request'
          description: 'Upsert an existing contact request in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactRequest'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactRequestInBatch':
          summary: 'Delete Contact Request'
          description: 'Delete an existing contact request in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactRequest'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactRequestShareInBatch':
          summary: 'Create Contact Request Share'
          description: 'Create a new contact request share in Batch'
          entityName: 'ContactRequestShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactRequestShareInBatch':
          summary: 'Update Contact Request Share'
          description: 'Updates an existing contact request share in batch; only elements
            specified in the request are updated.'
          entityName: 'ContactRequestShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactRequestShareInBatch':
          summary: 'Upsert Contact Request Share'
          description: 'Upsert an existing contact request share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactRequestShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactRequestShareInBatch':
          summary: 'Delete Contact Request Share'
          description: 'Delete an existing contact request share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactRequestShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContactShareInBatch':
          summary: 'Create Contact Share'
          description: 'Create a new contact share in Batch'
          entityName: 'ContactShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContactShareInBatch':
          summary: 'Update Contact Share'
          description: 'Updates an existing contact share in batch; only elements
            specified in the request are updated.'
          entityName: 'ContactShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContactShareInBatch':
          summary: 'Upsert Contact Share'
          description: 'Upsert an existing contact share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContactShareInBatch':
          summary: 'Delete Contact Share'
          description: 'Delete an existing contact share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContactShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentAssetInBatch':
          summary: 'Create Asset File'
          description: 'Create a new asset file in Batch'
          entityName: 'ContentAsset'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentAssetInBatch':
          summary: 'Update Asset File'
          description: 'Updates an existing asset file in batch; only elements specified
            in the request are updated.'
          entityName: 'ContentAsset'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentAssetInBatch':
          summary: 'Upsert Asset File'
          description: 'Upsert an existing asset file in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentAsset'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentAssetInBatch':
          summary: 'Delete Asset File'
          description: 'Delete an existing asset file in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentAsset'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentBodyInBatch':
          summary: 'Create Content Body'
          description: 'Create a new content body in Batch'
          entityName: 'ContentBody'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentBodyInBatch':
          summary: 'Update Content Body'
          description: 'Updates an existing content body in batch; only elements specified
            in the request are updated.'
          entityName: 'ContentBody'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentBodyInBatch':
          summary: 'Upsert Content Body'
          description: 'Upsert an existing content body in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentBody'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentBodyInBatch':
          summary: 'Delete Content Body'
          description: 'Delete an existing content body in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentBody'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentDocumentInBatch':
          summary: 'Create Content Document'
          description: 'Create a new content document in batch'
          entityName: 'ContentDocument'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentDocumentInBatch':
          summary: 'Update Content Document'
          description: 'Updates an existing content document in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentDocument'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentInBatch':
          summary: 'Upsert Content Document'
          description: 'Upsert an existing content document in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocument'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentDocumentInBatch':
          summary: 'Delete Content Document'
          description: 'Delete an existing content document in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocument'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentDocumentChangeEventInBatch':
          summary: 'Create Content Document Change Event'
          description: 'Create a new content document change event in Batch'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentDocumentChangeEventInBatch':
          summary: 'Update Content Document Change Event'
          description: 'Updates an existing content document change event in batch;
            only elements specified in the request are updated.'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentChangeEventInBatch':
          summary: 'Upsert Content Document Change Event'
          description: 'Upsert an existing content document change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentDocumentChangeEventInBatch':
          summary: 'Delete Content Document Change Event'
          description: 'Delete an existing content document change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContentDocumentChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentDocumentHistoryInBatch':
          summary: 'Create Content Document History'
          description: 'Create a new content document history in Batch'
          entityName: 'ContentDocumentHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentDocumentHistoryInBatch':
          summary: 'Update Content Document History'
          description: 'Updates an existing content document history in batch; only
            elements specified in the request are updated.'
          entityName: 'ContentDocumentHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentHistoryInBatch':
          summary: 'Upsert Content Document History'
          description: 'Upsert an existing content document history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContentDocumentHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentDocumentHistoryInBatch':
          summary: 'Delete Content Document History'
          description: 'Delete an existing content document history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContentDocumentHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentDocumentLinkInBatch':
          summary: 'Create Content Document Link'
          description: 'Create a new content document link in Batch'
          entityName: 'ContentDocumentLink'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentDocumentLinkInBatch':
          summary: 'Update Content Document Link'
          description: 'Updates an existing content document link in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentDocumentLink'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentLinkInBatch':
          summary: 'Upsert Content Document Link'
          description: 'Upsert an existing content document link in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocumentLink'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentDocumentLinkInBatch':
          summary: 'Delete Content Document Link'
          description: 'Delete an existing content document link in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentDocumentLink'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentDocumentLinkChangeEventInBatch':
          summary: 'Create Content Document Link Change Event'
          description: 'Create a new content document link change event in Batch'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentDocumentLinkChangeEventInBatch':
          summary: 'Update Content Document Link Change Event'
          description: 'Updates an existing content document link change event in
            batch; only elements specified in the request are updated.'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentDocumentLinkChangeEventInBatch':
          summary: 'Upsert Content Document Link Change Event'
          description: 'Upsert an existing content document link change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentDocumentLinkChangeEventInBatch':
          summary: 'Delete Content Document Link Change Event'
          description: 'Delete an existing content document link change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ContentDocumentLinkChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentFolderInBatch':
          summary: 'Create Content Folder'
          description: 'Create a new content folder in Batch'
          entityName: 'ContentFolder'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentFolderInBatch':
          summary: 'Update Content Folder'
          description: 'Updates an existing content folder in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentFolder'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderInBatch':
          summary: 'Upsert Content Folder'
          description: 'Upsert an existing content folder in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolder'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentFolderInBatch':
          summary: 'Delete Content Folder'
          description: 'Delete an existing content folder in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolder'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentFolderItemInBatch':
          summary: 'Create Content Folder Item'
          description: 'Create a new content folder item in Batch'
          entityName: 'ContentFolderItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentFolderItemInBatch':
          summary: 'Update Content Folder Item'
          description: 'Updates an existing content folder item in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentFolderItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderItemInBatch':
          summary: 'Upsert Content Folder Item'
          description: 'Upsert an existing content folder item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentFolderItemInBatch':
          summary: 'Delete Content Folder Item'
          description: 'Delete an existing content folder item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentFolderLinkInBatch':
          summary: 'Create Content Folder Link'
          description: 'Create a new content folder link in Batch'
          entityName: 'ContentFolderLink'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentFolderLinkInBatch':
          summary: 'Update Content Folder Link'
          description: 'Updates an existing content folder link in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentFolderLink'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderLinkInBatch':
          summary: 'Upsert Content Folder Link'
          description: 'Upsert an existing content folder link in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderLink'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentFolderLinkInBatch':
          summary: 'Delete Content Folder Link'
          description: 'Delete an existing content folder link in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderLink'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentFolderMemberInBatch':
          summary: 'Create Content Folder Member'
          description: 'Create a new content folder member in Batch'
          entityName: 'ContentFolderMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentFolderMemberInBatch':
          summary: 'Update Content Folder Member'
          description: 'Updates an existing content folder member in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentFolderMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentFolderMemberInBatch':
          summary: 'Upsert Content Folder Member'
          description: 'Upsert an existing content folder member in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentFolderMemberInBatch':
          summary: 'Delete Content Folder Member'
          description: 'Delete an existing content folder member in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentFolderMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentNoteInBatch':
          summary: 'Create Note'
          description: 'Create a new note in Batch'
          entityName: 'ContentNote'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentNoteInBatch':
          summary: 'Update Note'
          description: 'Updates an existing note in batch; only elements specified
            in the request are updated.'
          entityName: 'ContentNote'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentNoteInBatch':
          summary: 'Upsert Note'
          description: 'Upsert an existing note in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentNote'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentNoteInBatch':
          summary: 'Delete Note'
          description: 'Delete an existing note in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentNote'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentVersionInBatch':
          summary: 'Create Content Version'
          description: 'Create a new content version in Batch'
          entityName: 'ContentVersion'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentVersionInBatch':
          summary: 'Update Content Version'
          description: 'Updates an existing content version in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentVersion'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentVersionInBatch':
          summary: 'Upsert Content Version'
          description: 'Upsert an existing content version in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersion'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentVersionInBatch':
          summary: 'Delete Content Version'
          description: 'Delete an existing content version in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersion'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentVersionChangeEventInBatch':
          summary: 'Create Content Version Change Event'
          description: 'Create a new content version change event in Batch'
          entityName: 'ContentVersionChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentVersionChangeEventInBatch':
          summary: 'Update Content Version Change Event'
          description: 'Updates an existing content version change event in batch;
            only elements specified in the request are updated.'
          entityName: 'ContentVersionChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentVersionChangeEventInBatch':
          summary: 'Upsert Content Version Change Event'
          description: 'Upsert an existing content version change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContentVersionChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentVersionChangeEventInBatch':
          summary: 'Delete Content Version Change Event'
          description: 'Delete an existing content version change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ContentVersionChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentVersionHistoryInBatch':
          summary: 'Create Content Version History'
          description: 'Create a new content version history in Batch'
          entityName: 'ContentVersionHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentVersionHistoryInBatch':
          summary: 'Update Content Version History'
          description: 'Updates an existing content version history in batch; only
            elements specified in the request are updated.'
          entityName: 'ContentVersionHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentVersionHistoryInBatch':
          summary: 'Upsert Content Version History'
          description: 'Upsert an existing content version history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersionHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentVersionHistoryInBatch':
          summary: 'Delete Content Version History'
          description: 'Delete an existing content version history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentVersionHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentWorkspaceInBatch':
          summary: 'Create Library'
          description: 'Create a new library in Batch'
          entityName: 'ContentWorkspace'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentWorkspaceInBatch':
          summary: 'Update Library'
          description: 'Updates an existing library in batch; only elements specified
            in the request are updated.'
          entityName: 'ContentWorkspace'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspaceInBatch':
          summary: 'Upsert Library'
          description: 'Upsert an existing library in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspace'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentWorkspaceInBatch':
          summary: 'Delete Library'
          description: 'Delete an existing library in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspace'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentWorkspaceDocInBatch':
          summary: 'Create Library Document'
          description: 'Create a new library document in Batch'
          entityName: 'ContentWorkspaceDoc'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentWorkspaceDocInBatch':
          summary: 'Update Library Document'
          description: 'Updates an existing library document in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentWorkspaceDoc'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspaceDocInBatch':
          summary: 'Upsert Library Document'
          description: 'Upsert an existing library document in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspaceDoc'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentWorkspaceDocInBatch':
          summary: 'Delete Library Document'
          description: 'Delete an existing library document in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspaceDoc'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentWorkspaceMemberInBatch':
          summary: 'Create Library Member'
          description: 'Create a new library member in Batch'
          entityName: 'ContentWorkspaceMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentWorkspaceMemberInBatch':
          summary: 'Update Library Member'
          description: 'Updates an existing library member in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentWorkspaceMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspaceMemberInBatch':
          summary: 'Upsert Library Member'
          description: 'Upsert an existing library member in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspaceMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentWorkspaceMemberInBatch':
          summary: 'Delete Library Member'
          description: 'Delete an existing library member in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspaceMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContentWorkspacePermissionInBatch':
          summary: 'Create Library Permission'
          description: 'Create a new library permission in Batch'
          entityName: 'ContentWorkspacePermission'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContentWorkspacePermissionInBatch':
          summary: 'Update Library Permission'
          description: 'Updates an existing library permission in batch; only elements
            specified in the request are updated.'
          entityName: 'ContentWorkspacePermission'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContentWorkspacePermissionInBatch':
          summary: 'Upsert Library Permission'
          description: 'Upsert an existing library permission in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspacePermission'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContentWorkspacePermissionInBatch':
          summary: 'Delete Library Permission'
          description: 'Delete an existing library permission in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContentWorkspacePermission'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContractInBatch':
          summary: 'Create Contract'
          description: 'Create a new contract in Batch'
          entityName: 'Contract'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContractInBatch':
          summary: 'Update Contract'
          description: 'Updates an existing contract in batch; only elements specified
            in the request are updated.'
          entityName: 'Contract'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractInBatch':
          summary: 'Upsert Contract'
          description: 'Upsert an existing contract in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Contract'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContractInBatch':
          summary: 'Delete Contract'
          description: 'Delete an existing contract in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Contract'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContractChangeEventInBatch':
          summary: 'Create Contract Change Event'
          description: 'Create a new contract change event in Batch'
          entityName: 'ContractChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContractChangeEventInBatch':
          summary: 'Update Contract Change Event'
          description: 'Updates an existing contract change event in batch; only elements
            specified in the request are updated.'
          entityName: 'ContractChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractChangeEventInBatch':
          summary: 'Upsert Contract Change Event'
          description: 'Upsert an existing contract change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContractChangeEventInBatch':
          summary: 'Delete Contract Change Event'
          description: 'Delete an existing contract change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContractContactRoleInBatch':
          summary: 'Create Contract Contact Role'
          description: 'Create a new contract contact role in Batch'
          entityName: 'ContractContactRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContractContactRoleInBatch':
          summary: 'Update Contract Contact Role'
          description: 'Updates an existing contract contact role in batch; only elements
            specified in the request are updated.'
          entityName: 'ContractContactRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractContactRoleInBatch':
          summary: 'Upsert Contract Contact Role '
          description: 'Upsert an existing contract contact role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractContactRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContractContactRoleInBatch':
          summary: 'Delete Contract Contact Role'
          description: 'Delete an existing contract contact role in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractContactRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContractHistoryInBatch':
          summary: 'Create Contract History'
          description: 'Create a new contract history in Batch'
          entityName: 'ContractHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContractHistoryInBatch':
          summary: 'Update Contract History'
          description: 'Updates an existing contract history in batch; only elements
            specified in the request are updated.'
          entityName: 'ContractHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractHistoryInBatch':
          summary: 'Upsert Contract History'
          description: 'Upsert an existing contract history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContractHistoryInBatch':
          summary: 'Delete Contract History'
          description: 'Delete an existing contract history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateContractStatusInBatch':
          summary: 'Create Contract Status Value'
          description: 'Create a new contract status value in Batch'
          entityName: 'ContractStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateContractStatusInBatch':
          summary: 'Update Contract Status Value'
          description: 'Updates an existing contract status value in batch; only elements
            specified in the request are updated.'
          entityName: 'ContractStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertContractStatusInBatch':
          summary: 'Upsert Contract Status Value'
          description: 'Upsert an existing contract status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteContractStatusInBatch':
          summary: 'Delete Contract Status Value'
          description: 'Delete an existing contract status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ContractStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCorsWhitelistEntryInBatch':
          summary: 'Create CORS Allowed Origin List'
          description: 'Create a new cors allowed origin list in Batch'
          entityName: 'CorsWhitelistEntry'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCorsWhitelistEntryInBatch':
          summary: 'Update CORS Allowed Origin List'
          description: 'Updates an existing cors allowed origin list in batch; only
            elements specified in the request are updated.'
          entityName: 'CorsWhitelistEntry'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCorsWhitelistEntryInBatch':
          summary: 'Upsert CORS Allowed Origin List'
          description: 'Upsert an existing cors allowed origin list in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CorsWhitelistEntry'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCorsWhitelistEntryInBatch':
          summary: 'Delete CORS Allowed Origin List'
          description: 'Delete an existing cors allowed origin list in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CorsWhitelistEntry'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCredentialStuffingEventInBatch':
          summary: 'Create Credential Stuffing Event'
          description: 'Create a new credential stuffing event in Batch'
          entityName: 'CredentialStuffingEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCredentialStuffingEventInBatch':
          summary: 'Update Credential Stuffing Event'
          description: 'Updates an existing credential stuffing event in batch; only
            elements specified in the request are updated.'
          entityName: 'CredentialStuffingEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCredentialStuffingEventInBatch':
          summary: 'Upsert Credential Stuffing Event'
          description: 'Upsert an existing credential stuffing event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CredentialStuffingEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCredentialStuffingEventInBatch':
          summary: 'Delete Credential Stuffing Event'
          description: 'Delete an existing credential stuffing event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CredentialStuffingEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCredentialStuffingEventStoreInBatch':
          summary: 'Create Credential Stuffing Event Store'
          description: 'Create a new credential stuffing event store in Batch'
          entityName: 'CredentialStuffingEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCredentialStuffingEventStoreInBatch':
          summary: 'Update Credential Stuffing Event Store'
          description: 'Updates an existing credential stuffing event store in batch;
            only elements specified in the request are updated.'
          entityName: 'CredentialStuffingEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCredentialStuffingEventStoreInBatch':
          summary: 'Upsert Credential Stuffing Event Store'
          description: 'Upsert an existing credential stuffing event store in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CredentialStuffingEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCredentialStuffingEventStoreInBatch':
          summary: 'Delete Credential Stuffing Event Store'
          description: 'Delete an existing credential stuffing event store in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'CredentialStuffingEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCronJobDetailInBatch':
          summary: 'Create Cron Job'
          description: 'Create a new cron job in Batch'
          entityName: 'CronJobDetail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCronJobDetailInBatch':
          summary: 'Update Cron Job'
          description: 'Updates an existing cron job in batch; only elements specified
            in the request are updated.'
          entityName: 'CronJobDetail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCronJobDetailInBatch':
          summary: 'Upsert Cron Job'
          description: 'Upsert an existing cron job in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CronJobDetail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCronJobDetailInBatch':
          summary: 'Delete Cron Job'
          description: 'Delete an existing cron job in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CronJobDetail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCronTriggerInBatch':
          summary: 'Create Scheduled Jobs'
          description: 'Create a new scheduled jobs in batch'
          entityName: 'CronTrigger'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCronTriggerInBatch':
          summary: 'Update Scheduled Jobs'
          description: 'Updates an existing scheduled jobs in batch; only elements
            specified in the request are updated.'
          entityName: 'CronTrigger'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCronTriggerInBatch':
          summary: 'Upsert Scheduled Jobs'
          description: 'Upsert an existing scheduled jobs in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CronTrigger'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCronTriggerInBatch':
          summary: 'Delete Scheduled Jobs'
          description: 'Delete an existing scheduled jobs in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CronTrigger'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCspTrustedSiteInBatch':
          summary: 'Create Content Security Policy Trusted Site'
          description: 'Create a new content security policy trusted site in Batch'
          entityName: 'CspTrustedSite'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCspTrustedSiteInBatch':
          summary: 'Update Content Security Policy Trusted Site'
          description: 'Updates an existing content security policy trusted site in
            batch; only elements specified in the request are updated.'
          entityName: 'CspTrustedSite'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCspTrustedSiteInBatch':
          summary: 'Upsert Content Security Policy Trusted Site'
          description: 'Upsert an existing content security policy trusted site in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CspTrustedSite'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCspTrustedSiteInBatch':
          summary: 'Delete Content Security Policy Trusted Site'
          description: 'Delete an existing content security policy trusted site in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CspTrustedSite'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomBrandInBatch':
          summary: 'Create Custom Brand'
          description: 'Create a new custom brand in Batch'
          entityName: 'CustomBrand'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomBrandInBatch':
          summary: 'Update Custom Brand'
          description: 'Updates an existing custom brand in batch; only elements specified
            in the request are updated.'
          entityName: 'CustomBrand'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomBrandInBatch':
          summary: 'Upsert Custom Brand'
          description: 'Upsert an existing custom brand in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomBrand'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomBrandInBatch':
          summary: 'Delete Custom Brand'
          description: 'Delete an existing custom brand in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomBrand'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomBrandAssetInBatch':
          summary: 'Create Custom Brand Asset'
          description: 'Create a new custom brand asset in Batch'
          entityName: 'CustomBrandAsset'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomBrandAssetInBatch':
          summary: 'Update Custom Brand Asset'
          description: 'Updates an existing custom brand asset in batch; only elements
            specified in the request are updated.'
          entityName: 'CustomBrandAsset'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomBrandAssetInBatch':
          summary: 'Upsert Custom Brand Asset'
          description: 'Upsert an existing custom brand asset in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomBrandAsset'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomBrandAssetInBatch':
          summary: 'Delete Custom Brand Asset'
          description: 'Delete an existing custom brand asset in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomBrandAsset'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomHelpMenuItemInBatch':
          summary: 'Create Custom Help Menu Item'
          description: 'Create a new custom help menu item in Batch'
          entityName: 'CustomHelpMenuItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomHelpMenuItemInBatch':
          summary: 'Update Custom Help Menu Item'
          description: 'Updates an existing custom help menu item in batch; only elements
            specified in the request are updated.'
          entityName: 'CustomHelpMenuItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomHelpMenuItemInBatch':
          summary: 'Upsert Custom Help Menu Item'
          description: 'Upsert an existing custom help menu item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHelpMenuItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomHelpMenuItemInBatch':
          summary: 'Delete Custom Help Menu Item'
          description: 'Delete an existing custom help menu item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHelpMenuItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomHelpMenuSectionInBatch':
          summary: 'Create Custom Help Menu Section'
          description: 'Create a new custom help menu section in Batch'
          entityName: 'CustomHelpMenuSection'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomHelpMenuSectionInBatch':
          summary: 'Update Custom Help Menu Section'
          description: 'Updates an existing custom help menu section in batch; only
            elements specified in the request are updated.'
          entityName: 'CustomHelpMenuSection'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomHelpMenuSectionInBatch':
          summary: 'Upsert Custom Help Menu Section'
          description: 'Upsert an existing custom help menu section in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CustomHelpMenuSection'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomHelpMenuSectionInBatch':
          summary: 'Delete Custom Help Menu Section'
          description: 'Delete an existing custom help menu section in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CustomHelpMenuSection'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomHttpHeaderInBatch':
          summary: 'Create Custom HTTP Header'
          description: 'Create a new custom http header in Batch'
          entityName: 'CustomHttpHeader'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomHttpHeaderInBatch':
          summary: 'Update Custom HTTP Header'
          description: 'Updates an existing custom http header in batch; only elements
            specified in the request are updated.'
          entityName: 'CustomHttpHeader'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomHttpHeaderInBatch':
          summary: 'Upsert Custom HTTP Header'
          description: 'Upsert an existing custom http header in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHttpHeader'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomHttpHeaderInBatch':
          summary: 'Delete Custom HTTP Header'
          description: 'Delete an existing custom http header in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomHttpHeader'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomNotificationTypeInBatch':
          summary: 'Create Custom Notification Type'
          description: 'Create a new custom notification type in Batch'
          entityName: 'CustomNotificationType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomNotificationTypeInBatch':
          summary: 'Update Custom Notification Type'
          description: 'Updates an existing custom notification type in batch; only
            elements specified in the request are updated.'
          entityName: 'CustomNotificationType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomNotificationTypeInBatch':
          summary: 'Upsert Custom Notification Type'
          description: 'Upsert an existing custom notification type in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CustomNotificationType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomNotificationTypeInBatch':
          summary: 'Delete Custom Notification Type'
          description: 'Delete an existing custom notification type in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CustomNotificationType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomObjectUserLicenseMetricsInBatch':
          summary: 'Create Custom Object Usage By User License Metric'
          description: 'Create a new custom object usage by user license metric in
            Batch'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomObjectUserLicenseMetricsInBatch':
          summary: 'Update Custom Object Usage By User License Metric'
          description: 'Updates an existing custom object usage by user license metric
            in batch; only elements specified in the request are updated.'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomObjectUserLicenseMetricsInBatch':
          summary: 'Upsert Custom Object Usage By User License Metric'
          description: 'Upsert an existing custom object usage by user license metric
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomObjectUserLicenseMetricsInBatch':
          summary: 'Delete Custom Object Usage By User License Metric'
          description: 'Delete an existing custom object usage by user license metric
            in batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'CustomObjectUserLicenseMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomPermissionInBatch':
          summary: 'Create Custom Permission'
          description: 'Create a new custom permission in Batch'
          entityName: 'CustomPermission'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomPermissionInBatch':
          summary: 'Update Custom Permission'
          description: 'Updates an existing custom permission in batch; only elements
            specified in the request are updated.'
          entityName: 'CustomPermission'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomPermissionInBatch':
          summary: 'Upsert Custom Permission'
          description: 'Upsert an existing custom permission in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomPermission'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomPermissionInBatch':
          summary: 'Delete Custom Permission'
          description: 'Delete an existing custom permission in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomPermission'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomPermissionDependencyInBatch':
          summary: 'Create Custom Permission Dependency'
          description: 'Create a new custom permission dependency in Batch'
          entityName: 'CustomPermissionDependency'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomPermissionDependencyInBatch':
          summary: 'Update Custom Permission Dependency'
          description: 'Updates an existing custom permission dependency in batch;
            only elements specified in the request are updated.'
          entityName: 'CustomPermissionDependency'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomPermissionDependencyInBatch':
          summary: 'Upsert Custom Permission Dependency'
          description: 'Upsert an existing custom permission dependency in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CustomPermissionDependency'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomPermissionDependencyInBatch':
          summary: 'Delete Custom Permission Dependency'
          description: 'Delete an existing custom permission dependency in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'CustomPermissionDependency'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomerInBatch':
          summary: 'Create Customer'
          description: 'Create a new customer in Batch'
          entityName: 'Customer'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomerInBatch':
          summary: 'Update Customer'
          description: 'Updates an existing customer in batch; only elements specified
            in the request are updated.'
          entityName: 'Customer'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomerInBatch':
          summary: 'Upsert Customer'
          description: 'Upsert an existing customer in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Customer'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomerInBatch':
          summary: 'Delete Customer'
          description: 'Delete an existing customer in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Customer'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateCustomerShareInBatch':
          summary: 'Create Customer Share'
          description: 'Create a new customer share in Batch'
          entityName: 'CustomerShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateCustomerShareInBatch':
          summary: 'Update Customer Share'
          description: 'Updates an existing customer share in batch; only elements
            specified in the request are updated.'
          entityName: 'CustomerShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertCustomerShareInBatch':
          summary: 'Upsert Customer Share'
          description: 'Upsert an existing customer share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomerShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteCustomerShareInBatch':
          summary: 'Delete Customer Share'
          description: 'Delete an existing customer share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'CustomerShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDashboardInBatch':
          summary: 'Create Dashboard'
          description: 'Create a new dashboard in Batch'
          entityName: 'Dashboard'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDashboardInBatch':
          summary: 'Update Dashboard'
          description: 'Updates an existing dashboard in batch; only elements specified
            in the request are updated.'
          entityName: 'Dashboard'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDashboardInBatch':
          summary: 'Upsert Dashboard'
          description: 'Upsert an existing dashboard in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Dashboard'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDashboardInBatch':
          summary: 'Delete Dashboard '
          description: 'Delete an existing dashboard in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Dashboard'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDashboardComponentInBatch':
          summary: 'Create Dashboard Component'
          description: 'Create a new dashboard component in Batch'
          entityName: 'DashboardComponent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDashboardComponentInBatch':
          summary: 'Update Dashboard Component'
          description: 'Updates an existing dashboard component in batch; only elements
            specified in the request are updated.'
          entityName: 'DashboardComponent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDashboardComponentInBatch':
          summary: 'Upsert Dashboard Component'
          description: 'Upsert an existing dashboard component in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DashboardComponent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDashboardComponentInBatch':
          summary: 'Delete Dashboard Component'
          description: 'Delete an existing dashboard component in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DashboardComponent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataAssessmentFieldMetricInBatch':
          summary: 'Create Data Assessment Field Metric'
          description: 'Create a new data assessment field metric in Batch'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataAssessmentFieldMetricInBatch':
          summary: 'Update Data Assessment Field Metric'
          description: 'Updates an existing data assessment field metric in batch;
            only elements specified in the request are updated.'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataAssessmentFieldMetricInBatch':
          summary: 'Upsert Data Assessment Field Metric'
          description: 'Upsert an existing data assessment field metric in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataAssessmentFieldMetricInBatch':
          summary: 'Delete Data Assessment Field Metric'
          description: 'Delete an existing data assessment field metric in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataAssessmentFieldMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataAssessmentMetricInBatch':
          summary: 'Create Data Assessment Metric'
          description: 'Create a new data assessment metric in Batch'
          entityName: 'DataAssessmentMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataAssessmentMetricInBatch':
          summary: 'Update Data Assessment Metric'
          description: 'Updates an existing data assessment metric in batch; only
            elements specified in the request are updated.'
          entityName: 'DataAssessmentMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataAssessmentMetricInBatch':
          summary: 'Upsert Data Assessment Metric'
          description: 'Upsert an existing data assessment metric in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataAssessmentMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataAssessmentMetricInBatch':
          summary: 'Delete Data Assessment Metric'
          description: 'Delete an existing data assessment metric in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataAssessmentMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataAssessmentValueMetricInBatch':
          summary: 'Create Data Assessment Field Value Metric'
          description: 'Create a new data assessment field value metric in Batch'
          entityName: 'DataAssessmentValueMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataAssessmentValueMetricInBatch':
          summary: 'Update Data Assessment Field Value Metric'
          description: 'Updates an existing data assessment field value metric in
            batch; only elements specified in the request are updated.'
          entityName: 'DataAssessmentValueMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataAssessmentValueMetricInBatch':
          summary: 'Upsert Data Assessment Field Value Metric'
          description: 'Upsert an existing data assessment field value metric in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'DataAssessmentValueMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataAssessmentValueMetricInBatch':
          summary: 'Delete Data Assessment Field Value Metric'
          description: 'Delete an existing data assessment field value metric in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'DataAssessmentValueMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataObjectDataChgEventInBatch':
          summary: 'Create Data Object Data Change Event'
          description: 'Create a new data object data change event in Batch'
          entityName: 'DataObjectDataChgEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataObjectDataChgEventInBatch':
          summary: 'Update Data Object Data Change Event'
          description: 'Updates an existing data object data change event in batch;
            only elements specified in the request are updated.'
          entityName: 'DataObjectDataChgEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataObjectDataChgEventInBatch':
          summary: 'Upsert Data Object Data Change Event'
          description: 'Upsert an existing data object data change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'DataObjectDataChgEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataObjectDataChgEventInBatch':
          summary: 'Delete Data Object Data Change Event'
          description: 'Delete an existing data object data change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'DataObjectDataChgEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataStatisticsInBatch':
          summary: 'Create Data Statistics'
          description: 'Create a new data statistics in Batch'
          entityName: 'DataStatistics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataStatisticsInBatch':
          summary: 'Update Data Statistics'
          description: 'Updates an existing data statistics in batch; only elements
            specified in the request are updated.'
          entityName: 'DataStatistics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataStatisticsInBatch':
          summary: 'Upsert Data Statistics'
          description: 'Upsert an existing data statistics in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataStatistics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataStatisticsInBatch':
          summary: 'Delete Data Statistics'
          description: 'Delete an existing data statistics in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataStatistics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataTypeInBatch':
          summary: 'Create Data Type'
          description: 'Create a new data type in Batch'
          entityName: 'DataType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataTypeInBatch':
          summary: 'Update Data Type'
          description: 'Updates an existing data type in batch; only elements specified
            in the request are updated.'
          entityName: 'DataType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataTypeInBatch':
          summary: 'Upsert Data Type'
          description: 'Upsert an existing data type in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataTypeInBatch':
          summary: 'Delete Data Type'
          description: 'Delete an existing data type in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataUseLegalBasisInBatch':
          summary: 'Create Data Use Legal Basis'
          description: 'Create a new data use legal basis in Batch'
          entityName: 'DataUseLegalBasis'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataUseLegalBasisInBatch':
          summary: 'Update Data Use Legal Basis'
          description: 'Updates an existing data use legal basis in batch; only elements
            specified in the request are updated.'
          entityName: 'DataUseLegalBasis'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUseLegalBasisInBatch':
          summary: 'Upsert Data Use Legal Basis'
          description: 'Upsert an existing data use legal basis in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUseLegalBasis'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataUseLegalBasisInBatch':
          summary: 'Delete Data Use Legal Basis'
          description: 'Delete an existing data use legal basis in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUseLegalBasis'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataUseLegalBasisHistoryInBatch':
          summary: 'Create Data Use Legal Basis  History'
          description: 'Create a new data use legal basis  history in Batch'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataUseLegalBasisHistoryInBatch':
          summary: 'Update Data Use Legal Basis  History'
          description: 'Updates an existing data use legal basis  history in batch;
            only elements specified in the request are updated.'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUseLegalBasisHistoryInBatch':
          summary: 'Upsert Data Use Legal Basis  History'
          description: 'Upsert an existing data use legal basis  history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataUseLegalBasisHistoryInBatch':
          summary: 'Delete Data Use Legal Basis  History'
          description: 'Delete an existing data use legal basis  history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'DataUseLegalBasisHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataUseLegalBasisShareInBatch':
          summary: 'Create Data Use Legal Basis Share'
          description: 'Create a new data use legal basis share in Batch'
          entityName: 'DataUseLegalBasisShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataUseLegalBasisShareInBatch':
          summary: 'Update Data Use Legal Basis Share'
          description: 'Updates an existing data use legal basis share in batch; only
            elements specified in the request are updated.'
          entityName: 'DataUseLegalBasisShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUseLegalBasisShareInBatch':
          summary: 'Upsert Data Use Legal Basis Share'
          description: 'Upsert an existing data use legal basis share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataUseLegalBasisShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataUseLegalBasisShareInBatch':
          summary: 'Delete Data Use Legal Basis Share'
          description: 'Delete an existing data use legal basis share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataUseLegalBasisShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataUsePurposeInBatch':
          summary: 'Create Data Use Purpose'
          description: 'Create a new data use purpose in Batch'
          entityName: 'DataUsePurpose'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataUsePurposeInBatch':
          summary: 'Update Data Use Purpose'
          description: 'Updates an existing data use purpose in batch; only elements
            specified in the request are updated.'
          entityName: 'DataUsePurpose'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUsePurposeInBatch':
          summary: 'Upsert Data Use Purpose'
          description: 'Upsert an existing data use purpose in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurpose'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataUsePurposeInBatch':
          summary: 'Delete Data Use Purpose'
          description: 'Delete an existing data use purpose in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurpose'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataUsePurposeHistoryInBatch':
          summary: 'Create Data Use Purpose  History'
          description: 'Create a new data use purpose  history in Batch'
          entityName: 'DataUsePurposeHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataUsePurposeHistoryInBatch':
          summary: 'Update Data Use Purpose  History'
          description: 'Updates an existing data use purpose  history in batch; only
            elements specified in the request are updated.'
          entityName: 'DataUsePurposeHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUsePurposeHistoryInBatch':
          summary: 'Upsert Data Use Purpose  History'
          description: 'Upsert an existing data use purpose  history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataUsePurposeHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataUsePurposeHistoryInBatch':
          summary: 'Delete Data Use Purpose  History'
          description: 'Delete an existing data use purpose  history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'DataUsePurposeHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDataUsePurposeShareInBatch':
          summary: 'Create Data Use Purpose Share'
          description: 'Create a new data use purpose share in Batch'
          entityName: 'DataUsePurposeShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDataUsePurposeShareInBatch':
          summary: 'Update Data Use Purpose Share'
          description: 'Updates an existing data use purpose share in batch; only
            elements specified in the request are updated.'
          entityName: 'DataUsePurposeShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDataUsePurposeShareInBatch':
          summary: 'Upsert Data Use Purpose Share'
          description: 'Upsert an existing data use purpose share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurposeShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDataUsePurposeShareInBatch':
          summary: 'Delete Data Use Purpose Share'
          description: 'Delete an existing data use purpose share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DataUsePurposeShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDatacloudAddressInBatch':
          summary: 'Create Data.com Address'
          description: 'Create a new data.com address in Batch'
          entityName: 'DatacloudAddress'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDatacloudAddressInBatch':
          summary: 'Update Data.com Address'
          description: 'Updates an existing data.com address in batch; only elements
            specified in the request are updated.'
          entityName: 'DatacloudAddress'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDatacloudAddressInBatch':
          summary: 'Upsert Data.com Address'
          description: 'Upsert an existing data.com address in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DatacloudAddress'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDatacloudAddressInBatch':
          summary: 'Delete Data.com Address'
          description: 'Delete an existing data.com address in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DatacloudAddress'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDeclinedEventRelationInBatch':
          summary: 'Create Declined Event Relation'
          description: 'Create a new declined event relation in Batch'
          entityName: 'DeclinedEventRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDeclinedEventRelationInBatch':
          summary: 'Update Declined Event Relation'
          description: 'Updates an existing declined event relation in batch; only
            elements specified in the request are updated.'
          entityName: 'DeclinedEventRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDeclinedEventRelationInBatch':
          summary: 'Upsert Declined Event Relation'
          description: 'Upsert an existing declined event relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DeclinedEventRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDeclinedEventRelationInBatch':
          summary: 'Delete Declined Event Relation'
          description: 'Delete an existing declined event relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DeclinedEventRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDeleteEventInBatch':
          summary: 'Create Recycle Bin Item'
          description: 'Create a new recycle bin item in Batch'
          entityName: 'DeleteEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDeleteEventInBatch':
          summary: 'Update Recycle Bin Item'
          description: 'Updates an existing recycle bin item in batch; only elements
            specified in the request are updated.'
          entityName: 'DeleteEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDeleteEventInBatch':
          summary: 'Upsert Recycle Bin Item'
          description: 'Upsert an existing recycle bin item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DeleteEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDeleteEventInBatch':
          summary: 'Delete Recycle Bin Item'
          description: 'Delete an existing recycle bin item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DeleteEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDocumentInBatch':
          summary: 'Create Document'
          description: 'Create a new document in Batch'
          entityName: 'Document'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDocumentInBatch':
          summary: 'Update Document'
          description: 'Updates an existing document in batch; only elements specified
            in the request are updated.'
          entityName: 'Document'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDocumentInBatch':
          summary: 'Upsert Document'
          description: 'Upsert an existing document in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Document'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDocumentInBatch':
          summary: 'Delete Document'
          description: 'Delete an existing document in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Document'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDocumentAttachmentMapInBatch':
          summary: 'Create Document Entity Map'
          description: 'Create a new document entity map in Batch'
          entityName: 'DocumentAttachmentMap'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDocumentAttachmentMapInBatch':
          summary: 'Update Document Entity Map'
          description: 'Updates an existing document entity map in batch; only elements
            specified in the request are updated.'
          entityName: 'DocumentAttachmentMap'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDocumentAttachmentMapInBatch':
          summary: 'Upsert Document Entity Map'
          description: 'Upsert an existing document entity map in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DocumentAttachmentMap'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDocumentAttachmentMapInBatch':
          summary: 'Delete Document Entity Map'
          description: 'Delete an existing document entity map in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DocumentAttachmentMap'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDomainInBatch':
          summary: 'Create Domain'
          description: 'Create a new domain in Batch'
          entityName: 'Domain'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDomainInBatch':
          summary: 'Update Domain'
          description: 'Updates an existing domain in batch; only elements specified
            in the request are updated.'
          entityName: 'Domain'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDomainInBatch':
          summary: 'Upsert Domain'
          description: 'Upsert an existing domain in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Domain'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDomainInBatch':
          summary: 'Delete Domain'
          description: 'Delete an existing domain in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Domain'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDomainSiteInBatch':
          summary: 'Create Custom URL'
          description: 'Create a new custom url in Batch'
          entityName: 'DomainSite'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDomainSiteInBatch':
          summary: 'Update Custom URL'
          description: 'Updates an existing custom url in batch; only elements specified
            in the request are updated.'
          entityName: 'DomainSite'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDomainSiteInBatch':
          summary: 'Upsert Custom URL'
          description: 'Upsert an existing custom url in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DomainSite'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDomainSiteInBatch':
          summary: 'Delete Custom URL'
          description: 'Delete an existing custom url in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DomainSite'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDuplicateRecordItemInBatch':
          summary: 'Create Duplicate Record Item'
          description: 'Create a new duplicate record item in Batch'
          entityName: 'DuplicateRecordItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDuplicateRecordItemInBatch':
          summary: 'Update Duplicate Record Item'
          description: 'Updates an existing duplicate record item in batch; only elements
            specified in the request are updated.'
          entityName: 'DuplicateRecordItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDuplicateRecordItemInBatch':
          summary: 'Upsert Duplicate Record Item'
          description: 'Upsert an existing duplicate record item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRecordItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDuplicateRecordItemInBatch':
          summary: 'Delete Duplicate Record Item'
          description: 'Delete an existing duplicate record item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRecordItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDuplicateRecordSetInBatch':
          summary: 'Create Duplicate Record Set'
          description: 'Create a new duplicate record set in Batch'
          entityName: 'DuplicateRecordSet'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDuplicateRecordSetInBatch':
          summary: 'Update Duplicate Record Set'
          description: 'Updates an existing duplicate record set in batch; only elements
            specified in the request are updated.'
          entityName: 'DuplicateRecordSet'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDuplicateRecordSetInBatch':
          summary: 'Upsert Duplicate Record Set'
          description: 'Upsert an existing duplicate record set in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRecordSet'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDuplicateRecordSetInBatch':
          summary: 'Delete Duplicate Record Set'
          description: 'Delete an existing duplicate record set in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRecordSet'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateDuplicateRuleInBatch':
          summary: 'Create Duplicate Rule'
          description: 'Create a new duplicate rule in Batch'
          entityName: 'DuplicateRule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateDuplicateRuleInBatch':
          summary: 'Update Duplicate Rule'
          description: 'Updates an existing duplicate rule in batch; only elements
            specified in the request are updated.'
          entityName: 'DuplicateRule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertDuplicateRuleInBatch':
          summary: 'Upsert Duplicate Rule'
          description: 'Upsert an existing duplicate rule in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteDuplicateRuleInBatch':
          summary: 'Delete Duplicate Rule'
          description: 'Delete an existing duplicate rule in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'DuplicateRule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailCaptureInBatch':
          summary: 'Create EmailCapture'
          description: 'Create a new emailcapture in Batch'
          entityName: 'EmailCapture'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailCaptureInBatch':
          summary: 'Update EmailCapture'
          description: 'Updates an existing emailcapture in batch only elements specified
            in the request are updated.'
          entityName: 'EmailCapture'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailCaptureInBatch':
          summary: 'Upsert EmailCapture'
          description: 'Upsert an existing emailcapture in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailCapture'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailCaptureInBatch':
          summary: 'Delete EmailCapture'
          description: 'Delete an existing emailcapture in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailCapture'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailDomainFilterInBatch':
          summary: 'Create Email Domain Filter'
          description: 'Create a new email domain filter in Batch'
          entityName: 'EmailDomainFilter'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailDomainFilterInBatch':
          summary: 'Update Email Domain Filter'
          description: 'Updates an existing email domain filter in batch; only elements
            specified in the request are updated.'
          entityName: 'EmailDomainFilter'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailDomainFilterInBatch':
          summary: 'Upsert Email Domain Filter'
          description: 'Upsert an existing email domain filter in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailDomainFilter'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailDomainFilterInBatch':
          summary: 'Delete Email Domain Filter'
          description: 'Delete an existing email domain filter in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailDomainFilter'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailDomainKeyInBatch':
          summary: 'Create Email Domain Key'
          description: 'Create a new email domain key in Batch'
          entityName: 'EmailDomainKey'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailDomainKeyInBatch':
          summary: 'Update Email Domain Key'
          description: 'Updates an existing email domain key in batch; only elements
            specified in the request are updated.'
          entityName: 'EmailDomainKey'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailDomainKeyInBatch':
          summary: 'Upsert Email Domain Key'
          description: 'Upsert an existing email domain key in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailDomainKey'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailDomainKeyInBatch':
          summary: 'Delete Email Domain Key'
          description: 'Delete an existing email domain key in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailDomainKey'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailMessageInBatch':
          summary: 'Create Email Message'
          description: 'Create a new email message in Batch'
          entityName: 'EmailMessage'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailMessageInBatch':
          summary: 'Update Email Message'
          description: 'Updates an existing email message in batch; only elements
            specified in the request are updated.'
          entityName: 'EmailMessage'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailMessageInBatch':
          summary: 'Upsert Email Message'
          description: 'Upsert an existing email message in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessage'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailMessageInBatch':
          summary: 'Delete Email Message'
          description: 'Delete an existing email message in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessage'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailMessageChangeEventInBatch':
          summary: 'Create Email Message Change Event'
          description: 'Create a new email message change event in Batch'
          entityName: 'EmailMessageChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailMessageChangeEventInBatch':
          summary: 'Update Email Message Change Event'
          description: 'Updates an existing email message change event in batch; only
            elements specified in the request are updated.'
          entityName: 'EmailMessageChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailMessageChangeEventInBatch':
          summary: 'Upsert Email Message Change Event'
          description: 'Upsert an existing email message change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EmailMessageChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailMessageChangeEventInBatch':
          summary: 'Delete Email Message Change Event'
          description: 'Delete an existing email message change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EmailMessageChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailMessageRelationInBatch':
          summary: 'Create Email Message Relation'
          description: 'Create a new email message relation in Batch'
          entityName: 'EmailMessageRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailMessageRelationInBatch':
          summary: 'Update Email Message Relation'
          description: 'Updates an existing email message relation in batch; only
            elements specified in the request are updated.'
          entityName: 'EmailMessageRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailMessageRelationInBatch':
          summary: 'Upsert Email Message Relation'
          description: 'Upsert an existing email message relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessageRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailMessageRelationInBatch':
          summary: 'Delete Email Message Relation'
          description: 'Delete an existing email message relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailMessageRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailRelayInBatch':
          summary: 'Create Email Relay'
          description: 'Create a new email relay in Batch'
          entityName: 'EmailRelay'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailRelayInBatch':
          summary: 'Update Email Relay'
          description: 'Updates an existing email relay in batch; only elements specified
            in the request are updated.'
          entityName: 'EmailRelay'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailRelayInBatch':
          summary: 'Upsert Email Relay'
          description: 'Upsert an existing email relay in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailRelay'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailRelayInBatch':
          summary: 'Delete Email Relay'
          description: 'Delete an existing email relay in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailRelay'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailServicesAddressInBatch':
          summary: 'Create Email Services Address'
          description: 'Create a new email services address in Batch'
          entityName: 'EmailServicesAddress'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailServicesAddressInBatch':
          summary: 'Update Email Services Address'
          description: 'Updates an existing email services address in batch; only
            elements specified in the request are updated.'
          entityName: 'EmailServicesAddress'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailServicesAddressInBatch':
          summary: 'Upsert Email Services Address'
          description: 'Upsert an existing email services address in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailServicesAddress'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailServicesAddressInBatch':
          summary: 'Delete Email Services Address'
          description: 'Delete an existing email services address in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailServicesAddress'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailServicesFunctionInBatch':
          summary: 'Create Email Service'
          description: 'Create a new email service in Batch'
          entityName: 'EmailServicesFunction'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailServicesFunctionInBatch':
          summary: 'Update Email Service'
          description: 'Updates an existing email service in batch; only elements
            specified in the request are updated.'
          entityName: 'EmailServicesFunction'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailServicesFunctionInBatch':
          summary: 'Upsert Email Service'
          description: 'Upsert an existing email service in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailServicesFunction'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailServicesFunctionInBatch':
          summary: 'Delete Email Service'
          description: 'Delete an existing email service in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailServicesFunction'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailStatusInBatch':
          summary: 'Create Email Status'
          description: 'Create a new email status in Batch'
          entityName: 'EmailStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailStatusInBatch':
          summary: 'Update Email Status'
          description: 'Updates an existing email status in batch; only elements specified
            in the request are updated.'
          entityName: 'EmailStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailStatusInBatch':
          summary: 'Upsert Email Status'
          description: 'Upsert an existing email status in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailStatusInBatch':
          summary: 'Delete Email Status'
          description: 'Delete an existing email status in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailTemplateInBatch':
          summary: 'Create Email Template'
          description: 'Create a new email template in Batch'
          entityName: 'EmailTemplate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailTemplateInBatch':
          summary: 'Update Email Template'
          description: 'Updates an existing email template in batch; only elements
            specified in the request are updated.'
          entityName: 'EmailTemplate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailTemplateInBatch':
          summary: 'Upsert Email Template'
          description: 'Upsert an existing email template in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailTemplate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailTemplateInBatch':
          summary: 'Delete Email Template'
          description: 'Delete an existing email template in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmailTemplate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmailTemplateChangeEventInBatch':
          summary: 'Create Email Template Change Event'
          description: 'Create a new email template change event in Batch'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmailTemplateChangeEventInBatch':
          summary: 'Update Email Template Change Event'
          description: 'Updates an existing email template change event in batch;
            only elements specified in the request are updated.'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmailTemplateChangeEventInBatch':
          summary: 'Upsert Email Template Change Event'
          description: 'Upsert an existing email template change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmailTemplateChangeEventInBatch':
          summary: 'Delete Email Template Change Event'
          description: 'Delete an existing email template change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EmailTemplateChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmbeddedServiceDetailInBatch':
          summary: 'Create Embedded Service'
          description: 'Create a new embedded service in Batch'
          entityName: 'EmbeddedServiceDetail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmbeddedServiceDetailInBatch':
          summary: 'Update Embedded Service'
          description: 'Updates an existing embedded service in batch; only elements
            specified in the request are updated.'
          entityName: 'EmbeddedServiceDetail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmbeddedServiceDetailInBatch':
          summary: 'Upsert Embedded Service'
          description: 'Upsert an existing embedded service in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmbeddedServiceDetail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmbeddedServiceDetailInBatch':
          summary: 'Delete Embedded Service'
          description: 'Delete an existing embedded service in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmbeddedServiceDetail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEmbeddedServiceLabelInBatch':
          summary: 'Create Embedded Service Label'
          description: 'Create a new embedded service label in Batch'
          entityName: 'EmbeddedServiceLabel'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEmbeddedServiceLabelInBatch':
          summary: 'Update Embedded Service Label'
          description: 'Updates an existing embedded service label in batch; only
            elements specified in the request are updated.'
          entityName: 'EmbeddedServiceLabel'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEmbeddedServiceLabelInBatch':
          summary: 'Upsert Embedded Service Label'
          description: 'Upsert an existing embedded service label in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmbeddedServiceLabel'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEmbeddedServiceLabelInBatch':
          summary: 'Delete Embedded Service Label'
          description: 'Delete an existing embedded service label in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EmbeddedServiceLabel'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEngagementChannelTypeInBatch':
          summary: 'Create Engagement Channel Type'
          description: 'Create a new engagement channel type in Batch'
          entityName: 'EngagementChannelType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEngagementChannelTypeInBatch':
          summary: 'Update Engagement Channel Type'
          description: 'Updates an existing engagement channel type in batch; only
            elements specified in the request are updated.'
          entityName: 'EngagementChannelType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEngagementChannelTypeInBatch':
          summary: 'Upsert Engagement Channel Type'
          description: 'Upsert an existing engagement channel type in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EngagementChannelType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEngagementChannelTypeInBatch':
          summary: 'Delete Engagement Channel Type'
          description: 'Delete an existing engagement channel type in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EngagementChannelType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEngagementChannelTypeHistoryInBatch':
          summary: 'Create Engagement Channel Type  History'
          description: 'Create a new engagement channel type  history in Batch'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEngagementChannelTypeHistoryInBatch':
          summary: 'Update Engagement Channel Type  History'
          description: 'Updates an existing engagement channel type  history in batch;
            only elements specified in the request are updated.'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEngagementChannelTypeHistoryInBatch':
          summary: 'Upsert Engagement Channel Type  History'
          description: 'Upsert an existing engagement channel type  history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEngagementChannelTypeHistoryInBatch':
          summary: 'Delete Engagement Channel Type  History'
          description: 'Delete an existing engagement channel type  history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'EngagementChannelTypeHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEngagementChannelTypeShareInBatch':
          summary: 'Create Engagement Channel Type Share'
          description: 'Create a new engagement channel type share in Batch'
          entityName: 'EngagementChannelTypeShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEngagementChannelTypeShareInBatch':
          summary: 'Update Engagement Channel Type Share'
          description: 'Updates an existing engagement channel type share in batch;
            only elements specified in the request are updated.'
          entityName: 'EngagementChannelTypeShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEngagementChannelTypeShareInBatch':
          summary: 'Upsert Engagement Channel Type Share'
          description: 'Upsert an existing engagement channel type share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'EngagementChannelTypeShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEngagementChannelTypeShareInBatch':
          summary: 'Delete Engagement Channel Type Share'
          description: 'Delete an existing engagement channel type share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'EngagementChannelTypeShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEntityDefinitionInBatch':
          summary: 'Create Entity Definition'
          description: 'Create a new entity definition in Batch'
          entityName: 'EntityDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEntityDefinitionInBatch':
          summary: 'Update Entity Definition'
          description: 'Updates an existing entity definition in batch; only elements
            specified in the request are updated.'
          entityName: 'EntityDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEntityDefinitionInBatch':
          summary: 'Upsert Entity Definition'
          description: 'Upsert an existing entity definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EntityDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEntityDefinitionInBatch':
          summary: 'Delete Entity Definition'
          description: 'Delete an existing entity definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EntityDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEntityParticleInBatch':
          summary: 'Create Entity Particle'
          description: 'Create a new entity particle in Batch'
          entityName: 'EntityParticle'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEntityParticleInBatch':
          summary: 'Update Entity Particle'
          description: 'Updates an existing entity particle in batch; only elements
            specified in the request are updated.'
          entityName: 'EntityParticle'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEntityParticleInBatch':
          summary: 'Upsert Entity Particle'
          description: 'Upsert an existing entity particle in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EntityParticle'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEntityParticleInBatch':
          summary: 'Delete Entity Particle'
          description: 'Delete an existing entity particle in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EntityParticle'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventInBatch':
          summary: 'Create Event'
          description: 'Create a new event in Batch'
          entityName: 'Event'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventInBatch':
          summary: 'Update Event'
          description: 'Updates an existing event in batch; only elements specified
            in the request are updated.'
          entityName: 'Event'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventInBatch':
          summary: 'Upsert Event'
          description: 'Upsert an existing event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Event'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventInBatch':
          summary: 'Delete Event'
          description: 'Delete an existing event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Event'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventBusSubscriberInBatch':
          summary: 'Create Platform Event Subscription'
          description: 'Create a new platform event subscription in Batch'
          entityName: 'EventBusSubscriber'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventBusSubscriberInBatch':
          summary: 'Update Platform Event Subscription'
          description: 'Updates an existing platform event subscription in batch;
            only elements specified in the request are updated.'
          entityName: 'EventBusSubscriber'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventBusSubscriberInBatch':
          summary: 'Upsert Platform Event Subscription'
          description: 'Upsert an existing platform event subscription in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EventBusSubscriber'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventBusSubscriberInBatch':
          summary: 'Delete Platform Event Subscription'
          description: 'Delete an existing platform event subscription in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EventBusSubscriber'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventChangeEventInBatch':
          summary: 'Create Event Change Event'
          description: 'Create a new event change event in Batch'
          entityName: 'EventChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventChangeEventInBatch':
          summary: 'Update Event Change Event'
          description: 'Updates an existing event change event in batch; only elements
            specified in the request are updated.'
          entityName: 'EventChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventChangeEventInBatch':
          summary: 'Upsert Event Change Event'
          description: 'Upsert an existing event change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventChangeEventInBatch':
          summary: 'Delete Event Change Event'
          description: 'Delete an existing event change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventLogFileInBatch':
          summary: 'Create Event Log File'
          description: 'Create a new event log file in Batch'
          entityName: 'EventLogFile'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventLogFileInBatch':
          summary: 'Update Event Log File'
          description: 'Updates an existing event log file in batch; only elements
            specified in the request are updated.'
          entityName: 'EventLogFile'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventLogFileInBatch':
          summary: 'Upsert Event Log File'
          description: 'Upsert an existing event log file in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventLogFile'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventLogFileInBatch':
          summary: 'Delete Event Log File'
          description: 'Delete an existing event log file in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventLogFile'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventRelationInBatch':
          summary: 'Create Event Relation'
          description: 'Create a new event relation in Batch'
          entityName: 'EventRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventRelationInBatch':
          summary: 'Update Event Relation'
          description: 'Updates an existing event relation in batch; only elements
            specified in the request are updated.'
          entityName: 'EventRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelationInBatch':
          summary: 'Upsert Event Relation'
          description: 'Upsert an existing event relation in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventRelationInBatch':
          summary: 'Delete Event Relation'
          description: 'Delete an existing event relation in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventRelationChangeEventInBatch':
          summary: 'Create Event Relation Change Event'
          description: 'Create a new event relation change event in Batch'
          entityName: 'EventRelationChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventRelationChangeEventInBatch':
          summary: 'Update Event Relation Change Event'
          description: 'Updates an existing event relation change event in batch;
            only elements specified in the request are updated.'
          entityName: 'EventRelationChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelationChangeEventInBatch':
          summary: 'Upsert Event Relation Change Event'
          description: 'Upsert an existing event relation change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EventRelationChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventRelationChangeEventInBatch':
          summary: 'Delete Event Relation Change Event'
          description: 'Delete an existing event relation change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'EventRelationChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventRelayConfigInBatch':
          summary: 'Create Event Relay Config'
          description: 'Create a new event relay config in Batch'
          entityName: 'EventRelayConfig'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventRelayConfigInBatch':
          summary: 'Update Event Relay Config'
          description: 'Updates an existing event relay config in batch; only elements
            specified in the request are updated.'
          entityName: 'EventRelayConfig'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelayConfigInBatch':
          summary: 'Upsert Event Relay Config'
          description: 'Upsert an existing event relay config in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayConfig'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventRelayConfigInBatch':
          summary: 'Delete Event Relay Config'
          description: 'Delete an existing event relay config in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayConfig'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventRelayConfigChangeEventInBatch':
          summary: 'Create Event Relay Config Change Event'
          description: 'Create a new event relay config change event in Batch'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventRelayConfigChangeEventInBatch':
          summary: 'Update Event Relay Config Change Event'
          description: 'Updates an existing event relay config change event in batch;
            only elements specified in the request are updated.'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelayConfigChangeEventInBatch':
          summary: 'Upsert Event Relay Config Change Event'
          description: 'Upsert an existing event relay config change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventRelayConfigChangeEventInBatch':
          summary: 'Delete Event Relay Config Change Event'
          description: 'Delete an existing event relay config change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'EventRelayConfigChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateEventRelayFeedbackInBatch':
          summary: 'Create Event Relay Feedback'
          description: 'Create a new event relay feedback in Batch'
          entityName: 'EventRelayFeedback'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateEventRelayFeedbackInBatch':
          summary: 'Update Event Relay Feedback'
          description: 'Updates an existing event relay feedback in batch; only elements
            specified in the request are updated.'
          entityName: 'EventRelayFeedback'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertEventRelayFeedbackInBatch':
          summary: 'Upsert Event Relay Feedback'
          description: 'Upsert an existing event relay feedback in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayFeedback'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteEventRelayFeedbackInBatch':
          summary: 'Delete Event Relay Feedback'
          description: 'Delete an existing event relay feedback in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'EventRelayFeedback'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExpenses__ChangeEventInBatch':
          summary: 'Create Change Event: Expense'
          description: 'Create a new change event: expense in Batch'
          entityName: 'Expenses__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExpenses__ChangeEventInBatch':
          summary: 'Update Change Event: Expense'
          description: 'Updates an existing change event: expense in batch; only elements
            specified in the request are updated.'
          entityName: 'Expenses__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpenses__ChangeEventInBatch':
          summary: 'Upsert Change Event: Expense'
          description: 'Upsert an existing change event: expense in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Expenses__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExpenses__ChangeEventInBatch':
          summary: 'Delete Change Event: Expense'
          description: 'Delete an existing change event: expense in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Expenses__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExpenses__cInBatch':
          summary: 'Create Expense'
          description: 'Create a new expense in Batch'
          entityName: 'Expenses__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExpenses__cInBatch':
          summary: 'Update Expense'
          description: 'Updates an existing expense in batch; only elements specified
            in the request are updated.'
          entityName: 'Expenses__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpenses__cInBatch':
          summary: 'Upsert Expense'
          description: 'Upsert an existing expense in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Expenses__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExpenses__cInBatch':
          summary: 'Delete Expense'
          description: 'Delete an existing expense in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Expenses__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExpressionFilterInBatch':
          summary: 'Create ExpressionFilter'
          description: 'Create a new expressionfilter in Batch'
          entityName: 'ExpressionFilter'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExpressionFilterInBatch':
          summary: 'Update ExpressionFilter'
          description: 'Updates an existing expressionfilter in batch; only elements
            specified in the request are updated.'
          entityName: 'ExpressionFilter'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpressionFilterInBatch':
          summary: 'Upsert ExpressionFilter'
          description: 'Upsert an existing expressionfilter in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionFilter'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExpressionFilterInBatch':
          summary: 'Delete ExpressionFilter'
          description: 'Delete an existing expressionfilter in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionFilter'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExpressionFilterCriteriaInBatch':
          summary: 'Create ExpressionFilterCriteria'
          description: 'Create a new expressionfiltercriteria in Batch'
          entityName: 'ExpressionFilterCriteria'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExpressionFilterCriteriaInBatch':
          summary: 'Update ExpressionFilterCriteria'
          description: 'Updates an existing expressionfiltercriteria in batch; only
            elements specified in the request are updated.'
          entityName: 'ExpressionFilterCriteria'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpressionFilterCriteriaInBatch':
          summary: 'Upsert ExpressionFilterCriteria'
          description: 'Upsert an existing expressionfiltercriteria in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ExpressionFilterCriteria'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExpressionFilterCriteriaInBatch':
          summary: 'Delete ExpressionFilterCriteria'
          description: 'Delete an existing expressionfiltercriteria in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ExpressionFilterCriteria'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExpressionSetViewInBatch':
          summary: 'Create Expression Set View'
          description: 'Create a new expression set view in Batch'
          entityName: 'ExpressionSetView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExpressionSetViewInBatch':
          summary: 'Update Expression Set View'
          description: 'Updates an existing expression set view in batch; only elements
            specified in the request are updated.'
          entityName: 'ExpressionSetView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExpressionSetViewInBatch':
          summary: 'Upsert Expression Set View'
          description: 'Upsert an existing expression set view in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionSetView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExpressionSetViewInBatch':
          summary: 'Delete Expression Set View'
          description: 'Delete an existing expression set view in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExpressionSetView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExternalDataSourceInBatch':
          summary: 'Create External Data Source'
          description: 'Create a new external data source in Batch'
          entityName: 'ExternalDataSource'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExternalDataSourceInBatch':
          summary: 'Update External Data Source'
          description: 'Updates an existing external data source in batch; only elements
            specified in the request are updated.'
          entityName: 'ExternalDataSource'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalDataSourceInBatch':
          summary: 'Upsert External Data Source'
          description: 'Upsert an existing external data source in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalDataSource'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExternalDataSourceInBatch':
          summary: 'Delete External Data Source'
          description: 'Delete an existing external data source in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalDataSource'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExternalDataSrcDescriptorInBatch':
          summary: 'Create External Data Source Descriptor'
          description: 'Create a new external data source descriptor in Batch'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExternalDataSrcDescriptorInBatch':
          summary: 'Update External Data Source Descriptor'
          description: 'Updates an existing external data source descriptor in batch;
            only elements specified in the request are updated.'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalDataSrcDescriptorInBatch':
          summary: 'Upsert External Data Source Descriptor'
          description: 'Upsert an existing external data source descriptor in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExternalDataSrcDescriptorInBatch':
          summary: 'Delete External Data Source Descriptor'
          description: 'Delete an existing external data source descriptor in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ExternalDataSrcDescriptor'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExternalDataUserAuthInBatch':
          summary: 'Create External Data User Authentication'
          description: 'Create a new external data user authentication in Batch'
          entityName: 'ExternalDataUserAuth'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExternalDataUserAuthInBatch':
          summary: 'Update External Data User Authentication'
          description: 'Updates an existing external data user authentication in batch;
            only elements specified in the request are updated.'
          entityName: 'ExternalDataUserAuth'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalDataUserAuthInBatch':
          summary: 'Upsert External Data User Authentication'
          description: 'Upsert an existing external data user authentication in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ExternalDataUserAuth'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExternalDataUserAuthInBatch':
          summary: 'Delete External Data User Authentication'
          description: 'Delete an existing external data user authentication in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ExternalDataUserAuth'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExternalEventInBatch':
          summary: 'Create External Event'
          description: 'Create a new external event in Batch'
          entityName: 'ExternalEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExternalEventInBatch':
          summary: 'Update External Event'
          description: 'Updates an existing external event in batch; only elements
            specified in the request are updated.'
          entityName: 'ExternalEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalEventInBatch':
          summary: 'Upsert External Event'
          description: 'Upsert an existing external event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExternalEventInBatch':
          summary: 'Delete External Event'
          description: 'Delete an existing external event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExternalEventMappingInBatch':
          summary: 'Create External Event Mapping'
          description: 'Create a new external event mapping in Batch'
          entityName: 'ExternalEventMapping'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExternalEventMappingInBatch':
          summary: 'Update External Event Mapping'
          description: 'Updates an existing external event mapping in batch; only
            elements specified in the request are updated.'
          entityName: 'ExternalEventMapping'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalEventMappingInBatch':
          summary: 'Upsert External Event Mapping'
          description: 'Upsert an existing external event mapping in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEventMapping'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExternalEventMappingInBatch':
          summary: 'Delete External Event Mapping'
          description: 'Delete an existing external event mapping in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ExternalEventMapping'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateExternalEventMappingShareInBatch':
          summary: 'Create External Event Mapping Share'
          description: 'Create a new external event mapping share in Batch'
          entityName: 'ExternalEventMappingShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateExternalEventMappingShareInBatch':
          summary: 'Update External Event Mapping Share'
          description: 'Updates an existing external event mapping share in batch;
            only elements specified in the request are updated.'
          entityName: 'ExternalEventMappingShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertExternalEventMappingShareInBatch':
          summary: 'Upsert External Event Mapping Share'
          description: 'Upsert an existing external event mapping share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ExternalEventMappingShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteExternalEventMappingShareInBatch':
          summary: 'Delete External Event Mapping Share'
          description: 'Delete an existing external event mapping share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ExternalEventMappingShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFieldDefinitionInBatch':
          summary: 'Create Field Definition'
          description: 'Create a new field definition in Batch'
          entityName: 'FieldDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFieldDefinitionInBatch':
          summary: 'Update Field Definition'
          description: 'Updates an existing field definition in batch; only elements
            specified in the request are updated.'
          entityName: 'FieldDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFieldDefinitionInBatch':
          summary: 'Upsert Field Definition'
          description: 'Upsert an existing field definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFieldDefinitionInBatch':
          summary: 'Delete Field Definition'
          description: 'Delete an existing field definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFieldPermissionsInBatch':
          summary: 'Create Field Permissions'
          description: 'Create a new field permissions in Batch'
          entityName: 'FieldPermissions'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFieldPermissionsInBatch':
          summary: 'Update Field Permissions'
          description: 'Updates an existing field permissions in batch; only elements
            specified in the request are updated.'
          entityName: 'FieldPermissions'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFieldPermissionsInBatch':
          summary: 'Upsert Field Permissions'
          description: 'Upsert an existing field permissions in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldPermissions'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFieldPermissionsInBatch':
          summary: 'Delete Field Permissions'
          description: 'Delete an existing field permissions in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FieldPermissions'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFieldSecurityClassificationInBatch':
          summary: 'Create Field Security Classification'
          description: 'Create a new field security classification in Batch'
          entityName: 'FieldSecurityClassification'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFieldSecurityClassificationInBatch':
          summary: 'Update Field Security Classification'
          description: 'Updates an existing field security classification in batch;
            only elements specified in the request are updated.'
          entityName: 'FieldSecurityClassification'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFieldSecurityClassificationInBatch':
          summary: 'Upsert Field Security Classification'
          description: 'Upsert an existing field security classification in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FieldSecurityClassification'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFieldSecurityClassificationInBatch':
          summary: 'Delete Field Security Classification'
          description: 'Delete an existing field security classification in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FieldSecurityClassification'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFileEventInBatch':
          summary: 'Create File Event'
          description: 'Create a new file event in Batch'
          entityName: 'FileEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFileEventInBatch':
          summary: 'Update File Event'
          description: 'Updates an existing file event in batch; only elements specified
            in the request are updated.'
          entityName: 'FileEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFileEventInBatch':
          summary: 'Upsert File Event'
          description: 'Upsert an existing file event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFileEventInBatch':
          summary: 'Delete File Event'
          description: 'Delete an existing file event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFileEventStoreInBatch':
          summary: 'Create File Event Store'
          description: 'Create a new file event store in Batch'
          entityName: 'FileEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFileEventStoreInBatch':
          summary: 'Update File Event Store'
          description: 'Updates an existing file event store in batch; only elements
            specified in the request are updated.'
          entityName: 'FileEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFileEventStoreInBatch':
          summary: 'Upsert File Event Store'
          description: 'Upsert an existing file event store in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFileEventStoreInBatch':
          summary: 'Delete File Event Store'
          description: 'Delete an existing file event store in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFileSearchActivityInBatch':
          summary: 'Create FileSearchActivity'
          description: 'Create a new filesearchactivity in Batch'
          entityName: 'FileSearchActivity'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFileSearchActivityInBatch':
          summary: 'Update FileSearchActivity'
          description: 'Updates an existing filesearchactivity in batch; only elements
            specified in the request are updated.'
          entityName: 'FileSearchActivity'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFileSearchActivityInBatch':
          summary: 'Upsert FileSearchActivity'
          description: 'Upsert an existing filesearchactivity in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileSearchActivity'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFileSearchActivityInBatch':
          summary: 'Delete FileSearchActivity'
          description: 'Delete an existing filesearchactivity in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FileSearchActivity'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFiscalYearSettingsInBatch':
          summary: 'Create Fiscal Year Settings'
          description: 'Create a new fiscal year settings in Batch'
          entityName: 'FiscalYearSettings'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFiscalYearSettingsInBatch':
          summary: 'Update Fiscal Year Settings'
          description: 'Updates an existing fiscal year settings in batch; only elements
            specified in the request are updated.'
          entityName: 'FiscalYearSettings'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFiscalYearSettingsInBatch':
          summary: 'Upsert Fiscal Year Settings'
          description: 'Upsert an existing fiscal year settings in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FiscalYearSettings'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFiscalYearSettingsInBatch':
          summary: 'Delete Fiscal Year Settings'
          description: 'Delete an existing fiscal year settings in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FiscalYearSettings'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlexQueueItemInBatch':
          summary: 'Create Flex Queue Item'
          description: 'Create a new flex queue item in Batch'
          entityName: 'FlexQueueItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlexQueueItemInBatch':
          summary: 'Update Flex Queue Item'
          description: 'Updates an existing flex queue item in batch; only elements
            specified in the request are updated.'
          entityName: 'FlexQueueItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlexQueueItemInBatch':
          summary: 'Upsert Flex Queue Item'
          description: 'Upsert an existing flex queue item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlexQueueItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlexQueueItemInBatch':
          summary: 'Delete Flex Queue Item'
          description: 'Delete an existing flex queue item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlexQueueItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowDefinitionViewInBatch':
          summary: 'Create Flow Definition'
          description: 'Create a new flow definition in Batch'
          entityName: 'FlowDefinitionView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowDefinitionViewInBatch':
          summary: 'Update Flow Definition'
          description: 'Updates an existing flow definition in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowDefinitionView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowDefinitionViewInBatch':
          summary: 'Upsert Flow Definition'
          description: 'Upsert an existing flow definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowDefinitionView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowDefinitionViewInBatch':
          summary: 'Delete Flow Definition'
          description: 'Delete an existing flow definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowDefinitionView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowExecutionErrorEventInBatch':
          summary: 'Create Flow Execution Error Event'
          description: 'Create a new flow execution error event in Batch'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowExecutionErrorEventInBatch':
          summary: 'Update Flow Execution Error Event'
          description: 'Updates an existing flow execution error event in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowExecutionErrorEventInBatch':
          summary: 'Upsert Flow Execution Error Event'
          description: 'Upsert an existing flow execution error event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowExecutionErrorEventInBatch':
          summary: 'Delete Flow Execution Error Event'
          description: 'Delete an existing flow execution error event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowExecutionErrorEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowInterviewInBatch':
          summary: 'Create Flow Interview'
          description: 'Create a new flow interview in Batch'
          entityName: 'FlowInterview'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowInterviewInBatch':
          summary: 'Update Flow Interview'
          description: 'Updates an existing flow interview in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowInterview'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewInBatch':
          summary: 'Upsert Flow Interview'
          description: 'Upsert an existing flow interview in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterview'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowInterviewInBatch':
          summary: 'Delete Flow Interview'
          description: 'Delete an existing flow interview in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterview'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowInterviewLogInBatch':
          summary: 'Create Flow Interview Log'
          description: 'Create a new flow interview log in Batch'
          entityName: 'FlowInterviewLog'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowInterviewLogInBatch':
          summary: 'Update Flow Interview Log'
          description: 'Updates an existing flow interview log in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowInterviewLog'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewLogInBatch':
          summary: 'Upsert Flow Interview Log'
          description: 'Upsert an existing flow interview log in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewLog'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowInterviewLogInBatch':
          summary: 'Delete Flow Interview Log'
          description: 'Delete an existing flow interview log in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewLog'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowInterviewLogEntryInBatch':
          summary: 'Create Flow Interview Log Entry'
          description: 'Create a new flow interview log entry in Batch'
          entityName: 'FlowInterviewLogEntry'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowInterviewLogEntryInBatch':
          summary: 'Update Flow Interview Log Entry'
          description: 'Updates an existing flow interview log entry in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowInterviewLogEntry'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewLogEntryInBatch':
          summary: 'Upsert Flow Interview Log Entry'
          description: 'Upsert an existing flow interview log entry in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowInterviewLogEntry'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowInterviewLogEntryInBatch':
          summary: 'Delete Flow Interview Log Entry'
          description: 'Delete an existing flow interview log entry in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowInterviewLogEntry'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowInterviewLogShareInBatch':
          summary: 'Create Flow Interview Log Share'
          description: 'Create a new flow interview log share in Batch'
          entityName: 'FlowInterviewLogShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowInterviewLogShareInBatch':
          summary: 'Update Flow Interview Log Share'
          description: 'Updates an existing flow interview log share in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowInterviewLogShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewLogShareInBatch':
          summary: 'Upsert Flow Interview Log Share'
          description: 'Upsert an existing flow interview log share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowInterviewLogShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowInterviewLogShareInBatch':
          summary: 'Delete Flow Interview Log Share'
          description: 'Delete an existing flow interview log share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowInterviewLogShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowInterviewShareInBatch':
          summary: 'Create Flow Interview Share'
          description: 'Create a new flow interview share in Batch'
          entityName: 'FlowInterviewShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowInterviewShareInBatch':
          summary: 'Update Flow Interview Share'
          description: 'Updates an existing flow interview share in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowInterviewShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowInterviewShareInBatch':
          summary: 'Upsert Flow Interview Share'
          description: 'Upsert an existing flow interview share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowInterviewShareInBatch':
          summary: 'Delete Flow Interview Share'
          description: 'Delete an existing flow interview share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowInterviewShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationEventInBatch':
          summary: 'Create Orchestration Event'
          description: 'Create a new orchestration event in Batch'
          entityName: 'FlowOrchestrationEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationEventInBatch':
          summary: 'Update Orchestration Event'
          description: 'Updates an existing orchestration event in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationEventInBatch':
          summary: 'Upsert Orchestration Event'
          description: 'Upsert an existing orchestration event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationEventInBatch':
          summary: 'Delete Orchestration Event'
          description: 'Delete an existing orchestration event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationInstanceInBatch':
          summary: 'Create Orchestration Run'
          description: 'Create a new orchestration run in Batch'
          entityName: 'FlowOrchestrationInstance'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationInstanceInBatch':
          summary: 'Update Orchestration Run'
          description: 'Updates an existing orchestration run in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowOrchestrationInstance'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationInstanceInBatch':
          summary: 'Upsert Orchestration Run'
          description: 'Upsert an existing orchestration run in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationInstance'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationInstanceInBatch':
          summary: 'Delete Orchestration Run'
          description: 'Delete an existing orchestration run in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationInstance'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationInstanceShareInBatch':
          summary: 'Create Orchestration Run Share'
          description: 'Create a new orchestration run share in Batch'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationInstanceShareInBatch':
          summary: 'Update Orchestration Run Share'
          description: 'Updates an existing orchestration run share in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationInstanceShareInBatch':
          summary: 'Upsert Orchestration Run Share'
          description: 'Upsert an existing orchestration run share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationInstanceShareInBatch':
          summary: 'Delete Orchestration Run Share'
          description: 'Delete an existing orchestration run share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationInstanceShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationStageInstanceInBatch':
          summary: 'Create Orchestration Stage Run'
          description: 'Create a new orchestration stage run in Batch'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationStageInstanceInBatch':
          summary: 'Update Orchestration Stage Run'
          description: 'Updates an existing orchestration stage run in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStageInstanceInBatch':
          summary: 'Upsert Orchestration Stage Run'
          description: 'Upsert an existing orchestration stage run in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationStageInstanceInBatch':
          summary: 'Delete Orchestration Stage Run'
          description: 'Delete an existing orchestration stage run in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStageInstance'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationStageInstanceShareInBatch':
          summary: 'Create Orchestration Stage Run Share'
          description: 'Create a new orchestration stage run share in Batch'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationStageInstanceShareInBatch':
          summary: 'Update Orchestration Stage Run Share'
          description: 'Updates an existing orchestration stage run share in batch;
            only elements specified in the request are updated.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStageInstanceShareInBatch':
          summary: 'Upsert Orchestration Stage Run Share'
          description: 'Upsert an existing orchestration stage run share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationStageInstanceShareInBatch':
          summary: 'Delete Orchestration Stage Run Share'
          description: 'Delete an existing orchestration stage run share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FlowOrchestrationStageInstanceShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationStepInstanceInBatch':
          summary: 'Create Orchestration Step Run'
          description: 'Create a new orchestration step run in Batch'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationStepInstanceInBatch':
          summary: 'Update Orchestration Step Run'
          description: 'Updates an existing orchestration step run in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStepInstanceInBatch':
          summary: 'Upsert Orchestration Step Run'
          description: 'Upsert an existing orchestration step run in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationStepInstanceInBatch':
          summary: 'Delete Orchestration Step Run'
          description: 'Delete an existing orchestration step run in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationStepInstance'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationStepInstanceShareInBatch':
          summary: 'Create Orchestration Step Run Share'
          description: 'Create a new orchestration step run share in Batch'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationStepInstanceShareInBatch':
          summary: 'Update Orchestration Step Run Share'
          description: 'Updates an existing orchestration step run share in batch;
            only elements specified in the request are updated.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationStepInstanceShareInBatch':
          summary: 'Upsert Orchestration Step Run Share'
          description: 'Upsert an existing orchestration step run share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationStepInstanceShareInBatch':
          summary: 'Delete Orchestration Step Run Share'
          description: 'Delete an existing orchestration step run share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FlowOrchestrationStepInstanceShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationWorkItemInBatch':
          summary: 'Create Orchestration Work Item'
          description: 'Create a new orchestration work item in Batch'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationWorkItemInBatch':
          summary: 'Update Orchestration Work Item'
          description: 'Updates an existing orchestration work item in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationWorkItemInBatch':
          summary: 'Upsert Orchestration Work Item'
          description: 'Upsert an existing orchestration work item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationWorkItemInBatch':
          summary: 'Delete Orchestration Work Item'
          description: 'Delete an existing orchestration work item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowOrchestrationWorkItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowOrchestrationWorkItemShareInBatch':
          summary: 'Create Orchestration Work Item Share'
          description: 'Create a new orchestration work item share in Batch'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowOrchestrationWorkItemShareInBatch':
          summary: 'Update Orchestration Work Item Share'
          description: 'Updates an existing orchestration work item share in batch;
            only elements specified in the request are updated.'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowOrchestrationWorkItemShareInBatch':
          summary: 'Upsert Orchestration Work Item Share'
          description: 'Upsert an existing orchestration work item share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowOrchestrationWorkItemShareInBatch':
          summary: 'Delete Orchestration Work Item Share'
          description: 'Delete an existing orchestration work item share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FlowOrchestrationWorkItemShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowRecordRelationInBatch':
          summary: 'Create Flow Record Relation'
          description: 'Create a new flow record relation in Batch'
          entityName: 'FlowRecordRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowRecordRelationInBatch':
          summary: 'Update Flow Record Relation'
          description: 'Updates an existing flow record relation in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowRecordRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowRecordRelationInBatch':
          summary: 'Upsert Flow Record Relation'
          description: 'Upsert an existing flow record relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowRecordRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowRecordRelationInBatch':
          summary: 'Delete Flow Record Relation'
          description: 'Delete an existing flow record relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowRecordRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowStageRelationInBatch':
          summary: 'Create Flow Interview Stage Relation'
          description: 'Create a new flow interview stage relation in Batch'
          entityName: 'FlowStageRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowStageRelationInBatch':
          summary: 'Update Flow Interview Stage Relation'
          description: 'Updates an existing flow interview stage relation in batch;
            only elements specified in the request are updated.'
          entityName: 'FlowStageRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowStageRelationInBatch':
          summary: 'Upsert Flow Interview Stage Relation'
          description: 'Upsert an existing flow interview stage relation in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FlowStageRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowStageRelationInBatch':
          summary: 'Delete Flow Interview Stage Relation'
          description: 'Delete an existing flow interview stage relation in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'FlowStageRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowTestResultInBatch':
          summary: 'Create Flow Test Result'
          description: 'Create a new flow test result in Batch'
          entityName: 'FlowTestResult'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowTestResultInBatch':
          summary: 'Update Flow Test Result'
          description: 'Updates an existing flow test result in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowTestResult'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowTestResultInBatch':
          summary: 'Upsert Flow Test Result'
          description: 'Upsert an existing flow test result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestResult'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowTestResultInBatch':
          summary: 'Delete Flow Test Result'
          description: 'Delete an existing flow test result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestResult'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowTestResultShareInBatch':
          summary: 'Create Flow Test Result Share'
          description: 'Create a new flow test result share in Batch'
          entityName: 'FlowTestResultShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowTestResultShareInBatch':
          summary: 'Update Flow Test Result Share'
          description: 'Updates an existing flow test result share in batch; only
            elements specified in the request are updated.'
          entityName: 'FlowTestResultShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowTestResultShareInBatch':
          summary: 'Upsert Flow Test Result Share'
          description: 'Upsert an existing flow test result share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestResultShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowTestResultShareInBatch':
          summary: 'Delete Flow Test Result Share'
          description: 'Delete an existing flow test result share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestResultShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowTestViewInBatch':
          summary: 'Create Flow Test View'
          description: 'Create a new flow test view in Batch'
          entityName: 'FlowTestView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowTestViewInBatch':
          summary: 'Update Flow Test View'
          description: 'Updates an existing flow test view in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowTestView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowTestViewInBatch':
          summary: 'Upsert Flow Test View'
          description: 'Upsert an existing flow test view in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowTestViewInBatch':
          summary: 'Delete Flow Test View'
          description: 'Delete an existing flow test view in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowTestView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowVariableViewInBatch':
          summary: 'Create Flow Variable'
          description: 'Create a new flow variable in Batch'
          entityName: 'FlowVariableView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowVariableViewInBatch':
          summary: 'Update Flow Variable'
          description: 'Updates an existing flow variable in batch; only elements
            specified in the request are updated.'
          entityName: 'FlowVariableView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowVariableViewInBatch':
          summary: 'Upsert Flow Variable'
          description: 'Upsert an existing flow variable in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowVariableView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowVariableViewInBatch':
          summary: 'Delete Flow Variable'
          description: 'Delete an existing flow variable in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowVariableView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFlowVersionViewInBatch':
          summary: 'Create Flow Version'
          description: 'Create a new flow version in Batch'
          entityName: 'FlowVersionView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFlowVersionViewInBatch':
          summary: 'Update Flow Version'
          description: 'Updates an existing flow version in batch; only elements specified
            in the request are updated.'
          entityName: 'FlowVersionView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFlowVersionViewInBatch':
          summary: 'Upsert Flow Version'
          description: 'Upsert an existing flow version in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowVersionView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFlowVersionViewInBatch':
          summary: 'Delete Flow Version'
          description: 'Delete an existing flow version in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'FlowVersionView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFolderInBatch':
          summary: 'Create Folder'
          description: 'Create a new folder in Batch'
          entityName: 'Folder'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFolderInBatch':
          summary: 'Update Folder'
          description: 'Updates an existing folder in batch; only elements specified
            in the request are updated.'
          entityName: 'Folder'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFolderInBatch':
          summary: 'Upsert Folder'
          description: 'Upsert an existing folder in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Folder'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFolderInBatch':
          summary: 'Delete Folder'
          description: 'Delete an existing folder in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Folder'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFolderedContentDocumentInBatch':
          summary: 'Create Foldered Content Document'
          description: 'Create a new foldered content document in Batch'
          entityName: 'FolderedContentDocument'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFolderedContentDocumentInBatch':
          summary: 'Update Foldered Content Document'
          description: 'Updates an existing foldered content document in batch; only
            elements specified in the request are updated.'
          entityName: 'FolderedContentDocument'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFolderedContentDocumentInBatch':
          summary: 'Upsert Foldered Content Document'
          description: 'Upsert an existing foldered content document in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FolderedContentDocument'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFolderedContentDocumentInBatch':
          summary: 'Delete Foldered Content Document'
          description: 'Delete an existing foldered content document in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FolderedContentDocument'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFormulaFunctionInBatch':
          summary: 'Create Formula Function'
          description: 'Create a new formula function in Batch'
          entityName: 'FormulaFunction'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFormulaFunctionInBatch':
          summary: 'Update Formula Function'
          description: 'Updates an existing formula function in batch; only elements
            specified in the request are updated.'
          entityName: 'FormulaFunction'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFormulaFunctionInBatch':
          summary: 'Upsert Formula Function'
          description: 'Upsert an existing formula function in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FormulaFunction'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFormulaFunctionInBatch':
          summary: 'Delete Formula Function'
          description: 'Delete an existing formula function in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'FormulaFunction'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFormulaFunctionAllowedTypeInBatch':
          summary: 'Create Formula Context Function'
          description: 'Create a new formula context function in Batch'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFormulaFunctionAllowedTypeInBatch':
          summary: 'Update Formula Context Function'
          description: 'Updates an existing formula context function in batch; only
            elements specified in the request are updated.'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFormulaFunctionAllowedTypeInBatch':
          summary: 'Upsert Formula Context Function'
          description: 'Upsert an existing formula context function in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFormulaFunctionAllowedTypeInBatch':
          summary: 'Delete Formula Context Function'
          description: 'Delete an existing formula context function in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FormulaFunctionAllowedType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateFormulaFunctionCategoryInBatch':
          summary: 'Create Formula Function Category'
          description: 'Create a new formula function category in Batch'
          entityName: 'FormulaFunctionCategory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateFormulaFunctionCategoryInBatch':
          summary: 'Update Formula Function Category'
          description: 'Updates an existing formula function category in batch; only
            elements specified in the request are updated.'
          entityName: 'FormulaFunctionCategory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertFormulaFunctionCategoryInBatch':
          summary: 'Upsert Formula Function Category'
          description: 'Upsert an existing formula function category in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FormulaFunctionCategory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteFormulaFunctionCategoryInBatch':
          summary: 'Delete Formula Function Category'
          description: 'Delete an existing formula function category in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'FormulaFunctionCategory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateGrantedByLicenseInBatch':
          summary: 'Create Setting Granted By License'
          description: 'Create a new setting granted by license in Batch'
          entityName: 'GrantedByLicense'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateGrantedByLicenseInBatch':
          summary: 'Update Setting Granted By License'
          description: 'Updates an existing setting granted by license in batch; only
            elements specified in the request are updated.'
          entityName: 'GrantedByLicense'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertGrantedByLicenseInBatch':
          summary: 'Upsert Setting Granted By License'
          description: 'Upsert an existing setting granted by license in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'GrantedByLicense'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteGrantedByLicenseInBatch':
          summary: 'Delete Setting Granted By License'
          description: 'Delete an existing setting granted by license in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'GrantedByLicense'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateGroupInBatch':
          summary: 'Create Group'
          description: 'Create a new group in Batch'
          entityName: 'Group'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateGroupInBatch':
          summary: 'Update Group'
          description: 'Updates an existing group in batch; only elements specified
            in the request are updated.'
          entityName: 'Group'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertGroupInBatch':
          summary: 'Upsert Group'
          description: 'Upsert an existing group in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Group'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteGroupInBatch':
          summary: 'Delete Group'
          description: 'Delete an existing group in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Group'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateGroupMemberInBatch':
          summary: 'Create Group Member'
          description: 'Create a new group member in Batch'
          entityName: 'GroupMember'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateGroupMemberInBatch':
          summary: 'Update Group Member'
          description: 'Updates an existing group member in batch; only elements specified
            in the request are updated.'
          entityName: 'GroupMember'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertGroupMemberInBatch':
          summary: 'Upsert Group Member'
          description: 'Upsert an existing group member in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'GroupMember'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteGroupMemberInBatch':
          summary: 'Delete Group Member'
          description: 'Delete an existing group member in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'GroupMember'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateHarishO__ChangeEventInBatch':
          summary: 'Create Change Event: HarishL'
          description: 'Create a new change event: harishl in Batch'
          entityName: 'HarishO__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateHarishO__ChangeEventInBatch':
          summary: 'Update Change Event: HarishL'
          description: 'Updates an existing change event: harishl in batch; only elements
            specified in the request are updated.'
          entityName: 'HarishO__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertHarishO__ChangeEventInBatch':
          summary: 'Upsert Change Event: HarishL'
          description: 'Upsert an existing change event: harishl in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'HarishO__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteHarishO__ChangeEventInBatch':
          summary: 'Delete Change Event: HarishL'
          description: 'Delete an existing change event: harishl in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'HarishO__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateHarishO__cInBatch':
          summary: 'Create HarishL'
          description: 'Create a new harishl in Batch'
          entityName: 'HarishO__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateHarishO__cInBatch':
          summary: 'Update HarishL'
          description: 'Updates an existing harishl in batch; only elements specified
            in the request are updated.'
          entityName: 'HarishO__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertHarishO__cInBatch':
          summary: 'Upsert HarishL'
          description: 'Upsert an existing harishl in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'HarishO__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteHarishO__cInBatch':
          summary: 'Delete HarishL'
          description: 'Delete an existing harishl in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'HarishO__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateHolidayInBatch':
          summary: 'Create Holiday'
          description: 'Create a new holiday in Batch'
          entityName: 'Holiday'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateHolidayInBatch':
          summary: 'Update Holiday'
          description: 'Updates an existing holiday in batch; only elements specified
            in the request are updated.'
          entityName: 'Holiday'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertHolidayInBatch':
          summary: 'Upsert Holiday'
          description: 'Upsert an existing holiday in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Holiday'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteHolidayInBatch':
          summary: 'Delete Holiday'
          description: 'Delete an existing holiday in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Holiday'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIPAddressRangeInBatch':
          summary: 'Create IP Address Range'
          description: 'Create a new ip address range in Batch'
          entityName: 'IPAddressRange'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIPAddressRangeInBatch':
          summary: 'Update IP Address Range'
          description: 'Updates an existing ip address range in batch only elements
            specified in the request are updated.'
          entityName: 'IPAddressRange'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIPAddressRangeInBatch':
          summary: 'Upsert IP Address Range'
          description: 'Upsert an existing ip address range in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IPAddressRange'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIPAddressRangeInBatch':
          summary: 'Delete IP Address Range'
          description: 'Delete an existing ip address range in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IPAddressRange'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIconDefinitionInBatch':
          summary: 'Create Icon Definition'
          description: 'Create a new icon definition in Batch'
          entityName: 'IconDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIconDefinitionInBatch':
          summary: 'Update Icon Definition'
          description: 'Updates an existing icon definition in batch; only elements
            specified in the request are updated.'
          entityName: 'IconDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIconDefinitionInBatch':
          summary: 'Upsert Icon Definition'
          description: 'Upsert an existing icon definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IconDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIconDefinitionInBatch':
          summary: 'Delete Icon Definition'
          description: 'Delete an existing icon definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IconDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIdentityProviderEventStoreInBatch':
          summary: 'Create Identity Provider Event Store'
          description: 'Create a new identity provider event store in Batch'
          entityName: 'IdentityProviderEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIdentityProviderEventStoreInBatch':
          summary: 'Update Identity Provider Event Store'
          description: 'Updates an existing identity provider event store in batch;
            only elements specified in the request are updated.'
          entityName: 'IdentityProviderEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIdentityProviderEventStoreInBatch':
          summary: 'Upsert Identity Provider Event Store'
          description: 'Upsert an existing identity provider event store in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'IdentityProviderEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIdentityProviderEventStoreInBatch':
          summary: 'Delete Identity Provider Event Store'
          description: 'Delete an existing identity provider event store in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'IdentityProviderEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIdentityVerificationEventInBatch':
          summary: 'Create Identity Verification Event'
          description: 'Create a new identity verification event in Batch'
          entityName: 'IdentityVerificationEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIdentityVerificationEventInBatch':
          summary: 'Update Identity Verification Event'
          description: 'Updates an existing identity verification event in batch;
            only elements specified in the request are updated.'
          entityName: 'IdentityVerificationEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIdentityVerificationEventInBatch':
          summary: 'Upsert Identity Verification Event'
          description: 'Upsert an existing identity verification event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'IdentityVerificationEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIdentityVerificationEventInBatch':
          summary: 'Delete Identity Verification Event'
          description: 'Delete an existing identity verification event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'IdentityVerificationEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIdpEventLogInBatch':
          summary: 'Create Identity Provider Event Log'
          description: 'Create a new identity provider event log in Batch'
          entityName: 'IdpEventLog'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIdpEventLogInBatch':
          summary: 'Update Identity Provider Event Log'
          description: 'Updates an existing identity provider event log in batch;
            only elements specified in the request are updated.'
          entityName: 'IdpEventLog'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIdpEventLogInBatch':
          summary: 'Upsert Identity Provider Event Log'
          description: 'Upsert an existing identity provider event log in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'IdpEventLog'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIdpEventLogInBatch':
          summary: 'Delete Identity Provider Event Log'
          description: 'Delete an existing identity provider event log in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'IdpEventLog'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIframeWhiteListUrlInBatch':
          summary: 'Create Trusted Domain for Inline Frames'
          description: 'Create a new trusted domain for inline frames in Batch'
          entityName: 'IframeWhiteListUrl'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIframeWhiteListUrlInBatch':
          summary: 'Update Trusted Domain for Inline Frames'
          description: 'Updates an existing trusted domain for inline frames in batch;
            only elements specified in the request are updated.'
          entityName: 'IframeWhiteListUrl'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIframeWhiteListUrlInBatch':
          summary: 'Upsert Trusted Domain for Inline Frames'
          description: 'Upsert an existing trusted domain for inline frames in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'IframeWhiteListUrl'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIframeWhiteListUrlInBatch':
          summary: 'Delete Trusted Domain for Inline Frames'
          description: 'Delete an existing trusted domain for inline frames in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'IframeWhiteListUrl'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateImageInBatch':
          summary: 'Create Image'
          description: 'Create a new image in Batch'
          entityName: 'Image'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateImageInBatch':
          summary: 'Update Image'
          description: 'Updates an existing image in batch; only elements specified
            in the request are updated.'
          entityName: 'Image'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertImageInBatch':
          summary: 'Upsert Image'
          description: 'Upsert an existing image in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Image'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteImageInBatch':
          summary: 'Delete Image'
          description: 'Delete an existing image in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Image'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateImageHistoryInBatch':
          summary: 'Create Image History'
          description: 'Create a new image history in Batch'
          entityName: 'ImageHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateImageHistoryInBatch':
          summary: 'Update Image History'
          description: 'Updates an existing image history in batch; only elements
            specified in the request are updated.'
          entityName: 'ImageHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertImageHistoryInBatch':
          summary: 'Upsert Image History'
          description: 'Upsert an existing image history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ImageHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteImageHistoryInBatch':
          summary: 'Delete Image History'
          description: 'Delete an existing image history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ImageHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateImageShareInBatch':
          summary: 'Create Image Share'
          description: 'Create a new image share in Batch'
          entityName: 'ImageShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateImageShareInBatch':
          summary: 'Update Image Share'
          description: 'Updates an existing image share in batch; only elements specified
            in the request are updated.'
          entityName: 'ImageShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertImageShareInBatch':
          summary: 'Upsert Image Share'
          description: 'Upsert an existing image share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ImageShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteImageShareInBatch':
          summary: 'Delete Image Share'
          description: 'Delete an existing image share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ImageShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIndividualInBatch':
          summary: 'Create Individual'
          description: 'Create a new individual in Batch'
          entityName: 'Individual'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIndividualInBatch':
          summary: 'Update Individual'
          description: 'Updates an existing individual in batch; only elements specified
            in the request are updated.'
          entityName: 'Individual'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualInBatch':
          summary: 'Upsert Individual'
          description: 'Upsert an existing individual in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Individual'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIndividualInBatch':
          summary: 'Delete Individual'
          description: 'Delete an existing individual in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Individual'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIndividualChangeEventInBatch':
          summary: 'Create Individual Change Event'
          description: 'Create a new individual change event in Batch'
          entityName: 'IndividualChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIndividualChangeEventInBatch':
          summary: 'Update Individual Change Event'
          description: 'Updates an existing individual change event in batch; only
            elements specified in the request are updated.'
          entityName: 'IndividualChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualChangeEventInBatch':
          summary: 'Upsert Individual Change Event'
          description: 'Upsert an existing individual change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIndividualChangeEventInBatch':
          summary: 'Delete Individual Change Event'
          description: 'Delete an existing individual change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIndividualHistoryInBatch':
          summary: 'Create Individual History'
          description: 'Create a new individual history in Batch'
          entityName: 'IndividualHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIndividualHistoryInBatch':
          summary: 'Update Individual History'
          description: 'Updates an existing individual history in batch; only elements
            specified in the request are updated.'
          entityName: 'IndividualHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualHistoryInBatch':
          summary: 'Upsert Individual History'
          description: 'Upsert an existing individual history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIndividualHistoryInBatch':
          summary: 'Delete Individual History'
          description: 'Delete an existing individual history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateIndividualShareInBatch':
          summary: 'Create Individual Share'
          description: 'Create a new individual share in Batch'
          entityName: 'IndividualShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateIndividualShareInBatch':
          summary: 'Update Individual Share'
          description: 'Updates an existing individual share in batch; only elements
            specified in the request are updated.'
          entityName: 'IndividualShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertIndividualShareInBatch':
          summary: 'Upsert Individual Share'
          description: 'Upsert an existing individual share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteIndividualShareInBatch':
          summary: 'Delete Individual Share'
          description: 'Delete an existing individual share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'IndividualShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateInstalledMobileAppInBatch':
          summary: 'Create Installed Mobile App'
          description: 'Create a new installed mobile app in Batch'
          entityName: 'InstalledMobileApp'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateInstalledMobileAppInBatch':
          summary: 'Update Installed Mobile App'
          description: 'Updates an existing installed mobile app in batch; only elements
            specified in the request are updated.'
          entityName: 'InstalledMobileApp'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertInstalledMobileAppInBatch':
          summary: 'Upsert Installed Mobile App'
          description: 'Upsert an existing installed mobile app in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'InstalledMobileApp'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteInstalledMobileAppInBatch':
          summary: 'Delete Installed Mobile App'
          description: 'Delete an existing installed mobile app in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'InstalledMobileApp'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLeadInBatch':
          summary: 'Create Lead'
          description: 'Create a new lead in Batch'
          entityName: 'Lead'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLeadInBatch':
          summary: 'Update Lead'
          description: 'Updates an existing lead in batch; only elements specified
            in the request are updated.'
          entityName: 'Lead'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadInBatch':
          summary: 'Upsert Lead'
          description: 'Upsert an existing lead in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Lead'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLeadInBatch':
          summary: 'Delete Lead'
          description: 'Delete an existing lead in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Lead'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLeadChangeEventInBatch':
          summary: 'Create Lead Change Event'
          description: 'Create a new lead change event in Batch'
          entityName: 'LeadChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLeadChangeEventInBatch':
          summary: 'Update Lead Change Event'
          description: 'Updates an existing lead change event in batch; only elements
            specified in the request are updated.'
          entityName: 'LeadChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadChangeEventInBatch':
          summary: 'Upsert Lead Change Event'
          description: 'Upsert an existing lead change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLeadChangeEventInBatch':
          summary: 'Delete Lead Change Event'
          description: 'Delete an existing lead change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLeadHistoryInBatch':
          summary: 'Create Lead History'
          description: 'Create a new lead history in Batch'
          entityName: 'LeadHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLeadHistoryInBatch':
          summary: 'Update Lead History'
          description: 'Updates an existing lead history in batch; only elements specified
            in the request are updated.'
          entityName: 'LeadHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadHistoryInBatch':
          summary: 'Upsert Lead History'
          description: 'Upsert an existing lead history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLeadHistoryInBatch':
          summary: 'Delete Lead History'
          description: 'Delete an existing lead history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLeadShareInBatch':
          summary: 'Create Lead Share'
          description: 'Create a new lead share in Batch'
          entityName: 'LeadShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLeadShareInBatch':
          summary: 'Update Lead Share'
          description: 'Updates an existing lead share in batch; only elements specified
            in the request are updated.'
          entityName: 'LeadShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadShareInBatch':
          summary: 'Upsert Lead Share'
          description: 'Upsert an existing lead share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLeadShareInBatch':
          summary: 'Delete Lead Share'
          description: 'Delete an existing lead share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLeadStatusInBatch':
          summary: 'Create Lead Status Value'
          description: 'Create a new lead status value in Batch'
          entityName: 'LeadStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLeadStatusInBatch':
          summary: 'Update Lead Status Value'
          description: 'Updates an existing lead status value in batch; only elements
            specified in the request are updated.'
          entityName: 'LeadStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLeadStatusInBatch':
          summary: 'Upsert Lead Status Value'
          description: 'Upsert an existing lead status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLeadStatusInBatch':
          summary: 'Delete Lead Status Value'
          description: 'Delete an existing lead status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LeadStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningExitByPageMetricsInBatch':
          summary: 'Create Lightning Exit By Page Metrics'
          description: 'Create a new lightning exit by page metrics in Batch'
          entityName: 'LightningExitByPageMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningExitByPageMetricsInBatch':
          summary: 'Update Lightning Exit By Page Metrics'
          description: 'Updates an existing lightning exit by page metrics in batch;
            only elements specified in the request are updated.'
          entityName: 'LightningExitByPageMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningExitByPageMetricsInBatch':
          summary: 'Upsert Lightning Exit By Page Metrics'
          description: 'Upsert an existing lightning exit by page metrics in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'LightningExitByPageMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningExitByPageMetricsInBatch':
          summary: 'Delete Lightning Exit By Page Metrics'
          description: 'Delete an existing lightning exit by page metrics in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'LightningExitByPageMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningExperienceThemeInBatch':
          summary: 'Create Lightning Experience Theme'
          description: 'Create a new lightning experience theme in Batch'
          entityName: 'LightningExperienceTheme'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningExperienceThemeInBatch':
          summary: 'Update Lightning Experience Theme'
          description: 'Updates an existing lightning experience theme in batch; only
            elements specified in the request are updated.'
          entityName: 'LightningExperienceTheme'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningExperienceThemeInBatch':
          summary: 'Upsert Lightning Experience Theme'
          description: 'Upsert an existing lightning experience theme in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningExperienceTheme'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningExperienceThemeInBatch':
          summary: 'Delete Lightning Experience Theme'
          description: 'Delete an existing lightning experience theme in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningExperienceTheme'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningOnboardingConfigInBatch':
          summary: 'Create LightningOnboardingConfig'
          description: 'Create a new lightningonboardingconfig in Batch'
          entityName: 'LightningOnboardingConfig'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningOnboardingConfigInBatch':
          summary: 'Update LightningOnboardingConfig'
          description: 'Updates an existing lightningonboardingconfig in batch; only
            elements specified in the request are updated.'
          entityName: 'LightningOnboardingConfig'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningOnboardingConfigInBatch':
          summary: 'Upsert LightningOnboardingConfig'
          description: 'Upsert an existing lightningonboardingconfig in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningOnboardingConfig'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningOnboardingConfigInBatch':
          summary: 'Delete LightningOnboardingConfig'
          description: 'Delete an existing lightningonboardingconfig in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningOnboardingConfig'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningToggleMetricsInBatch':
          summary: 'Create Lightning Toggle Metrics'
          description: 'Create a new lightning toggle metrics in Batch'
          entityName: 'LightningToggleMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningToggleMetricsInBatch':
          summary: 'Update Lightning Toggle Metrics'
          description: 'Updates an existing lightning toggle metrics in batch; only
            elements specified in the request are updated.'
          entityName: 'LightningToggleMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningToggleMetricsInBatch':
          summary: 'Upsert Lightning Toggle Metrics'
          description: 'Upsert an existing lightning toggle metrics in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningToggleMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningToggleMetricsInBatch':
          summary: 'Delete Lightning Toggle Metrics'
          description: 'Delete an existing lightning toggle metrics in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningToggleMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningUriEventInBatch':
          summary: 'Create Lightning URI Event'
          description: 'Create a new lightning uri event in Batch'
          entityName: 'LightningUriEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningUriEventInBatch':
          summary: 'Update Lightning URI Event'
          description: 'Updates an existing lightning uri event in batch; only elements
            specified in the request are updated.'
          entityName: 'LightningUriEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUriEventInBatch':
          summary: 'Upsert Lightning URI Event'
          description: 'Upsert an existing lightning uri event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningUriEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningUriEventInBatch':
          summary: 'Delete Lightning URI Event'
          description: 'Delete an existing lightning uri event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LightningUriEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningUriEventStreamInBatch':
          summary: 'Create Lightning URI Event Stream'
          description: 'Create a new lightning uri event stream in Batch'
          entityName: 'LightningUriEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningUriEventStreamInBatch':
          summary: 'Update Lightning URI Event Stream'
          description: 'Updates an existing lightning uri event stream in batch; only
            elements specified in the request are updated.'
          entityName: 'LightningUriEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUriEventStreamInBatch':
          summary: 'Upsert Lightning URI Event Stream'
          description: 'Upsert an existing lightning uri event stream in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningUriEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningUriEventStreamInBatch':
          summary: 'Delete Lightning URI Event Stream'
          description: 'Delete an existing lightning uri event stream in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'LightningUriEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningUsageByAppTypeMetricsInBatch':
          summary: 'Create Lightning Usage By App Type Metrics'
          description: 'Create a new lightning usage by app type metrics in Batch'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningUsageByAppTypeMetricsInBatch':
          summary: 'Update Lightning Usage By App Type Metrics'
          description: 'Updates an existing lightning usage by app type metrics in
            batch; only elements specified in the request are updated.'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByAppTypeMetricsInBatch':
          summary: 'Upsert Lightning Usage By App Type Metrics'
          description: 'Upsert an existing lightning usage by app type metrics in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningUsageByAppTypeMetricsInBatch':
          summary: 'Delete Lightning Usage By App Type Metrics'
          description: 'Delete an existing lightning usage by app type metrics in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'LightningUsageByAppTypeMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningUsageByBrowserMetricsInBatch':
          summary: 'Create Lightning Usage By Browser Metrics'
          description: 'Create a new lightning usage by browser metrics in Batch'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningUsageByBrowserMetricsInBatch':
          summary: 'Update Lightning Usage By Browser Metrics'
          description: 'Updates an existing lightning usage by browser metrics in
            batch; only elements specified in the request are updated.'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByBrowserMetricsInBatch':
          summary: 'Upsert Lightning Usage By Browser Metrics'
          description: 'Upsert an existing lightning usage by browser metrics in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningUsageByBrowserMetricsInBatch':
          summary: 'Delete Lightning Usage By Browser Metrics'
          description: 'Delete an existing lightning usage by browser metrics in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'LightningUsageByBrowserMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningUsageByFlexiPageMetricsInBatch':
          summary: 'Create Lightning Usage By FlexiPage Metrics'
          description: 'Create a new lightning usage by flexipage metrics in Batch'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningUsageByFlexiPageMetricsInBatch':
          summary: 'Update Lightning Usage By FlexiPage Metrics'
          description: 'Updates an existing lightning usage by flexipage metrics in
            batch; only elements specified in the request are updated.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByFlexiPageMetricsInBatch':
          summary: 'Upsert Lightning Usage By FlexiPage Metrics'
          description: 'Upsert an existing lightning usage by flexipage metrics in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningUsageByFlexiPageMetricsInBatch':
          summary: 'Delete Lightning Usage By FlexiPage Metrics'
          description: 'Delete an existing lightning usage by flexipage metrics in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'LightningUsageByFlexiPageMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLightningUsageByPageMetricsInBatch':
          summary: 'Create Lightning Usage By Page Metrics'
          description: 'Create a new lightning usage by page metrics in Batch'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLightningUsageByPageMetricsInBatch':
          summary: 'Update Lightning Usage By Page Metrics'
          description: 'Updates an existing lightning usage by page metrics in batch;
            only elements specified in the request are updated.'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLightningUsageByPageMetricsInBatch':
          summary: 'Upsert Lightning Usage By Page Metrics'
          description: 'Upsert an existing lightning usage by page metrics in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLightningUsageByPageMetricsInBatch':
          summary: 'Delete Lightning Usage By Page Metrics'
          description: 'Delete an existing lightning usage by page metrics in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'LightningUsageByPageMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListEmailInBatch':
          summary: 'Create List Email'
          description: 'Create a new list email in Batch'
          entityName: 'ListEmail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListEmailInBatch':
          summary: 'Update List Email'
          description: 'Updates an existing list email in batch; only elements specified
            in the request are updated.'
          entityName: 'ListEmail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailInBatch':
          summary: 'Upsert List Email'
          description: 'Upsert an existing list email in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListEmailInBatch':
          summary: 'Delete List Email'
          description: 'Delete an existing list email in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListEmailChangeEventInBatch':
          summary: 'Create List Email Change Event'
          description: 'Create a new list email change event in Batch'
          entityName: 'ListEmailChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListEmailChangeEventInBatch':
          summary: 'Update List Email Change Event'
          description: 'Updates an existing list email change event in batch; only
            elements specified in the request are updated.'
          entityName: 'ListEmailChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailChangeEventInBatch':
          summary: 'Upsert List Email Change Event'
          description: 'Upsert an existing list email change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListEmailChangeEventInBatch':
          summary: 'Delete List Email Change Event'
          description: 'Delete an existing list email change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListEmailIndividualRecipientInBatch':
          summary: 'Create List Email Individual Recipient'
          description: 'Create a new list email individual recipient in Batch'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListEmailIndividualRecipientInBatch':
          summary: 'Update List Email Individual Recipient'
          description: 'Updates an existing list email individual recipient in batch;
            only elements specified in the request are updated.'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailIndividualRecipientInBatch':
          summary: 'Upsert List Email Individual Recipient'
          description: 'Upsert an existing list email individual recipient in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListEmailIndividualRecipientInBatch':
          summary: 'Delete List Email Individual Recipient'
          description: 'Delete an existing list email individual recipient in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ListEmailIndividualRecipient'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListEmailRecipientSourceInBatch':
          summary: 'Create List Email Recipient Source'
          description: 'Create a new list email recipient source in Batch'
          entityName: 'ListEmailRecipientSource'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListEmailRecipientSourceInBatch':
          summary: 'Update List Email Recipient Source'
          description: 'Updates an existing list email recipient source in batch;
            only elements specified in the request are updated.'
          entityName: 'ListEmailRecipientSource'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailRecipientSourceInBatch':
          summary: 'Upsert List Email Recipient Source'
          description: 'Upsert an existing list email recipient source in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ListEmailRecipientSource'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListEmailRecipientSourceInBatch':
          summary: 'Delete List Email Recipient Source'
          description: 'Delete an existing list email recipient source in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ListEmailRecipientSource'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListEmailShareInBatch':
          summary: 'Create List Email Share'
          description: 'Create a new list email share in Batch'
          entityName: 'ListEmailShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListEmailShareInBatch':
          summary: 'Update List Email Share'
          description: 'Updates an existing list email share in batch; only elements
            specified in the request are updated.'
          entityName: 'ListEmailShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListEmailShareInBatch':
          summary: 'Upsert List Email Share'
          description: 'Upsert an existing list email share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListEmailShareInBatch':
          summary: 'Delete List Email Share'
          description: 'Delete an existing list email share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListEmailShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListViewInBatch':
          summary: 'Create List View'
          description: 'Create a new list view in Batch'
          entityName: 'ListView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListViewInBatch':
          summary: 'Update List View'
          description: 'Updates an existing list view in batch; only elements specified
            in the request are updated.'
          entityName: 'ListView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewInBatch':
          summary: 'Upsert List View'
          description: 'Upsert an existing list view in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListViewInBatch':
          summary: 'Delete List View'
          description: 'Delete an existing list view in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListViewChartInBatch':
          summary: 'Create List View Chart'
          description: 'Create a new list view chart in Batch'
          entityName: 'ListViewChart'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListViewChartInBatch':
          summary: 'Update List View Chart'
          description: 'Updates an existing list view chart in batch; only elements
            specified in the request are updated.'
          entityName: 'ListViewChart'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewChartInBatch':
          summary: 'Upsert List View Chart'
          description: 'Upsert an existing list view chart in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewChart'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListViewChartInBatch':
          summary: 'Delete List View Chart'
          description: 'Delete an existing list view chart in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewChart'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListViewChartInstanceInBatch':
          summary: 'Create List View Chart Instance'
          description: 'Create a new list view chart instance in Batch'
          entityName: 'ListViewChartInstance'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListViewChartInstanceInBatch':
          summary: 'Update List View Chart Instance'
          description: 'Updates an existing list view chart instance in batch; only
            elements specified in the request are updated.'
          entityName: 'ListViewChartInstance'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewChartInstanceInBatch':
          summary: 'Upsert List View Chart Instance'
          description: 'Upsert an existing list view chart instance in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ListViewChartInstance'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListViewChartInstanceInBatch':
          summary: 'Delete List View Chart Instance'
          description: 'Delete an existing list view chart instance in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ListViewChartInstance'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListViewEventInBatch':
          summary: 'Create List View Event'
          description: 'Create a new list view event in Batch'
          entityName: 'ListViewEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListViewEventInBatch':
          summary: 'Update List View Event'
          description: 'Updates an existing list view event in batch; only elements
            specified in the request are updated.'
          entityName: 'ListViewEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewEventInBatch':
          summary: 'Upsert List View Event'
          description: 'Upsert an existing list view event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListViewEventInBatch':
          summary: 'Delete List View Event'
          description: 'Delete an existing list view event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateListViewEventStreamInBatch':
          summary: 'Create List View Event Stream'
          description: 'Create a new list view event stream in Batch'
          entityName: 'ListViewEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateListViewEventStreamInBatch':
          summary: 'Update List View Event Stream'
          description: 'Updates an existing list view event stream in batch; only
            elements specified in the request are updated.'
          entityName: 'ListViewEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertListViewEventStreamInBatch':
          summary: 'Upsert List View Event Stream'
          description: 'Upsert an existing list view event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteListViewEventStreamInBatch':
          summary: 'Delete List View Event Stream'
          description: 'Delete an existing list view event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ListViewEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginAsEventInBatch':
          summary: 'Create LoginAs Event'
          description: 'Create a new loginas event in Batch'
          entityName: 'LoginAsEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginAsEventInBatch':
          summary: 'Update LoginAs Event'
          description: 'Updates an existing loginas event in batch; only elements
            specified in the request are updated.'
          entityName: 'LoginAsEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginAsEventInBatch':
          summary: 'Upsert LoginAs Event'
          description: 'Upsert an existing loginas event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginAsEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginAsEventInBatch':
          summary: 'Delete LoginAs Event'
          description: 'Delete an existing loginas event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginAsEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginAsEventStreamInBatch':
          summary: 'Create LoginAs Event Stream'
          description: 'Create a new loginas event stream in Batch'
          entityName: 'LoginAsEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginAsEventStreamInBatch':
          summary: 'Update LoginAs Event Stream'
          description: 'Updates an existing loginas event stream in batch; only elements
            specified in the request are updated.'
          entityName: 'LoginAsEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginAsEventStreamInBatch':
          summary: 'Upsert LoginAs Event Stream'
          description: 'Upsert an existing loginas event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginAsEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginAsEventStreamInBatch':
          summary: 'Delete LoginAs Event Stream'
          description: 'Delete an existing loginas event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginAsEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginEventInBatch':
          summary: 'Create Login Event'
          description: 'Create a new login event in Batch'
          entityName: 'LoginEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginEventInBatch':
          summary: 'Update Login Event'
          description: 'Updates an existing login event in batch; only elements specified
            in the request are updated.'
          entityName: 'LoginEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginEventInBatch':
          summary: 'Upsert Login Event'
          description: 'Upsert an existing login event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginEventInBatch':
          summary: 'Delete Login Event'
          description: 'Delete an existing login event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginEventStreamInBatch':
          summary: 'Create Login Event Stream'
          description: 'Create a new login event stream in Batch'
          entityName: 'LoginEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginEventStreamInBatch':
          summary: 'Update Login Event Stream'
          description: 'Updates an existing login event stream in batch; only elements
            specified in the request are updated.'
          entityName: 'LoginEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginEventStreamInBatch':
          summary: 'Upsert Login Event Stream'
          description: 'Upsert an existing login event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginEventStreamInBatch':
          summary: 'Delete Login Event Stream'
          description: 'Delete an existing login event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginGeoInBatch':
          summary: 'Create Login Geo Data'
          description: 'Create a new login geo data in Batch'
          entityName: 'LoginGeo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginGeoInBatch':
          summary: 'Update Login Geo Data'
          description: 'Updates an existing login geo data in batch; only elements
            specified in the request are updated.'
          entityName: 'LoginGeo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginGeoInBatch':
          summary: 'Upsert Login Geo Data'
          description: 'Upsert an existing login geo data in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginGeo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginGeoInBatch':
          summary: 'Delete Login Geo Data'
          description: 'Delete an existing login geo data in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginGeo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginHistoryInBatch':
          summary: 'Create Login History'
          description: 'Create a new login history in Batch'
          entityName: 'LoginHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginHistoryInBatch':
          summary: 'Update Login History'
          description: 'Updates an existing login history in batch; only elements
            specified in the request are updated.'
          entityName: 'LoginHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginHistoryInBatch':
          summary: 'Upsert Login History'
          description: 'Upsert an existing login history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginHistoryInBatch':
          summary: 'Delete Login History'
          description: 'Delete an existing login history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLoginIpInBatch':
          summary: 'Create Login IP'
          description: 'Create a new login ip in Batch'
          entityName: 'LoginIp'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLoginIpInBatch':
          summary: 'Update Login IP'
          description: 'Updates an existing login ip in batch; only elements specified
            in the request are updated.'
          entityName: 'LoginIp'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLoginIpInBatch':
          summary: 'Upsert Login IP'
          description: 'Upsert an existing login ip in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginIp'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLoginIpInBatch':
          summary: 'Delete Login IP'
          description: 'Delete an existing login ip in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LoginIp'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLogin__ChangeEventInBatch':
          summary: 'Create Change Event: Login'
          description: 'Create a new change event: login in Batch'
          entityName: 'Login__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLogin__ChangeEventInBatch':
          summary: 'Update Change Event: Login'
          description: 'Updates an existing change event: login in batch; only elements
            specified in the request are updated.'
          entityName: 'Login__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLogin__ChangeEventInBatch':
          summary: 'Upsert Change Event: Login'
          description: 'Upsert an existing change event: login in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Login__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLogin__ChangeEventInBatch':
          summary: 'Delete Change Event: Login'
          description: 'Delete an existing change event: login in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Login__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLogin__cInBatch':
          summary: 'Create Login'
          description: 'Create a new login in Batch'
          entityName: 'Login__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLogin__cInBatch':
          summary: 'Update Login'
          description: 'Updates an existing login in batch; only elements specified
            in the request are updated.'
          entityName: 'Login__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLogin__cInBatch':
          summary: 'Upsert Login'
          description: 'Upsert an existing login in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Login__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLogin__cInBatch':
          summary: 'Delete Login'
          description: 'Delete an existing login in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Login__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLogoutEventInBatch':
          summary: 'Create Logout Event'
          description: 'Create a new logout event in Batch'
          entityName: 'LogoutEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLogoutEventInBatch':
          summary: 'Update Logout Event'
          description: 'Updates an existing logout event in batch; only elements specified
            in the request are updated.'
          entityName: 'LogoutEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLogoutEventInBatch':
          summary: 'Upsert Logout Event'
          description: 'Upsert an existing logout event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LogoutEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLogoutEventInBatch':
          summary: 'Delete Logout Event'
          description: 'Delete an existing logout event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'LogoutEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLogoutEventStreamInBatch':
          summary: 'Create Logout Event Stream'
          description: 'Create a new logout event stream in Batch'
          entityName: 'LogoutEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLogoutEventStreamInBatch':
          summary: 'Update Logout Event Stream'
          description: 'Updates an existing logout event stream in batch; only elements
            specified in the request are updated.'
          entityName: 'LogoutEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLogoutEventStreamInBatch':
          summary: 'Upsert Logout Event Stream'
          description: 'Upsert an existing logout event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LogoutEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLogoutEventStreamInBatch':
          summary: 'Delete Logout Event Stream'
          description: 'Delete an existing logout event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LogoutEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateLookedUpFromActivityInBatch':
          summary: 'Create Lookups from Activity'
          description: 'Create a new lookups from activity in Batch'
          entityName: 'LookedUpFromActivity'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateLookedUpFromActivityInBatch':
          summary: 'Update Lookups from Activity'
          description: 'Updates an existing lookups from activity in batch; only elements
            specified in the request are updated.'
          entityName: 'LookedUpFromActivity'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertLookedUpFromActivityInBatch':
          summary: 'Upsert Lookups from Activity'
          description: 'Upsert an existing lookups from activity in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LookedUpFromActivity'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteLookedUpFromActivityInBatch':
          summary: 'Delete Lookups from Activity'
          description: 'Delete an existing lookups from activity in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'LookedUpFromActivity'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroInBatch':
          summary: 'Create Macro'
          description: 'Create a new macro in Batch'
          entityName: 'Macro'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroInBatch':
          summary: 'Update Macro'
          description: 'Updates an existing macro in batch; only elements specified
            in the request are updated.'
          entityName: 'Macro'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroInBatch':
          summary: 'Upsert Macro'
          description: 'Upsert an existing macro in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Macro'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroInBatch':
          summary: 'Delete Macro'
          description: 'Delete an existing macro in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Macro'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroChangeEventInBatch':
          summary: 'Create Macro Change Event'
          description: 'Create a new macro change event in Batch'
          entityName: 'MacroChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroChangeEventInBatch':
          summary: 'Update Macro Change Event'
          description: 'Updates an existing macro change event in batch; only elements
            specified in the request are updated.'
          entityName: 'MacroChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroChangeEventInBatch':
          summary: 'Upsert Macro Change Event'
          description: 'Upsert an existing macro change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroChangeEventInBatch':
          summary: 'Delete Macro Change Event'
          description: 'Delete an existing macro change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroHistoryInBatch':
          summary: 'Create Macro History'
          description: 'Create a new macro history in Batch'
          entityName: 'MacroHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroHistoryInBatch':
          summary: 'Update Macro History'
          description: 'Updates an existing macro history in batch; only elements
            specified in the request are updated.'
          entityName: 'MacroHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroHistoryInBatch':
          summary: 'Upsert Macro History'
          description: 'Upsert an existing macro history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroHistoryInBatch':
          summary: 'Delete Macro History'
          description: 'Delete an existing macro history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroInstructionInBatch':
          summary: 'Create Macro Instruction'
          description: 'Create a new macro instruction in Batch'
          entityName: 'MacroInstruction'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroInstructionInBatch':
          summary: 'Update Macro Instruction'
          description: 'Updates an existing macro instruction in batch; only elements
            specified in the request are updated.'
          entityName: 'MacroInstruction'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroInstructionInBatch':
          summary: 'Upsert Macro Instruction'
          description: 'Upsert an existing macro instruction in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroInstruction'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroInstructionInBatch':
          summary: 'Delete Macro Instruction'
          description: 'Delete an existing macro instruction in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroInstruction'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroInstructionChangeEventInBatch':
          summary: 'Create Macro Instruction Change Event'
          description: 'Create a new macro instruction change event in Batch'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroInstructionChangeEventInBatch':
          summary: 'Update Macro Instruction Change Event'
          description: 'Updates an existing macro instruction change event in batch;
            only elements specified in the request are updated.'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroInstructionChangeEventInBatch':
          summary: 'Upsert Macro Instruction Change Event'
          description: 'Upsert an existing macro instruction change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroInstructionChangeEventInBatch':
          summary: 'Delete Macro Instruction Change Event'
          description: 'Delete an existing macro instruction change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'MacroInstructionChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroShareInBatch':
          summary: 'Create Macro Share'
          description: 'Create a new macro share in Batch'
          entityName: 'MacroShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroShareInBatch':
          summary: 'Update Macro Share'
          description: 'Updates an existing macro share in batch; only elements specified
            in the request are updated.'
          entityName: 'MacroShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroShareInBatch':
          summary: 'Upsert Macro Share'
          description: 'Upsert an existing macro share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroShareInBatch':
          summary: 'Delete Macro Share'
          description: 'Delete an existing macro share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroUsageInBatch':
          summary: 'Create Macro Usage '
          description: 'Create a new macro usage in Batch'
          entityName: 'MacroUsage'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroUsageInBatch':
          summary: 'Update Macro Usage'
          description: 'Updates an existing macro usage in batch; only elements specified
            in the request are updated.'
          entityName: 'MacroUsage'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroUsageInBatch':
          summary: 'Upsert Macro Usage'
          description: 'Upsert an existing macro usage in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroUsage'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroUsageInBatch':
          summary: 'Delete Macro Usage'
          description: 'Delete an existing macro usage in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroUsage'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMacroUsageShareInBatch':
          summary: 'Create Macro Usage Share'
          description: 'Create a new macro usage share in Batch'
          entityName: 'MacroUsageShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMacroUsageShareInBatch':
          summary: 'Update Macro Usage Share'
          description: 'Updates an existing macro usage share in batch; only elements
            specified in the request are updated.'
          entityName: 'MacroUsageShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMacroUsageShareInBatch':
          summary: 'Upsert Macro Usage Share'
          description: 'Upsert an existing macro usage share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroUsageShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMacroUsageShareInBatch':
          summary: 'Delete Macro Usage Share'
          description: 'Delete an existing macro usage share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MacroUsageShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMailmergeTemplateInBatch':
          summary: 'Create Mail Merge Template'
          description: 'Create a new mail merge template in Batch'
          entityName: 'MailmergeTemplate'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMailmergeTemplateInBatch':
          summary: 'Update Mail Merge Template'
          description: 'Updates an existing mail merge template in batch; only elements
            specified in the request are updated.'
          entityName: 'MailmergeTemplate'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMailmergeTemplateInBatch':
          summary: 'Upsert Mail Merge Template'
          description: 'Upsert an existing mail merge template in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MailmergeTemplate'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMailmergeTemplateInBatch':
          summary: 'Delete Mail Merge Template'
          description: 'Delete an existing mail merge template in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MailmergeTemplate'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateManagedContentInBatch':
          summary: 'Create Managed Content'
          description: 'Create a new managed content in Batch'
          entityName: 'ManagedContent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateManagedContentInBatch':
          summary: 'Update Managed Content'
          description: 'Updates an existing managed content in batch; only elements
            specified in the request are updated.'
          entityName: 'ManagedContent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentInBatch':
          summary: 'Upsert Managed Content'
          description: 'Upsert an existing managed content in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteManagedContentInBatch':
          summary: 'Delete Managed Content'
          description: 'Delete an existing managed content in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateManagedContentChannelInBatch':
          summary: 'Create Managed Content Channel'
          description: 'Create a new managed content channel in Batch'
          entityName: 'ManagedContentChannel'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateManagedContentChannelInBatch':
          summary: 'Update Managed Content Channel'
          description: 'Updates an existing managed content channel in batch; only
            elements specified in the request are updated.'
          entityName: 'ManagedContentChannel'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentChannelInBatch':
          summary: 'Upsert Managed Content Channel'
          description: 'Upsert an existing managed content channel in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentChannel'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteManagedContentChannelInBatch':
          summary: 'Delete Managed Content Channel'
          description: 'Delete an existing managed content channel in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentChannel'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateManagedContentSpaceInBatch':
          summary: 'Create Managed Content Space'
          description: 'Create a new managed content space in Batch'
          entityName: 'ManagedContentSpace'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateManagedContentSpaceInBatch':
          summary: 'Update Managed Content Space'
          description: 'Updates an existing managed content space in batch; only elements
            specified in the request are updated.'
          entityName: 'ManagedContentSpace'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentSpaceInBatch':
          summary: 'Upsert Managed Content Space'
          description: 'Upsert an existing managed content space in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentSpace'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteManagedContentSpaceInBatch':
          summary: 'Delete Managed Content Space'
          description: 'Delete an existing managed content space in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentSpace'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateManagedContentVariantInBatch':
          summary: 'Create Managed Content Variant'
          description: 'Create a new managed content variant in Batch'
          entityName: 'ManagedContentVariant'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateManagedContentVariantInBatch':
          summary: 'Update Managed Content Variant'
          description: 'Updates an existing managed content variant in batch; only
            elements specified in the request are updated.'
          entityName: 'ManagedContentVariant'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentVariantInBatch':
          summary: 'Upsert Managed Content Variant'
          description: 'Upsert an existing managed content variant in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentVariant'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteManagedContentVariantInBatch':
          summary: 'Delete Managed Content Variant'
          description: 'Delete an existing managed content variant in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ManagedContentVariant'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateManagedContentVariantChangeEventInBatch':
          summary: 'Create Managed Content Variant Change Event'
          description: 'Create a new managed content variant change event in Batch'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateManagedContentVariantChangeEventInBatch':
          summary: 'Update Managed Content Variant Change Event'
          description: 'Updates an existing managed content variant change event in
            batch; only elements specified in the request are updated.'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertManagedContentVariantChangeEventInBatch':
          summary: 'Upsert Managed Content Variant Change Event'
          description: 'Upsert an existing managed content variant change event in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteManagedContentVariantChangeEventInBatch':
          summary: 'Delete Managed Content Variant Change Event'
          description: 'Delete an existing managed content variant change event in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'ManagedContentVariantChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMatchingInformationInBatch':
          summary: 'Create Matching Information'
          description: 'Create a new matching information in Batch'
          entityName: 'MatchingInformation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMatchingInformationInBatch':
          summary: 'Update Matching Information'
          description: 'Updates an existing matching information in batch; only elements
            specified in the request are updated.'
          entityName: 'MatchingInformation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMatchingInformationInBatch':
          summary: 'Upsert Matching Information'
          description: 'Upsert an existing matching information in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingInformation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMatchingInformationInBatch':
          summary: 'Delete Matching Information'
          description: 'Delete an existing matching information in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingInformation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMatchingRuleInBatch':
          summary: 'Create Matching Rule'
          description: 'Create a new matching rule in Batch'
          entityName: 'MatchingRule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMatchingRuleInBatch':
          summary: 'Update Matching Rule'
          description: 'Updates an existing matching rule in batch; only elements
            specified in the request are updated.'
          entityName: 'MatchingRule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMatchingRuleInBatch':
          summary: 'Upsert Matching Rule'
          description: 'Upsert an existing matching rule in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingRule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMatchingRuleInBatch':
          summary: 'Delete Matching Rule'
          description: 'Delete an existing matching rule in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingRule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMatchingRuleItemInBatch':
          summary: 'Create Matching Rule Item'
          description: 'Create a new matching rule item in Batch'
          entityName: 'MatchingRuleItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMatchingRuleItemInBatch':
          summary: 'Update Matching Rule Item'
          description: 'Updates an existing matching rule item in batch; only elements
            specified in the request are updated.'
          entityName: 'MatchingRuleItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMatchingRuleItemInBatch':
          summary: 'Upsert Matching Rule Item'
          description: 'Upsert an existing matching rule item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingRuleItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMatchingRuleItemInBatch':
          summary: 'Delete Matching Rule Item'
          description: 'Delete an existing matching rule item in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'MatchingRuleItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMobileApplicationDetailInBatch':
          summary: 'Create Mobile Application Detail'
          description: 'Create a new mobile application detail in Batch'
          entityName: 'MobileApplicationDetail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMobileApplicationDetailInBatch':
          summary: 'Update Mobile Application Detail'
          description: 'Updates an existing mobile application detail in batch; only
            elements specified in the request are updated.'
          entityName: 'MobileApplicationDetail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMobileApplicationDetailInBatch':
          summary: 'Upsert Mobile Application Detail'
          description: 'Upsert an existing mobile application detail in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'MobileApplicationDetail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMobileApplicationDetailInBatch':
          summary: 'Delete Mobile Application Detail'
          description: 'Delete an existing mobile application detail in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'MobileApplicationDetail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateMyDomainDiscoverableLoginInBatch':
          summary: 'Create My Domain Discoverable Login'
          description: 'Create a new my domain discoverable login in Batch'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateMyDomainDiscoverableLoginInBatch':
          summary: 'Update My Domain Discoverable Login'
          description: 'Updates an existing my domain discoverable login in batch;
            only elements specified in the request are updated.'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertMyDomainDiscoverableLoginInBatch':
          summary: 'Upsert My Domain Discoverable Login'
          description: 'Upsert an existing my domain discoverable login in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteMyDomainDiscoverableLoginInBatch':
          summary: 'Delete My Domain Discoverable Login'
          description: 'Delete an existing my domain discoverable login in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'MyDomainDiscoverableLogin'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateNameInBatch':
          summary: 'Create Name'
          description: 'Create a new name in Batch'
          entityName: 'Name'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateNameInBatch':
          summary: 'Update Name'
          description: 'Updates an existing name in batch; only elements specified
            in the request are updated.'
          entityName: 'Name'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNameInBatch':
          summary: 'Upsert Name'
          description: 'Upsert an existing name in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Name'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteNameInBatch':
          summary: 'Delete Name'
          description: 'Delete an existing name in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Name'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateNamedCredentialInBatch':
          summary: 'Create Named Credential'
          description: 'Create a new named credential in Batch'
          entityName: 'NamedCredential'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateNamedCredentialInBatch':
          summary: 'Update Named Credential'
          description: 'Updates an existing named credential in batch; only elements
            specified in the request are updated.'
          entityName: 'NamedCredential'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNamedCredentialInBatch':
          summary: 'Upsert Named Credential'
          description: 'Upsert an existing named credential in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'NamedCredential'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteNamedCredentialInBatch':
          summary: 'Delete Named Credential'
          description: 'Delete an existing named credential in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'NamedCredential'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateNoteInBatch':
          summary: 'Create Note'
          description: 'Create a new note in Batch'
          entityName: 'Note'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateNoteInBatch':
          summary: 'Update Note'
          description: 'Updates an existing note in batch; only elements specified
            in the request are updated.'
          entityName: 'Note'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNoteInBatch':
          summary: 'Upsert Note'
          description: 'Upsert an existing note in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Note'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteNoteInBatch':
          summary: 'Delete Note'
          description: 'Delete an existing note in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Note'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateNoteAndAttachmentInBatch':
          summary: 'Create Note and Attachment'
          description: 'Create a new note and attachment in Batch'
          entityName: 'NoteAndAttachment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateNoteAndAttachmentInBatch':
          summary: 'Update Note and Attachment'
          description: 'Updates an existing note and attachment in batch; only elements
            specified in the request are updated.'
          entityName: 'NoteAndAttachment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertNoteAndAttachmentInBatch':
          summary: 'Upsert Note and Attachment'
          description: 'Upsert an existing note and attachment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'NoteAndAttachment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteNoteAndAttachmentInBatch':
          summary: 'Delete Note and Attachment'
          description: 'Delete an existing note and attachment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'NoteAndAttachment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOauthCustomScopeInBatch':
          summary: 'Create OAuth Custom Scope'
          description: 'Create a new oauth custom scope in Batch'
          entityName: 'OauthCustomScope'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOauthCustomScopeInBatch':
          summary: 'Update OAuth Custom Scope'
          description: 'Updates an existing oauth custom scope in batch; only elements
            specified in the request are updated.'
          entityName: 'OauthCustomScope'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOauthCustomScopeInBatch':
          summary: 'Upsert OAuth Custom Scope'
          description: 'Upsert an existing oauth custom scope in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthCustomScope'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOauthCustomScopeInBatch':
          summary: 'Delete OAuth Custom Scope'
          description: 'Delete an existing oauth custom scope in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthCustomScope'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOauthCustomScopeAppInBatch':
          summary: 'Create OAuth Custom Scope App'
          description: 'Create a new oauth custom scope app  in Batch'
          entityName: 'OauthCustomScopeApp'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOauthCustomScopeAppInBatch':
          summary: 'Update OAuth Custom Scope App'
          description: 'Updates an existing oauth custom scope app  in batch; only
            elements specified in the request are updated.'
          entityName: 'OauthCustomScopeApp'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOauthCustomScopeAppInBatch':
          summary: 'Upsert OAuth Custom Scope App'
          description: 'Upsert an existing oauth custom scope app  in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthCustomScopeApp'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOauthCustomScopeAppInBatch':
          summary: 'Delete OAuth Custom Scope App'
          description: 'Delete an existing oauth custom scope app  in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthCustomScopeApp'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOauthTokenInBatch':
          summary: 'Create Oauth Token'
          description: 'Create a new oauth token in Batch'
          entityName: 'OauthToken'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOauthTokenInBatch':
          summary: 'Update Oauth Token'
          description: 'Updates an existing oauth token in batch; only elements specified
            in the request are updated.'
          entityName: 'OauthToken'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOauthTokenInBatch':
          summary: 'Upsert Oauth Token'
          description: 'Upsert an existing oauth token in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthToken'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOauthTokenInBatch':
          summary: 'Delete Oauth Token'
          description: 'Delete an existing oauth token in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OauthToken'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateObjectName1__ChangeEventInBatch':
          summary: 'Create Change Event: label1'
          description: 'Create a new change event: label1 in Batch'
          entityName: 'ObjectName1__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateObjectName1__ChangeEventInBatch':
          summary: 'Update Change Event: label1'
          description: 'Updates an existing change event: label1 in batch only elements
            specified in the request are updated.'
          entityName: 'ObjectName1__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectName1__ChangeEventInBatch':
          summary: 'Upsert Change Event: label1'
          description: 'Upsert an existing change event: label1 in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectName1__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteObjectName1__ChangeEventInBatch':
          summary: 'Delete Change Event: label1'
          description: 'Delete an existing change event: label1 in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectName1__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateObjectName1__cInBatch':
          summary: 'Create label1'
          description: 'Create a new label1 in Batch'
          entityName: 'ObjectName1__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateObjectName1__cInBatch':
          summary: 'Update label1'
          description: 'Updates an existing label1 in batch; only elements specified
            in the request are updated.'
          entityName: 'ObjectName1__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectName1__cInBatch':
          summary: 'Upsert label1'
          description: 'Upsert an existing label1 in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectName1__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteObjectName1__cInBatch':
          summary: 'Delete label1'
          description: 'Delete an existing label1 in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectName1__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateObjectName2__ChangeEventInBatch':
          summary: 'Create Change Event: label2InDevelopment'
          description: 'Create a new change event: label2indevelopment in Batch'
          entityName: 'ObjectName2__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateObjectName2__ChangeEventInBatch':
          summary: 'Update Change Event: label2InDevelopment'
          description: 'Updates an existing change event: label2indevelopment in batch;
            only elements specified in the request are updated.'
          entityName: 'ObjectName2__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectName2__ChangeEventInBatch':
          summary: 'Upsert Change Event: label2InDevelopment'
          description: 'Upsert an existing change event: label2indevelopment in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ObjectName2__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteObjectName2__ChangeEventInBatch':
          summary: 'Delete Change Event: label2InDevelopment'
          description: 'Delete an existing change event: label2indevelopment in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'ObjectName2__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateObjectName2__HistoryInBatch':
          summary: 'Create History: label2InDevelopment'
          description: 'Create a new history: label2indevelopment in Batch'
          entityName: 'ObjectName2__History'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateObjectName2__HistoryInBatch':
          summary: 'Update History: label2InDevelopment'
          description: 'Updates an existing history: label2indevelopment in batch;
            only elements specified in the request are updated.'
          entityName: 'ObjectName2__History'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectName2__HistoryInBatch':
          summary: 'Upsert History: label2InDevelopment'
          description: 'Upsert an existing history: label2indevelopment in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ObjectName2__History'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteObjectName2__HistoryInBatch':
          summary: 'Delete History: label2InDevelopment'
          description: 'Delete an existing history: label2indevelopment in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ObjectName2__History'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateObjectName2__cInBatch':
          summary: 'Create label2InDevelopment'
          description: 'Create a new label2indevelopment in Batch'
          entityName: 'ObjectName2__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateObjectName2__cInBatch':
          summary: 'Update label2InDevelopment'
          description: 'Updates an existing label2indevelopment in batch; only elements
            specified in the request are updated.'
          entityName: 'ObjectName2__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectName2__cInBatch':
          summary: 'Upsert label2InDevelopment'
          description: 'Upsert an existing label2indevelopment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectName2__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteObjectName2__cInBatch':
          summary: 'Delete label2InDevelopment'
          description: 'Delete an existing label2indevelopment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectName2__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateObjectPermissionsInBatch':
          summary: 'Create Object Permissions'
          description: 'Create a new object permissions in Batch'
          entityName: 'ObjectPermissions'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateObjectPermissionsInBatch':
          summary: 'Update Object Permissions'
          description: 'Updates an existing object permissions in batch; only elements
            specified in the request are updated.'
          entityName: 'ObjectPermissions'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertObjectPermissionsInBatch':
          summary: 'Upsert Object Permissions'
          description: 'Upsert an existing object permissions in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectPermissions'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteObjectPermissionsInBatch':
          summary: 'Delete Object Permissions'
          description: 'Delete an existing object permissions in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ObjectPermissions'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOnboardingMetricsInBatch':
          summary: 'Create Onboarding Metrics'
          description: 'Create a new onboarding metrics in Batch'
          entityName: 'OnboardingMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOnboardingMetricsInBatch':
          summary: 'Update Onboarding Metrics'
          description: 'Updates an existing onboarding metrics in batch; only elements
            specified in the request are updated.'
          entityName: 'OnboardingMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOnboardingMetricsInBatch':
          summary: 'Upsert Onboarding Metrics'
          description: 'Upsert an existing onboarding metrics in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OnboardingMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOnboardingMetricsInBatch':
          summary: 'Delete Onboarding Metrics'
          description: 'Delete an existing onboarding metrics in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OnboardingMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpenActivityInBatch':
          summary: 'Create Open Activity'
          description: 'Create a new open activity in Batch'
          entityName: 'OpenActivity'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpenActivityInBatch':
          summary: 'Update Open Activity'
          description: 'Updates an existing open activity in batch; only elements
            specified in the request are updated.'
          entityName: 'OpenActivity'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpenActivityInBatch':
          summary: 'Upsert Open Activity'
          description: 'Upsert an existing open activity in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpenActivity'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpenActivityInBatch':
          summary: 'Delete Open Activity'
          description: 'Delete an existing open activity in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpenActivity'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityInBatch':
          summary: 'Create Opportunity'
          description: 'Create a new opportunity in Batch'
          entityName: 'Opportunity'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityInBatch':
          summary: 'Update Opportunity'
          description: 'Updates an existing opportunity in batch; only elements specified
            in the request are updated.'
          entityName: 'Opportunity'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityInBatch':
          summary: 'Upsert Opportunity'
          description: 'Upsert an existing opportunity in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Opportunity'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityInBatch':
          summary: 'Delete Opportunity'
          description: 'Delete an existing opportunity in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Opportunity'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityChangeEventInBatch':
          summary: 'Create Opportunity Change Event'
          description: 'Create a new opportunity change event in Batch'
          entityName: 'OpportunityChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityChangeEventInBatch':
          summary: 'Update Opportunity Change Event'
          description: 'Updates an existing opportunity change event in batch; only
            elements specified in the request are updated.'
          entityName: 'OpportunityChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityChangeEventInBatch':
          summary: 'Upsert Opportunity Change Event'
          description: 'Upsert an existing opportunity change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityChangeEventInBatch':
          summary: 'Delete Opportunity Change Event'
          description: 'Delete an existing opportunity change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityCompetitorInBatch':
          summary: 'Create Opportunity: Competitor'
          description: 'Create a new opportunity: competitor in Batch'
          entityName: 'OpportunityCompetitor'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityCompetitorInBatch':
          summary: 'Update Opportunity: Competitor'
          description: 'Updates an existing opportunity: competitor in batch; only
            elements specified in the request are updated.'
          entityName: 'OpportunityCompetitor'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityCompetitorInBatch':
          summary: 'Upsert Opportunity: Competitor'
          description: 'Upsert an existing opportunity: competitor in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityCompetitor'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityCompetitorInBatch':
          summary: 'Delete Opportunity: Competitor'
          description: 'Delete an existing opportunity: competitor in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityCompetitor'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityContactRoleInBatch':
          summary: 'Create Opportunity Contact Role'
          description: 'Create a new opportunity contact role in Batch'
          entityName: 'OpportunityContactRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityContactRoleInBatch':
          summary: 'Update Opportunity Contact Role'
          description: 'Updates an existing opportunity contact role in batch; only
            elements specified in the request are updated.'
          entityName: 'OpportunityContactRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityContactRoleInBatch':
          summary: 'Upsert Opportunity Contact Role'
          description: 'Upsert an existing opportunity contact role in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityContactRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityContactRoleInBatch':
          summary: 'Delete Opportunity Contact Role'
          description: 'Delete an existing opportunity contact role in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityContactRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityContactRoleChangeEventInBatch':
          summary: 'Create Opportunity Contact Role Change Event'
          description: 'Create a new opportunity contact role change event in Batch'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityContactRoleChangeEventInBatch':
          summary: 'Update Opportunity Contact Role Change Event'
          description: 'Updates an existing opportunity contact role change event
            in batch; only elements specified in the request are updated.'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityContactRoleChangeEventInBatch':
          summary: 'Upsert Opportunity Contact Role Change Event'
          description: 'Upsert an existing opportunity contact role change event in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityContactRoleChangeEventInBatch':
          summary: 'Delete Opportunity Contact Role Change Event'
          description: 'Delete an existing opportunity contact role change event in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'OpportunityContactRoleChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityFieldHistoryInBatch':
          summary: 'Create Opportunity Field History'
          description: 'Create a new opportunity field history in Batch'
          entityName: 'OpportunityFieldHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityFieldHistoryInBatch':
          summary: 'Update Opportunity Field History'
          description: 'Updates an existing opportunity field history in batch; only
            elements specified in the request are updated.'
          entityName: 'OpportunityFieldHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityFieldHistoryInBatch':
          summary: 'Upsert Opportunity Field History'
          description: 'Upsert an existing opportunity field history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityFieldHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityFieldHistoryInBatch':
          summary: 'Delete Opportunity Field History'
          description: 'Delete an existing opportunity field history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OpportunityFieldHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityHistoryInBatch':
          summary: 'Create Opportunity History'
          description: 'Create a new opportunity history in Batch'
          entityName: 'OpportunityHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityHistoryInBatch':
          summary: 'Update Opportunity History'
          description: 'Updates an existing opportunity history in batch; only elements
            specified in the request are updated.'
          entityName: 'OpportunityHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityHistoryInBatch':
          summary: 'Upsert Opportunity History'
          description: 'Upsert an existing opportunity history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityHistoryInBatch':
          summary: 'Delete Opportunity History'
          description: 'Delete an existing opportunity history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityLineItemInBatch':
          summary: 'Create Opportunity Product'
          description: 'Create a new opportunity product in Batch'
          entityName: 'OpportunityLineItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityLineItemInBatch':
          summary: 'Update Opportunity Product'
          description: 'Updates an existing opportunity product in batch; only elements
            specified in the request are updated.'
          entityName: 'OpportunityLineItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityLineItemInBatch':
          summary: 'Upsert Opportunity Product'
          description: 'Upsert an existing opportunity product in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityLineItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityLineItemInBatch':
          summary: 'Delete Opportunity Product'
          description: 'Delete an existing opportunity product in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityLineItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityPartnerInBatch':
          summary: 'Create Opportunity Partner'
          description: 'Create a new opportunity partner in Batch'
          entityName: 'OpportunityPartner'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityPartnerInBatch':
          summary: 'Update Opportunity Partner'
          description: 'Updates an existing opportunity partner in batch; only elements
            specified in the request are updated.'
          entityName: 'OpportunityPartner'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityPartnerInBatch':
          summary: 'Upsert Opportunity Partner'
          description: 'Upsert an existing opportunity partner in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityPartner'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityPartnerInBatch':
          summary: 'Delete Opportunity Partner'
          description: 'Delete an existing opportunity partner in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityPartner'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityShareInBatch':
          summary: 'Create Opportunity Share'
          description: 'Create a new opportunity share in Batch'
          entityName: 'OpportunityShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityShareInBatch':
          summary: 'Update Opportunity Share'
          description: 'Updates an existing opportunity share in batch; only elements
            specified in the request are updated.'
          entityName: 'OpportunityShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityShareInBatch':
          summary: 'Upsert Opportunity Share'
          description: 'Upsert an existing opportunity share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityShareInBatch':
          summary: 'Delete Opportunity Share'
          description: 'Delete an existing opportunity share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOpportunityStageInBatch':
          summary: 'Create Opportunity Stage'
          description: 'Create a new opportunity stage in Batch'
          entityName: 'OpportunityStage'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOpportunityStageInBatch':
          summary: 'Update Opportunity Stage'
          description: 'Updates an existing opportunity stage in batch; only elements
            specified in the request are updated.'
          entityName: 'OpportunityStage'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOpportunityStageInBatch':
          summary: 'Upsert Opportunity Stage'
          description: 'Upsert an existing opportunity stage in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityStage'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOpportunityStageInBatch':
          summary: 'Delete Opportunity Stage'
          description: 'Delete an existing opportunity stage in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OpportunityStage'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgDeleteRequestInBatch':
          summary: 'Create Org Delete Request'
          description: 'Create a new org delete request in Batch'
          entityName: 'OrgDeleteRequest'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgDeleteRequestInBatch':
          summary: 'Update Org Delete Request'
          description: 'Updates an existing org delete request in batch; only elements
            specified in the request are updated.'
          entityName: 'OrgDeleteRequest'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgDeleteRequestInBatch':
          summary: 'Upsert Org Delete Request'
          description: 'Upsert an existing org delete request in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgDeleteRequest'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgDeleteRequestInBatch':
          summary: 'Delete Org Delete Request'
          description: 'Delete an existing org delete request in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgDeleteRequest'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgDeleteRequestShareInBatch':
          summary: 'Create Org Delete Request Share'
          description: 'Create a new org delete request share in Batch'
          entityName: 'OrgDeleteRequestShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgDeleteRequestShareInBatch':
          summary: 'Update Org Delete Request Share'
          description: 'Updates an existing org delete request share in batch; only
            elements specified in the request are updated.'
          entityName: 'OrgDeleteRequestShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgDeleteRequestShareInBatch':
          summary: 'Upsert Org Delete Request Share'
          description: 'Upsert an existing org delete request share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OrgDeleteRequestShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgDeleteRequestShareInBatch':
          summary: 'Delete Org Delete Request Share'
          description: 'Delete an existing org delete request share in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OrgDeleteRequestShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgEmailAddressSecurityInBatch':
          summary: 'Create Organization Email Address Security'
          description: 'Create a new organization email address security in Batch'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgEmailAddressSecurityInBatch':
          summary: 'Update Organization Email Address Security'
          description: 'Updates an existing organization email address security in
            batch; only elements specified in the request are updated.'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgEmailAddressSecurityInBatch':
          summary: 'Upsert Organization Email Address Security'
          description: 'Upsert an existing organization email address security in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgEmailAddressSecurityInBatch':
          summary: 'Delete Organization Email Address Security'
          description: 'Delete an existing organization email address security in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'OrgEmailAddressSecurity'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgLifecycleNotificationInBatch':
          summary: 'Create Org Lifecycle Notification'
          description: 'Create a new org lifecycle notification in Batch'
          entityName: 'OrgLifecycleNotification'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgLifecycleNotificationInBatch':
          summary: 'Update Org Lifecycle Notification'
          description: 'Updates an existing org lifecycle notification in batch; only
            elements specified in the request are updated.'
          entityName: 'OrgLifecycleNotification'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgLifecycleNotificationInBatch':
          summary: 'Upsert Org Lifecycle Notification'
          description: 'Upsert an existing org lifecycle notification in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OrgLifecycleNotification'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgLifecycleNotificationInBatch':
          summary: 'Delete Org Lifecycle Notification'
          description: 'Delete an existing org lifecycle notification in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OrgLifecycleNotification'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgMetricInBatch':
          summary: 'Create Org Metric'
          description: 'Create a new org metric in Batch'
          entityName: 'OrgMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgMetricInBatch':
          summary: 'Update Org Metric'
          description: 'Updates an existing org metric in batch; only elements specified
            in the request are updated.'
          entityName: 'OrgMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgMetricInBatch':
          summary: 'Upsert Org Metric'
          description: 'Upsert an existing org metric in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgMetricInBatch':
          summary: 'Delete Org Metric'
          description: 'Delete an existing org metric in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgMetricScanResultInBatch':
          summary: 'Create Org Metric Scan Result'
          description: 'Create a new org metric scan result in Batch'
          entityName: 'OrgMetricScanResult'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgMetricScanResultInBatch':
          summary: 'Update Org Metric Scan Result'
          description: 'Updates an existing org metric scan result in batch; only
            elements specified in the request are updated.'
          entityName: 'OrgMetricScanResult'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgMetricScanResultInBatch':
          summary: 'Upsert Org Metric Scan Result'
          description: 'Upsert an existing org metric scan result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetricScanResult'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgMetricScanResultInBatch':
          summary: 'Delete Org Metric Scan Result'
          description: 'Delete an existing org metric scan result in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetricScanResult'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgMetricScanSummaryInBatch':
          summary: 'Create Org Metric Scan Summary'
          description: 'Create a new org metric scan summary in Batch'
          entityName: 'OrgMetricScanSummary'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgMetricScanSummaryInBatch':
          summary: 'Update Org Metric Scan Summary'
          description: 'Updates an existing org metric scan summary in batch; only
            elements specified in the request are updated.'
          entityName: 'OrgMetricScanSummary'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgMetricScanSummaryInBatch':
          summary: 'Upsert Org Metric Scan Summary'
          description: 'Upsert an existing org metric scan summary in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetricScanSummary'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgMetricScanSummaryInBatch':
          summary: 'Delete Org Metric Scan Summary'
          description: 'Delete an existing org metric scan summary in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OrgMetricScanSummary'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrgWideEmailAddressInBatch':
          summary: 'Create Organization-wide From Email Address'
          description: 'Create a new organization-wide from email address in Batch'
          entityName: 'OrgWideEmailAddress'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrgWideEmailAddressInBatch':
          summary: 'Update Organization-wide From Email Address'
          description: 'Updates an existing organization-wide from email address in
            batch; only elements specified in the request are updated.'
          entityName: 'OrgWideEmailAddress'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrgWideEmailAddressInBatch':
          summary: 'Upsert Organization-wide From Email Address'
          description: 'Upsert an existing organization-wide from email address in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'OrgWideEmailAddress'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrgWideEmailAddressInBatch':
          summary: 'Delete Organization-wide From Email Address'
          description: 'Delete an existing organization-wide from email address in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'OrgWideEmailAddress'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOrganizationInBatch':
          summary: 'Create Organization'
          description: 'Create a new organization in Batch'
          entityName: 'Organization'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOrganizationInBatch':
          summary: 'Update Organization'
          description: 'Updates an existing organization in batch; only elements specified
            in the request are updated.'
          entityName: 'Organization'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOrganizationInBatch':
          summary: 'Upsert Organization'
          description: 'Upsert an existing organization in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Organization'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOrganizationInBatch':
          summary: 'Delete Organization'
          description: 'Delete an existing organization in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Organization'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOutgoingEmailInBatch':
          summary: 'Create Outgoing Email'
          description: 'Create a new outgoing email in Batch'
          entityName: 'OutgoingEmail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOutgoingEmailInBatch':
          summary: 'Update Outgoing Email'
          description: 'Updates an existing outgoing email in batch; only elements
            specified in the request are updated.'
          entityName: 'OutgoingEmail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOutgoingEmailInBatch':
          summary: 'Upsert Outgoing Email'
          description: 'Upsert an existing outgoing email in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OutgoingEmail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOutgoingEmailInBatch':
          summary: 'Delete Outgoing Email'
          description: 'Delete an existing outgoing email in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'OutgoingEmail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOutgoingEmailRelationInBatch':
          summary: 'Create Outgoing Email Relation'
          description: 'Create a new outgoing email relation in Batch'
          entityName: 'OutgoingEmailRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOutgoingEmailRelationInBatch':
          summary: 'Update Outgoing Email Relation'
          description: 'Updates an existing outgoing email relation in batch; only
            elements specified in the request are updated.'
          entityName: 'OutgoingEmailRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOutgoingEmailRelationInBatch':
          summary: 'Upsert Outgoing Email Relation'
          description: 'Upsert an existing outgoing email relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OutgoingEmailRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOutgoingEmailRelationInBatch':
          summary: 'Delete Outgoing Email Relation'
          description: 'Delete an existing outgoing email relation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OutgoingEmailRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOwnedContentDocumentInBatch':
          summary: 'Create User Owned File'
          description: 'Create a new user owned file in Batch'
          entityName: 'OwnedContentDocument'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOwnedContentDocumentInBatch':
          summary: 'Update User Owned File'
          description: 'Updates an existing user owned file in batch; only elements
            specified in the request are updated.'
          entityName: 'OwnedContentDocument'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOwnedContentDocumentInBatch':
          summary: 'Upsert User Owned File'
          description: 'Upsert an existing user owned file in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OwnedContentDocument'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOwnedContentDocumentInBatch':
          summary: 'Delete User Owned File'
          description: 'Delete an existing user owned file in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'OwnedContentDocument'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateOwnerChangeOptionInfoInBatch':
          summary: 'Create Change Owner Option Info'
          description: 'Create a new change owner option info in Batch'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateOwnerChangeOptionInfoInBatch':
          summary: 'Update Change Owner Option Info'
          description: 'Updates an existing change owner option info in batch; only
            elements specified in the request are updated.'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertOwnerChangeOptionInfoInBatch':
          summary: 'Upsert Change Owner Option Info'
          description: 'Upsert an existing change owner option info in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteOwnerChangeOptionInfoInBatch':
          summary: 'Delete Change Owner Option Info'
          description: 'Delete an existing change owner option info in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'OwnerChangeOptionInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePackageLicenseInBatch':
          summary: 'Create Package License'
          description: 'Create a new package license in Batch'
          entityName: 'PackageLicense'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePackageLicenseInBatch':
          summary: 'Update Package License'
          description: 'Updates an existing package license in batch; only elements
            specified in the request are updated.'
          entityName: 'PackageLicense'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPackageLicenseInBatch':
          summary: 'Upsert Package License'
          description: 'Upsert an existing package license in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PackageLicense'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePackageLicenseInBatch':
          summary: 'Delete Package License'
          description: 'Delete an existing package license in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PackageLicense'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePartnerInBatch':
          summary: 'Create Partner'
          description: 'Create a new partner in Batch'
          entityName: 'Partner'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePartnerInBatch':
          summary: 'Update Partner'
          description: 'Updates an existing partner in batch; only elements specified
            in the request are updated.'
          entityName: 'Partner'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartnerInBatch':
          summary: 'Upsert Partner'
          description: 'Upsert an existing partner in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Partner'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePartnerInBatch':
          summary: 'Delete Partner'
          description: 'Delete an existing partner in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Partner'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePartnerRoleInBatch':
          summary: 'Create Partner Role Value'
          description: 'Create a new partner role value in Batch'
          entityName: 'PartnerRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePartnerRoleInBatch':
          summary: 'Update Partner Role Value'
          description: 'Updates an existing partner role value in batch; only elements
            specified in the request are updated.'
          entityName: 'PartnerRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartnerRoleInBatch':
          summary: 'Upsert Partner Role Value'
          description: 'Upsert an existing partner role value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartnerRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePartnerRoleInBatch':
          summary: 'Delete Partner Role Value'
          description: 'Delete an existing partner role value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartnerRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePartyConsentInBatch':
          summary: 'Create Party Consent'
          description: 'Create a new party consent in Batch'
          entityName: 'PartyConsent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePartyConsentInBatch':
          summary: 'Update Party Consent'
          description: 'Updates an existing party consent in batch; only elements
            specified in the request are updated.'
          entityName: 'PartyConsent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentInBatch':
          summary: 'Upsert Party Consent'
          description: 'Upsert an existing party consent in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePartyConsentInBatch':
          summary: 'Delete Party Consent'
          description: 'Delete an existing party consent in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePartyConsentChangeEventInBatch':
          summary: 'Create Party Consent Change Event'
          description: 'Create a new party consent change event in Batch'
          entityName: 'PartyConsentChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePartyConsentChangeEventInBatch':
          summary: 'Update Party Consent Change Event'
          description: 'Updates an existing party consent change event in batch; only
            elements specified in the request are updated.'
          entityName: 'PartyConsentChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentChangeEventInBatch':
          summary: 'Upsert Party Consent Change Event'
          description: 'Upsert an existing party consent change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PartyConsentChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePartyConsentChangeEventInBatch':
          summary: 'Delete Party Consent Change Event'
          description: 'Delete an existing party consent change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PartyConsentChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePartyConsentHistoryInBatch':
          summary: 'Create Party Consent  History'
          description: 'Create a new party consent  history in Batch'
          entityName: 'PartyConsentHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePartyConsentHistoryInBatch':
          summary: 'Update Party Consent  History'
          description: 'Updates an existing party consent  history in batch; only
            elements specified in the request are updated.'
          entityName: 'PartyConsentHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentHistoryInBatch':
          summary: 'Upsert Party Consent  History'
          description: 'Upsert an existing party consent  history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePartyConsentHistoryInBatch':
          summary: 'Delete Party Consent  History'
          description: 'Delete an existing party consent  history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePartyConsentShareInBatch':
          summary: 'Create Party Consent Share'
          description: 'Create a new party consent share in Batch'
          entityName: 'PartyConsentShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePartyConsentShareInBatch':
          summary: 'Update Party Consent Share'
          description: 'Updates an existing party consent share in batch; only elements
            specified in the request are updated.'
          entityName: 'PartyConsentShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPartyConsentShareInBatch':
          summary: 'Upsert Party Consent Share'
          description: 'Upsert an existing party consent share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePartyConsentShareInBatch':
          summary: 'Delete Party Consent Share'
          description: 'Delete an existing party consent share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PartyConsentShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePeriodInBatch':
          summary: 'Create Period'
          description: 'Create a new period in Batch'
          entityName: 'Period'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePeriodInBatch':
          summary: 'Update Period'
          description: 'Updates an existing period in batch; only elements specified
            in the request are updated.'
          entityName: 'Period'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPeriodInBatch':
          summary: 'Upsert Period'
          description: 'Upsert an existing period in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Period'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePeriodInBatch':
          summary: 'Delete Period'
          description: 'Delete an existing period in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Period'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetInBatch':
          summary: 'Create Permission Set'
          description: 'Create a new permission set in Batch'
          entityName: 'PermissionSet'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetInBatch':
          summary: 'Update Permission Set'
          description: 'Updates an existing permission set in batch; only elements
            specified in the request are updated.'
          entityName: 'PermissionSet'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetInBatch':
          summary: 'Upsert Permission Set'
          description: 'Upsert an existing permission set in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSet'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetInBatch':
          summary: 'Delete Permission Set'
          description: 'Delete an existing permission set in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSet'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetAssignmentInBatch':
          summary: 'Create Permission Set Assignment'
          description: 'Create a new permission set assignment in Batch'
          entityName: 'PermissionSetAssignment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetAssignmentInBatch':
          summary: 'Update Permission Set Assignment'
          description: 'Updates an existing permission set assignment in batch; only
            elements specified in the request are updated.'
          entityName: 'PermissionSetAssignment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetAssignmentInBatch':
          summary: 'Upsert Permission Set Assignment'
          description: 'Upsert an existing permission set assignment in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetAssignment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetAssignmentInBatch':
          summary: 'Delete Permission Set Assignment'
          description: 'Delete an existing permission set assignment in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetAssignment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetEventInBatch':
          summary: 'Create Permission Set Event'
          description: 'Create a new permission set event in Batch'
          entityName: 'PermissionSetEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetEventInBatch':
          summary: 'Update Permission Set Event'
          description: 'Updates an existing permission set event in batch; only elements
            specified in the request are updated.'
          entityName: 'PermissionSetEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetEventInBatch':
          summary: 'Upsert Permission Set Event'
          description: 'Upsert an existing permission set event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetEventInBatch':
          summary: 'Delete Permission Set Event'
          description: 'Delete an existing permission set event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetEventStoreInBatch':
          summary: 'Create Permission Set Event Store'
          description: 'Create a new permission set event store  in Batch'
          entityName: 'PermissionSetEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetEventStoreInBatch':
          summary: 'Update Permission Set Event Store'
          description: 'Updates an existing permission set event store  in batch;
            only elements specified in the request are updated.'
          entityName: 'PermissionSetEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetEventStoreInBatch':
          summary: 'Upsert Permission Set Event Store'
          description: 'Upsert an existing permission set event store  in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetEventStoreInBatch':
          summary: 'Delete Permission Set Event Store'
          description: 'Delete an existing permission set event store  in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetLicenseInBatch':
          summary: 'Create Permission Set License'
          description: 'Create a new permission set license in Batch'
          entityName: 'PermissionSetLicense'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetLicenseInBatch':
          summary: 'Update Permission Set License'
          description: 'Updates an existing permission set license in batch; only
            elements specified in the request are updated.'
          entityName: 'PermissionSetLicense'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetLicenseInBatch':
          summary: 'Upsert Permission Set License'
          description: 'Upsert an existing permission set license in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetLicense'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetLicenseInBatch':
          summary: 'Delete Permission Set License'
          description: 'Delete an existing permission set license in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PermissionSetLicense'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetLicenseAssignInBatch':
          summary: 'Create Permission Set License Assignment'
          description: 'Create a new permission set license assignment in Batch'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetLicenseAssignInBatch':
          summary: 'Update Permission Set License Assignment'
          description: 'Updates an existing permission set license assignment in batch;
            only elements specified in the request are updated.'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetLicenseAssignInBatch':
          summary: 'Upsert Permission Set License Assignment'
          description: 'Upsert an existing permission set license assignment in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetLicenseAssignInBatch':
          summary: 'Delete Permission Set License Assignment'
          description: 'Delete an existing permission set license assignment in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'PermissionSetLicenseAssign'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePermissionSetTabSettingInBatch':
          summary: 'Create Permission Set Tab Setting'
          description: 'Create a new permission set tab setting in Batch'
          entityName: 'PermissionSetTabSetting'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePermissionSetTabSettingInBatch':
          summary: 'Update Permission Set Tab Setting'
          description: 'Updates an existing permission set tab setting in batch; only
            elements specified in the request are updated.'
          entityName: 'PermissionSetTabSetting'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPermissionSetTabSettingInBatch':
          summary: 'Upsert Permission Set Tab Setting'
          description: 'Upsert an existing permission set tab setting in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetTabSetting'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePermissionSetTabSettingInBatch':
          summary: 'Delete Permission Set Tab Setting'
          description: 'Delete an existing permission set tab setting in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PermissionSetTabSetting'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePicklistValueInfoInBatch':
          summary: 'Create Picklist Value Info'
          description: 'Create a new picklist value info in Batch'
          entityName: 'PicklistValueInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePicklistValueInfoInBatch':
          summary: 'Update Picklist Value Info'
          description: 'Updates an existing picklist value info in batch; only elements
            specified in the request are updated.'
          entityName: 'PicklistValueInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPicklistValueInfoInBatch':
          summary: 'Upsert Picklist Value Info'
          description: 'Upsert an existing picklist value info in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PicklistValueInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePicklistValueInfoInBatch':
          summary: 'Delete Picklist Value Info'
          description: 'Delete an existing picklist value info in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PicklistValueInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePlatformActionInBatch':
          summary: 'Create Platform Action'
          description: 'Create a new platform action in Batch'
          entityName: 'PlatformAction'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePlatformActionInBatch':
          summary: 'Update Platform Action'
          description: 'Updates an existing platform action in batch; only elements
            specified in the request are updated.'
          entityName: 'PlatformAction'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformActionInBatch':
          summary: 'Upsert Platform Action'
          description: 'Upsert an existing platform action in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformAction'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePlatformActionInBatch':
          summary: 'Delete Platform Action'
          description: 'Delete an existing platform action in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PlatformAction'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePlatformCachePartitionInBatch':
          summary: 'Create Platform Cache Partition'
          description: 'Create a new platform cache partition in Batch'
          entityName: 'PlatformCachePartition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePlatformCachePartitionInBatch':
          summary: 'Update Platform Cache Partition'
          description: 'Updates an existing platform cache partition in batch; only
            elements specified in the request are updated.'
          entityName: 'PlatformCachePartition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformCachePartitionInBatch':
          summary: 'Upsert Platform Cache Partition'
          description: 'Upsert an existing platform cache partition in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PlatformCachePartition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePlatformCachePartitionInBatch':
          summary: 'Delete Platform Cache Partition'
          description: 'Delete an existing platform cache partition in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PlatformCachePartition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePlatformCachePartitionTypeInBatch':
          summary: 'Create Platform Cache Partition Type'
          description: 'Create a new platform cache partition type in Batch'
          entityName: 'PlatformCachePartitionType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePlatformCachePartitionTypeInBatch':
          summary: 'Update Platform Cache Partition Type'
          description: 'Updates an existing platform cache partition type in batch;
            only elements specified in the request are updated.'
          entityName: 'PlatformCachePartitionType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformCachePartitionTypeInBatch':
          summary: 'Upsert Platform Cache Partition Type'
          description: 'Upsert an existing platform cache partition type in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'PlatformCachePartitionType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePlatformCachePartitionTypeInBatch':
          summary: 'Delete Platform Cache Partition Type'
          description: 'Delete an existing platform cache partition type in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'PlatformCachePartitionType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePlatformEventUsageMetricInBatch':
          summary: 'Create Platform Event Usage Metric'
          description: 'Create a new platform event usage metric in Batch'
          entityName: 'PlatformEventUsageMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePlatformEventUsageMetricInBatch':
          summary: 'Update Platform Event Usage Metric'
          description: 'Updates an existing platform event usage metric in batch;
            only elements specified in the request are updated.'
          entityName: 'PlatformEventUsageMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformEventUsageMetricInBatch':
          summary: 'Upsert Platform Event Usage Metric'
          description: 'Upsert an existing platform event usage metric in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PlatformEventUsageMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePlatformEventUsageMetricInBatch':
          summary: 'Delete Platform Event Usage Metric'
          description: 'Delete an existing platform event usage metric in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PlatformEventUsageMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePlatformStatusAlertEventInBatch':
          summary: 'Create Platform Status Alert Event'
          description: 'Create a new platform status alert event in Batch'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePlatformStatusAlertEventInBatch':
          summary: 'Update Platform Status Alert Event'
          description: 'Updates an existing platform status alert event in batch;
            only elements specified in the request are updated.'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPlatformStatusAlertEventInBatch':
          summary: 'Upsert Platform Status Alert Event'
          description: 'Upsert an existing platform status alert event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePlatformStatusAlertEventInBatch':
          summary: 'Delete Platform Status Alert Event'
          description: 'Delete an existing platform status alert event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PlatformStatusAlertEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePolicy__ChangeEventInBatch':
          summary: 'Create Change Event: Policy'
          description: 'Create a new change event: policy in Batch'
          entityName: 'Policy__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePolicy__ChangeEventInBatch':
          summary: 'Update Change Event: Policy'
          description: 'Updates an existing change event: policy in batch; only elements
            specified in the request are updated.'
          entityName: 'Policy__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPolicy__ChangeEventInBatch':
          summary: 'Upsert Change Event: Policy'
          description: 'Upsert an existing change event: policy in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Policy__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePolicy__ChangeEventInBatch':
          summary: 'Delete Change Event: Policy'
          description: 'Delete an existing change event: policy in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Policy__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePolicy__cInBatch':
          summary: 'Create Policy'
          description: 'Create a new policy in Batch'
          entityName: 'Policy__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePolicy__cInBatch':
          summary: 'Update Policy'
          description: 'Updates an existing policy in batch; only elements specified
            in the request are updated.'
          entityName: 'Policy__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPolicy__cInBatch':
          summary: 'Upsert Policy'
          description: 'Upsert an existing policy in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Policy__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePolicy__cInBatch':
          summary: 'Delete Policy'
          description: 'Delete an existing policy in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Policy__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePricebook2InBatch':
          summary: 'Create Price Book'
          description: 'Create a new price book in Batch'
          entityName: 'Pricebook2'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePricebook2InBatch':
          summary: 'Update Price Book'
          description: 'Updates an existing price book in batch; only elements specified
            in the request are updated.'
          entityName: 'Pricebook2'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebook2InBatch':
          summary: 'Upsert Price Book'
          description: 'Upsert an existing price book in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePricebook2InBatch':
          summary: 'Delete Price Book'
          description: 'Delete an existing price book in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePricebook2ChangeEventInBatch':
          summary: 'Create Price Book Change Event'
          description: 'Create a new price book change event in Batch'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePricebook2ChangeEventInBatch':
          summary: 'Update Price Book Change Event'
          description: 'Updates an existing price book change event in batch; only
            elements specified in the request are updated.'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebook2ChangeEventInBatch':
          summary: 'Upsert Price Book Change Event'
          description: 'Upsert an existing price book change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePricebook2ChangeEventInBatch':
          summary: 'Delete Price Book Change Event'
          description: 'Delete an existing price book change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePricebook2HistoryInBatch':
          summary: 'Create Price Book History'
          description: 'Create a new price book history in Batch'
          entityName: 'Pricebook2History'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePricebook2HistoryInBatch':
          summary: 'Update Price Book History'
          description: 'Updates an existing price book history in batch; only elements
            specified in the request are updated.'
          entityName: 'Pricebook2History'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebook2HistoryInBatch':
          summary: 'Upsert Price Book History'
          description: 'Upsert an existing price book history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2History'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePricebook2HistoryInBatch':
          summary: 'Delete Price Book History'
          description: 'Delete an existing price book history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Pricebook2History'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePricebookEntryInBatch':
          summary: 'Create Price Book Entry'
          description: 'Create a new price book entry in Batch'
          entityName: 'PricebookEntry'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePricebookEntryInBatch':
          summary: 'Update Price Book Entry'
          description: 'Updates an existing price book entry in batch; only elements
            specified in the request are updated.'
          entityName: 'PricebookEntry'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebookEntryInBatch':
          summary: 'Upsert Price Book Entry'
          description: 'Upsert an existing price book entry in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PricebookEntry'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePricebookEntryInBatch':
          summary: 'Delete Price Book Entry'
          description: 'Delete an existing price book entry in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PricebookEntry'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePricebookEntryChangeEventInBatch':
          summary: 'Create Price Book Entry Change Event'
          description: 'Create a new price book entry change event in Batch'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePricebookEntryChangeEventInBatch':
          summary: 'Update Price Book Entry Change Event'
          description: 'Updates an existing price book entry change event in batch;
            only elements specified in the request are updated.'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebookEntryChangeEventInBatch':
          summary: 'Upsert Price Book Entry Change Event'
          description: 'Upsert an existing price book entry change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePricebookEntryChangeEventInBatch':
          summary: 'Delete Price Book Entry Change Event'
          description: 'Delete an existing price book entry change event in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'PricebookEntryChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePricebookEntryHistoryInBatch':
          summary: 'Create Price Book Entry History'
          description: 'Create a new price book entry history in Batch'
          entityName: 'PricebookEntryHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePricebookEntryHistoryInBatch':
          summary: 'Update Price Book Entry History'
          description: 'Updates an existing price book entry history in batch; only
            elements specified in the request are updated.'
          entityName: 'PricebookEntryHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPricebookEntryHistoryInBatch':
          summary: 'Upsert Price Book Entry History'
          description: 'Upsert an existing price book entry history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PricebookEntryHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePricebookEntryHistoryInBatch':
          summary: 'Delete Price Book Entry History'
          description: 'Delete an existing price book entry history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'PricebookEntryHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessDefinitionInBatch':
          summary: 'Create Process Definition'
          description: 'Create a new process definition in Batch'
          entityName: 'ProcessDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessDefinitionInBatch':
          summary: 'Update Process Definition'
          description: 'Updates an existing process definition in batch; only elements
            specified in the request are updated.'
          entityName: 'ProcessDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessDefinitionInBatch':
          summary: 'Upsert Process Definition'
          description: 'Upsert an existing process definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessDefinitionInBatch':
          summary: 'Delete Process Definition'
          description: 'Delete an existing process definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessFlowMigrationInBatch':
          summary: 'Create Process Flow Migration'
          description: 'Create a new process flow migration in Batch'
          entityName: 'ProcessFlowMigration'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessFlowMigrationInBatch':
          summary: 'Update Process Flow Migration'
          description: 'Updates an existing process flow migration in batch; only
            elements specified in the request are updated.'
          entityName: 'ProcessFlowMigration'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessFlowMigrationInBatch':
          summary: 'Upsert Process Flow Migration'
          description: 'Upsert an existing process flow migration in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessFlowMigration'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessFlowMigrationInBatch':
          summary: 'Delete Process Flow Migration'
          description: 'Delete an existing process flow migration in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessFlowMigration'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessInstanceInBatch':
          summary: 'Create Process Instance'
          description: 'Create a new process instance in Batch'
          entityName: 'ProcessInstance'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessInstanceInBatch':
          summary: 'Update Process Instance'
          description: 'Updates an existing process instance in batch; only elements
            specified in the request are updated.'
          entityName: 'ProcessInstance'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceInBatch':
          summary: 'Upsert Process Instance'
          description: 'Upsert an existing process instance in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstance'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessInstanceInBatch':
          summary: 'Delete Process Instance'
          description: 'Delete an existing process instance in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstance'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessInstanceHistoryInBatch':
          summary: 'Create Process Instance History'
          description: 'Create a new process instance history in Batch'
          entityName: 'ProcessInstanceHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessInstanceHistoryInBatch':
          summary: 'Update Process Instance History'
          description: 'Updates an existing process instance history in batch; only
            elements specified in the request are updated.'
          entityName: 'ProcessInstanceHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceHistoryInBatch':
          summary: 'Upsert Process Instance History'
          description: 'Upsert an existing process instance history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ProcessInstanceHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessInstanceHistoryInBatch':
          summary: 'Delete Process Instance History'
          description: 'Delete an existing process instance history in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ProcessInstanceHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessInstanceNodeInBatch':
          summary: 'Create Process Instance Node'
          description: 'Create a new process instance node in Batch'
          entityName: 'ProcessInstanceNode'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessInstanceNodeInBatch':
          summary: 'Update Process Instance Node'
          description: 'Updates an existing process instance node in batch; only elements
            specified in the request are updated.'
          entityName: 'ProcessInstanceNode'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceNodeInBatch':
          summary: 'Upsert Process Instance Node'
          description: 'Upsert an existing process instance node in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceNode'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessInstanceNodeInBatch':
          summary: 'Delete Process Instance Node'
          description: 'Delete an existing process instance node in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceNode'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessInstanceStepInBatch':
          summary: 'Create Process Instance Step'
          description: 'Create a new process instance step in Batch'
          entityName: 'ProcessInstanceStep'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessInstanceStepInBatch':
          summary: 'Update Process Instance Step'
          description: 'Updates an existing process instance step in batch; only elements
            specified in the request are updated.'
          entityName: 'ProcessInstanceStep'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceStepInBatch':
          summary: 'Upsert Process Instance Step'
          description: 'Upsert an existing process instance step in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceStep'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessInstanceStepInBatch':
          summary: 'Delete Process Instance Step'
          description: 'Delete an existing process instance step in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceStep'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessInstanceWorkitemInBatch':
          summary: 'Create Approval Request'
          description: 'Create a new approval request in Batch'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessInstanceWorkitemInBatch':
          summary: 'Update Approval Request'
          description: 'Updates an existing approval request in batch; only elements
            specified in the request are updated.'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessInstanceWorkitemInBatch':
          summary: 'Upsert Approval Request'
          description: 'Upsert an existing approval request in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessInstanceWorkitemInBatch':
          summary: 'Delete Approval Request'
          description: 'Delete an existing approval request in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessInstanceWorkitem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProcessNodeInBatch':
          summary: 'Create Process Node'
          description: 'Create a new process node in Batch'
          entityName: 'ProcessNode'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProcessNodeInBatch':
          summary: 'Update Process Node'
          description: 'Updates an existing process node in batch; only elements specified
            in the request are updated.'
          entityName: 'ProcessNode'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProcessNodeInBatch':
          summary: 'Upsert Process Node'
          description: 'Upsert an existing process node in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessNode'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProcessNodeInBatch':
          summary: 'Delete Process Node'
          description: 'Delete an existing process node in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ProcessNode'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProduct2InBatch':
          summary: 'Create Product'
          description: 'Create a new product in Batch'
          entityName: 'Product2'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProduct2InBatch':
          summary: 'Update Product'
          description: 'Updates an existing product in batch; only elements specified
            in the request are updated.'
          entityName: 'Product2'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProduct2InBatch':
          summary: 'Upsert Product'
          description: 'Upsert an existing product in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProduct2InBatch':
          summary: 'Delete Product'
          description: 'Delete an existing product in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProduct2ChangeEventInBatch':
          summary: 'Create Product Change Event'
          description: 'Create a new product change event in Batch'
          entityName: 'Product2ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProduct2ChangeEventInBatch':
          summary: 'Update Product Change Event'
          description: 'Updates an existing product change event in batch; only elements
            specified in the request are updated.'
          entityName: 'Product2ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProduct2ChangeEventInBatch':
          summary: 'Upsert Product Change Event'
          description: 'Upsert an existing product change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProduct2ChangeEventInBatch':
          summary: 'Delete Product Change Event'
          description: 'Delete an existing product change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProduct2HistoryInBatch':
          summary: 'Create Product History'
          description: 'Create a new product history in Batch'
          entityName: 'Product2History'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProduct2HistoryInBatch':
          summary: 'Update Product History'
          description: 'Updates an existing product history in batch; only elements
            specified in the request are updated.'
          entityName: 'Product2History'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProduct2HistoryInBatch':
          summary: 'Upsert Product History'
          description: 'Upsert an existing product history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2History'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProduct2HistoryInBatch':
          summary: 'Delete Product History'
          description: 'Delete an existing product history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Product2History'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProductConsumptionScheduleInBatch':
          summary: 'Create Product Consumption Schedule'
          description: 'Create a new product consumption schedule in Batch'
          entityName: 'ProductConsumptionSchedule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProductConsumptionScheduleInBatch':
          summary: 'Update Product Consumption Schedule'
          description: 'Updates an existing product consumption schedule in batch;
            only elements specified in the request are updated.'
          entityName: 'ProductConsumptionSchedule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProductConsumptionScheduleInBatch':
          summary: 'Upsert Product Consumption Schedule'
          description: 'Upsert an existing product consumption schedule in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ProductConsumptionSchedule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProductConsumptionScheduleInBatch':
          summary: 'Delete Product Consumption Schedule'
          description: 'Delete an existing product consumption schedule in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ProductConsumptionSchedule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateProfileInBatch':
          summary: 'Create Profile'
          description: 'Create a new profile in Batch'
          entityName: 'Profile'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateProfileInBatch':
          summary: 'Update Profile'
          description: 'Updates an existing profile in batch; only elements specified
            in the request are updated.'
          entityName: 'Profile'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertProfileInBatch':
          summary: 'Upsert Profile'
          description: 'Upsert an existing profile in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Profile'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteProfileInBatch':
          summary: 'Delete Profile'
          description: 'Delete an existing profile in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Profile'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePromptInBatch':
          summary: 'Create Prompt'
          description: 'Create a new prompt in Batch'
          entityName: 'Prompt'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePromptInBatch':
          summary: 'Update Prompt'
          description: 'Updates an existing prompt in batch; only elements specified
            in the request are updated.'
          entityName: 'Prompt'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptInBatch':
          summary: 'Upsert Prompt'
          description: 'Upsert an existing prompt in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Prompt'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePromptInBatch':
          summary: 'Delete Prompt'
          description: 'Delete an existing prompt in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Prompt'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePromptActionInBatch':
          summary: 'Create Prompt Action'
          description: 'Create a new prompt action in Batch'
          entityName: 'PromptAction'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePromptActionInBatch':
          summary: 'Update Prompt Action'
          description: 'Updates an existing prompt action in batch; only elements
            specified in the request are updated.'
          entityName: 'PromptAction'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptActionInBatch':
          summary: 'Upsert Prompt Action'
          description: 'Upsert an existing prompt action in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptAction'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePromptActionInBatch':
          summary: 'Delete Prompt Action'
          description: 'Delete an existing prompt action in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptAction'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePromptActionShareInBatch':
          summary: 'Create Prompt Action Share'
          description: 'Create a new prompt action share in Batch'
          entityName: 'PromptActionShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePromptActionShareInBatch':
          summary: 'Update Prompt Action Share'
          description: 'Updates an existing prompt action share in batch; only elements
            specified in the request are updated.'
          entityName: 'PromptActionShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptActionShareInBatch':
          summary: 'Upsert Prompt Action Share'
          description: 'Upsert an existing prompt action share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptActionShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePromptActionShareInBatch':
          summary: 'Delete Prompt Action Share'
          description: 'Delete an existing prompt action share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptActionShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePromptErrorInBatch':
          summary: 'Create Prompt Error'
          description: 'Create a new prompt error in Batch'
          entityName: 'PromptError'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePromptErrorInBatch':
          summary: 'Update Prompt Error'
          description: 'Updates an existing prompt error in batch; only elements specified
            in the request are updated.'
          entityName: 'PromptError'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptErrorInBatch':
          summary: 'Upsert Prompt Error'
          description: 'Upsert an existing prompt error in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptError'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePromptErrorInBatch':
          summary: 'Delete Prompt Error'
          description: 'Delete an existing prompt error in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptError'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePromptErrorShareInBatch':
          summary: 'Create Prompt Error Share'
          description: 'Create a new prompt error share in Batch'
          entityName: 'PromptErrorShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePromptErrorShareInBatch':
          summary: 'Update Prompt Error Share'
          description: 'Updates an existing prompt error share in batch; only elements
            specified in the request are updated.'
          entityName: 'PromptErrorShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptErrorShareInBatch':
          summary: 'Upsert Prompt Error Share'
          description: 'Upsert an existing prompt error share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptErrorShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePromptErrorShareInBatch':
          summary: 'Delete Prompt Error Share'
          description: 'Delete an existing prompt error share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptErrorShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePromptVersionInBatch':
          summary: 'Create Prompt Version'
          description: 'Create a new prompt version in Batch'
          entityName: 'PromptVersion'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePromptVersionInBatch':
          summary: 'Update Prompt Version'
          description: 'Updates an existing prompt version in batch; only elements
            specified in the request are updated.'
          entityName: 'PromptVersion'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPromptVersionInBatch':
          summary: 'Upsert Prompt Version'
          description: 'Upsert an existing prompt version in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptVersion'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePromptVersionInBatch':
          summary: 'Delete Prompt Version'
          description: 'Delete an existing prompt version in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PromptVersion'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePublisherInBatch':
          summary: 'Create Publisher'
          description: 'Create a new publisher in Batch'
          entityName: 'Publisher'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePublisherInBatch':
          summary: 'Update Publisher'
          description: 'Updates an existing publisher in batch; only elements specified
            in the request are updated.'
          entityName: 'Publisher'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPublisherInBatch':
          summary: 'Upsert Publisher'
          description: 'Upsert an existing publisher in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Publisher'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePublisherInBatch':
          summary: 'Delete Publisher'
          description: 'Delete an existing publisher in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Publisher'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreatePushTopicInBatch':
          summary: 'Create Push Topic'
          description: 'Create a new push topic in Batch'
          entityName: 'PushTopic'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdatePushTopicInBatch':
          summary: 'Update Push Topic'
          description: 'Updates an existing push topic in batch; only elements specified
            in the request are updated.'
          entityName: 'PushTopic'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertPushTopicInBatch':
          summary: 'Upsert Push Topic'
          description: 'Upsert an existing push topic in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PushTopic'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeletePushTopicInBatch':
          summary: 'Delete Push Topic'
          description: 'Delete an existing push topic in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'PushTopic'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuestionInBatch':
          summary: 'Create Question'
          description: 'Create a new question in Batch'
          entityName: 'Question'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuestionInBatch':
          summary: 'Update Question'
          description: 'Updates an existing question in batch; only elements specified
            in the request are updated.'
          entityName: 'Question'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionInBatch':
          summary: 'Upsert Question'
          description: 'Upsert an existing question in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Question'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuestionInBatch':
          summary: 'Delete Question'
          description: 'Delete an existing question in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Question'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuestionDataCategorySelectionInBatch':
          summary: 'Create Question Data Category Selection'
          description: 'Create a new question data category selection in Batch'
          entityName: 'QuestionDataCategorySelection'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuestionDataCategorySelectionInBatch':
          summary: 'Update Question Data Category Selection'
          description: 'Updates an existing question data category selection in batch;
            only elements specified in the request are updated.'
          entityName: 'QuestionDataCategorySelection'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionDataCategorySelectionInBatch':
          summary: 'Upsert Question Data Category Selection'
          description: 'Upsert an existing question data category selection in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'QuestionDataCategorySelection'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuestionDataCategorySelectionInBatch':
          summary: 'Delete Question Data Category Selection'
          description: 'Delete an existing question data category selection in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'QuestionDataCategorySelection'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuestionReportAbuseInBatch':
          summary: 'Create Question Report Abuse'
          description: 'Create a new question report abuse in Batch'
          entityName: 'QuestionReportAbuse'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuestionReportAbuseInBatch':
          summary: 'Update Question Report Abuse'
          description: 'Updates an existing question report abuse in batch; only elements
            specified in the request are updated.'
          entityName: 'QuestionReportAbuse'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionReportAbuseInBatch':
          summary: 'Upsert Question Report Abuse'
          description: 'Upsert an existing question report abuse in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionReportAbuse'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuestionReportAbuseInBatch':
          summary: 'Delete Question Report Abuse'
          description: 'Delete an existing question report abuse in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionReportAbuse'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuestionSubscriptionInBatch':
          summary: 'Create Question Subscription'
          description: 'Create a new question subscription in Batch'
          entityName: 'QuestionSubscription'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuestionSubscriptionInBatch':
          summary: 'Update Question Subscription'
          description: 'Updates an existing question subscription in batch; only elements
            specified in the request are updated.'
          entityName: 'QuestionSubscription'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuestionSubscriptionInBatch':
          summary: 'Upsert Question Subscription'
          description: 'Upsert an existing question subscription in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionSubscription'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuestionSubscriptionInBatch':
          summary: 'Delete Question Subscription'
          description: 'Delete an existing question subscription in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuestionSubscription'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQueueSobjectInBatch':
          summary: 'Create Queue sObject'
          description: 'Create a new queue sobject in Batch'
          entityName: 'QueueSobject'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQueueSobjectInBatch':
          summary: 'Update Queue sObject'
          description: 'Updates an existing queue sobject in batch; only elements
            specified in the request are updated.'
          entityName: 'QueueSobject'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQueueSobjectInBatch':
          summary: 'Upsert Queue sObject'
          description: 'Upsert an existing queue sobject in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QueueSobject'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQueueSobjectInBatch':
          summary: 'Delete Queue sObject'
          description: 'Delete an existing queue sobject in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QueueSobject'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuickTextInBatch':
          summary: 'Create Quick Text'
          description: 'Create a new quick text in Batch'
          entityName: 'QuickText'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuickTextInBatch':
          summary: 'Update Quick Text'
          description: 'Updates an existing quick text in batch; only elements specified
            in the request are updated.'
          entityName: 'QuickText'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextInBatch':
          summary: 'Upsert Quick Text'
          description: 'Upsert an existing quick text in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickText'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuickTextInBatch':
          summary: 'Delete Quick Text'
          description: 'Delete an existing quick text in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickText'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuickTextChangeEventInBatch':
          summary: 'Create Quick Text Change Event'
          description: 'Create a new quick text change event in Batch'
          entityName: 'QuickTextChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuickTextChangeEventInBatch':
          summary: 'Update Quick Text Change Event'
          description: 'Updates an existing quick text change event in batch; only
            elements specified in the request are updated.'
          entityName: 'QuickTextChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextChangeEventInBatch':
          summary: 'Upsert Quick Text Change Event'
          description: 'Upsert an existing quick text change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuickTextChangeEventInBatch':
          summary: 'Delete Quick Text Change Event'
          description: 'Delete an existing quick text change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuickTextHistoryInBatch':
          summary: 'Create Quick Text History'
          description: 'Create a new quick text history in Batch'
          entityName: 'QuickTextHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuickTextHistoryInBatch':
          summary: 'Update Quick Text History'
          description: 'Updates an existing quick text history in batch; only elements
            specified in the request are updated.'
          entityName: 'QuickTextHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextHistoryInBatch':
          summary: 'Upsert Quick Text History'
          description: 'Upsert an existing quick text history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuickTextHistoryInBatch':
          summary: 'Delete Quick Text History'
          description: 'Delete an existing quick text history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuickTextShareInBatch':
          summary: 'Create Quick Text Share'
          description: 'Create a new quick text share in batch'
          entityName: 'QuickTextShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuickTextShareInBatch':
          summary: 'Update Quick Text Share'
          description: 'Updates an existing quick text share in batch; only elements
            specified in the request are updated.'
          entityName: 'QuickTextShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextShareInBatch':
          summary: 'Upsert Quick Text Share'
          description: 'Upsert an existing quick text share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuickTextShareInBatch':
          summary: 'Delete Quick Text Share'
          description: 'Delete an existing quick text share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuickTextUsageInBatch':
          summary: 'Create Quick Text Usage'
          description: 'Create a new quick text usage in Batch'
          entityName: 'QuickTextUsage'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuickTextUsageInBatch':
          summary: 'Update Quick Text Usage'
          description: 'Updates an existing quick text usage in batch; only elements
            specified in the request are updated.'
          entityName: 'QuickTextUsage'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextUsageInBatch':
          summary: 'Upsert Quick Text Usage'
          description: 'Upsert an existing quick text usage in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextUsage'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuickTextUsageInBatch':
          summary: 'Delete Quick Text Usage'
          description: 'Delete an existing quick text usage in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextUsage'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateQuickTextUsageShareInBatch':
          summary: 'Create Quick Text Usage Share'
          description: 'Create a new quick text usage share in Batch'
          entityName: 'QuickTextUsageShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateQuickTextUsageShareInBatch':
          summary: 'Update Quick Text Usage Share'
          description: 'Updates an existing quick text usage share in batch; only
            elements specified in the request are updated.'
          entityName: 'QuickTextUsageShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertQuickTextUsageShareInBatch':
          summary: 'Upsert Quick Text Usage Share'
          description: 'Upsert an existing quick text usage share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextUsageShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteQuickTextUsageShareInBatch':
          summary: 'Delete Quick Text Usage Share'
          description: 'Delete an existing quick text usage share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'QuickTextUsageShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRanjit_Custom_Object__ChangeEventInBatch':
          summary: 'Create Change Event: Ranjit Custom Object'
          description: 'Create a new change event: ranjit custom object in Batch'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRanjit_Custom_Object__ChangeEventInBatch':
          summary: 'Update Change Event: Ranjit Custom Object'
          description: 'Updates an existing change event: ranjit custom object in
            batch; only elements specified in the request are updated.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRanjit_Custom_Object__ChangeEventInBatch':
          summary: 'Upsert Change Event: Ranjit Custom Object'
          description: 'Upsert an existing change event: ranjit custom object in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRanjit_Custom_Object__ChangeEventInBatch':
          summary: 'Delete Change Event: Ranjit Custom Object'
          description: 'Delete an existing change event: ranjit custom object in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'Ranjit_Custom_Object__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRanjit_Custom_Object__cInBatch':
          summary: 'Create Ranjit Custom Object'
          description: 'Create a new ranjit custom object in Batch'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRanjit_Custom_Object__cInBatch':
          summary: 'Update Ranjit Custom Object'
          description: 'Updates an existing ranjit custom object in batch; only elements
            specified in the request are updated.'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRanjit_Custom_Object__cInBatch':
          summary: 'Upsert Ranjit Custom Object'
          description: 'Upsert an existing ranjit custom object in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRanjit_Custom_Object__cInBatch':
          summary: 'Delete Ranjit Custom Object'
          description: 'Delete an existing ranjit custom object in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Ranjit_Custom_Object__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecentlyViewedInBatch':
          summary: 'Create Recently Viewed'
          description: 'Create a new recently viewed in Batch'
          entityName: 'RecentlyViewed'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecentlyViewedInBatch':
          summary: 'Update Recently Viewed'
          description: 'Updates an existing recently viewed in batch; only elements
            specified in the request are updated.'
          entityName: 'RecentlyViewed'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecentlyViewedInBatch':
          summary: 'Upsert Recently Viewed'
          description: 'Upsert an existing recently viewed in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecentlyViewed'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecentlyViewedInBatch':
          summary: 'Delete Recently Viewed'
          description: 'Delete an existing recently viewed in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecentlyViewed'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecommendationInBatch':
          summary: 'Create Recommendation'
          description: 'Create a new recommendation in Batch'
          entityName: 'Recommendation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecommendationInBatch':
          summary: 'Update Recommendation'
          description: 'Updates an existing recommendation in batch; only elements
            specified in the request are updated.'
          entityName: 'Recommendation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecommendationInBatch':
          summary: 'Upsert Recommendation'
          description: 'Upsert an existing recommendation in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Recommendation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecommendationInBatch':
          summary: 'Delete Recommendation'
          description: 'Delete an existing recommendation in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Recommendation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecommendationChangeEventInBatch':
          summary: 'Create Recommendation Change Event'
          description: 'Create a new recommendation change event in Batch'
          entityName: 'RecommendationChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecommendationChangeEventInBatch':
          summary: 'Update Recommendation Change Event'
          description: 'Updates an existing recommendation change event in batch;
            only elements specified in the request are updated.'
          entityName: 'RecommendationChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecommendationChangeEventInBatch':
          summary: 'Upsert Recommendation Change Event'
          description: 'Upsert an existing recommendation change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'RecommendationChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecommendationChangeEventInBatch':
          summary: 'Delete Recommendation Change Event'
          description: 'Delete an existing recommendation change event in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'RecommendationChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecommendationResponseInBatch':
          summary: 'Create Recommendation Response'
          description: 'Create a new recommendation response in Batch'
          entityName: 'RecommendationResponse'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecommendationResponseInBatch':
          summary: 'Update Recommendation Response'
          description: 'Updates an existing recommendation response in batch; only
            elements specified in the request are updated.'
          entityName: 'RecommendationResponse'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecommendationResponseInBatch':
          summary: 'Upsert Recommendation Response'
          description: 'Upsert an existing recommendation response in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecommendationResponse'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecommendationResponseInBatch':
          summary: 'Delete Recommendation Response'
          description: 'Delete an existing recommendation response in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecommendationResponse'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecordActionInBatch':
          summary: 'Create RecordAction'
          description: 'Create a new recordaction in Batch'
          entityName: 'RecordAction'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecordActionInBatch':
          summary: 'Update RecordAction'
          description: 'Updates an existing recordaction in batch; only elements specified
            in the request are updated.'
          entityName: 'RecordAction'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecordActionInBatch':
          summary: 'Upsert RecordAction'
          description: 'Upsert an existing recordaction in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordAction'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecordActionInBatch':
          summary: 'Delete RecordAction'
          description: 'Delete an existing recordaction in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordAction'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecordActionHistoryInBatch':
          summary: 'Create RecordActionHistory'
          description: 'Create a new recordactionhistory in Batch'
          entityName: 'RecordActionHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecordActionHistoryInBatch':
          summary: 'Update RecordActionHistory'
          description: 'Updates an existing recordactionhistory in batch; only elements
            specified in the request are updated.'
          entityName: 'RecordActionHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecordActionHistoryInBatch':
          summary: 'Upsert RecordActionHistory'
          description: 'Upsert an existing recordactionhistory in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordActionHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecordActionHistoryInBatch':
          summary: 'Delete RecordActionHistory'
          description: 'Delete an existing recordactionhistory in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordActionHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRecordTypeInBatch':
          summary: 'Create Record Type'
          description: 'Create a new record type in Batch'
          entityName: 'RecordType'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRecordTypeInBatch':
          summary: 'Update Record Type'
          description: 'Updates an existing record type in batch; only elements specified
            in the request are updated.'
          entityName: 'RecordType'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRecordTypeInBatch':
          summary: 'Upsert Record Type'
          description: 'Upsert an existing record type in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordType'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRecordTypeInBatch':
          summary: 'Delete Record Type'
          description: 'Delete an existing record type in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RecordType'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRedirectWhitelistUrlInBatch':
          summary: 'Create Allow URL for Redirects'
          description: 'Create a new allow url for redirects in Batch'
          entityName: 'RedirectWhitelistUrl'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRedirectWhitelistUrlInBatch':
          summary: 'Update Allow URL for Redirects'
          description: 'Updates an existing allow url for redirects in batch; only
            elements specified in the request are updated.'
          entityName: 'RedirectWhitelistUrl'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRedirectWhitelistUrlInBatch':
          summary: 'Upsert Allow URL for Redirects'
          description: 'Upsert an existing allow url for redirects in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RedirectWhitelistUrl'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRedirectWhitelistUrlInBatch':
          summary: 'Delete Allow URL for Redirects'
          description: 'Delete an existing allow url for redirects in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RedirectWhitelistUrl'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRelatedListColumnDefinitionInBatch':
          summary: 'Create Related List Column Definition'
          description: 'Create a new related list column definition in Batch'
          entityName: 'RelatedListColumnDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRelatedListColumnDefinitionInBatch':
          summary: 'Update Related List Column Definition'
          description: 'Updates an existing related list column definition in batch;
            only elements specified in the request are updated.'
          entityName: 'RelatedListColumnDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelatedListColumnDefinitionInBatch':
          summary: 'Upsert Related List Column Definition'
          description: 'Upsert an existing related list column definition in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'RelatedListColumnDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRelatedListColumnDefinitionInBatch':
          summary: 'Delete Related List Column Definition'
          description: 'Delete an existing related list column definition in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'RelatedListColumnDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRelatedListDefinitionInBatch':
          summary: 'Create Related List Definition'
          description: 'Create a new related list definition in Batch'
          entityName: 'RelatedListDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRelatedListDefinitionInBatch':
          summary: 'Update Related List Definition'
          description: 'Updates an existing related list definition in batch; only
            elements specified in the request are updated.'
          entityName: 'RelatedListDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelatedListDefinitionInBatch':
          summary: 'Upsert Related List Definition'
          description: 'Upsert an existing related list definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelatedListDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRelatedListDefinitionInBatch':
          summary: 'Delete Related List Definition'
          description: 'Delete an existing related list definition in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelatedListDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRelationshipDomainInBatch':
          summary: 'Create Relationship Domain'
          description: 'Create a new relationship domain in Batch'
          entityName: 'RelationshipDomain'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRelationshipDomainInBatch':
          summary: 'Update Relationship Domain'
          description: 'Updates an existing relationship domain in batch; only elements
            specified in the request are updated.'
          entityName: 'RelationshipDomain'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelationshipDomainInBatch':
          summary: 'Upsert Relationship Domain'
          description: 'Upsert an existing relationship domain in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelationshipDomain'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRelationshipDomainInBatch':
          summary: 'Delete Relationship Domain'
          description: 'Delete an existing relationship domain in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelationshipDomain'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateRelationshipInfoInBatch':
          summary: 'Create Relationship'
          description: 'Create a new relationship in Batch'
          entityName: 'RelationshipInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateRelationshipInfoInBatch':
          summary: 'Update Relationship'
          description: 'Updates an existing relationship in batch; only elements specified
            in the request are updated.'
          entityName: 'RelationshipInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertRelationshipInfoInBatch':
          summary: 'Upsert Relationship'
          description: 'Upsert an existing relationship in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelationshipInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteRelationshipInfoInBatch':
          summary: 'Delete Relationship'
          description: 'Delete an existing relationship in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'RelationshipInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReplyInBatch':
          summary: 'Create Reply'
          description: 'Create a new reply in Batch'
          entityName: 'Reply'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReplyInBatch':
          summary: 'Update Reply'
          description: 'Updates an existing reply in batch; only elements specified
            in the request are updated.'
          entityName: 'Reply'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReplyInBatch':
          summary: 'Upsert Reply'
          description: 'Upsert an existing reply in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Reply'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReplyInBatch':
          summary: 'Delete Reply'
          description: 'Delete an existing reply in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Reply'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReplyReportAbuseInBatch':
          summary: 'Create Reply Report Abuse'
          description: 'Create a new reply report abuse in Batch'
          entityName: 'ReplyReportAbuse'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReplyReportAbuseInBatch':
          summary: 'Update Reply Report Abuse'
          description: 'Updates an existing reply report abuse in batch; only elements
            specified in the request are updated.'
          entityName: 'ReplyReportAbuse'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReplyReportAbuseInBatch':
          summary: 'Upsert Reply Report Abuse'
          description: 'Upsert an existing reply report abuse in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReplyReportAbuse'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReplyReportAbuseInBatch':
          summary: 'Delete Reply Report Abuse'
          description: 'Delete an existing reply report abuse in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReplyReportAbuse'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReportInBatch':
          summary: 'Create Report'
          description: 'Create a new report in Batch'
          entityName: 'Report'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReportInBatch':
          summary: 'Update Report'
          description: 'Updates an existing report in batch; only elements specified
            in the request are updated.'
          entityName: 'Report'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportInBatch':
          summary: 'Upsert Report'
          description: 'Upsert an existing report in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Report'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReportInBatch':
          summary: 'Delete Report'
          description: 'Delete an existing report in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Report'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReportAnomalyEventInBatch':
          summary: 'Create Report Anomaly Event'
          description: 'Create a new report anomaly event in Batch'
          entityName: 'ReportAnomalyEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReportAnomalyEventInBatch':
          summary: 'Update Report Anomaly Event'
          description: 'Updates an existing report anomaly event in batch; only elements
            specified in the request are updated.'
          entityName: 'ReportAnomalyEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportAnomalyEventInBatch':
          summary: 'Upsert Report Anomaly Event'
          description: 'Upsert an existing report anomaly event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportAnomalyEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReportAnomalyEventInBatch':
          summary: 'Delete Report Anomaly Event'
          description: 'Delete an existing report anomaly event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportAnomalyEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReportAnomalyEventStoreInBatch':
          summary: 'Create Report Anomaly Event Store'
          description: 'Create a new report anomaly event store in Batch'
          entityName: 'ReportAnomalyEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReportAnomalyEventStoreInBatch':
          summary: 'Update Report Anomaly Event Store'
          description: 'Updates an existing report anomaly event store in batch; only
            elements specified in the request are updated.'
          entityName: 'ReportAnomalyEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportAnomalyEventStoreInBatch':
          summary: 'Upsert Report Anomaly Event Store'
          description: 'Upsert an existing report anomaly event store in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ReportAnomalyEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReportAnomalyEventStoreInBatch':
          summary: 'Delete Report Anomaly Event Store'
          description: 'Delete an existing report anomaly event store in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ReportAnomalyEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReportEventInBatch':
          summary: 'Create Report Event'
          description: 'Create a new report event in Batch'
          entityName: 'ReportEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReportEventInBatch':
          summary: 'Update Report Event'
          description: 'Updates an existing report event in batch; only elements specified
            in the request are updated.'
          entityName: 'ReportEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportEventInBatch':
          summary: 'Upsert Report Event'
          description: 'Upsert an existing report event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReportEventInBatch':
          summary: 'Delete Report Event'
          description: 'Delete an existing report event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateReportEventStreamInBatch':
          summary: 'Create Report Event Stream'
          description: 'Create a new report event stream in Batch'
          entityName: 'ReportEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateReportEventStreamInBatch':
          summary: 'Update Report Event Stream'
          description: 'Updates an existing report event stream in batch; only elements
            specified in the request are updated.'
          entityName: 'ReportEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertReportEventStreamInBatch':
          summary: 'Upsert Report Event Stream'
          description: 'Upsert an existing report event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteReportEventStreamInBatch':
          summary: 'Delete Report Event Stream'
          description: 'Delete an existing report event stream in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ReportEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSamlSsoConfigInBatch':
          summary: 'Create SAML Single Sign-On Setting'
          description: 'Create a new saml single sign-on setting in Batch'
          entityName: 'SamlSsoConfig'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSamlSsoConfigInBatch':
          summary: 'Update SAML Single Sign-On Setting'
          description: 'Updates an existing saml single sign-on setting in batch;
            only elements specified in the request are updated.'
          entityName: 'SamlSsoConfig'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSamlSsoConfigInBatch':
          summary: 'Upsert SAML Single Sign-On Setting'
          description: 'Upsert an existing saml single sign-on setting in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'SamlSsoConfig'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSamlSsoConfigInBatch':
          summary: 'Delete SAML Single Sign-On Setting'
          description: 'Delete an existing saml single sign-on setting in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'SamlSsoConfig'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSampleApplication__ChangeEventInBatch':
          summary: 'Create Change Event: SampleApplication'
          description: 'Create a new change event: sampleapplication in Batch'
          entityName: 'SampleApplication__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSampleApplication__ChangeEventInBatch':
          summary: 'Update Change Event: SampleApplication'
          description: 'Updates an existing change event: sampleapplication in batch;
            only elements specified in the request are updated.'
          entityName: 'SampleApplication__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSampleApplication__ChangeEventInBatch':
          summary: 'Upsert Change Event: SampleApplication'
          description: 'Upsert an existing change event: sampleapplication in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SampleApplication__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSampleApplication__ChangeEventInBatch':
          summary: 'Delete Change Event: SampleApplication'
          description: 'Delete an existing change event: sampleapplication in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SampleApplication__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSampleApplication__cInBatch':
          summary: 'Create SampleApplication'
          description: 'Create a new sampleapplication in Batch'
          entityName: 'SampleApplication__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSampleApplication__cInBatch':
          summary: 'Update SampleApplication'
          description: 'Updates an existing sampleapplication in batch; only elements
            specified in the request are updated.'
          entityName: 'SampleApplication__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSampleApplication__cInBatch':
          summary: 'Upsert SampleApplication'
          description: 'Upsert an existing sampleapplication in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SampleApplication__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSampleApplication__cInBatch':
          summary: 'Delete SampleApplication'
          description: 'Delete an existing sampleapplication in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SampleApplication__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateScontrolInBatch':
          summary: 'Create Custom S-Control'
          description: 'Create a new custom s-control in Batch'
          entityName: 'Scontrol'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateScontrolInBatch':
          summary: 'Update Custom S-Control'
          description: 'Updates an existing custom s-control in batch; only elements
            specified in the request are updated.'
          entityName: 'Scontrol'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScontrolInBatch':
          summary: 'Upsert Custom S-Control'
          description: 'Upsert an existing custom s-control in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Scontrol'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteScontrolInBatch':
          summary: 'Delete Custom S-Control'
          description: 'Delete an existing custom s-control in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Scontrol'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateScorecardInBatch':
          summary: 'Create Scorecard'
          description: 'Create a new scorecard in Batch'
          entityName: 'Scorecard'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateScorecardInBatch':
          summary: 'Update Scorecard'
          description: 'Updates an existing scorecard in batch; only elements specified
            in the request are updated.'
          entityName: 'Scorecard'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardInBatch':
          summary: 'Upsert Scorecard'
          description: 'Upsert an existing scorecard in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Scorecard'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteScorecardInBatch':
          summary: 'Delete Scorecard'
          description: 'Delete an existing scorecard in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Scorecard'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateScorecardAssociationInBatch':
          summary: 'Create Scorecard Association'
          description: 'Create a new scorecard association in Batch'
          entityName: 'ScorecardAssociation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateScorecardAssociationInBatch':
          summary: 'Update Scorecard Association'
          description: 'Updates an existing scorecard association in batch; only elements
            specified in the request are updated.'
          entityName: 'ScorecardAssociation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardAssociationInBatch':
          summary: 'Upsert Scorecard Association'
          description: 'Upsert an existing scorecard association in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardAssociation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteScorecardAssociationInBatch':
          summary: 'Delete Scorecard Association'
          description: 'Delete an existing scorecard association in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardAssociation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateScorecardMetricInBatch':
          summary: 'Create Scorecard Metric'
          description: 'Create a new scorecard metric in Batch'
          entityName: 'ScorecardMetric'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateScorecardMetricInBatch':
          summary: 'Update Scorecard Metric'
          description: 'Updates an existing scorecard metric in batch; only elements
            specified in the request are updated.'
          entityName: 'ScorecardMetric'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardMetricInBatch':
          summary: 'Upsert Scorecard Metric'
          description: 'Upsert an existing scorecard metric in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardMetric'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteScorecardMetricInBatch':
          summary: 'Delete Scorecard Metric'
          description: 'Delete an existing scorecard metric in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardMetric'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateScorecardShareInBatch':
          summary: 'Create Scorecard Share'
          description: 'Create a new scorecard share in Batch'
          entityName: 'ScorecardShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateScorecardShareInBatch':
          summary: 'Update Scorecard Share'
          description: 'Updates an existing scorecard share in batch; only elements
            specified in the request are updated.'
          entityName: 'ScorecardShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertScorecardShareInBatch':
          summary: 'Upsert Scorecard Share'
          description: 'Upsert an existing scorecard share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteScorecardShareInBatch':
          summary: 'Delete Scorecard Share'
          description: 'Delete an existing scorecard share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'ScorecardShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSearchLayoutInBatch':
          summary: 'Create Search Layout'
          description: 'Create a new search layout in Batch'
          entityName: 'SearchLayout'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSearchLayoutInBatch':
          summary: 'Update Search Layout'
          description: 'Updates an existing search layout in batch only elements
            specified in the request are updated.'
          entityName: 'SearchLayout'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSearchLayoutInBatch':
          summary: 'Upsert Search Layout'
          description: 'Upsert an existing search layout in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SearchLayout'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSearchLayoutInBatch':
          summary: 'Delete Search Layout'
          description: 'Delete an existing search layout in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SearchLayout'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSearchPromotionRuleInBatch':
          summary: 'Create Promoted Search Term'
          description: 'Create a new promoted search term in Batch'
          entityName: 'SearchPromotionRule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSearchPromotionRuleInBatch':
          summary: 'Update Promoted Search Term'
          description: 'Updates an existing promoted search term in batch; only elements
            specified in the request are updated.'
          entityName: 'SearchPromotionRule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSearchPromotionRuleInBatch':
          summary: 'Upsert Promoted Search Term'
          description: 'Upsert an existing promoted search term in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SearchPromotionRule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSearchPromotionRuleInBatch':
          summary: 'Delete Promoted Search Term'
          description: 'Delete an existing promoted search term in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SearchPromotionRule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSecurityCustomBaselineInBatch':
          summary: 'Create Security Custom Baseline'
          description: 'Create a new security custom baseline in Batch'
          entityName: 'SecurityCustomBaseline'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSecurityCustomBaselineInBatch':
          summary: 'Update Security Custom Baseline'
          description: 'Updates an existing security custom baseline in batch; only
            elements specified in the request are updated.'
          entityName: 'SecurityCustomBaseline'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSecurityCustomBaselineInBatch':
          summary: 'Upsert Security Custom Baseline'
          description: 'Upsert an existing security custom baseline in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'SecurityCustomBaseline'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSecurityCustomBaselineInBatch':
          summary: 'Delete Security Custom Baseline'
          description: 'Delete an existing security custom baseline in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'SecurityCustomBaseline'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSellerInBatch':
          summary: 'Create Seller'
          description: 'Create a new seller in Batch'
          entityName: 'Seller'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSellerInBatch':
          summary: 'Update Seller'
          description: 'Updates an existing seller in batch; only elements specified
            in the request are updated.'
          entityName: 'Seller'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSellerInBatch':
          summary: 'Upsert Seller'
          description: 'Upsert an existing seller in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Seller'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSellerInBatch':
          summary: 'Delete Seller'
          description: 'Delete an existing seller in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Seller'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSellerHistoryInBatch':
          summary: 'Create Seller History'
          description: 'Create a new seller history in Batch'
          entityName: 'SellerHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSellerHistoryInBatch':
          summary: 'Update Seller History'
          description: 'Updates an existing seller history in batch; only elements
            specified in the request are updated.'
          entityName: 'SellerHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSellerHistoryInBatch':
          summary: 'Upsert Seller History'
          description: 'Upsert an existing seller history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SellerHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSellerHistoryInBatch':
          summary: 'Delete Seller History'
          description: 'Delete an existing seller history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SellerHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSellerShareInBatch':
          summary: 'Create Seller Share'
          description: 'Create a new seller share in Batch'
          entityName: 'SellerShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSellerShareInBatch':
          summary: 'Update Seller Share'
          description: 'Updates an existing seller share in batch; only elements specified
            in the request are updated.'
          entityName: 'SellerShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSellerShareInBatch':
          summary: 'Upsert Seller Share'
          description: 'Upsert an existing seller share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SellerShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSellerShareInBatch':
          summary: 'Delete Seller Share'
          description: 'Delete an existing seller share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SellerShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSessionHijackingEventInBatch':
          summary: 'Create Session Hijacking Event'
          description: 'Create a new session hijacking event in Batch'
          entityName: 'SessionHijackingEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSessionHijackingEventInBatch':
          summary: 'Update Session Hijacking Event'
          description: 'Updates an existing session hijacking event in batch; only
            elements specified in the request are updated.'
          entityName: 'SessionHijackingEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSessionHijackingEventInBatch':
          summary: 'Upsert Session Hijacking Event'
          description: 'Upsert an existing session hijacking event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SessionHijackingEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSessionHijackingEventInBatch':
          summary: 'Delete Session Hijacking Event'
          description: 'Delete an existing session hijacking event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SessionHijackingEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSessionHijackingEventStoreInBatch':
          summary: 'Create Session Hijacking Event Store'
          description: 'Create a new session hijacking event store in Batch'
          entityName: 'SessionHijackingEventStore'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSessionHijackingEventStoreInBatch':
          summary: 'Update Session Hijacking Event Store'
          description: 'Updates an existing session hijacking event store in batch;
            only elements specified in the request are updated.'
          entityName: 'SessionHijackingEventStore'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSessionHijackingEventStoreInBatch':
          summary: 'Upsert Session Hijacking Event Store'
          description: 'Upsert an existing session hijacking event store in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SessionHijackingEventStore'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSessionHijackingEventStoreInBatch':
          summary: 'Delete Session Hijacking Event Store'
          description: 'Delete an existing session hijacking event store in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SessionHijackingEventStore'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSessionPermSetActivationInBatch':
          summary: 'Create Session Permission Set Activation'
          description: 'Create a new session permission set activation in Batch'
          entityName: 'SessionPermSetActivation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSessionPermSetActivationInBatch':
          summary: 'Update Session Permission Set Activation'
          description: 'Updates an existing session permission set activation in batch;
            only elements specified in the request are updated.'
          entityName: 'SessionPermSetActivation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSessionPermSetActivationInBatch':
          summary: 'Upsert Session Permission Set Activation'
          description: 'Upsert an existing session permission set activation in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SessionPermSetActivation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSessionPermSetActivationInBatch':
          summary: 'Delete Session Permission Set Activation'
          description: 'Delete an existing session permission set activation in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SessionPermSetActivation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSetupAssistantStepInBatch':
          summary: 'Create Setup Assistant Step'
          description: 'Create a new setup assistant step in Batch'
          entityName: 'SetupAssistantStep'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSetupAssistantStepInBatch':
          summary: 'Update Setup Assistant Step'
          description: 'Updates an existing setup assistant step in batch; only elements
            specified in the request are updated.'
          entityName: 'SetupAssistantStep'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSetupAssistantStepInBatch':
          summary: 'Upsert Setup Assistant Step'
          description: 'Upsert an existing setup assistant step in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupAssistantStep'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSetupAssistantStepInBatch':
          summary: 'Delete Setup Assistant Step'
          description: 'Delete an existing setup assistant step in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupAssistantStep'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSetupAuditTrailInBatch':
          summary: 'Create Setup Audit Trail Entry'
          description: 'Create a new setup audit trail entry in Batch'
          entityName: 'SetupAuditTrail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSetupAuditTrailInBatch':
          summary: 'Update Setup Audit Trail Entry'
          description: 'Updates an existing setup audit trail entry in batch; only
            elements specified in the request are updated.'
          entityName: 'SetupAuditTrail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSetupAuditTrailInBatch':
          summary: 'Upsert Setup Audit Trail Entry'
          description: 'Upsert an existing setup audit trail entry in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupAuditTrail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSetupAuditTrailInBatch':
          summary: 'Delete Setup Audit Trail Entry'
          description: 'Delete an existing setup audit trail entry in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupAuditTrail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSetupEntityAccessInBatch':
          summary: 'Create Setup Entity Access'
          description: 'Create a new setup entity access in Batch'
          entityName: 'SetupEntityAccess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSetupEntityAccessInBatch':
          summary: 'Update Setup Entity Access'
          description: 'Updates an existing setup entity access in batch; only elements
            specified in the request are updated.'
          entityName: 'SetupEntityAccess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSetupEntityAccessInBatch':
          summary: 'Upsert Setup Entity Access'
          description: 'Upsert an existing setup entity access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupEntityAccess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSetupEntityAccessInBatch':
          summary: 'Delete Setup Entity Access'
          description: 'Delete an existing setup entity access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SetupEntityAccess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSiteInBatch':
          summary: 'Create Site'
          description: 'Create a new site in Batch'
          entityName: 'Site'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSiteInBatch':
          summary: 'Update Site'
          description: 'Updates an existing site in batch; only elements specified
            in the request are updated.'
          entityName: 'Site'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteInBatch':
          summary: 'Upsert Site'
          description: 'Upsert an existing site in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Site'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSiteInBatch':
          summary: 'Delete Site'
          description: 'Delete an existing site in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Site'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSiteDetailInBatch':
          summary: 'Create Site Detail'
          description: 'Create a new site detail in Batch'
          entityName: 'SiteDetail'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSiteDetailInBatch':
          summary: 'Update Site Detail'
          description: 'Updates an existing site detail in batch; only elements specified
            in the request are updated.'
          entityName: 'SiteDetail'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteDetailInBatch':
          summary: 'Upsert Site Detail'
          description: 'Upsert an existing site detail in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteDetail'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSiteDetailInBatch':
          summary: 'Delete Site Detail'
          description: 'Delete an existing site detail in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteDetail'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSiteHistoryInBatch':
          summary: 'Create Site History'
          description: 'Create a new site history in Batch'
          entityName: 'SiteHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSiteHistoryInBatch':
          summary: 'Update Site History'
          description: 'Updates an existing site history in batch only elements specified
            in the request are updated.'
          entityName: 'SiteHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteHistoryInBatch':
          summary: 'Upsert Site History'
          description: 'Upsert an existing site history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSiteHistoryInBatch':
          summary: 'Delete Site History'
          description: 'Delete an existing site history in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSiteIframeWhiteListUrlInBatch':
          summary: 'Create Trusted Domains for Inline Frames'
          description: 'Create a new trusted domains for inline frames in Batch'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSiteIframeWhiteListUrlInBatch':
          summary: 'Update Trusted Domains for Inline Frames'
          description: 'Updates an existing trusted domains for inline frames in batch;
            only elements specified in the request are updated.'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteIframeWhiteListUrlInBatch':
          summary: 'Upsert Trusted Domains for Inline Frames'
          description: 'Upsert an existing trusted domains for inline frames in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSiteIframeWhiteListUrlInBatch':
          summary: 'Delete Trusted Domains for Inline Frames'
          description: 'Delete an existing trusted domains for inline frames in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'SiteIframeWhiteListUrl'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSiteRedirectMappingInBatch':
          summary: 'Create Site Redirect Mapping'
          description: 'Create a new site redirect mapping in Batch'
          entityName: 'SiteRedirectMapping'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSiteRedirectMappingInBatch':
          summary: 'Update Site Redirect Mapping'
          description: 'Updates an existing site redirect mapping in batch; only elements
            specified in the request are updated.'
          entityName: 'SiteRedirectMapping'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSiteRedirectMappingInBatch':
          summary: 'Upsert Site Redirect Mapping'
          description: 'Upsert an existing site redirect mapping in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteRedirectMapping'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSiteRedirectMappingInBatch':
          summary: 'Delete Site Redirect Mapping'
          description: 'Delete an existing site redirect mapping in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SiteRedirectMapping'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSolutionInBatch':
          summary: 'Create Solution'
          description: 'Create a new solution in Batch'
          entityName: 'Solution'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSolutionInBatch':
          summary: 'Update Solution'
          description: 'Updates an existing solution in batch; only elements specified
            in the request are updated.'
          entityName: 'Solution'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSolutionInBatch':
          summary: 'Upsert Solution'
          description: 'Upsert an existing solution in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Solution'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSolutionInBatch':
          summary: 'Delete Solution'
          description: 'Delete an existing solution in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Solution'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSolutionHistoryInBatch':
          summary: 'Create Solution History'
          description: 'Create a new solution history in Batch'
          entityName: 'SolutionHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSolutionHistoryInBatch':
          summary: 'Update Solution History'
          description: 'Updates an existing solution history in batch; only elements
            specified in the request are updated.'
          entityName: 'SolutionHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSolutionHistoryInBatch':
          summary: 'Upsert Solution History'
          description: 'Upsert an existing solution history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SolutionHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSolutionHistoryInBatch':
          summary: 'Delete Solution History'
          description: 'Delete an existing solution history in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SolutionHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateSolutionStatusInBatch':
          summary: 'Create Solution Status Value'
          description: 'Create a new solution status value in Batch'
          entityName: 'SolutionStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateSolutionStatusInBatch':
          summary: 'Update Solution Status Value'
          description: 'Updates an existing solution status value in batch; only elements
            specified in the request are updated.'
          entityName: 'SolutionStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertSolutionStatusInBatch':
          summary: 'Upsert Solution Status Value'
          description: 'Upsert an existing solution status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SolutionStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteSolutionStatusInBatch':
          summary: 'Delete Solution Status Value'
          description: 'Delete an existing solution status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'SolutionStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateStampInBatch':
          summary: 'Create Stamp'
          description: 'Create a new stamp in Batch'
          entityName: 'Stamp'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateStampInBatch':
          summary: 'Update Stamp'
          description: 'Updates an existing stamp in batch; only elements specified
            in the request are updated.'
          entityName: 'Stamp'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStampInBatch':
          summary: 'Upsert Stamp'
          description: 'Upsert an existing stamp in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Stamp'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteStampInBatch':
          summary: 'Delete Stamp'
          description: 'Delete an existing stamp in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Stamp'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateStampAssignmentInBatch':
          summary: 'Create Stamp Assignment'
          description: 'Create a new stamp assignment in Batch'
          entityName: 'StampAssignment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateStampAssignmentInBatch':
          summary: 'Update Stamp Assignment'
          description: 'Updates an existing stamp assignment in batch; only elements
            specified in the request are updated.'
          entityName: 'StampAssignment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStampAssignmentInBatch':
          summary: 'Upsert Stamp Assignment'
          description: 'Upsert an existing stamp assignment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StampAssignment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteStampAssignmentInBatch':
          summary: 'Delete Stamp Assignment'
          description: 'Delete an existing stamp assignment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StampAssignment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateStaticResourceInBatch':
          summary: 'Create Static Resource'
          description: 'Create a new static resource in Batch'
          entityName: 'StaticResource'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateStaticResourceInBatch':
          summary: 'Update Static Resource'
          description: 'Updates an existing static resource in batch; only elements
            specified in the request are updated.'
          entityName: 'StaticResource'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStaticResourceInBatch':
          summary: 'Upsert Static Resource'
          description: 'Upsert an existing static resource in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StaticResource'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteStaticResourceInBatch':
          summary: 'Delete Static Resource'
          description: 'Delete an existing static resource in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StaticResource'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateStreamingChannelInBatch':
          summary: 'Create Streaming Channel'
          description: 'Create a new streaming channel in Batch'
          entityName: 'StreamingChannel'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateStreamingChannelInBatch':
          summary: 'Update Streaming Channel'
          description: 'Updates an existing streaming channel in batch; only elements
            specified in the request are updated.'
          entityName: 'StreamingChannel'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStreamingChannelInBatch':
          summary: 'Upsert Streaming Channel'
          description: 'Upsert an existing streaming channel in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StreamingChannel'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteStreamingChannelInBatch':
          summary: 'Delete Streaming Channel'
          description: 'Delete an existing streaming channel in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StreamingChannel'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateStreamingChannelShareInBatch':
          summary: 'Create Streaming Channel Share'
          description: 'Create a new streaming channel share in Batch'
          entityName: 'StreamingChannelShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateStreamingChannelShareInBatch':
          summary: 'Update Streaming Channel Share'
          description: 'Updates an existing streaming channel share in batch; only
            elements specified in the request are updated.'
          entityName: 'StreamingChannelShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertStreamingChannelShareInBatch':
          summary: 'Upsert Streaming Channel Share'
          description: 'Upsert an existing streaming channel share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StreamingChannelShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteStreamingChannelShareInBatch':
          summary: 'Delete Streaming Channel Share'
          description: 'Delete an existing streaming channel share in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'StreamingChannelShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTabDefinitionInBatch':
          summary: 'Create Tab Definition'
          description: 'Create a new tab definition in Batch'
          entityName: 'TabDefinition'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTabDefinitionInBatch':
          summary: 'Update Tab Definition'
          description: 'Updates an existing tab definition in batch; only elements
            specified in the request are updated.'
          entityName: 'TabDefinition'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTabDefinitionInBatch':
          summary: 'Upsert Tab Definition'
          description: 'Upsert an existing tab definition in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TabDefinition'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTabDefinitionInBatch':
          summary: 'Delete Tab Definition'
          description: 'Delete an existing tab definition in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TabDefinition'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTaskInBatch':
          summary: 'Create Task'
          description: 'Create a new task in Batch'
          entityName: 'Task'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTaskInBatch':
          summary: 'Update Task'
          description: 'Updates an existing task in batch; only elements specified
            in the request are updated.'
          entityName: 'Task'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskInBatch':
          summary: 'Upsert Task'
          description: 'Upsert an existing task in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Task'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTaskInBatch':
          summary: 'Delete Task'
          description: 'Delete an existing task in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Task'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTaskChangeEventInBatch':
          summary: 'Create Task Change Event'
          description: 'Create a new task change event in Batch'
          entityName: 'TaskChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTaskChangeEventInBatch':
          summary: 'Update Task Change Event'
          description: 'Updates an existing task change event in batch; only elements
            specified in the request are updated.'
          entityName: 'TaskChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskChangeEventInBatch':
          summary: 'Upsert Task Change Event'
          description: 'Upsert an existing task change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTaskChangeEventInBatch':
          summary: 'Delete Task Change Event'
          description: 'Delete an existing task change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTaskPriorityInBatch':
          summary: 'Create Task Priority Value'
          description: 'Create a new task priority value in Batch'
          entityName: 'TaskPriority'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTaskPriorityInBatch':
          summary: 'Update Task Priority Value'
          description: 'Updates an existing task priority value in batch; only elements
            specified in the request are updated.'
          entityName: 'TaskPriority'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskPriorityInBatch':
          summary: 'Upsert Task Priority Value'
          description: 'Upsert an existing task priority value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskPriority'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTaskPriorityInBatch':
          summary: 'Delete Task Priority Value'
          description: 'Delete an existing task priority value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskPriority'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTaskStatusInBatch':
          summary: 'Create Task Status Value'
          description: 'Create a new task status value in Batch'
          entityName: 'TaskStatus'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTaskStatusInBatch':
          summary: 'Update Task Status Value'
          description: 'Updates an existing task status value in batch; only elements
            specified in the request are updated.'
          entityName: 'TaskStatus'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTaskStatusInBatch':
          summary: 'Upsert Task Status Value'
          description: 'Upsert an existing task status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskStatus'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTaskStatusInBatch':
          summary: 'Delete Task Status Value'
          description: 'Delete an existing task status value in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TaskStatus'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTenantSecretInBatch':
          summary: 'Create Tenant Secret'
          description: 'Create a new tenant secret in Batch'
          entityName: 'TenantSecret'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTenantSecretInBatch':
          summary: 'Update Tenant Secret'
          description: 'Updates an existing tenant secret in batch; only elements
            specified in the request are updated.'
          entityName: 'TenantSecret'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTenantSecretInBatch':
          summary: 'Upsert Tenant Secret'
          description: 'Upsert an existing tenant secret in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TenantSecret'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTenantSecretInBatch':
          summary: 'Delete Tenant Secret'
          description: 'Delete an existing tenant secret in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TenantSecret'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTenantUsageEntitlementInBatch':
          summary: 'Create Tenant Usage Entitlement'
          description: 'Create a new tenant usage entitlement in Batch'
          entityName: 'TenantUsageEntitlement'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTenantUsageEntitlementInBatch':
          summary: 'Update Tenant Usage Entitlement'
          description: 'Updates an existing tenant usage entitlement in batch; only
            elements specified in the request are updated.'
          entityName: 'TenantUsageEntitlement'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTenantUsageEntitlementInBatch':
          summary: 'Upsert Tenant Usage Entitlement'
          description: 'Upsert an existing tenant usage entitlement in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'TenantUsageEntitlement'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTenantUsageEntitlementInBatch':
          summary: 'Delete Tenant Usage Entitlement'
          description: 'Delete an existing tenant usage entitlement in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'TenantUsageEntitlement'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTestCustomObject__ChangeEventInBatch':
          summary: 'Create Change Event: TestCustomObjectLabel'
          description: 'Create a new change event: testcustomobjectlabel in Batch'
          entityName: 'TestCustomObject__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTestCustomObject__ChangeEventInBatch':
          summary: 'Update Change Event: TestCustomObjectLabel'
          description: 'Updates an existing change event: testcustomobjectlabel in
            batch; only elements specified in the request are updated.'
          entityName: 'TestCustomObject__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTestCustomObject__ChangeEventInBatch':
          summary: 'Upsert Change Event: TestCustomObjectLabel'
          description: 'Upsert an existing change event: testcustomobjectlabel in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'TestCustomObject__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTestCustomObject__ChangeEventInBatch':
          summary: 'Delete Change Event: TestCustomObjectLabel'
          description: 'Delete an existing change event: testcustomobjectlabel in
            batch only elements specified in the request are updated. Missing elements
            are set to NULL.'
          entityName: 'TestCustomObject__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTestCustomObject__cInBatch':
          summary: 'Create TestCustomObjectLabel'
          description: 'Create a new testcustomobjectlabel in Batch'
          entityName: 'TestCustomObject__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTestCustomObject__cInBatch':
          summary: 'Update TestCustomObjectLabel'
          description: 'Updates an existing testcustomobjectlabel in batch; only elements
            specified in the request are updated.'
          entityName: 'TestCustomObject__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTestCustomObject__cInBatch':
          summary: 'Upsert TestCustomObjectLabel'
          description: 'Upsert an existing testcustomobjectlabel in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TestCustomObject__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTestCustomObject__cInBatch':
          summary: 'Delete TestCustomObjectLabel'
          description: 'Delete an existing testcustomobjectlabel in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TestCustomObject__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTestObject__ChangeEventInBatch':
          summary: 'Create Change Event: TestObject'
          description: 'Create a new change event: testobject in Batch'
          entityName: 'TestObject__ChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTestObject__ChangeEventInBatch':
          summary: 'Update Change Event: TestObject'
          description: 'Updates an existing change event: testobject in batch; only
            elements specified in the request are updated.'
          entityName: 'TestObject__ChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTestObject__ChangeEventInBatch':
          summary: 'Upsert Change Event: TestObject'
          description: 'Upsert an existing change event: testobject in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'TestObject__ChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTestObject__ChangeEventInBatch':
          summary: 'Delete Change Event: TestObject'
          description: 'Delete an existing change event: testobject in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'TestObject__ChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTestObject__cInBatch':
          summary: 'Create TestObject'
          description: 'Create a new testobject in Batch'
          entityName: 'TestObject__c'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTestObject__cInBatch':
          summary: 'Update TestObject'
          description: 'Updates an existing testobject in batch; only elements specified
            in the request are updated.'
          entityName: 'TestObject__c'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTestObject__cInBatch':
          summary: 'Upsert TestObject'
          description: 'Upsert an existing testobject in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TestObject__c'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTestObject__cInBatch':
          summary: 'Delete TestObject'
          description: 'Delete an existing testobject in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TestObject__c'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTestSuiteMembershipInBatch':
          summary: 'Create Test Suite Membership'
          description: 'Create a new test suite membership in Batch'
          entityName: 'TestSuiteMembership'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTestSuiteMembershipInBatch':
          summary: 'Update Test Suite Membership'
          description: 'Updates an existing test suite membership in batch; only elements
            specified in the request are updated.'
          entityName: 'TestSuiteMembership'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTestSuiteMembershipInBatch':
          summary: 'Upsert Test Suite Membership'
          description: 'Upsert an existing test suite membership in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TestSuiteMembership'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTestSuiteMembershipInBatch':
          summary: 'Delete Test Suite Membership'
          description: 'Delete an existing test suite membership in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TestSuiteMembership'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateThirdPartyAccountLinkInBatch':
          summary: 'Create Third Party Account Link'
          description: 'Create a new third party account link in Batch'
          entityName: 'ThirdPartyAccountLink'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateThirdPartyAccountLinkInBatch':
          summary: 'Update Third Party Account Link'
          description: 'Updates an existing third party account link in batch; only
            elements specified in the request are updated.'
          entityName: 'ThirdPartyAccountLink'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertThirdPartyAccountLinkInBatch':
          summary: 'Upsert Third Party Account Link'
          description: 'Upsert an existing third party account link in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ThirdPartyAccountLink'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteThirdPartyAccountLinkInBatch':
          summary: 'Delete Third Party Account Link'
          description: 'Delete an existing third party account link in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ThirdPartyAccountLink'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateThreatDetectionFeedbackInBatch':
          summary: 'Create Threat Detection Feedback'
          description: 'Create a new threat detection feedback in Batch'
          entityName: 'ThreatDetectionFeedback'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateThreatDetectionFeedbackInBatch':
          summary: 'Update Threat Detection Feedback'
          description: 'Updates an existing threat detection feedback in batch; only
            elements specified in the request are updated.'
          entityName: 'ThreatDetectionFeedback'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertThreatDetectionFeedbackInBatch':
          summary: 'Upsert Threat Detection Feedback'
          description: 'Upsert an existing threat detection feedback in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ThreatDetectionFeedback'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteThreatDetectionFeedbackInBatch':
          summary: 'Delete Threat Detection Feedback'
          description: 'Delete an existing threat detection feedback in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'ThreatDetectionFeedback'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTodayGoalInBatch':
          summary: 'Create Goal'
          description: 'Create a new goal in Batch'
          entityName: 'TodayGoal'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTodayGoalInBatch':
          summary: 'Update Goal'
          description: 'Updates an existing goal in batch; only elements specified
            in the request are updated.'
          entityName: 'TodayGoal'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTodayGoalInBatch':
          summary: 'Upsert Goal'
          description: 'Upsert an existing goal in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'TodayGoal'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTodayGoalInBatch':
          summary: 'Delete Goal'
          description: 'Delete an existing goal in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'TodayGoal'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTodayGoalShareInBatch':
          summary: 'Create Goal Share'
          description: 'Create a new goal share in Batch'
          entityName: 'TodayGoalShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTodayGoalShareInBatch':
          summary: 'Update Goal Share'
          description: 'Updates an existing goal share in batch; only elements specified
            in the request are updated.'
          entityName: 'TodayGoalShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTodayGoalShareInBatch':
          summary: 'Upsert Goal Share'
          description: 'Upsert an existing goal share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TodayGoalShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTodayGoalShareInBatch':
          summary: 'Delete Goal Share'
          description: 'Delete an existing goal share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'TodayGoalShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTopicInBatch':
          summary: 'Create Topic'
          description: 'Create a new topic in Batch'
          entityName: 'Topic'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTopicInBatch':
          summary: 'Update Topic'
          description: 'Updates an existing topic in batch; only elements specified
            in the request are updated.'
          entityName: 'Topic'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTopicInBatch':
          summary: 'Upsert Topic'
          description: 'Upsert an existing topic in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Topic'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTopicInBatch':
          summary: 'Delete Topic'
          description: 'Delete an existing topic in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'Topic'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTopicAssignmentInBatch':
          summary: 'Create Topic Assignment'
          description: 'Create a new topic assignment in Batch'
          entityName: 'TopicAssignment'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTopicAssignmentInBatch':
          summary: 'Update Topic Assignment'
          description: 'Updates an existing topic assignment in batch; only elements
            specified in the request are updated.'
          entityName: 'TopicAssignment'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTopicAssignmentInBatch':
          summary: 'Upsert Topic Assignment'
          description: 'Upsert an existing topic assignment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TopicAssignment'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTopicAssignmentInBatch':
          summary: 'Delete Topic Assignment'
          description: 'Delete an existing topic assignment in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'TopicAssignment'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTransactionSecurityPolicyInBatch':
          summary: 'Create Transaction Security Policy'
          description: 'Create a new transaction security policy in Batch'
          entityName: 'TransactionSecurityPolicy'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTransactionSecurityPolicyInBatch':
          summary: 'Update Transaction Security Policy'
          description: 'Updates an existing transaction security policy in batch;
            only elements specified in the request are updated.'
          entityName: 'TransactionSecurityPolicy'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTransactionSecurityPolicyInBatch':
          summary: 'Upsert Transaction Security Policy'
          description: 'Upsert an existing transaction security policy in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'TransactionSecurityPolicy'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTransactionSecurityPolicyInBatch':
          summary: 'Delete Transaction Security Policy'
          description: 'Delete an existing transaction security policy in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'TransactionSecurityPolicy'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateTranslationInBatch':
          summary: 'Create Language Translation'
          description: 'Create a new language translation in Batch'
          entityName: 'Translation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateTranslationInBatch':
          summary: 'Update Language Translation'
          description: 'Updates an existing language translation in batch; only elements
            specified in the request are updated.'
          entityName: 'Translation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertTranslationInBatch':
          summary: 'Upsert Language Translation'
          description: 'Upsert an existing language translation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Translation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteTranslationInBatch':
          summary: 'Delete Language Translation'
          description: 'Delete an existing language translation in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'Translation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUiFormulaCriterionInBatch':
          summary: 'Create Ui Formula Criterion'
          description: 'Create a new ui formula criterion in Batch'
          entityName: 'UiFormulaCriterion'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUiFormulaCriterionInBatch':
          summary: 'Update Ui Formula Criterion'
          description: 'Updates an existing ui formula criterion in batch; only elements
            specified in the request are updated.'
          entityName: 'UiFormulaCriterion'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUiFormulaCriterionInBatch':
          summary: 'Upsert Ui Formula Criterion'
          description: 'Upsert an existing ui formula criterion in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UiFormulaCriterion'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUiFormulaCriterionInBatch':
          summary: 'Delete Ui Formula Criterion'
          description: 'Delete an existing ui formula criterion in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UiFormulaCriterion'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUiFormulaRuleInBatch':
          summary: 'Create Ui Formula Rule'
          description: 'Create a new ui formula rule in Batch'
          entityName: 'UiFormulaRule'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUiFormulaRuleInBatch':
          summary: 'Update Ui Formula Rule'
          description: 'Updates an existing ui formula rule in batch; only elements
            specified in the request are updated.'
          entityName: 'UiFormulaRule'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUiFormulaRuleInBatch':
          summary: 'Upsert Ui Formula Rule'
          description: 'Upsert an existing ui formula rule in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UiFormulaRule'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUiFormulaRuleInBatch':
          summary: 'Delete Ui Formula Rule'
          description: 'Delete an existing ui formula rule in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UiFormulaRule'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUndecidedEventRelationInBatch':
          summary: 'Create Undecided Event Relation'
          description: 'Create a new undecided event relation in Batch'
          entityName: 'UndecidedEventRelation'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUndecidedEventRelationInBatch':
          summary: 'Update Undecided Event Relation'
          description: 'Updates an existing undecided event relation in batch; only
            elements specified in the request are updated.'
          entityName: 'UndecidedEventRelation'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUndecidedEventRelationInBatch':
          summary: 'Upsert Undecided Event Relation'
          description: 'Upsert an existing undecided event relation in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UndecidedEventRelation'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUndecidedEventRelationInBatch':
          summary: 'Delete Undecided Event Relation'
          description: 'Delete an existing undecided event relation in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UndecidedEventRelation'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUriEventInBatch':
          summary: 'Create URI Event'
          description: 'Create a new uri event in Batch'
          entityName: 'UriEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUriEventInBatch':
          summary: 'Update URI Event'
          description: 'Updates an existing uri event in batch; only elements specified
            in the request are updated.'
          entityName: 'UriEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUriEventInBatch':
          summary: 'Upsert URI Event'
          description: 'Upsert an existing uri event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UriEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUriEventInBatch':
          summary: 'Delete URI Event'
          description: 'Delete an existing uri event in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UriEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUriEventStreamInBatch':
          summary: 'Create URI Event Stream'
          description: 'Create a new uri event stream  in Batch'
          entityName: 'UriEventStream'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUriEventStreamInBatch':
          summary: 'Update URI Event Stream'
          description: 'Updates an existing uri event stream  in batch; only elements
            specified in the request are updated.'
          entityName: 'UriEventStream'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUriEventStreamInBatch':
          summary: 'Upsert URI Event Stream'
          description: 'Upsert an existing uri event stream  in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UriEventStream'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUriEventStreamInBatch':
          summary: 'Delete URI Event Stream'
          description: 'Delete an existing uri event stream  in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UriEventStream'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserInBatch':
          summary: 'Create User'
          description: 'Create a new user in Batch'
          entityName: 'User'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserInBatch':
          summary: 'Update User'
          description: 'Updates an existing user in batch; only elements specified
            in the request are updated.'
          entityName: 'User'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserInBatch':
          summary: 'Upsert User'
          description: 'Upsert an existing user in Batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'User'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserInBatch':
          summary: 'Delete User'
          description: 'Delete an existing user in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'User'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserAppInfoInBatch':
          summary: 'Create Last Used App'
          description: 'Create a new last used app in Batch'
          entityName: 'UserAppInfo'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserAppInfoInBatch':
          summary: 'Update Last Used App'
          description: 'Updates an existing last used app in batch; only elements
            specified in the request are updated.'
          entityName: 'UserAppInfo'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppInfoInBatch':
          summary: 'Upsert Last Used App'
          description: 'Upsert an existing last used app in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppInfo'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserAppInfoInBatch':
          summary: 'Delete Last Used App'
          description: 'Delete an existing last used app in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppInfo'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserAppMenuCustomizationInBatch':
          summary: 'Create UserAppMenuCustomization'
          description: 'Create a new userappmenucustomization in Batch'
          entityName: 'UserAppMenuCustomization'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserAppMenuCustomizationInBatch':
          summary: 'Update UserAppMenuCustomization'
          description: 'Updates an existing userappmenucustomization in batch; only
            elements specified in the request are updated.'
          entityName: 'UserAppMenuCustomization'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppMenuCustomizationInBatch':
          summary: 'Upsert UserAppMenuCustomization'
          description: 'Upsert an existing userappmenucustomization in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserAppMenuCustomization'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserAppMenuCustomizationInBatch':
          summary: 'Delete UserAppMenuCustomization'
          description: 'Delete an existing userappmenucustomization in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserAppMenuCustomization'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserAppMenuCustomizationShareInBatch':
          summary: 'Create UserAppMenuCustomization Share'
          description: 'Create a new userappmenucustomization share in Batch'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserAppMenuCustomizationShareInBatch':
          summary: 'Update UserAppMenuCustomization Share'
          description: 'Updates an existing userappmenucustomization share in batch;
            only elements specified in the request are updated.'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppMenuCustomizationShareInBatch':
          summary: 'Upsert UserAppMenuCustomization Share'
          description: 'Upsert an existing userappmenucustomization share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserAppMenuCustomizationShareInBatch':
          summary: 'Delete UserAppMenuCustomization Share'
          description: 'Delete an existing userappmenucustomization share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserAppMenuCustomizationShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserAppMenuItemInBatch':
          summary: 'Create Application'
          description: 'Create a new application in Batch'
          entityName: 'UserAppMenuItem'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserAppMenuItemInBatch':
          summary: 'Update Application'
          description: 'Updates an existing application in batch; only elements specified
            in the request are updated.'
          entityName: 'UserAppMenuItem'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserAppMenuItemInBatch':
          summary: 'Upsert Application'
          description: 'Upsert an existing application in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppMenuItem'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserAppMenuItemInBatch':
          summary: 'Delete Application'
          description: 'Delete an existing application in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserAppMenuItem'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserChangeEventInBatch':
          summary: 'Create User Change Event'
          description: 'Create a new user change event in Batch'
          entityName: 'UserChangeEvent'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserChangeEventInBatch':
          summary: 'Update User Change Event'
          description: 'Updates an existing user change event in batch; only elements
            specified in the request are updated.'
          entityName: 'UserChangeEvent'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserChangeEventInBatch':
          summary: 'Upsert User Change Event'
          description: 'Upsert an existing user change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserChangeEvent'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserChangeEventInBatch':
          summary: 'Delete User Change Event'
          description: 'Delete an existing user change event in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserChangeEvent'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserEmailPreferredPersonInBatch':
          summary: 'Create User Email Preferred Person'
          description: 'Create a new user email preferred person in Batch'
          entityName: 'UserEmailPreferredPerson'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserEmailPreferredPersonInBatch':
          summary: 'Update User Email Preferred Person'
          description: 'Updates an existing user email preferred person in batch;
            only elements specified in the request are updated.'
          entityName: 'UserEmailPreferredPerson'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserEmailPreferredPersonInBatch':
          summary: 'Upsert User Email Preferred Person'
          description: 'Upsert an existing user email preferred person in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserEmailPreferredPerson'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserEmailPreferredPersonInBatch':
          summary: 'Delete User Email Preferred Person'
          description: 'Delete an existing user email preferred person in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserEmailPreferredPerson'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserEmailPreferredPersonShareInBatch':
          summary: 'Create User Email Preferred Person Share'
          description: 'Create a new user email preferred person share in Batch'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserEmailPreferredPersonShareInBatch':
          summary: 'Update User Email Preferred Person Share'
          description: 'Updates an existing user email preferred person share in batch;
            only elements specified in the request are updated.'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserEmailPreferredPersonShareInBatch':
          summary: 'Upsert User Email Preferred Person Share'
          description: 'Upsert an existing user email preferred person share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserEmailPreferredPersonShareInBatch':
          summary: 'Delete User Email Preferred Person Share'
          description: 'Delete an existing user email preferred person share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserEmailPreferredPersonShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserEntityAccessInBatch':
          summary: 'Create User Entity Access'
          description: 'Create a new user entity access in Batch'
          entityName: 'UserEntityAccess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserEntityAccessInBatch':
          summary: 'Update User Entity Access'
          description: 'Updates an existing user entity access in batch; only elements
            specified in the request are updated.'
          entityName: 'UserEntityAccess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserEntityAccessInBatch':
          summary: 'Upsert User Entity Access'
          description: 'Upsert an existing user entity access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserEntityAccess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserEntityAccessInBatch':
          summary: 'Delete User Entity Access'
          description: 'Delete an existing user entity access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserEntityAccess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserFieldAccessInBatch':
          summary: 'Create User Field Access'
          description: 'Create a new user field access in Batch'
          entityName: 'UserFieldAccess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserFieldAccessInBatch':
          summary: 'Update User Field Access'
          description: 'Updates an existing user field access in batch; only elements
            specified in the request are updated.'
          entityName: 'UserFieldAccess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserFieldAccessInBatch':
          summary: 'Upsert User Field Access'
          description: 'Upsert an existing user field access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserFieldAccess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserFieldAccessInBatch':
          summary: 'Delete User Field Access'
          description: 'Delete an existing user field access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserFieldAccess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserLicenseInBatch':
          summary: 'Create User License'
          description: 'Create a new user license in Batch'
          entityName: 'UserLicense'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserLicenseInBatch':
          summary: 'Update User License'
          description: 'Updates an existing user license in batch; only elements specified
            in the request are updated.'
          entityName: 'UserLicense'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserLicenseInBatch':
          summary: 'Upsert User License'
          description: 'Upsert an existing user license in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserLicense'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserLicenseInBatch':
          summary: 'Delete User License'
          description: 'Delete an existing user license in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserLicense'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserListViewInBatch':
          summary: 'Create User List View'
          description: 'Create a new user list view in Batch'
          entityName: 'UserListView'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserListViewInBatch':
          summary: 'Update User List View'
          description: 'Updates an existing user list view in batch; only elements
            specified in the request are updated.'
          entityName: 'UserListView'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserListViewInBatch':
          summary: 'Upsert User List View'
          description: 'Upsert an existing user list view in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserListView'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserListViewInBatch':
          summary: 'Delete User List View'
          description: 'Delete an existing user list view in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserListView'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserListViewCriterionInBatch':
          summary: 'Create User List View Criteria'
          description: 'Create a new user list view criteria in Batch'
          entityName: 'UserListViewCriterion'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserListViewCriterionInBatch':
          summary: 'Update User List View Criteria'
          description: 'Updates an existing user list view criteria in batch; only
            elements specified in the request are updated.'
          entityName: 'UserListViewCriterion'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserListViewCriterionInBatch':
          summary: 'Upsert User List View Criteria'
          description: 'Upsert an existing user list view criteria in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserListViewCriterion'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserListViewCriterionInBatch':
          summary: 'Delete User List View Criteria'
          description: 'Delete an existing user list view criteria in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserListViewCriterion'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserLoginInBatch':
          summary: 'Create User Login'
          description: 'Create a new user login in Batch'
          entityName: 'UserLogin'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserLoginInBatch':
          summary: 'Update User Login'
          description: 'Updates an existing user login in batch; only elements specified
            in the request are updated.'
          entityName: 'UserLogin'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserLoginInBatch':
          summary: 'Upsert User Login'
          description: 'Upsert an existing user login in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserLogin'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserLoginInBatch':
          summary: 'Delete User Login'
          description: 'Delete an existing user login in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserLogin'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserPackageLicenseInBatch':
          summary: 'Create User Package License'
          description: 'Create a new user package license in Batch'
          entityName: 'UserPackageLicense'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserPackageLicenseInBatch':
          summary: 'Update User Package License'
          description: 'Updates an existing user package license in batch; only elements
            specified in the request are updated.'
          entityName: 'UserPackageLicense'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserPackageLicenseInBatch':
          summary: 'Upsert User Package License'
          description: 'Upsert an existing user package license in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPackageLicense'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserPackageLicenseInBatch':
          summary: 'Delete User Package License '
          description: 'Delete an existing user package license in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPackageLicense'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserPermissionAccessInBatch':
          summary: 'Create User Permission Access'
          description: 'Create a new user permission access in Batch'
          entityName: 'UserPermissionAccess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserPermissionAccessInBatch':
          summary: 'Update User Permission Access'
          description: 'Updates an existing user permission access in batch; only
            elements specified in the request are updated.'
          entityName: 'UserPermissionAccess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserPermissionAccessInBatch':
          summary: 'Upsert User Permission Access'
          description: 'Upsert an existing user permission access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPermissionAccess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserPermissionAccessInBatch':
          summary: 'Delete User Permission Access'
          description: 'Delete an existing user permission access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPermissionAccess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserPreferenceInBatch':
          summary: 'Create User Preference'
          description: 'Create a new user preference in Batch'
          entityName: 'UserPreference'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserPreferenceInBatch':
          summary: 'Update User Preference'
          description: 'Updates an existing user preference in batch; only elements
            specified in the request are updated.'
          entityName: 'UserPreference'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserPreferenceInBatch':
          summary: 'Upsert User Preference'
          description: 'Upsert an existing user preference in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPreference'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserPreferenceInBatch':
          summary: 'Delete User Preference'
          description: 'Delete an existing user preference in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserPreference'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvAccountInBatch':
          summary: 'Create User Provisioning Account'
          description: 'Create a new user provisioning account in Batch'
          entityName: 'UserProvAccount'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvAccountInBatch':
          summary: 'Update User Provisioning Account'
          description: 'Updates an existing user provisioning account in batch; only
            elements specified in the request are updated.'
          entityName: 'UserProvAccount'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvAccountInBatch':
          summary: 'Upsert User Provisioning Account'
          description: 'Upsert an existing user provisioning account in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvAccount'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvAccountInBatch':
          summary: 'Delete User Provisioning Account'
          description: 'Delete an existing user provisioning account in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvAccount'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvAccountStagingInBatch':
          summary: 'Create User Provisioning Account Staging'
          description: 'Create a new user provisioning account staging in Batch'
          entityName: 'UserProvAccountStaging'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvAccountStagingInBatch':
          summary: 'Update User Provisioning Account Staging'
          description: 'Updates an existing user provisioning account staging in batch;
            only elements specified in the request are updated.'
          entityName: 'UserProvAccountStaging'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvAccountStagingInBatch':
          summary: 'Upsert User Provisioning Account Staging'
          description: 'Upsert an existing user provisioning account staging in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserProvAccountStaging'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvAccountStagingInBatch':
          summary: 'Delete User Provisioning Account Staging'
          description: 'Delete an existing user provisioning account staging in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserProvAccountStaging'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvMockTargetInBatch':
          summary: 'Create User Provisioning Mock Target'
          description: 'Create a new user provisioning mock target in Batch'
          entityName: 'UserProvMockTarget'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvMockTargetInBatch':
          summary: 'Update User Provisioning Mock Target'
          description: 'Updates an existing user provisioning mock target in batch;
            only elements specified in the request are updated.'
          entityName: 'UserProvMockTarget'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvMockTargetInBatch':
          summary: 'Upsert User Provisioning Mock Target'
          description: 'Upsert an existing user provisioning mock target in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserProvMockTarget'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvMockTargetInBatch':
          summary: 'Delete User Provisioning Mock Target'
          description: 'Delete an existing user provisioning mock target in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserProvMockTarget'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvisioningConfigInBatch':
          summary: 'Create User Provisioning Config'
          description: 'Create a new user provisioning config in Batch'
          entityName: 'UserProvisioningConfig'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvisioningConfigInBatch':
          summary: 'Update User Provisioning Config'
          description: 'Updates an existing user provisioning config in batch; only
            elements specified in the request are updated.'
          entityName: 'UserProvisioningConfig'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningConfigInBatch':
          summary: 'Upsert User Provisioning Config'
          description: 'Upsert an existing user provisioning config in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvisioningConfig'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvisioningConfigInBatch':
          summary: 'Delete User Provisioning Config'
          description: 'Delete an existing user provisioning config in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvisioningConfig'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvisioningLogInBatch':
          summary: 'Create User Provisioning Log'
          description: 'Create a new user provisioning log in Batch'
          entityName: 'UserProvisioningLog'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvisioningLogInBatch':
          summary: 'Update User Provisioning Log'
          description: 'Updates an existing user provisioning log in batch; only elements
            specified in the request are updated.'
          entityName: 'UserProvisioningLog'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningLogInBatch':
          summary: 'Upsert User Provisioning Log'
          description: 'Upsert an existing user provisioning log in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvisioningLog'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvisioningLogInBatch':
          summary: 'Delete User Provisioning Log'
          description: 'Delete an existing user provisioning log in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserProvisioningLog'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvisioningRequestInBatch':
          summary: 'Create User Provisioning Request'
          description: 'Create a new user provisioning request in Batch'
          entityName: 'UserProvisioningRequest'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvisioningRequestInBatch':
          summary: 'Update User Provisioning Request'
          description: 'Updates an existing user provisioning request in batch; only
            elements specified in the request are updated.'
          entityName: 'UserProvisioningRequest'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningRequestInBatch':
          summary: 'Upsert User Provisioning Request'
          description: 'Upsert an existing user provisioning request in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvisioningRequest'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvisioningRequestInBatch':
          summary: 'Delete User Provisioning Request'
          description: 'Delete an existing user provisioning request in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserProvisioningRequest'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserProvisioningRequestShareInBatch':
          summary: 'Create User Provisioning Request Share'
          description: 'Create a new user provisioning request share in Batch'
          entityName: 'UserProvisioningRequestShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserProvisioningRequestShareInBatch':
          summary: 'Update User Provisioning Request Share'
          description: 'Updates an existing user provisioning request share in batch;
            only elements specified in the request are updated.'
          entityName: 'UserProvisioningRequestShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserProvisioningRequestShareInBatch':
          summary: 'Upsert User Provisioning Request Share'
          description: 'Upsert an existing user provisioning request share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserProvisioningRequestShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserProvisioningRequestShareInBatch':
          summary: 'Delete User Provisioning Request Share'
          description: 'Delete an existing user provisioning request share in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'UserProvisioningRequestShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserRecordAccessInBatch':
          summary: 'Create User Record Access'
          description: 'Create a new user record access in Batch'
          entityName: 'UserRecordAccess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserRecordAccessInBatch':
          summary: 'Update User Record Access'
          description: 'Updates an existing user record access in batch; only elements
            specified in the request are updated.'
          entityName: 'UserRecordAccess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserRecordAccessInBatch':
          summary: 'Upsert User Record Access'
          description: 'Upsert an existing user record access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserRecordAccess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserRecordAccessInBatch':
          summary: 'Delete User Record Access'
          description: 'Delete an existing user record access in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserRecordAccess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserRoleInBatch':
          summary: 'Create Role'
          description: 'Create a new role in Batch'
          entityName: 'UserRole'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserRoleInBatch':
          summary: 'Update Role'
          description: 'Updates an existing role in batch; only elements specified
            in the request are updated.'
          entityName: 'UserRole'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserRoleInBatch':
          summary: 'Upsert Role'
          description: 'Upsert an existing role in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'UserRole'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserRoleInBatch':
          summary: 'Delete Role'
          description: 'Delete an existing role in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'UserRole'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserSetupEntityAccessInBatch':
          summary: 'Create User Setup Entity Access'
          description: 'Create a new user setup entity access in Batch'
          entityName: 'UserSetupEntityAccess'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserSetupEntityAccessInBatch':
          summary: 'Update User Setup Entity Access '
          description: 'Updates an existing user setup entity access in batch; only
            elements specified in the request are updated.'
          entityName: 'UserSetupEntityAccess'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserSetupEntityAccessInBatch':
          summary: 'Upsert User Setup Entity Access'
          description: 'Upsert an existing user setup entity access in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserSetupEntityAccess'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserSetupEntityAccessInBatch':
          summary: 'Delete User Setup Entity Access'
          description: 'Delete an existing user setup entity access in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'UserSetupEntityAccess'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateUserShareInBatch':
          summary: 'Create User Share'
          description: 'Create a new user share in Batch'
          entityName: 'UserShare'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateUserShareInBatch':
          summary: 'Update User Share'
          description: 'Updates an existing user share in batch; only elements specified
            in the request are updated.'
          entityName: 'UserShare'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertUserShareInBatch':
          summary: 'Upsert User Share'
          description: 'Upsert an existing user share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserShare'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteUserShareInBatch':
          summary: 'Delete User Share'
          description: 'Delete an existing user share in batch only elements specified
            in the request are updated. Missing elements are set to NULL.'
          entityName: 'UserShare'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateVerificationHistoryInBatch':
          summary: 'Create Identity Verification History'
          description: 'Create a new identity verification history in Batch'
          entityName: 'VerificationHistory'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateVerificationHistoryInBatch':
          summary: 'Update Identity Verification History'
          description: 'Updates an existing identity verification history in batch;
            only elements specified in the request are updated.'
          entityName: 'VerificationHistory'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertVerificationHistoryInBatch':
          summary: 'Upsert Identity Verification History'
          description: 'Upsert an existing identity verification history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'VerificationHistory'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteVerificationHistoryInBatch':
          summary: 'Delete Identity Verification History'
          description: 'Delete an existing identity verification history in batch
            only elements specified in the request are updated. Missing elements are
            set to NULL.'
          entityName: 'VerificationHistory'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateVisualforceAccessMetricsInBatch':
          summary: 'Create Visualforce Access Metric'
          description: 'Create a new visualforce access metric in Batch'
          entityName: 'VisualforceAccessMetrics'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateVisualforceAccessMetricsInBatch':
          summary: 'Update Visualforce Access Metric'
          description: 'Updates an existing visualforce access metric in batch; only
            elements specified in the request are updated.'
          entityName: 'VisualforceAccessMetrics'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertVisualforceAccessMetricsInBatch':
          summary: 'Upsert Visualforce Access Metric'
          description: 'Upsert an existing visualforce access metric in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'VisualforceAccessMetrics'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteVisualforceAccessMetricsInBatch':
          summary: 'Delete Visualforce Access Metric'
          description: 'Delete an existing visualforce access metric in batch only
            elements specified in the request are updated. Missing elements are set
            to NULL.'
          entityName: 'VisualforceAccessMetrics'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateVoteInBatch':
          summary: 'Create Vote'
          description: 'Create a new vote in Batch'
          entityName: 'Vote'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateVoteInBatch':
          summary: 'Update Vote'
          description: 'Updates an existing vote in batch; only elements specified
            in the request are updated.'
          entityName: 'Vote'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertVoteInBatch':
          summary: 'Upsert Vote'
          description: 'Upsert an existing vote in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Vote'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteVoteInBatch':
          summary: 'Delete Vote'
          description: 'Delete an existing vote in batch only elements specified in
            the request are updated. Missing elements are set to NULL.'
          entityName: 'Vote'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'CreateWebLinkInBatch':
          summary: 'Create Custom Button or Link'
          description: 'Create a new custom button or link in Batch'
          entityName: 'WebLink'
          operation: 'create'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpdateWebLinkInBatch':
          summary: 'Update Custom Button or Link'
          description: 'Updates an existing custom button or link in batch; only elements
            specified in the request are updated.'
          entityName: 'WebLink'
          operation: 'update'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'UpsertWebLinkInBatch':
          summary: 'Upsert Custom Button or Link'
          description: 'Upsert an existing custom button or link in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'WebLink'
          operation: 'upsert'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
        'DeleteWebLinkInBatch':
          summary: 'Delete Custom Button or Link'
          description: 'Delete an existing custom button or link in batch only elements
            specified in the request are updated. Missing elements are set to NULL.'
          entityName: 'WebLink'
          operation: 'delete'
          batch: true
          schema:
            dynamic-schema:
              operationId: GetObjectSchema
      responses:
        '200':
          description: 'Denotes a successful response.'
  #/services/data/v58.0/composite/batch:
    #post:
      #summary: 'Batch Operations'
      #description: ''
      #x-adeptia-action:
        #'CreateContactInBatch':
         # summary: 'Create Contact Batch'
          #description: 'Create Contacts in Batch'
          #entityName: 'Contact'
          #operation: 'create'
          #batch: true
          #schema:
            #dynamic-schema:
              #operationId: GetObjectSchema
  /services/data/v58.0/sobjects:
    get:
      summary: "Get List of all entities available in Salesforce"
      operationId: 'getEntitiesList'
      responses:
        '200':
          description: 'Denotes a successful response.'
  /services/data/v58.0/sobjects/{entityName}/describe:
    get:
      operationId: 'GetObjectSchema'
      summary: 'Get Object Schema'
      parameters:
        - in: 'path'
          name: 'entityName'
          description: 'The Salesforce Object entity Name.'
          required: true
          x-adeptia-visibility:
            visible: false
            fetchFrom: 'triggerOrAction'
            paramName: 'entityName'
      responses:
        '200':
          description: 'Denotes a successful response.'
x-adeptia-extensions:
  testTrigger: NewAccount
  dateFormat: yyyy-MM-dd'T'HH:mm:ss'Z'
  timeZone: GMT
  IdField: 'Id'
  help:
    link: 'https://developer.salesforce.com/docs/atlas.en-us.244.0.object_reference.meta/object_reference/sforce_api_objects_list.htm'
    text: 'Help'
  incrementalData:
    'QueryExpression':
      name: q
      injectAs: query
      append: true
      valueExpression: " WHERE {trigger.cursorField} >= {event.previousTimeStamp} AND {trigger.cursorField} <= {event.currentTimeStamp}"
  pagination:
    'OffsetIncrement':
      pageSize: 200
      pageSizeOption:
        name: 'LIMIT'
        injectAs: 'query'
        appendToExistingParamName: 'q'
        nameSeparator: ' '
        valueSeparator: ' '
      pageTokenOption:
        name: 'OFFSET'
        injectAs: 'query'
        appendToExistingParamName: 'q'
        nameSeparator: ' '
        valueSeparator: ' '
        restrictions:
          'MaxLimitRestriction':
            maxLimit: 2000
            orderByClause: 'ORDER BY'
            orderByField: 'Id'
  dynamicSchemaStrategies:
    'flatFields':
      fieldsPath: $['fields'][*]
      nameField: name
      typeField: type
      documentationField: name
      maxLength: length
      readOnlyTargetFields:
        create:
          condition: '$[?(@.createable!=true)]'
        update:
          condition: '$[?(@.updateable!=true && @.name!="Id")]'
        upsert:
          condition: '$[?(@.read_only==true)]'
        delete:
          condition: '$[?(@.read_only==true && @.name!="Id")]'
      reference:
        identifier:
          value: "$['referenceTo']"
          label: "$['referenceTo']"
        nameField: "$['Name']"
        idField: "$['Id']"
        operationId: 'sfQuery'
        recordsPath: "$['records']"
  customEntities:
    operationId: 'getEntitiesList'
    entityListPath: "$['sobjects'][?(@.custom==true)]"
    nameField: 'name'
    descriptionField: 'label'
    triggerOperations:
      new:
        condition: '$[?(@.queryable==true)]'
      newOrUpdated:
        condition: '$[?(@.queryable==true)]'
      updated:
        condition: '$[?(@.queryable==true)]'
      all:
        condition: '$[?(@.queryable==true)]'
      get:
        condition: '$[?(@.queryable==true)]'
  errorHandler:
    maxRetries: 5
    responseFilter:
      - statusCode: [429]
        action: RETRY
        retryStrategy: 'ConstantBackoff'
    retryStrategies:
      'ConstantBackoff':
        backoffTimeInSeconds: 5
  batchProcessing:
    'SizeBased':
      batchSize:
        default: 25
        max: 25
      requestTemplate:
        $ref: '#/components/schemas/BatchRequest'
      response:
        resultPath: "$['results'][*]"
        faultPath: "$[?(@.statusCode>300 || @.statusCode<200)]"
]]></AC_INPUT_SPEC>
        <PROJECT_OWNER><![CDATA[Default]]></PROJECT_OWNER>
        <ID><![CDATA[1136967302651596800]]></ID>
        <AC_DESCRIPTION><![CDATA[salesforce_Connector]]></AC_DESCRIPTION>
        <MODIFIED_BY><![CDATA[Admin User]]></MODIFIED_BY>
        <AC_DISPLAY_NAME><![CDATA[salesforce_Connector]]></AC_DISPLAY_NAME>
        <AC_LOGO><![CDATA[deployment assemply.png]]></AC_LOGO>
    </AC_CONNECTOR>
    <columnInfo dbtype="0">
        <column name="ID" type="-5"/>
        <column name="AC_DISPLAY_NAME" type="12"/>
        <column name="AC_NAME" type="12"/>
        <column name="AC_DESCRIPTION" type="12"/>
        <column name="AC_ACTIVE" type="-7"/>
        <column name="AC_LOGO" type="12"/>
        <column name="AC_INPUT_SPEC" type="-1"/>
        <column name="CREATION_DATE" type="93"/>
        <column name="CREATED_BY" type="12"/>
        <column name="MODIFIED_DATE" type="93"/>
        <column name="MODIFIED_BY" type="12"/>
        <column name="AC_INPUT_SPEC_FILENAME" type="12"/>
        <column name="PROJECT_OWNER" type="12"/>
    </columnInfo>
</data>
